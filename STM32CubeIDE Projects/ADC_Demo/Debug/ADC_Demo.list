
ADC_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009364  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080094ec  080094ec  0000a4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009508  08009508  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009508  08009508  0000a508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009510  08009510  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009510  08009510  0000a510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009514  08009514  0000a514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009518  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a68  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ae4  20000ae4  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d45  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b10  00000000  00000000  00020df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00024908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000def  00000000  00000000  00025b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ba3  00000000  00000000  0002693f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019bc0  00000000  00000000  0004b4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d83c0  00000000  00000000  000650a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d462  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f58  00000000  00000000  0013d4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  00142400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080094d4 	.word	0x080094d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080094d4 	.word	0x080094d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
 8000500:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	69b9      	ldr	r1, [r7, #24]
 800050a:	683a      	ldr	r2, [r7, #0]
 800050c:	1a8a      	subs	r2, r1, r2
 800050e:	3201      	adds	r2, #1
 8000510:	fb03 f202 	mul.w	r2, r3, r2
 8000514:	6879      	ldr	r1, [r7, #4]
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	1acb      	subs	r3, r1, r3
 800051a:	3301      	adds	r3, #1
 800051c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	4413      	add	r3, r2
}
 8000524:	4618      	mov	r0, r3
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fcc5 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f83b 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f989 	bl	8000854 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000542:	f000 f8f3 	bl	800072c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000546:	f000 f91f 	bl	8000788 <MX_I2S3_Init>
  MX_SPI1_Init();
 800054a:	f000 f94d 	bl	80007e8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800054e:	f008 fb6b 	bl	8008c28 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000552:	f000 f899 	bl	8000688 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_ADC_Start(&hadc1);
 8000556:	4814      	ldr	r0, [pc, #80]	@ (80005a8 <main+0x78>)
 8000558:	f000 fd8e 	bl	8001078 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800055c:	2164      	movs	r1, #100	@ 0x64
 800055e:	4812      	ldr	r0, [pc, #72]	@ (80005a8 <main+0x78>)
 8000560:	f000 fe8f 	bl	8001282 <HAL_ADC_PollForConversion>
	gADC_Value = HAL_ADC_GetValue(&hadc1);
 8000564:	4810      	ldr	r0, [pc, #64]	@ (80005a8 <main+0x78>)
 8000566:	f000 ff17 	bl	8001398 <HAL_ADC_GetValue>
 800056a:	4603      	mov	r3, r0
 800056c:	b29a      	uxth	r2, r3
 800056e:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <main+0x7c>)
 8000570:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8000572:	480d      	ldr	r0, [pc, #52]	@ (80005a8 <main+0x78>)
 8000574:	f000 fe52 	bl	800121c <HAL_ADC_Stop>

	gADC_Percent = map(gADC_Value, 0, 4096, 0, 100);
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <main+0x7c>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	2364      	movs	r3, #100	@ 0x64
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000588:	2100      	movs	r1, #0
 800058a:	f7ff ffb3 	bl	80004f4 <map>
 800058e:	4603      	mov	r3, r0
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <main+0x80>)
 8000594:	801a      	strh	r2, [r3, #0]

	HAL_Delay(500);
 8000596:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800059a:	f000 fd05 	bl	8000fa8 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800059e:	f008 fb69 	bl	8008c74 <MX_USB_HOST_Process>
	HAL_ADC_Start(&hadc1);
 80005a2:	bf00      	nop
 80005a4:	e7d7      	b.n	8000556 <main+0x26>
 80005a6:	bf00      	nop
 80005a8:	20000098 	.word	0x20000098
 80005ac:	200001d4 	.word	0x200001d4
 80005b0:	200001d6 	.word	0x200001d6

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	@ 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f008 fef8 	bl	80093b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	4a27      	ldr	r2, [pc, #156]	@ (8000680 <SystemClock_Config+0xcc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e8:	4b25      	ldr	r3, [pc, #148]	@ (8000680 <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a21      	ldr	r2, [pc, #132]	@ (8000684 <SystemClock_Config+0xd0>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000624:	2308      	movs	r3, #8
 8000626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000628:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800062c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000632:	2307      	movs	r3, #7
 8000634:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fab8 	bl	8004bb0 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000646:	f000 fa0f 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2302      	movs	r3, #2
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000656:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2105      	movs	r1, #5
 8000668:	4618      	mov	r0, r3
 800066a:	f004 fd19 	bl	80050a0 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000674:	f000 f9f8 	bl	8000a68 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	@ 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068e:	463b      	mov	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800069a:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <MX_ADC1_Init+0x98>)
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <MX_ADC1_Init+0x9c>)
 800069e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ba:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006ca:	4a17      	ldr	r2, [pc, #92]	@ (8000728 <MX_ADC1_Init+0xa0>)
 80006cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e8:	480d      	ldr	r0, [pc, #52]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006ea:	f000 fc81 	bl	8000ff0 <HAL_ADC_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006f4:	f000 f9b8 	bl	8000a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000700:	2307      	movs	r3, #7
 8000702:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_ADC1_Init+0x98>)
 800070a:	f000 fe53 	bl	80013b4 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000714:	f000 f9a8 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000098 	.word	0x20000098
 8000724:	40012000 	.word	0x40012000
 8000728:	0f000001 	.word	0x0f000001

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_I2C1_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <MX_I2C1_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_I2C1_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <MX_I2C1_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_I2C1_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_I2C1_Init+0x50>)
 800076a:	f003 fc3d 	bl	8003fe8 <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 f978 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000e0 	.word	0x200000e0
 8000780:	40005400 	.word	0x40005400
 8000784:	000186a0 	.word	0x000186a0

08000788 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_I2S3_Init+0x54>)
 800078e:	4a14      	ldr	r2, [pc, #80]	@ (80007e0 <MX_I2S3_Init+0x58>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_I2S3_Init+0x54>)
 8000794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000798:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_I2S3_Init+0x54>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007b0:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <MX_I2S3_Init+0x5c>)
 80007b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_I2S3_Init+0x54>)
 80007c8:	f003 fd52 	bl	8004270 <HAL_I2S_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007d2:	f000 f949 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000134 	.word	0x20000134
 80007e0:	40003c00 	.word	0x40003c00
 80007e4:	00017700 	.word	0x00017700

080007e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_SPI1_Init+0x64>)
 80007ee:	4a18      	ldr	r2, [pc, #96]	@ (8000850 <MX_SPI1_Init+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007f2:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_SPI1_Init+0x64>)
 80007f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_SPI1_Init+0x64>)
 8000814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000818:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	@ (800084c <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_SPI1_Init+0x64>)
 8000834:	220a      	movs	r2, #10
 8000836:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_SPI1_Init+0x64>)
 800083a:	f004 ff7f 	bl	800573c <HAL_SPI_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000844:	f000 f910 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000017c 	.word	0x2000017c
 8000850:	40013000 	.word	0x40013000

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	@ 0x30
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	4b78      	ldr	r3, [pc, #480]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a77      	ldr	r2, [pc, #476]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b75      	ldr	r3, [pc, #468]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	4b71      	ldr	r3, [pc, #452]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a70      	ldr	r2, [pc, #448]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b6e      	ldr	r3, [pc, #440]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a69      	ldr	r2, [pc, #420]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b67      	ldr	r3, [pc, #412]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b63      	ldr	r3, [pc, #396]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a62      	ldr	r2, [pc, #392]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b60      	ldr	r3, [pc, #384]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b5c      	ldr	r3, [pc, #368]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a5b      	ldr	r2, [pc, #364]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b59      	ldr	r3, [pc, #356]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b55      	ldr	r3, [pc, #340]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a54      	ldr	r2, [pc, #336]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b52      	ldr	r3, [pc, #328]	@ (8000a50 <MX_GPIO_Init+0x1fc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2108      	movs	r1, #8
 8000916:	484f      	ldr	r0, [pc, #316]	@ (8000a54 <MX_GPIO_Init+0x200>)
 8000918:	f001 fa18 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2101      	movs	r1, #1
 8000920:	484d      	ldr	r0, [pc, #308]	@ (8000a58 <MX_GPIO_Init+0x204>)
 8000922:	f001 fa13 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000926:	2200      	movs	r2, #0
 8000928:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800092c:	484b      	ldr	r0, [pc, #300]	@ (8000a5c <MX_GPIO_Init+0x208>)
 800092e:	f001 fa0d 	bl	8001d4c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000932:	2308      	movs	r3, #8
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4842      	ldr	r0, [pc, #264]	@ (8000a54 <MX_GPIO_Init+0x200>)
 800094a:	f001 f863 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800094e:	2301      	movs	r3, #1
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	483c      	ldr	r0, [pc, #240]	@ (8000a58 <MX_GPIO_Init+0x204>)
 8000966:	f001 f855 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800096a:	2308      	movs	r3, #8
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097a:	2305      	movs	r3, #5
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4834      	ldr	r0, [pc, #208]	@ (8000a58 <MX_GPIO_Init+0x204>)
 8000986:	f001 f845 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098a:	2301      	movs	r3, #1
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800098e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4830      	ldr	r0, [pc, #192]	@ (8000a60 <MX_GPIO_Init+0x20c>)
 80009a0:	f001 f838 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009a4:	2304      	movs	r3, #4
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	482b      	ldr	r0, [pc, #172]	@ (8000a64 <MX_GPIO_Init+0x210>)
 80009b8:	f001 f82c 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ce:	2305      	movs	r3, #5
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4822      	ldr	r0, [pc, #136]	@ (8000a64 <MX_GPIO_Init+0x210>)
 80009da:	f001 f81b 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80009de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009e8:	2302      	movs	r3, #2
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	481a      	ldr	r0, [pc, #104]	@ (8000a5c <MX_GPIO_Init+0x208>)
 80009f4:	f001 f80e 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009f8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4812      	ldr	r0, [pc, #72]	@ (8000a5c <MX_GPIO_Init+0x208>)
 8000a12:	f000 ffff 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a16:	2320      	movs	r3, #32
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <MX_GPIO_Init+0x208>)
 8000a2a:	f000 fff3 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a32:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_GPIO_Init+0x200>)
 8000a44:	f000 ffe6 	bl	8001a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a48:	bf00      	nop
 8000a4a:	3730      	adds	r7, #48	@ 0x30
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40020000 	.word	0x40020000
 8000a64:	40020400 	.word	0x40020400

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <Error_Handler+0x8>

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac0 <HAL_MspInit+0x4c>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	4a08      	ldr	r2, [pc, #32]	@ (8000ac0 <HAL_MspInit+0x4c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ab2:	2007      	movs	r0, #7
 8000ab4:	f000 ff6c 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a17      	ldr	r2, [pc, #92]	@ (8000b40 <HAL_ADC_MspInit+0x7c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d127      	bne.n	8000b36 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <HAL_ADC_MspInit+0x80>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	4a15      	ldr	r2, [pc, #84]	@ (8000b44 <HAL_ADC_MspInit+0x80>)
 8000af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af6:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <HAL_ADC_MspInit+0x80>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <HAL_ADC_MspInit+0x80>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b44 <HAL_ADC_MspInit+0x80>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_ADC_MspInit+0x80>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b22:	2303      	movs	r3, #3
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <HAL_ADC_MspInit+0x84>)
 8000b32:	f000 ff6f 	bl	8001a14 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	@ 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40012000 	.word	0x40012000
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	@ (8000bd0 <HAL_I2C_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12c      	bne.n	8000bc8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b8a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b90:	2312      	movs	r3, #18
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <HAL_I2C_MspInit+0x8c>)
 8000ba8:	f000 ff34 	bl	8001a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	4a07      	ldr	r2, [pc, #28]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <HAL_I2C_MspInit+0x88>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	@ 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	@ 0x38
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a31      	ldr	r2, [pc, #196]	@ (8000ccc <HAL_I2S_MspInit+0xf0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d15a      	bne.n	8000cc2 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c10:	23c0      	movs	r3, #192	@ 0xc0
 8000c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 fc4b 	bl	80054b8 <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c28:	f7ff ff1e 	bl	8000a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	4a26      	ldr	r2, [pc, #152]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3c:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6c:	4a18      	ldr	r2, [pc, #96]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_I2S_MspInit+0xf4>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c80:	2310      	movs	r3, #16
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c90:	2306      	movs	r3, #6
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480e      	ldr	r0, [pc, #56]	@ (8000cd4 <HAL_I2S_MspInit+0xf8>)
 8000c9c:	f000 feba 	bl	8001a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ca0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4806      	ldr	r0, [pc, #24]	@ (8000cd8 <HAL_I2S_MspInit+0xfc>)
 8000cbe:	f000 fea9 	bl	8001a14 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3738      	adds	r7, #56	@ 0x38
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40003c00 	.word	0x40003c00
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020800 	.word	0x40020800

08000cdc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	@ (8000d60 <HAL_SPI_MspInit+0x84>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12b      	bne.n	8000d56 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a17      	ldr	r2, [pc, #92]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_SPI_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d36:	23e0      	movs	r3, #224	@ 0xe0
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d46:	2305      	movs	r3, #5
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <HAL_SPI_MspInit+0x8c>)
 8000d52:	f000 fe5f 	bl	8001a14 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	@ 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40013000 	.word	0x40013000
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <NMI_Handler+0x4>

08000d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <MemManage_Handler+0x4>

08000d84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f000 f8d1 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <OTG_FS_IRQHandler+0x10>)
 8000dd2:	f001 fab5 	bl	8002340 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200005bc 	.word	0x200005bc

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f008 faea 	bl	80093e8 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	200001d8 	.word	0x200001d8
 8000e48:	20000ae8 	.word	0x20000ae8

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e74:	f7ff ffea 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	@ (8000eac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	@ (8000eb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	@ (8000ebc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f008 faa9 	bl	80093f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fb45 	bl	8000530 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000eb4:	08009518 	.word	0x08009518
  ldr r2, =_sbss
 8000eb8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ebc:	20000ae4 	.word	0x20000ae4

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 fd4f 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fdbc 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fd67 	bl	80019fa <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 fd2f 	bl	80019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	@ (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	200001dc 	.word	0x200001dc

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200001dc 	.word	0x200001dc

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e033      	b.n	800106e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	2b00      	cmp	r3, #0
 800100c:	d109      	bne.n	8001022 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fd58 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	2b00      	cmp	r3, #0
 800102c:	d118      	bne.n	8001060 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001036:	f023 0302 	bic.w	r3, r3, #2
 800103a:	f043 0202 	orr.w	r2, r3, #2
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fad8 	bl	80015f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	f043 0201 	orr.w	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	@ 0x40
 800105e:	e001      	b.n	8001064 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_ADC_Start+0x1a>
 800108e:	2302      	movs	r3, #2
 8001090:	e0b2      	b.n	80011f8 <HAL_ADC_Start+0x180>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d018      	beq.n	80010da <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010b8:	4b52      	ldr	r3, [pc, #328]	@ (8001204 <HAL_ADC_Start+0x18c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a52      	ldr	r2, [pc, #328]	@ (8001208 <HAL_ADC_Start+0x190>)
 80010be:	fba2 2303 	umull	r2, r3, r2, r3
 80010c2:	0c9a      	lsrs	r2, r3, #18
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80010cc:	e002      	b.n	80010d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f9      	bne.n	80010ce <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d17a      	bne.n	80011de <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001106:	2b00      	cmp	r3, #0
 8001108:	d007      	beq.n	800111a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001112:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001126:	d106      	bne.n	8001136 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112c:	f023 0206 	bic.w	r2, r3, #6
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	645a      	str	r2, [r3, #68]	@ 0x44
 8001134:	e002      	b.n	800113c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001144:	4b31      	ldr	r3, [pc, #196]	@ (800120c <HAL_ADC_Start+0x194>)
 8001146:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001150:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	2b00      	cmp	r3, #0
 800115c:	d12a      	bne.n	80011b4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a2b      	ldr	r2, [pc, #172]	@ (8001210 <HAL_ADC_Start+0x198>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d015      	beq.n	8001194 <HAL_ADC_Start+0x11c>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a29      	ldr	r2, [pc, #164]	@ (8001214 <HAL_ADC_Start+0x19c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d105      	bne.n	800117e <HAL_ADC_Start+0x106>
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <HAL_ADC_Start+0x194>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00a      	beq.n	8001194 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a25      	ldr	r2, [pc, #148]	@ (8001218 <HAL_ADC_Start+0x1a0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d136      	bne.n	80011f6 <HAL_ADC_Start+0x17e>
 8001188:	4b20      	ldr	r3, [pc, #128]	@ (800120c <HAL_ADC_Start+0x194>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	2b00      	cmp	r3, #0
 8001192:	d130      	bne.n	80011f6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d129      	bne.n	80011f6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	e020      	b.n	80011f6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a15      	ldr	r2, [pc, #84]	@ (8001210 <HAL_ADC_Start+0x198>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d11b      	bne.n	80011f6 <HAL_ADC_Start+0x17e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d114      	bne.n	80011f6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	e00b      	b.n	80011f6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f043 0210 	orr.w	r2, r3, #16
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f043 0201 	orr.w	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	20000000 	.word	0x20000000
 8001208:	431bde83 	.word	0x431bde83
 800120c:	40012300 	.word	0x40012300
 8001210:	40012000 	.word	0x40012000
 8001214:	40012100 	.word	0x40012100
 8001218:	40012200 	.word	0x40012200

0800121c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_ADC_Stop+0x16>
 800122e:	2302      	movs	r3, #2
 8001230:	e021      	b.n	8001276 <HAL_ADC_Stop+0x5a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0201 	bic.w	r2, r2, #1
 8001248:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d109      	bne.n	800126c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	f043 0201 	orr.w	r2, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800129a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800129e:	d113      	bne.n	80012c8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012ae:	d10b      	bne.n	80012c8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	f043 0220 	orr.w	r2, r3, #32
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e063      	b.n	8001390 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c8:	f7ff fe62 	bl	8000f90 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012ce:	e021      	b.n	8001314 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d6:	d01d      	beq.n	8001314 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <HAL_ADC_PollForConversion+0x6c>
 80012de:	f7ff fe57 	bl	8000f90 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d212      	bcs.n	8001314 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d00b      	beq.n	8001314 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f043 0204 	orr.w	r2, r3, #4
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e03d      	b.n	8001390 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b02      	cmp	r3, #2
 8001320:	d1d6      	bne.n	80012d0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f06f 0212 	mvn.w	r2, #18
 800132a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001330:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d123      	bne.n	800138e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800134a:	2b00      	cmp	r3, #0
 800134c:	d11f      	bne.n	800138e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001354:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001366:	2b00      	cmp	r3, #0
 8001368:	d111      	bne.n	800138e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d105      	bne.n	800138e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x1c>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e105      	b.n	80015dc <HAL_ADC_ConfigChannel+0x228>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b09      	cmp	r3, #9
 80013de:	d925      	bls.n	800142c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68d9      	ldr	r1, [r3, #12]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	3b1e      	subs	r3, #30
 80013f6:	2207      	movs	r2, #7
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43da      	mvns	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	400a      	ands	r2, r1
 8001404:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68d9      	ldr	r1, [r3, #12]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	b29b      	uxth	r3, r3
 8001416:	4618      	mov	r0, r3
 8001418:	4603      	mov	r3, r0
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4403      	add	r3, r0
 800141e:	3b1e      	subs	r3, #30
 8001420:	409a      	lsls	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	e022      	b.n	8001472 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6919      	ldr	r1, [r3, #16]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	2207      	movs	r2, #7
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	400a      	ands	r2, r1
 800144e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6919      	ldr	r1, [r3, #16]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	4618      	mov	r0, r3
 8001462:	4603      	mov	r3, r0
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4403      	add	r3, r0
 8001468:	409a      	lsls	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b06      	cmp	r3, #6
 8001478:	d824      	bhi.n	80014c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b05      	subs	r3, #5
 800148c:	221f      	movs	r2, #31
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	400a      	ands	r2, r1
 800149a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b05      	subs	r3, #5
 80014b6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014c2:	e04c      	b.n	800155e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	d824      	bhi.n	8001516 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	3b23      	subs	r3, #35	@ 0x23
 80014de:	221f      	movs	r2, #31
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43da      	mvns	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	400a      	ands	r2, r1
 80014ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	3b23      	subs	r3, #35	@ 0x23
 8001508:	fa00 f203 	lsl.w	r2, r0, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	631a      	str	r2, [r3, #48]	@ 0x30
 8001514:	e023      	b.n	800155e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	3b41      	subs	r3, #65	@ 0x41
 8001528:	221f      	movs	r2, #31
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	400a      	ands	r2, r1
 8001536:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4618      	mov	r0, r3
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	3b41      	subs	r3, #65	@ 0x41
 8001552:	fa00 f203 	lsl.w	r2, r0, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155e:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <HAL_ADC_ConfigChannel+0x234>)
 8001560:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a21      	ldr	r2, [pc, #132]	@ (80015ec <HAL_ADC_ConfigChannel+0x238>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d109      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1cc>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b12      	cmp	r3, #18
 8001572:	d105      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a19      	ldr	r2, [pc, #100]	@ (80015ec <HAL_ADC_ConfigChannel+0x238>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d123      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x21e>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d003      	beq.n	800159a <HAL_ADC_ConfigChannel+0x1e6>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b11      	cmp	r3, #17
 8001598:	d11b      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d111      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ae:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <HAL_ADC_ConfigChannel+0x23c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a10      	ldr	r2, [pc, #64]	@ (80015f4 <HAL_ADC_ConfigChannel+0x240>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	0c9a      	lsrs	r2, r3, #18
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015c4:	e002      	b.n	80015cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f9      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40012300 	.word	0x40012300
 80015ec:	40012000 	.word	0x40012000
 80015f0:	20000000 	.word	0x20000000
 80015f4:	431bde83 	.word	0x431bde83

080015f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001600:	4b79      	ldr	r3, [pc, #484]	@ (80017e8 <ADC_Init+0x1f0>)
 8001602:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	431a      	orrs	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800162c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6859      	ldr	r1, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	021a      	lsls	r2, r3, #8
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001672:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6899      	ldr	r1, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168a:	4a58      	ldr	r2, [pc, #352]	@ (80017ec <ADC_Init+0x1f4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d022      	beq.n	80016d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800169e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6899      	ldr	r1, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6899      	ldr	r1, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	e00f      	b.n	80016f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0202 	bic.w	r2, r2, #2
 8001704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6899      	ldr	r1, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7e1b      	ldrb	r3, [r3, #24]
 8001710:	005a      	lsls	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01b      	beq.n	800175c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001732:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001742:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6859      	ldr	r1, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174e:	3b01      	subs	r3, #1
 8001750:	035a      	lsls	r2, r3, #13
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	e007      	b.n	800176c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800176a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800177a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	3b01      	subs	r3, #1
 8001788:	051a      	lsls	r2, r3, #20
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6899      	ldr	r1, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017ae:	025a      	lsls	r2, r3, #9
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6899      	ldr	r1, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	029a      	lsls	r2, r3, #10
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	609a      	str	r2, [r3, #8]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40012300 	.word	0x40012300
 80017ec:	0f000001 	.word	0x0f000001

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	@ (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	@ (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	@ (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	@ 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	@ 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800195c:	d301      	bcc.n	8001962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195e:	2301      	movs	r3, #1
 8001960:	e00f      	b.n	8001982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <SysTick_Config+0x40>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196a:	210f      	movs	r1, #15
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f7ff ff8e 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <SysTick_Config+0x40>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	4b04      	ldr	r3, [pc, #16]	@ (800198c <SysTick_Config+0x40>)
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010

08001990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff29 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b8:	f7ff ff3e 	bl	8001838 <__NVIC_GetPriorityGrouping>
 80019bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff ff8e 	bl	80018e4 <NVIC_EncodePriority>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5d 	bl	8001890 <__NVIC_SetPriority>
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff31 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffa2 	bl	800194c <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	@ 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e16b      	b.n	8001d08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	f040 815a 	bne.w	8001d02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d005      	beq.n	8001a66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d130      	bne.n	8001ac8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 0201 	and.w	r2, r3, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d017      	beq.n	8001b04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d123      	bne.n	8001b58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3208      	adds	r2, #8
 8001b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	69b9      	ldr	r1, [r7, #24]
 8001b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80b4 	beq.w	8001d02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b60      	ldr	r3, [pc, #384]	@ (8001d20 <HAL_GPIO_Init+0x30c>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	4a5f      	ldr	r2, [pc, #380]	@ (8001d20 <HAL_GPIO_Init+0x30c>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001baa:	4b5d      	ldr	r3, [pc, #372]	@ (8001d20 <HAL_GPIO_Init+0x30c>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d24 <HAL_GPIO_Init+0x310>)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a52      	ldr	r2, [pc, #328]	@ (8001d28 <HAL_GPIO_Init+0x314>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d02b      	beq.n	8001c3a <HAL_GPIO_Init+0x226>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a51      	ldr	r2, [pc, #324]	@ (8001d2c <HAL_GPIO_Init+0x318>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d025      	beq.n	8001c36 <HAL_GPIO_Init+0x222>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a50      	ldr	r2, [pc, #320]	@ (8001d30 <HAL_GPIO_Init+0x31c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d01f      	beq.n	8001c32 <HAL_GPIO_Init+0x21e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4f      	ldr	r2, [pc, #316]	@ (8001d34 <HAL_GPIO_Init+0x320>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d019      	beq.n	8001c2e <HAL_GPIO_Init+0x21a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4e      	ldr	r2, [pc, #312]	@ (8001d38 <HAL_GPIO_Init+0x324>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d013      	beq.n	8001c2a <HAL_GPIO_Init+0x216>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4d      	ldr	r2, [pc, #308]	@ (8001d3c <HAL_GPIO_Init+0x328>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00d      	beq.n	8001c26 <HAL_GPIO_Init+0x212>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001d40 <HAL_GPIO_Init+0x32c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d007      	beq.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4b      	ldr	r2, [pc, #300]	@ (8001d44 <HAL_GPIO_Init+0x330>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_GPIO_Init+0x20a>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	e00e      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c1e:	2308      	movs	r3, #8
 8001c20:	e00c      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c22:	2306      	movs	r3, #6
 8001c24:	e00a      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c26:	2305      	movs	r3, #5
 8001c28:	e008      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e004      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e002      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f002 0203 	and.w	r2, r2, #3
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4093      	lsls	r3, r2
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c4c:	4935      	ldr	r1, [pc, #212]	@ (8001d24 <HAL_GPIO_Init+0x310>)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d48 <HAL_GPIO_Init+0x334>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c7e:	4a32      	ldr	r2, [pc, #200]	@ (8001d48 <HAL_GPIO_Init+0x334>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c84:	4b30      	ldr	r3, [pc, #192]	@ (8001d48 <HAL_GPIO_Init+0x334>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca8:	4a27      	ldr	r2, [pc, #156]	@ (8001d48 <HAL_GPIO_Init+0x334>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cae:	4b26      	ldr	r3, [pc, #152]	@ (8001d48 <HAL_GPIO_Init+0x334>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d48 <HAL_GPIO_Init+0x334>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_GPIO_Init+0x334>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cfc:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <HAL_GPIO_Init+0x334>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3301      	adds	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2b0f      	cmp	r3, #15
 8001d0c:	f67f ae90 	bls.w	8001a30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3724      	adds	r7, #36	@ 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40013800 	.word	0x40013800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40021400 	.word	0x40021400
 8001d40:	40021800 	.word	0x40021800
 8001d44:	40021c00 	.word	0x40021c00
 8001d48:	40013c00 	.word	0x40013c00

08001d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d5c:	787b      	ldrb	r3, [r7, #1]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d68:	e003      	b.n	8001d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d6a:	887b      	ldrh	r3, [r7, #2]
 8001d6c:	041a      	lsls	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	619a      	str	r2, [r3, #24]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af02      	add	r7, sp, #8
 8001d84:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e059      	b.n	8001e44 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f006 ff9a 	bl	8008ce4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2203      	movs	r2, #3
 8001db4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dbe:	d102      	bne.n	8001dc6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fdb4 	bl	8005938 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7c1a      	ldrb	r2, [r3, #16]
 8001dd8:	f88d 2000 	strb.w	r2, [sp]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de0:	f003 fd35 	bl	800584e <USB_CoreInit>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e026      	b.n	8001e44 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fdac 	bl	800595a <USB_SetCurrentMode>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e017      	b.n	8001e44 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7c1a      	ldrb	r2, [r3, #16]
 8001e1c:	f88d 2000 	strb.w	r2, [sp]
 8001e20:	3304      	adds	r3, #4
 8001e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e24:	f003 ff4e 	bl	8005cc4 <USB_HostInit>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e004      	b.n	8001e44 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b08b      	sub	sp, #44	@ 0x2c
 8001e50:	af04      	add	r7, sp, #16
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	70fb      	strb	r3, [r7, #3]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70bb      	strb	r3, [r7, #2]
 8001e62:	4613      	mov	r3, r2
 8001e64:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001e66:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001e68:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_HCD_HC_Init+0x2c>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e09d      	b.n	8001fb4 <HAL_HCD_HC_Init+0x168>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3319      	adds	r3, #25
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	1a9b      	subs	r3, r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3314      	adds	r3, #20
 8001ea4:	787a      	ldrb	r2, [r7, #1]
 8001ea6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3315      	adds	r3, #21
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3326      	adds	r3, #38	@ 0x26
 8001ecc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001ed0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	78bb      	ldrb	r3, [r7, #2]
 8001ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001eda:	b2d8      	uxtb	r0, r3
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3316      	adds	r3, #22
 8001eea:	4602      	mov	r2, r0
 8001eec:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fbc8 	bl	8002688 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001ef8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	da0a      	bge.n	8001f16 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3317      	adds	r3, #23
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	e009      	b.n	8001f2a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	3317      	adds	r3, #23
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f004 f82c 	bl	8005f8c <USB_GetHostSpeed>
 8001f34:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001f36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d10b      	bne.n	8001f56 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001f3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d107      	bne.n	8001f56 <HAL_HCD_HC_Init+0x10a>
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d104      	bne.n	8001f56 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001f50:	d901      	bls.n	8001f56 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001f52:	23bc      	movs	r3, #188	@ 0xbc
 8001f54:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	3318      	adds	r3, #24
 8001f66:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001f6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	b298      	uxth	r0, r3
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3328      	adds	r3, #40	@ 0x28
 8001f80:	4602      	mov	r2, r0
 8001f82:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	787c      	ldrb	r4, [r7, #1]
 8001f8e:	78ba      	ldrb	r2, [r7, #2]
 8001f90:	78f9      	ldrb	r1, [r7, #3]
 8001f92:	9302      	str	r3, [sp, #8]
 8001f94:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	f004 f81b 	bl	8005fdc <USB_HC_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd90      	pop	{r4, r7, pc}

08001fbc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_HCD_HC_Halt+0x1e>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e00f      	b.n	8001ffa <HAL_HCD_HC_Halt+0x3e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f004 fbad 	bl	800674a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4603      	mov	r3, r0
 8002014:	70fb      	strb	r3, [r7, #3]
 8002016:	460b      	mov	r3, r1
 8002018:	70bb      	strb	r3, [r7, #2]
 800201a:	4613      	mov	r3, r2
 800201c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3317      	adds	r3, #23
 800202e:	78ba      	ldrb	r2, [r7, #2]
 8002030:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	3326      	adds	r3, #38	@ 0x26
 8002042:	787a      	ldrb	r2, [r7, #1]
 8002044:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002046:	7c3b      	ldrb	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d114      	bne.n	8002076 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	332a      	adds	r3, #42	@ 0x2a
 800205c:	2203      	movs	r2, #3
 800205e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	3319      	adds	r3, #25
 8002070:	7f3a      	ldrb	r2, [r7, #28]
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e009      	b.n	800208a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	332a      	adds	r3, #42	@ 0x2a
 8002086:	2202      	movs	r2, #2
 8002088:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800208a:	787b      	ldrb	r3, [r7, #1]
 800208c:	2b03      	cmp	r3, #3
 800208e:	f200 8102 	bhi.w	8002296 <HAL_HCD_HC_SubmitRequest+0x292>
 8002092:	a201      	add	r2, pc, #4	@ (adr r2, 8002098 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002098:	080020a9 	.word	0x080020a9
 800209c:	08002281 	.word	0x08002281
 80020a0:	0800216d 	.word	0x0800216d
 80020a4:	080021f7 	.word	0x080021f7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80020a8:	7c3b      	ldrb	r3, [r7, #16]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	f040 80f5 	bne.w	800229a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80020b0:	78bb      	ldrb	r3, [r7, #2]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d12d      	bne.n	8002112 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80020b6:	8b3b      	ldrh	r3, [r7, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d109      	bne.n	80020d0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	333d      	adds	r3, #61	@ 0x3d
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	333d      	adds	r3, #61	@ 0x3d
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10a      	bne.n	80020fc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	332a      	adds	r3, #42	@ 0x2a
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80020fa:	e0ce      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	332a      	adds	r3, #42	@ 0x2a
 800210c:	2202      	movs	r2, #2
 800210e:	701a      	strb	r2, [r3, #0]
      break;
 8002110:	e0c3      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	331a      	adds	r3, #26
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	f040 80b8 	bne.w	800229a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	333c      	adds	r3, #60	@ 0x3c
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	332a      	adds	r3, #42	@ 0x2a
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
      break;
 8002154:	e0a1      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	332a      	adds	r3, #42	@ 0x2a
 8002166:	2202      	movs	r2, #2
 8002168:	701a      	strb	r2, [r3, #0]
      break;
 800216a:	e096      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800216c:	78bb      	ldrb	r3, [r7, #2]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d120      	bne.n	80021b4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	333d      	adds	r3, #61	@ 0x3d
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10a      	bne.n	800219e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	332a      	adds	r3, #42	@ 0x2a
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800219c:	e07e      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	332a      	adds	r3, #42	@ 0x2a
 80021ae:	2202      	movs	r2, #2
 80021b0:	701a      	strb	r2, [r3, #0]
      break;
 80021b2:	e073      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	333c      	adds	r3, #60	@ 0x3c
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10a      	bne.n	80021e0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	332a      	adds	r3, #42	@ 0x2a
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
      break;
 80021de:	e05d      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	332a      	adds	r3, #42	@ 0x2a
 80021f0:	2202      	movs	r2, #2
 80021f2:	701a      	strb	r2, [r3, #0]
      break;
 80021f4:	e052      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021f6:	78bb      	ldrb	r3, [r7, #2]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d120      	bne.n	800223e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	333d      	adds	r3, #61	@ 0x3d
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10a      	bne.n	8002228 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	332a      	adds	r3, #42	@ 0x2a
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002226:	e039      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	332a      	adds	r3, #42	@ 0x2a
 8002238:	2202      	movs	r2, #2
 800223a:	701a      	strb	r2, [r3, #0]
      break;
 800223c:	e02e      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	333c      	adds	r3, #60	@ 0x3c
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10a      	bne.n	800226a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	332a      	adds	r3, #42	@ 0x2a
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
      break;
 8002268:	e018      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	332a      	adds	r3, #42	@ 0x2a
 800227a:	2202      	movs	r2, #2
 800227c:	701a      	strb	r2, [r3, #0]
      break;
 800227e:	e00d      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	332a      	adds	r3, #42	@ 0x2a
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
      break;
 8002294:	e002      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002296:	bf00      	nop
 8002298:	e000      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800229a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	332c      	adds	r3, #44	@ 0x2c
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	8b39      	ldrh	r1, [r7, #24]
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4403      	add	r3, r0
 80022c0:	3334      	adds	r3, #52	@ 0x34
 80022c2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	334c      	adds	r3, #76	@ 0x4c
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3338      	adds	r3, #56	@ 0x38
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3315      	adds	r3, #21
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	334d      	adds	r3, #77	@ 0x4d
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	3310      	adds	r3, #16
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	1d19      	adds	r1, r3, #4
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	799b      	ldrb	r3, [r3, #6]
 800232e:	461a      	mov	r2, r3
 8002330:	f003 ff80 	bl	8006234 <USB_HC_StartXfer>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop

08002340 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fc75 	bl	8005c46 <USB_GetMode>
 800235c:	4603      	mov	r3, r0
 800235e:	2b01      	cmp	r3, #1
 8002360:	f040 80fb 	bne.w	800255a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 fc38 	bl	8005bde <USB_ReadInterrupts>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80f1 	beq.w	8002558 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f003 fc2f 	bl	8005bde <USB_ReadInterrupts>
 8002380:	4603      	mov	r3, r0
 8002382:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002386:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800238a:	d104      	bne.n	8002396 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002394:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f003 fc1f 	bl	8005bde <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023aa:	d104      	bne.n	80023b6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80023b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 fc0f 	bl	8005bde <USB_ReadInterrupts>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023ca:	d104      	bne.n	80023d6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 fbff 	bl	8005bde <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d103      	bne.n	80023f2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2202      	movs	r2, #2
 80023f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fbf1 	bl	8005bde <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002406:	d120      	bne.n	800244a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002410:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d113      	bne.n	800244a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002422:	2110      	movs	r1, #16
 8002424:	6938      	ldr	r0, [r7, #16]
 8002426:	f003 fae4 	bl	80059f2 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800242a:	6938      	ldr	r0, [r7, #16]
 800242c:	f003 fb13 	bl	8005a56 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7a5b      	ldrb	r3, [r3, #9]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d105      	bne.n	8002444 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	4618      	mov	r0, r3
 8002440:	f003 fd04 	bl	8005e4c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f006 fccb 	bl	8008de0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f003 fbc5 	bl	8005bde <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800245a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800245e:	d102      	bne.n	8002466 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f001 fd4d 	bl	8003f00 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f003 fbb7 	bl	8005bde <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d106      	bne.n	8002488 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f006 fc94 	bl	8008da8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2208      	movs	r2, #8
 8002486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fba6 	bl	8005bde <USB_ReadInterrupts>
 8002492:	4603      	mov	r3, r0
 8002494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800249c:	d139      	bne.n	8002512 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f004 f940 	bl	8006728 <USB_HC_ReadInterrupt>
 80024a8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e025      	b.n	80024fc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d018      	beq.n	80024f6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024da:	d106      	bne.n	80024ea <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f905 	bl	80026f2 <HCD_HC_IN_IRQHandler>
 80024e8:	e005      	b.n	80024f6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4619      	mov	r1, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 ff67 	bl	80033c4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	795b      	ldrb	r3, [r3, #5]
 8002500:	461a      	mov	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4293      	cmp	r3, r2
 8002506:	d3d3      	bcc.n	80024b0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f003 fb61 	bl	8005bde <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b10      	cmp	r3, #16
 8002524:	d101      	bne.n	800252a <HAL_HCD_IRQHandler+0x1ea>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_HCD_IRQHandler+0x1ec>
 800252a:	2300      	movs	r3, #0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d014      	beq.n	800255a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0210 	bic.w	r2, r2, #16
 800253e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f001 fbfe 	bl	8003d42 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699a      	ldr	r2, [r3, #24]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0210 	orr.w	r2, r2, #16
 8002554:	619a      	str	r2, [r3, #24]
 8002556:	e000      	b.n	800255a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002558:	bf00      	nop
    }
  }
}
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_HCD_Start+0x16>
 8002572:	2302      	movs	r3, #2
 8002574:	e013      	b.n	800259e <HAL_HCD_Start+0x3e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2101      	movs	r1, #1
 8002584:	4618      	mov	r0, r3
 8002586:	f003 fcc8 	bl	8005f1a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f003 f9c1 	bl	8005916 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_HCD_Stop+0x16>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e00d      	b.n	80025d8 <HAL_HCD_Stop+0x32>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 fa1b 	bl	8006a04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 fc6a 	bl	8005ec6 <USB_ResetPort>
 80025f2:	4603      	mov	r3, r0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	334c      	adds	r3, #76	@ 0x4c
 8002618:	781b      	ldrb	r3, [r3, #0]
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	460b      	mov	r3, r1
 8002630:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	3338      	adds	r3, #56	@ 0x38
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fcac 	bl	8005fba <USB_GetCurrentFrame>
 8002662:	4603      	mov	r3, r0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fc87 	bl	8005f8c <USB_GetHostSpeed>
 800267e:	4603      	mov	r3, r0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	331a      	adds	r3, #26
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	331b      	adds	r3, #27
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3325      	adds	r3, #37	@ 0x25
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3324      	adds	r3, #36	@ 0x24
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f003 fa77 	bl	8005c04 <USB_ReadChInterrupts>
 8002716:	4603      	mov	r3, r0
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d11a      	bne.n	8002756 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800272c:	461a      	mov	r2, r3
 800272e:	2304      	movs	r3, #4
 8002730:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	334d      	adds	r3, #77	@ 0x4d
 8002742:	2207      	movs	r2, #7
 8002744:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fffb 	bl	800674a <USB_HC_Halt>
 8002754:	e09e      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	78fa      	ldrb	r2, [r7, #3]
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f003 fa50 	bl	8005c04 <USB_ReadChInterrupts>
 8002764:	4603      	mov	r3, r0
 8002766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800276e:	d11b      	bne.n	80027a8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800277c:	461a      	mov	r2, r3
 800277e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002782:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	334d      	adds	r3, #77	@ 0x4d
 8002794:	2208      	movs	r2, #8
 8002796:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f003 ffd2 	bl	800674a <USB_HC_Halt>
 80027a6:	e075      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f003 fa27 	bl	8005c04 <USB_ReadChInterrupts>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d11a      	bne.n	80027f6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027cc:	461a      	mov	r2, r3
 80027ce:	2308      	movs	r3, #8
 80027d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	334d      	adds	r3, #77	@ 0x4d
 80027e2:	2206      	movs	r2, #6
 80027e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 ffab 	bl	800674a <USB_HC_Halt>
 80027f4:	e04e      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 fa00 	bl	8005c04 <USB_ReadChInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800280e:	d11b      	bne.n	8002848 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002822:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	334d      	adds	r3, #77	@ 0x4d
 8002834:	2209      	movs	r2, #9
 8002836:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f003 ff82 	bl	800674a <USB_HC_Halt>
 8002846:	e025      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f003 f9d7 	bl	8005c04 <USB_ReadChInterrupts>
 8002856:	4603      	mov	r3, r0
 8002858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285c:	2b80      	cmp	r3, #128	@ 0x80
 800285e:	d119      	bne.n	8002894 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800286c:	461a      	mov	r2, r3
 800286e:	2380      	movs	r3, #128	@ 0x80
 8002870:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	334d      	adds	r3, #77	@ 0x4d
 8002882:	2207      	movs	r2, #7
 8002884:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f003 ff5b 	bl	800674a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f003 f9b1 	bl	8005c04 <USB_ReadChInterrupts>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028ac:	d112      	bne.n	80028d4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 ff47 	bl	800674a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c8:	461a      	mov	r2, r3
 80028ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028ce:	6093      	str	r3, [r2, #8]
 80028d0:	f000 bd75 	b.w	80033be <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 f991 	bl	8005c04 <USB_ReadChInterrupts>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f040 8128 	bne.w	8002b3e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028fa:	461a      	mov	r2, r3
 80028fc:	2320      	movs	r3, #32
 80028fe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	331b      	adds	r3, #27
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d119      	bne.n	800294a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	331b      	adds	r3, #27
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	0151      	lsls	r1, r2, #5
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	440a      	add	r2, r1
 8002940:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002948:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	799b      	ldrb	r3, [r3, #6]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01b      	beq.n	800298a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	3330      	adds	r3, #48	@ 0x30
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	1ac9      	subs	r1, r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4403      	add	r3, r0
 8002986:	3338      	adds	r3, #56	@ 0x38
 8002988:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	334d      	adds	r3, #77	@ 0x4d
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	3344      	adds	r3, #68	@ 0x44
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029be:	461a      	mov	r2, r3
 80029c0:	2301      	movs	r3, #1
 80029c2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3326      	adds	r3, #38	@ 0x26
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3326      	adds	r3, #38	@ 0x26
 80029ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d110      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fea6 	bl	800674a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	6093      	str	r3, [r2, #8]
 8002a10:	e03d      	b.n	8002a8e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3326      	adds	r3, #38	@ 0x26
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d00a      	beq.n	8002a3e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3326      	adds	r3, #38	@ 0x26
 8002a38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d127      	bne.n	8002a8e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	0151      	lsls	r1, r2, #5
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	440a      	add	r2, r1
 8002a54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a5c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	334c      	adds	r3, #76	@ 0x4c
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	334c      	adds	r3, #76	@ 0x4c
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f006 f9b7 	bl	8008dfc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	799b      	ldrb	r3, [r3, #6]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d13b      	bne.n	8002b0e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3338      	adds	r3, #56	@ 0x38
 8002aa6:	6819      	ldr	r1, [r3, #0]
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4403      	add	r3, r0
 8002ab6:	3328      	adds	r3, #40	@ 0x28
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	440b      	add	r3, r1
 8002abc:	1e59      	subs	r1, r3, #1
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4403      	add	r3, r0
 8002acc:	3328      	adds	r3, #40	@ 0x28
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8470 	beq.w	80033be <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	333c      	adds	r3, #60	@ 0x3c
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	f083 0301 	eor.w	r3, r3, #1
 8002af6:	b2d8      	uxtb	r0, r3
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	333c      	adds	r3, #60	@ 0x3c
 8002b06:	4602      	mov	r2, r0
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	f000 bc58 	b.w	80033be <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	333c      	adds	r3, #60	@ 0x3c
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	f083 0301 	eor.w	r3, r3, #1
 8002b26:	b2d8      	uxtb	r0, r3
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	333c      	adds	r3, #60	@ 0x3c
 8002b36:	4602      	mov	r2, r0
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	f000 bc40 	b.w	80033be <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 f85c 	bl	8005c04 <USB_ReadChInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d131      	bne.n	8002bba <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b62:	461a      	mov	r2, r3
 8002b64:	2320      	movs	r3, #32
 8002b66:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	331a      	adds	r3, #26
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	f040 841f 	bne.w	80033be <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	331b      	adds	r3, #27
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	334d      	adds	r3, #77	@ 0x4d
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 fdca 	bl	800674a <USB_HC_Halt>
 8002bb6:	f000 bc02 	b.w	80033be <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 f81e 	bl	8005c04 <USB_ReadChInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	f040 8305 	bne.w	80031de <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be0:	461a      	mov	r2, r3
 8002be2:	2302      	movs	r3, #2
 8002be4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	334d      	adds	r3, #77	@ 0x4d
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d114      	bne.n	8002c26 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	334d      	adds	r3, #77	@ 0x4d
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	334c      	adds	r3, #76	@ 0x4c
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e2cc      	b.n	80031c0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	334d      	adds	r3, #77	@ 0x4d
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b06      	cmp	r3, #6
 8002c3a:	d114      	bne.n	8002c66 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	334d      	adds	r3, #77	@ 0x4d
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	334c      	adds	r3, #76	@ 0x4c
 8002c60:	2205      	movs	r2, #5
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e2ac      	b.n	80031c0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	334d      	adds	r3, #77	@ 0x4d
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b07      	cmp	r3, #7
 8002c7a:	d00b      	beq.n	8002c94 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	334d      	adds	r3, #77	@ 0x4d
 8002c8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c8e:	2b09      	cmp	r3, #9
 8002c90:	f040 80a6 	bne.w	8002de0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	334d      	adds	r3, #77	@ 0x4d
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3344      	adds	r3, #68	@ 0x44
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	1c59      	adds	r1, r3, #1
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4403      	add	r3, r0
 8002cc8:	3344      	adds	r3, #68	@ 0x44
 8002cca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	3344      	adds	r3, #68	@ 0x44
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d943      	bls.n	8002d6a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	3344      	adds	r3, #68	@ 0x44
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	331a      	adds	r3, #26
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d123      	bne.n	8002d54 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	331b      	adds	r3, #27
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	331c      	adds	r3, #28
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	0151      	lsls	r1, r2, #5
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	440a      	add	r2, r1
 8002d4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d52:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	334c      	adds	r3, #76	@ 0x4c
 8002d64:	2204      	movs	r2, #4
 8002d66:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d68:	e229      	b.n	80031be <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	334c      	adds	r3, #76	@ 0x4c
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3326      	adds	r3, #38	@ 0x26
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00b      	beq.n	8002dac <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3326      	adds	r3, #38	@ 0x26
 8002da4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	f040 8209 	bne.w	80031be <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002dc2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002dde:	e1ee      	b.n	80031be <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	334d      	adds	r3, #77	@ 0x4d
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b05      	cmp	r3, #5
 8002df4:	f040 80c8 	bne.w	8002f88 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	334d      	adds	r3, #77	@ 0x4d
 8002e08:	2202      	movs	r2, #2
 8002e0a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	331b      	adds	r3, #27
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	f040 81ce 	bne.w	80031c0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	3326      	adds	r3, #38	@ 0x26
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d16b      	bne.n	8002f12 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	3348      	adds	r3, #72	@ 0x48
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	1c59      	adds	r1, r3, #1
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4403      	add	r3, r0
 8002e5a:	3348      	adds	r3, #72	@ 0x48
 8002e5c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3348      	adds	r3, #72	@ 0x48
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d943      	bls.n	8002efc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3348      	adds	r3, #72	@ 0x48
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	331b      	adds	r3, #27
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3344      	adds	r3, #68	@ 0x44
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d809      	bhi.n	8002ec6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	331c      	adds	r3, #28
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	0151      	lsls	r1, r2, #5
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	440a      	add	r2, r1
 8002edc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	334c      	adds	r3, #76	@ 0x4c
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e014      	b.n	8002f26 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	334c      	adds	r3, #76	@ 0x4c
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e009      	b.n	8002f26 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	334c      	adds	r3, #76	@ 0x4c
 8002f22:	2202      	movs	r2, #2
 8002f24:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3326      	adds	r3, #38	@ 0x26
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3326      	adds	r3, #38	@ 0x26
 8002f4c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	f040 8136 	bne.w	80031c0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f6a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f72:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f80:	461a      	mov	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e11b      	b.n	80031c0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	334d      	adds	r3, #77	@ 0x4d
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	f040 8081 	bne.w	80030a2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	334d      	adds	r3, #77	@ 0x4d
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	331b      	adds	r3, #27
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	f040 80fa 	bne.w	80031c0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	334c      	adds	r3, #76	@ 0x4c
 8002fdc:	2202      	movs	r2, #2
 8002fde:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	0151      	lsls	r1, r2, #5
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	440a      	add	r2, r1
 8002ff6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ffe:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	0151      	lsls	r1, r2, #5
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	440a      	add	r2, r1
 8003016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800301a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800301e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	0151      	lsls	r1, r2, #5
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	440a      	add	r2, r1
 8003036:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800303a:	f023 0320 	bic.w	r3, r3, #32
 800303e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	3326      	adds	r3, #38	@ 0x26
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3326      	adds	r3, #38	@ 0x26
 8003066:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003068:	2b02      	cmp	r3, #2
 800306a:	f040 80a9 	bne.w	80031c0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4413      	add	r3, r2
 8003076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003084:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800308c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	e08e      	b.n	80031c0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	334d      	adds	r3, #77	@ 0x4d
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d143      	bne.n	8003140 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	334d      	adds	r3, #77	@ 0x4d
 80030c8:	2202      	movs	r2, #2
 80030ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	334c      	adds	r3, #76	@ 0x4c
 80030dc:	2202      	movs	r2, #2
 80030de:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3326      	adds	r3, #38	@ 0x26
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	3326      	adds	r3, #38	@ 0x26
 8003106:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003108:	2b02      	cmp	r3, #2
 800310a:	d159      	bne.n	80031c0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003122:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800312a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003138:	461a      	mov	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e03f      	b.n	80031c0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	334d      	adds	r3, #77	@ 0x4d
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b08      	cmp	r3, #8
 8003154:	d126      	bne.n	80031a4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	334d      	adds	r3, #77	@ 0x4d
 8003166:	2202      	movs	r2, #2
 8003168:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3344      	adds	r3, #68	@ 0x44
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	1c59      	adds	r1, r3, #1
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4403      	add	r3, r0
 800318a:	3344      	adds	r3, #68	@ 0x44
 800318c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	334c      	adds	r3, #76	@ 0x4c
 800319e:	2204      	movs	r2, #4
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	e00d      	b.n	80031c0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	334d      	adds	r3, #77	@ 0x4d
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	f000 8100 	beq.w	80033bc <HCD_HC_IN_IRQHandler+0xcca>
 80031bc:	e000      	b.n	80031c0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031be:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	334c      	adds	r3, #76	@ 0x4c
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f005 fe10 	bl	8008dfc <HAL_HCD_HC_NotifyURBChange_Callback>
 80031dc:	e0ef      	b.n	80033be <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	4611      	mov	r1, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f002 fd0c 	bl	8005c04 <USB_ReadChInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f2:	2b40      	cmp	r3, #64	@ 0x40
 80031f4:	d12f      	bne.n	8003256 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003202:	461a      	mov	r2, r3
 8003204:	2340      	movs	r3, #64	@ 0x40
 8003206:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	334d      	adds	r3, #77	@ 0x4d
 8003218:	2205      	movs	r2, #5
 800321a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	331a      	adds	r3, #26
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3344      	adds	r3, #68	@ 0x44
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f003 fa7b 	bl	800674a <USB_HC_Halt>
 8003254:	e0b3      	b.n	80033be <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f002 fcd0 	bl	8005c04 <USB_ReadChInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b10      	cmp	r3, #16
 800326c:	f040 80a7 	bne.w	80033be <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3326      	adds	r3, #38	@ 0x26
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d11b      	bne.n	80032be <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	3344      	adds	r3, #68	@ 0x44
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	334d      	adds	r3, #77	@ 0x4d
 80032aa:	2204      	movs	r2, #4
 80032ac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 fa47 	bl	800674a <USB_HC_Halt>
 80032bc:	e03f      	b.n	800333e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3326      	adds	r3, #38	@ 0x26
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	3326      	adds	r3, #38	@ 0x26
 80032e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d129      	bne.n	800333e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	3344      	adds	r3, #68	@ 0x44
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	799b      	ldrb	r3, [r3, #6]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HCD_HC_IN_IRQHandler+0xc2a>
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	331b      	adds	r3, #27
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d110      	bne.n	800333e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	334d      	adds	r3, #77	@ 0x4d
 800332c:	2204      	movs	r2, #4
 800332e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f003 fa06 	bl	800674a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	331b      	adds	r3, #27
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d129      	bne.n	80033a8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	331b      	adds	r3, #27
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4413      	add	r3, r2
 8003370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	0151      	lsls	r1, r2, #5
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	440a      	add	r2, r1
 800337e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003386:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	0151      	lsls	r1, r2, #5
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	440a      	add	r2, r1
 800339e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033a2:	f043 0320 	orr.w	r3, r3, #32
 80033a6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b4:	461a      	mov	r2, r3
 80033b6:	2310      	movs	r3, #16
 80033b8:	6093      	str	r3, [r2, #8]
 80033ba:	e000      	b.n	80033be <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80033bc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	4611      	mov	r1, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f002 fc0e 	bl	8005c04 <USB_ReadChInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d11b      	bne.n	800342a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fe:	461a      	mov	r2, r3
 8003400:	2304      	movs	r3, #4
 8003402:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334d      	adds	r3, #77	@ 0x4d
 8003414:	2207      	movs	r2, #7
 8003416:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f003 f992 	bl	800674a <USB_HC_Halt>
 8003426:	f000 bc89 	b.w	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f002 fbe6 	bl	8005c04 <USB_ReadChInterrupts>
 8003438:	4603      	mov	r3, r0
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b20      	cmp	r3, #32
 8003440:	f040 8082 	bne.w	8003548 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003450:	461a      	mov	r2, r3
 8003452:	2320      	movs	r3, #32
 8003454:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	3319      	adds	r3, #25
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d124      	bne.n	80034b6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3319      	adds	r3, #25
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	334c      	adds	r3, #76	@ 0x4c
 8003490:	2202      	movs	r2, #2
 8003492:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	334d      	adds	r3, #77	@ 0x4d
 80034a4:	2203      	movs	r2, #3
 80034a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 f94a 	bl	800674a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	331a      	adds	r3, #26
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	f040 8437 	bne.w	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	331b      	adds	r3, #27
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f040 842b 	bne.w	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3326      	adds	r3, #38	@ 0x26
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d009      	beq.n	8003510 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	331b      	adds	r3, #27
 800350c:	2201      	movs	r2, #1
 800350e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	334d      	adds	r3, #77	@ 0x4d
 8003520:	2203      	movs	r2, #3
 8003522:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f003 f90c 	bl	800674a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3344      	adds	r3, #68	@ 0x44
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e3f9      	b.n	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f002 fb57 	bl	8005c04 <USB_ReadChInterrupts>
 8003556:	4603      	mov	r3, r0
 8003558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800355c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003560:	d111      	bne.n	8003586 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4413      	add	r3, r2
 800356a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800356e:	461a      	mov	r2, r3
 8003570:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003574:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f003 f8e3 	bl	800674a <USB_HC_Halt>
 8003584:	e3da      	b.n	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f002 fb38 	bl	8005c04 <USB_ReadChInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d168      	bne.n	8003670 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	3344      	adds	r3, #68	@ 0x44
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f002 fb22 	bl	8005c04 <USB_ReadChInterrupts>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c6:	2b40      	cmp	r3, #64	@ 0x40
 80035c8:	d112      	bne.n	80035f0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	3319      	adds	r3, #25
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ea:	461a      	mov	r2, r3
 80035ec:	2340      	movs	r3, #64	@ 0x40
 80035ee:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	331b      	adds	r3, #27
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d019      	beq.n	800363a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	331b      	adds	r3, #27
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	0151      	lsls	r1, r2, #5
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	440a      	add	r2, r1
 8003630:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003634:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003638:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	2301      	movs	r3, #1
 800364a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334d      	adds	r3, #77	@ 0x4d
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f003 f86e 	bl	800674a <USB_HC_Halt>
 800366e:	e365      	b.n	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f002 fac3 	bl	8005c04 <USB_ReadChInterrupts>
 800367e:	4603      	mov	r3, r0
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b40      	cmp	r3, #64	@ 0x40
 8003686:	d139      	bne.n	80036fc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	334d      	adds	r3, #77	@ 0x4d
 8003698:	2205      	movs	r2, #5
 800369a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	331a      	adds	r3, #26
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	3319      	adds	r3, #25
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	3344      	adds	r3, #68	@ 0x44
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	4611      	mov	r1, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f003 f831 	bl	800674a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f4:	461a      	mov	r2, r3
 80036f6:	2340      	movs	r3, #64	@ 0x40
 80036f8:	6093      	str	r3, [r2, #8]
 80036fa:	e31f      	b.n	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f002 fa7d 	bl	8005c04 <USB_ReadChInterrupts>
 800370a:	4603      	mov	r3, r0
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b08      	cmp	r3, #8
 8003712:	d11a      	bne.n	800374a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003720:	461a      	mov	r2, r3
 8003722:	2308      	movs	r3, #8
 8003724:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	334d      	adds	r3, #77	@ 0x4d
 8003736:	2206      	movs	r2, #6
 8003738:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	4611      	mov	r1, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f003 f801 	bl	800674a <USB_HC_Halt>
 8003748:	e2f8      	b.n	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f002 fa56 	bl	8005c04 <USB_ReadChInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b10      	cmp	r3, #16
 8003760:	d144      	bne.n	80037ec <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3344      	adds	r3, #68	@ 0x44
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	334d      	adds	r3, #77	@ 0x4d
 8003786:	2204      	movs	r2, #4
 8003788:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3319      	adds	r3, #25
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d114      	bne.n	80037ca <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	3318      	adds	r3, #24
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	3319      	adds	r3, #25
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f002 ffb9 	bl	800674a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e4:	461a      	mov	r2, r3
 80037e6:	2310      	movs	r3, #16
 80037e8:	6093      	str	r3, [r2, #8]
 80037ea:	e2a7      	b.n	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f002 fa05 	bl	8005c04 <USB_ReadChInterrupts>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003800:	2b80      	cmp	r3, #128	@ 0x80
 8003802:	f040 8083 	bne.w	800390c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	799b      	ldrb	r3, [r3, #6]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d111      	bne.n	8003832 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	334d      	adds	r3, #77	@ 0x4d
 800381e:	2207      	movs	r2, #7
 8003820:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f002 ff8d 	bl	800674a <USB_HC_Halt>
 8003830:	e062      	b.n	80038f8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	3344      	adds	r3, #68	@ 0x44
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	1c59      	adds	r1, r3, #1
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4403      	add	r3, r0
 8003852:	3344      	adds	r3, #68	@ 0x44
 8003854:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3344      	adds	r3, #68	@ 0x44
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d922      	bls.n	80038b2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	3344      	adds	r3, #68	@ 0x44
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	334c      	adds	r3, #76	@ 0x4c
 8003890:	2204      	movs	r2, #4
 8003892:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	334c      	adds	r3, #76	@ 0x4c
 80038a4:	781a      	ldrb	r2, [r3, #0]
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	4619      	mov	r1, r3
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f005 faa6 	bl	8008dfc <HAL_HCD_HC_NotifyURBChange_Callback>
 80038b0:	e022      	b.n	80038f8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	334c      	adds	r3, #76	@ 0x4c
 80038c2:	2202      	movs	r2, #2
 80038c4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038dc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038e4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f2:	461a      	mov	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003904:	461a      	mov	r2, r3
 8003906:	2380      	movs	r3, #128	@ 0x80
 8003908:	6093      	str	r3, [r2, #8]
 800390a:	e217      	b.n	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f002 f975 	bl	8005c04 <USB_ReadChInterrupts>
 800391a:	4603      	mov	r3, r0
 800391c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003924:	d11b      	bne.n	800395e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	334d      	adds	r3, #77	@ 0x4d
 8003936:	2209      	movs	r2, #9
 8003938:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	4611      	mov	r1, r2
 8003942:	4618      	mov	r0, r3
 8003944:	f002 ff01 	bl	800674a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003954:	461a      	mov	r2, r3
 8003956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800395a:	6093      	str	r3, [r2, #8]
 800395c:	e1ee      	b.n	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f002 f94c 	bl	8005c04 <USB_ReadChInterrupts>
 800396c:	4603      	mov	r3, r0
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	f040 81df 	bne.w	8003d36 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003984:	461a      	mov	r2, r3
 8003986:	2302      	movs	r3, #2
 8003988:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	334d      	adds	r3, #77	@ 0x4d
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	f040 8093 	bne.w	8003ac8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	334d      	adds	r3, #77	@ 0x4d
 80039b2:	2202      	movs	r2, #2
 80039b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	334c      	adds	r3, #76	@ 0x4c
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	3326      	adds	r3, #38	@ 0x26
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d00b      	beq.n	80039f8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	3326      	adds	r3, #38	@ 0x26
 80039f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	f040 8190 	bne.w	8003d18 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	799b      	ldrb	r3, [r3, #6]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d115      	bne.n	8003a2c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	333d      	adds	r3, #61	@ 0x3d
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	f083 0301 	eor.w	r3, r3, #1
 8003a18:	b2d8      	uxtb	r0, r3
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	333d      	adds	r3, #61	@ 0x3d
 8003a28:	4602      	mov	r2, r0
 8003a2a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	799b      	ldrb	r3, [r3, #6]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	f040 8171 	bne.w	8003d18 <HCD_HC_OUT_IRQHandler+0x954>
 8003a36:	78fa      	ldrb	r2, [r7, #3]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	3334      	adds	r3, #52	@ 0x34
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8165 	beq.w	8003d18 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3334      	adds	r3, #52	@ 0x34
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4403      	add	r3, r0
 8003a6e:	3328      	adds	r3, #40	@ 0x28
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	440b      	add	r3, r1
 8003a74:	1e59      	subs	r1, r3, #1
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4403      	add	r3, r0
 8003a84:	3328      	adds	r3, #40	@ 0x28
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a8c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 813f 	beq.w	8003d18 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	333d      	adds	r3, #61	@ 0x3d
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	f083 0301 	eor.w	r3, r3, #1
 8003ab2:	b2d8      	uxtb	r0, r3
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	333d      	adds	r3, #61	@ 0x3d
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e127      	b.n	8003d18 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	334d      	adds	r3, #77	@ 0x4d
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d120      	bne.n	8003b20 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	334d      	adds	r3, #77	@ 0x4d
 8003aee:	2202      	movs	r2, #2
 8003af0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	331b      	adds	r3, #27
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 8107 	bne.w	8003d18 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	334c      	adds	r3, #76	@ 0x4c
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e0fb      	b.n	8003d18 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	334d      	adds	r3, #77	@ 0x4d
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d13a      	bne.n	8003bac <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	334d      	adds	r3, #77	@ 0x4d
 8003b46:	2202      	movs	r2, #2
 8003b48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	334c      	adds	r3, #76	@ 0x4c
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	331b      	adds	r3, #27
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f040 80d1 	bne.w	8003d18 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	331b      	adds	r3, #27
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	0151      	lsls	r1, r2, #5
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	440a      	add	r2, r1
 8003ba0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba8:	6053      	str	r3, [r2, #4]
 8003baa:	e0b5      	b.n	8003d18 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	334d      	adds	r3, #77	@ 0x4d
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b05      	cmp	r3, #5
 8003bc0:	d114      	bne.n	8003bec <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	334d      	adds	r3, #77	@ 0x4d
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	334c      	adds	r3, #76	@ 0x4c
 8003be6:	2202      	movs	r2, #2
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	e095      	b.n	8003d18 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	334d      	adds	r3, #77	@ 0x4d
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	d114      	bne.n	8003c2c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	334d      	adds	r3, #77	@ 0x4d
 8003c12:	2202      	movs	r2, #2
 8003c14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	334c      	adds	r3, #76	@ 0x4c
 8003c26:	2205      	movs	r2, #5
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	e075      	b.n	8003d18 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	334d      	adds	r3, #77	@ 0x4d
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b07      	cmp	r3, #7
 8003c40:	d00a      	beq.n	8003c58 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	334d      	adds	r3, #77	@ 0x4d
 8003c52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c54:	2b09      	cmp	r3, #9
 8003c56:	d170      	bne.n	8003d3a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	334d      	adds	r3, #77	@ 0x4d
 8003c68:	2202      	movs	r2, #2
 8003c6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	3344      	adds	r3, #68	@ 0x44
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	1c59      	adds	r1, r3, #1
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4403      	add	r3, r0
 8003c8c:	3344      	adds	r3, #68	@ 0x44
 8003c8e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3344      	adds	r3, #68	@ 0x44
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d914      	bls.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3344      	adds	r3, #68	@ 0x44
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	334c      	adds	r3, #76	@ 0x4c
 8003cca:	2204      	movs	r2, #4
 8003ccc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cce:	e022      	b.n	8003d16 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	334c      	adds	r3, #76	@ 0x4c
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cfa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d02:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d10:	461a      	mov	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d16:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	334c      	adds	r3, #76	@ 0x4c
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f005 f864 	bl	8008dfc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d34:	e002      	b.n	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003d3a:	bf00      	nop
  }
}
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b08a      	sub	sp, #40	@ 0x28
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d52:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	0c5b      	lsrs	r3, r3, #17
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d76:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d004      	beq.n	8003d88 <HCD_RXQLVL_IRQHandler+0x46>
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	f000 80b6 	beq.w	8003ef2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d86:	e0b7      	b.n	8003ef8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 80b3 	beq.w	8003ef6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	332c      	adds	r3, #44	@ 0x2c
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80a7 	beq.w	8003ef6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	3338      	adds	r3, #56	@ 0x38
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	18d1      	adds	r1, r2, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4403      	add	r3, r0
 8003dcc:	3334      	adds	r3, #52	@ 0x34
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4299      	cmp	r1, r3
 8003dd2:	f200 8083 	bhi.w	8003edc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	332c      	adds	r3, #44	@ 0x2c
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	b292      	uxth	r2, r2
 8003df0:	4619      	mov	r1, r3
 8003df2:	f001 fe9c 	bl	8005b2e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	332c      	adds	r3, #44	@ 0x2c
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	18d1      	adds	r1, r2, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4613      	mov	r3, r2
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4403      	add	r3, r0
 8003e1a:	332c      	adds	r3, #44	@ 0x2c
 8003e1c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	3338      	adds	r3, #56	@ 0x38
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	18d1      	adds	r1, r2, r3
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4403      	add	r3, r0
 8003e42:	3338      	adds	r3, #56	@ 0x38
 8003e44:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	0cdb      	lsrs	r3, r3, #19
 8003e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e5a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3328      	adds	r3, #40	@ 0x28
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d13f      	bne.n	8003ef6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d03c      	beq.n	8003ef6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e92:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e9a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	333c      	adds	r3, #60	@ 0x3c
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	f083 0301 	eor.w	r3, r3, #1
 8003ec4:	b2d8      	uxtb	r0, r3
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	333c      	adds	r3, #60	@ 0x3c
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	701a      	strb	r2, [r3, #0]
      break;
 8003eda:	e00c      	b.n	8003ef6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	334c      	adds	r3, #76	@ 0x4c
 8003eec:	2204      	movs	r2, #4
 8003eee:	701a      	strb	r2, [r3, #0]
      break;
 8003ef0:	e001      	b.n	8003ef6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e000      	b.n	8003ef8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003ef6:	bf00      	nop
  }
}
 8003ef8:	bf00      	nop
 8003efa:	3728      	adds	r7, #40	@ 0x28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003f2c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d10b      	bne.n	8003f50 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d102      	bne.n	8003f48 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f004 ff3e 	bl	8008dc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f043 0302 	orr.w	r3, r3, #2
 8003f4e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d132      	bne.n	8003fc0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f043 0308 	orr.w	r3, r3, #8
 8003f60:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d126      	bne.n	8003fba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7a5b      	ldrb	r3, [r3, #9]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d113      	bne.n	8003f9c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003f7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f7e:	d106      	bne.n	8003f8e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2102      	movs	r1, #2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 ff60 	bl	8005e4c <USB_InitFSLSPClkSel>
 8003f8c:	e011      	b.n	8003fb2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2101      	movs	r1, #1
 8003f94:	4618      	mov	r0, r3
 8003f96:	f001 ff59 	bl	8005e4c <USB_InitFSLSPClkSel>
 8003f9a:	e00a      	b.n	8003fb2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	79db      	ldrb	r3, [r3, #7]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d106      	bne.n	8003fb2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003faa:	461a      	mov	r2, r3
 8003fac:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003fb0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f004 ff30 	bl	8008e18 <HAL_HCD_PortEnabled_Callback>
 8003fb8:	e002      	b.n	8003fc0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f004 ff3a 	bl	8008e34 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d103      	bne.n	8003fd2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f043 0320 	orr.w	r3, r3, #32
 8003fd0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6013      	str	r3, [r2, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e12b      	b.n	8004252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fc fd9c 	bl	8000b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2224      	movs	r2, #36	@ 0x24
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800403a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800404a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800404c:	f001 fa20 	bl	8005490 <HAL_RCC_GetPCLK1Freq>
 8004050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4a81      	ldr	r2, [pc, #516]	@ (800425c <HAL_I2C_Init+0x274>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d807      	bhi.n	800406c <HAL_I2C_Init+0x84>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a80      	ldr	r2, [pc, #512]	@ (8004260 <HAL_I2C_Init+0x278>)
 8004060:	4293      	cmp	r3, r2
 8004062:	bf94      	ite	ls
 8004064:	2301      	movls	r3, #1
 8004066:	2300      	movhi	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e006      	b.n	800407a <HAL_I2C_Init+0x92>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a7d      	ldr	r2, [pc, #500]	@ (8004264 <HAL_I2C_Init+0x27c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	bf94      	ite	ls
 8004074:	2301      	movls	r3, #1
 8004076:	2300      	movhi	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0e7      	b.n	8004252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a78      	ldr	r2, [pc, #480]	@ (8004268 <HAL_I2C_Init+0x280>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	0c9b      	lsrs	r3, r3, #18
 800408c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4a6a      	ldr	r2, [pc, #424]	@ (800425c <HAL_I2C_Init+0x274>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d802      	bhi.n	80040bc <HAL_I2C_Init+0xd4>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	3301      	adds	r3, #1
 80040ba:	e009      	b.n	80040d0 <HAL_I2C_Init+0xe8>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	4a69      	ldr	r2, [pc, #420]	@ (800426c <HAL_I2C_Init+0x284>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	3301      	adds	r3, #1
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	495c      	ldr	r1, [pc, #368]	@ (800425c <HAL_I2C_Init+0x274>)
 80040ec:	428b      	cmp	r3, r1
 80040ee:	d819      	bhi.n	8004124 <HAL_I2C_Init+0x13c>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1e59      	subs	r1, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fe:	1c59      	adds	r1, r3, #1
 8004100:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004104:	400b      	ands	r3, r1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_I2C_Init+0x138>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1e59      	subs	r1, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	fbb1 f3f3 	udiv	r3, r1, r3
 8004118:	3301      	adds	r3, #1
 800411a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411e:	e051      	b.n	80041c4 <HAL_I2C_Init+0x1dc>
 8004120:	2304      	movs	r3, #4
 8004122:	e04f      	b.n	80041c4 <HAL_I2C_Init+0x1dc>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d111      	bne.n	8004150 <HAL_I2C_Init+0x168>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1e58      	subs	r0, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	440b      	add	r3, r1
 800413a:	fbb0 f3f3 	udiv	r3, r0, r3
 800413e:	3301      	adds	r3, #1
 8004140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e012      	b.n	8004176 <HAL_I2C_Init+0x18e>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1e58      	subs	r0, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6859      	ldr	r1, [r3, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	0099      	lsls	r1, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	fbb0 f3f3 	udiv	r3, r0, r3
 8004166:	3301      	adds	r3, #1
 8004168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_I2C_Init+0x196>
 800417a:	2301      	movs	r3, #1
 800417c:	e022      	b.n	80041c4 <HAL_I2C_Init+0x1dc>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10e      	bne.n	80041a4 <HAL_I2C_Init+0x1bc>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1e58      	subs	r0, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	460b      	mov	r3, r1
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	440b      	add	r3, r1
 8004194:	fbb0 f3f3 	udiv	r3, r0, r3
 8004198:	3301      	adds	r3, #1
 800419a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041a2:	e00f      	b.n	80041c4 <HAL_I2C_Init+0x1dc>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1e58      	subs	r0, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	0099      	lsls	r1, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ba:	3301      	adds	r3, #1
 80041bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	6809      	ldr	r1, [r1, #0]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6911      	ldr	r1, [r2, #16]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68d2      	ldr	r2, [r2, #12]
 80041fe:	4311      	orrs	r1, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	430b      	orrs	r3, r1
 8004206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	000186a0 	.word	0x000186a0
 8004260:	001e847f 	.word	0x001e847f
 8004264:	003d08ff 	.word	0x003d08ff
 8004268:	431bde83 	.word	0x431bde83
 800426c:	10624dd3 	.word	0x10624dd3

08004270 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e128      	b.n	80044d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a90      	ldr	r2, [pc, #576]	@ (80044dc <HAL_I2S_Init+0x26c>)
 800429a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7fc fc9d 	bl	8000bdc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2202      	movs	r2, #2
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80042b8:	f023 030f 	bic.w	r3, r3, #15
 80042bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2202      	movs	r2, #2
 80042c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d060      	beq.n	8004390 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d102      	bne.n	80042dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80042d6:	2310      	movs	r3, #16
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	e001      	b.n	80042e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80042dc:	2320      	movs	r3, #32
 80042de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d802      	bhi.n	80042ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80042ee:	2001      	movs	r0, #1
 80042f0:	f001 f9c4 	bl	800567c <HAL_RCCEx_GetPeriphCLKFreq>
 80042f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042fe:	d125      	bne.n	800434c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	461a      	mov	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	3305      	adds	r3, #5
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	e01f      	b.n	800436a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	fbb2 f2f3 	udiv	r2, r2, r3
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	461a      	mov	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	fbb2 f3f3 	udiv	r3, r2, r3
 8004346:	3305      	adds	r3, #5
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e00e      	b.n	800436a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	fbb2 f2f3 	udiv	r2, r2, r3
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	461a      	mov	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	fbb2 f3f3 	udiv	r3, r2, r3
 8004366:	3305      	adds	r3, #5
 8004368:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4a5c      	ldr	r2, [pc, #368]	@ (80044e0 <HAL_I2S_Init+0x270>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	08db      	lsrs	r3, r3, #3
 8004374:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	e003      	b.n	8004398 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004390:	2302      	movs	r3, #2
 8004392:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d902      	bls.n	80043a4 <HAL_I2S_Init+0x134>
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2bff      	cmp	r3, #255	@ 0xff
 80043a2:	d907      	bls.n	80043b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e08f      	b.n	80044d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	ea42 0103 	orr.w	r1, r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80043d2:	f023 030f 	bic.w	r3, r3, #15
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6851      	ldr	r1, [r2, #4]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6892      	ldr	r2, [r2, #8]
 80043de:	4311      	orrs	r1, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	68d2      	ldr	r2, [r2, #12]
 80043e4:	4311      	orrs	r1, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6992      	ldr	r2, [r2, #24]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d161      	bne.n	80044c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a38      	ldr	r2, [pc, #224]	@ (80044e4 <HAL_I2S_Init+0x274>)
 8004404:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a37      	ldr	r2, [pc, #220]	@ (80044e8 <HAL_I2S_Init+0x278>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d101      	bne.n	8004414 <HAL_I2S_Init+0x1a4>
 8004410:	4b36      	ldr	r3, [pc, #216]	@ (80044ec <HAL_I2S_Init+0x27c>)
 8004412:	e001      	b.n	8004418 <HAL_I2S_Init+0x1a8>
 8004414:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	4932      	ldr	r1, [pc, #200]	@ (80044e8 <HAL_I2S_Init+0x278>)
 8004420:	428a      	cmp	r2, r1
 8004422:	d101      	bne.n	8004428 <HAL_I2S_Init+0x1b8>
 8004424:	4a31      	ldr	r2, [pc, #196]	@ (80044ec <HAL_I2S_Init+0x27c>)
 8004426:	e001      	b.n	800442c <HAL_I2S_Init+0x1bc>
 8004428:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800442c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004430:	f023 030f 	bic.w	r3, r3, #15
 8004434:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2b      	ldr	r2, [pc, #172]	@ (80044e8 <HAL_I2S_Init+0x278>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_I2S_Init+0x1d4>
 8004440:	4b2a      	ldr	r3, [pc, #168]	@ (80044ec <HAL_I2S_Init+0x27c>)
 8004442:	e001      	b.n	8004448 <HAL_I2S_Init+0x1d8>
 8004444:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004448:	2202      	movs	r2, #2
 800444a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a25      	ldr	r2, [pc, #148]	@ (80044e8 <HAL_I2S_Init+0x278>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_I2S_Init+0x1ea>
 8004456:	4b25      	ldr	r3, [pc, #148]	@ (80044ec <HAL_I2S_Init+0x27c>)
 8004458:	e001      	b.n	800445e <HAL_I2S_Init+0x1ee>
 800445a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800446a:	d003      	beq.n	8004474 <HAL_I2S_Init+0x204>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d103      	bne.n	800447c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004474:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	e001      	b.n	8004480 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800448a:	4313      	orrs	r3, r2
 800448c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004494:	4313      	orrs	r3, r2
 8004496:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800449e:	4313      	orrs	r3, r2
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	897b      	ldrh	r3, [r7, #10]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80044ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a0d      	ldr	r2, [pc, #52]	@ (80044e8 <HAL_I2S_Init+0x278>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d101      	bne.n	80044bc <HAL_I2S_Init+0x24c>
 80044b8:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <HAL_I2S_Init+0x27c>)
 80044ba:	e001      	b.n	80044c0 <HAL_I2S_Init+0x250>
 80044bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044c0:	897a      	ldrh	r2, [r7, #10]
 80044c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	080045e7 	.word	0x080045e7
 80044e0:	cccccccd 	.word	0xcccccccd
 80044e4:	080046fd 	.word	0x080046fd
 80044e8:	40003800 	.word	0x40003800
 80044ec:	40003400 	.word	0x40003400

080044f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	881a      	ldrh	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	1c9a      	adds	r2, r3, #2
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10e      	bne.n	8004580 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004570:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff ffb8 	bl	80044f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	b292      	uxth	r2, r2
 800459c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	1c9a      	adds	r2, r3, #2
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10e      	bne.n	80045de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff93 	bl	8004504 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80045de:	bf00      	nop
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b086      	sub	sp, #24
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d13a      	bne.n	8004678 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d109      	bne.n	8004620 <I2S_IRQHandler+0x3a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004616:	2b40      	cmp	r3, #64	@ 0x40
 8004618:	d102      	bne.n	8004620 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff ffb4 	bl	8004588 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004626:	2b40      	cmp	r3, #64	@ 0x40
 8004628:	d126      	bne.n	8004678 <I2S_IRQHandler+0x92>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b20      	cmp	r3, #32
 8004636:	d11f      	bne.n	8004678 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004646:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466a:	f043 0202 	orr.w	r2, r3, #2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff ff50 	bl	8004518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b03      	cmp	r3, #3
 8004682:	d136      	bne.n	80046f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b02      	cmp	r3, #2
 800468c:	d109      	bne.n	80046a2 <I2S_IRQHandler+0xbc>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004698:	2b80      	cmp	r3, #128	@ 0x80
 800469a:	d102      	bne.n	80046a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff45 	bl	800452c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d122      	bne.n	80046f2 <I2S_IRQHandler+0x10c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d11b      	bne.n	80046f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e4:	f043 0204 	orr.w	r2, r3, #4
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff13 	bl	8004518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046f2:	bf00      	nop
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a92      	ldr	r2, [pc, #584]	@ (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004716:	4b92      	ldr	r3, [pc, #584]	@ (8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004718:	e001      	b.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800471a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a8b      	ldr	r2, [pc, #556]	@ (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d101      	bne.n	8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004734:	4b8a      	ldr	r3, [pc, #552]	@ (8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004736:	e001      	b.n	800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004738:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004748:	d004      	beq.n	8004754 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f040 8099 	bne.w	8004886 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d107      	bne.n	800476e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f925 	bl	80049b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b01      	cmp	r3, #1
 8004776:	d107      	bne.n	8004788 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f9c8 	bl	8004b18 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478e:	2b40      	cmp	r3, #64	@ 0x40
 8004790:	d13a      	bne.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d035      	beq.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a6e      	ldr	r2, [pc, #440]	@ (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80047a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047a8:	e001      	b.n	80047ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80047aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4969      	ldr	r1, [pc, #420]	@ (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047b6:	428b      	cmp	r3, r1
 80047b8:	d101      	bne.n	80047be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80047ba:	4b69      	ldr	r3, [pc, #420]	@ (8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047bc:	e001      	b.n	80047c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80047be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	f043 0202 	orr.w	r2, r3, #2
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff fe88 	bl	8004518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b08      	cmp	r3, #8
 8004810:	f040 80c3 	bne.w	800499a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80bd 	beq.w	800499a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800482e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a49      	ldr	r2, [pc, #292]	@ (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800483a:	4b49      	ldr	r3, [pc, #292]	@ (8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800483c:	e001      	b.n	8004842 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800483e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4944      	ldr	r1, [pc, #272]	@ (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800484a:	428b      	cmp	r3, r1
 800484c:	d101      	bne.n	8004852 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800484e:	4b44      	ldr	r3, [pc, #272]	@ (8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004850:	e001      	b.n	8004856 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004852:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004856:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800485a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800485c:	2300      	movs	r3, #0
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	60bb      	str	r3, [r7, #8]
 8004868:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	f043 0204 	orr.w	r2, r3, #4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff fe4a 	bl	8004518 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004884:	e089      	b.n	800499a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b02      	cmp	r3, #2
 800488e:	d107      	bne.n	80048a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8be 	bl	8004a1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f8fd 	bl	8004ab4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c0:	2b40      	cmp	r3, #64	@ 0x40
 80048c2:	d12f      	bne.n	8004924 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d02a      	beq.n	8004924 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1e      	ldr	r2, [pc, #120]	@ (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80048e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048ea:	e001      	b.n	80048f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80048ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4919      	ldr	r1, [pc, #100]	@ (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048f8:	428b      	cmp	r3, r1
 80048fa:	d101      	bne.n	8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80048fc:	4b18      	ldr	r3, [pc, #96]	@ (8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048fe:	e001      	b.n	8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004900:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004904:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004908:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004916:	f043 0202 	orr.w	r2, r3, #2
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff fdfa 	bl	8004518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b08      	cmp	r3, #8
 800492c:	d136      	bne.n	800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d031      	beq.n	800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a07      	ldr	r2, [pc, #28]	@ (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004942:	4b07      	ldr	r3, [pc, #28]	@ (8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004944:	e001      	b.n	800494a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004946:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4902      	ldr	r1, [pc, #8]	@ (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004952:	428b      	cmp	r3, r1
 8004954:	d106      	bne.n	8004964 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004956:	4b02      	ldr	r3, [pc, #8]	@ (8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004958:	e006      	b.n	8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800495a:	bf00      	nop
 800495c:	40003800 	.word	0x40003800
 8004960:	40003400 	.word	0x40003400
 8004964:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004968:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800496c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800497c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498a:	f043 0204 	orr.w	r2, r3, #4
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff fdc0 	bl	8004518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004998:	e000      	b.n	800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800499a:	bf00      	nop
}
 800499c:	bf00      	nop
 800499e:	3720      	adds	r7, #32
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	1c99      	adds	r1, r3, #2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6251      	str	r1, [r2, #36]	@ 0x24
 80049ca:	881a      	ldrh	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d113      	bne.n	8004a12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ffc9 	bl	80049a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	1c99      	adds	r1, r3, #2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6251      	str	r1, [r2, #36]	@ 0x24
 8004a2e:	8819      	ldrh	r1, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1d      	ldr	r2, [pc, #116]	@ (8004aac <I2SEx_TxISR_I2SExt+0x90>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <I2SEx_TxISR_I2SExt+0x22>
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab0 <I2SEx_TxISR_I2SExt+0x94>)
 8004a3c:	e001      	b.n	8004a42 <I2SEx_TxISR_I2SExt+0x26>
 8004a3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a42:	460a      	mov	r2, r1
 8004a44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d121      	bne.n	8004aa2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a12      	ldr	r2, [pc, #72]	@ (8004aac <I2SEx_TxISR_I2SExt+0x90>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d101      	bne.n	8004a6c <I2SEx_TxISR_I2SExt+0x50>
 8004a68:	4b11      	ldr	r3, [pc, #68]	@ (8004ab0 <I2SEx_TxISR_I2SExt+0x94>)
 8004a6a:	e001      	b.n	8004a70 <I2SEx_TxISR_I2SExt+0x54>
 8004a6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	490d      	ldr	r1, [pc, #52]	@ (8004aac <I2SEx_TxISR_I2SExt+0x90>)
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	d101      	bne.n	8004a80 <I2SEx_TxISR_I2SExt+0x64>
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab0 <I2SEx_TxISR_I2SExt+0x94>)
 8004a7e:	e001      	b.n	8004a84 <I2SEx_TxISR_I2SExt+0x68>
 8004a80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ff81 	bl	80049a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40003800 	.word	0x40003800
 8004ab0:	40003400 	.word	0x40003400

08004ab4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68d8      	ldr	r0, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac6:	1c99      	adds	r1, r3, #2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004acc:	b282      	uxth	r2, r0
 8004ace:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d113      	bne.n	8004b10 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004af6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff ff4a 	bl	80049a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b10:	bf00      	nop
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a20      	ldr	r2, [pc, #128]	@ (8004ba8 <I2SEx_RxISR_I2SExt+0x90>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d101      	bne.n	8004b2e <I2SEx_RxISR_I2SExt+0x16>
 8004b2a:	4b20      	ldr	r3, [pc, #128]	@ (8004bac <I2SEx_RxISR_I2SExt+0x94>)
 8004b2c:	e001      	b.n	8004b32 <I2SEx_RxISR_I2SExt+0x1a>
 8004b2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b32:	68d8      	ldr	r0, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	1c99      	adds	r1, r3, #2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004b3e:	b282      	uxth	r2, r0
 8004b40:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d121      	bne.n	8004b9e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a12      	ldr	r2, [pc, #72]	@ (8004ba8 <I2SEx_RxISR_I2SExt+0x90>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d101      	bne.n	8004b68 <I2SEx_RxISR_I2SExt+0x50>
 8004b64:	4b11      	ldr	r3, [pc, #68]	@ (8004bac <I2SEx_RxISR_I2SExt+0x94>)
 8004b66:	e001      	b.n	8004b6c <I2SEx_RxISR_I2SExt+0x54>
 8004b68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	490d      	ldr	r1, [pc, #52]	@ (8004ba8 <I2SEx_RxISR_I2SExt+0x90>)
 8004b74:	428b      	cmp	r3, r1
 8004b76:	d101      	bne.n	8004b7c <I2SEx_RxISR_I2SExt+0x64>
 8004b78:	4b0c      	ldr	r3, [pc, #48]	@ (8004bac <I2SEx_RxISR_I2SExt+0x94>)
 8004b7a:	e001      	b.n	8004b80 <I2SEx_RxISR_I2SExt+0x68>
 8004b7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b84:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ff03 	bl	80049a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40003800 	.word	0x40003800
 8004bac:	40003400 	.word	0x40003400

08004bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e267      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d075      	beq.n	8004cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bce:	4b88      	ldr	r3, [pc, #544]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bda:	4b85      	ldr	r3, [pc, #532]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d112      	bne.n	8004c0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be6:	4b82      	ldr	r3, [pc, #520]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bf2:	d10b      	bne.n	8004c0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf4:	4b7e      	ldr	r3, [pc, #504]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d05b      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x108>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d157      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e242      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c14:	d106      	bne.n	8004c24 <HAL_RCC_OscConfig+0x74>
 8004c16:	4b76      	ldr	r3, [pc, #472]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a75      	ldr	r2, [pc, #468]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	e01d      	b.n	8004c60 <HAL_RCC_OscConfig+0xb0>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c2c:	d10c      	bne.n	8004c48 <HAL_RCC_OscConfig+0x98>
 8004c2e:	4b70      	ldr	r3, [pc, #448]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a6f      	ldr	r2, [pc, #444]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6c      	ldr	r2, [pc, #432]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e00b      	b.n	8004c60 <HAL_RCC_OscConfig+0xb0>
 8004c48:	4b69      	ldr	r3, [pc, #420]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a68      	ldr	r2, [pc, #416]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	4b66      	ldr	r3, [pc, #408]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a65      	ldr	r2, [pc, #404]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d013      	beq.n	8004c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fc f992 	bl	8000f90 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c70:	f7fc f98e 	bl	8000f90 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	@ 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e207      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c82:	4b5b      	ldr	r3, [pc, #364]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0xc0>
 8004c8e:	e014      	b.n	8004cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c90:	f7fc f97e 	bl	8000f90 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c98:	f7fc f97a 	bl	8000f90 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	@ 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e1f3      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004caa:	4b51      	ldr	r3, [pc, #324]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0xe8>
 8004cb6:	e000      	b.n	8004cba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d063      	beq.n	8004d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cd2:	4b47      	ldr	r3, [pc, #284]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d11c      	bne.n	8004d18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cde:	4b44      	ldr	r3, [pc, #272]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d116      	bne.n	8004d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cea:	4b41      	ldr	r3, [pc, #260]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_RCC_OscConfig+0x152>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d001      	beq.n	8004d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e1c7      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d02:	4b3b      	ldr	r3, [pc, #236]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4937      	ldr	r1, [pc, #220]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d16:	e03a      	b.n	8004d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d020      	beq.n	8004d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d20:	4b34      	ldr	r3, [pc, #208]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fc f933 	bl	8000f90 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d2e:	f7fc f92f 	bl	8000f90 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e1a8      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d40:	4b2b      	ldr	r3, [pc, #172]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f0      	beq.n	8004d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4c:	4b28      	ldr	r3, [pc, #160]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4925      	ldr	r1, [pc, #148]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	600b      	str	r3, [r1, #0]
 8004d60:	e015      	b.n	8004d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d62:	4b24      	ldr	r3, [pc, #144]	@ (8004df4 <HAL_RCC_OscConfig+0x244>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fc f912 	bl	8000f90 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d70:	f7fc f90e 	bl	8000f90 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e187      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d82:	4b1b      	ldr	r3, [pc, #108]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d036      	beq.n	8004e08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d016      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004da2:	4b15      	ldr	r3, [pc, #84]	@ (8004df8 <HAL_RCC_OscConfig+0x248>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fc f8f2 	bl	8000f90 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db0:	f7fc f8ee 	bl	8000f90 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e167      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004df0 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0f0      	beq.n	8004db0 <HAL_RCC_OscConfig+0x200>
 8004dce:	e01b      	b.n	8004e08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd0:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <HAL_RCC_OscConfig+0x248>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd6:	f7fc f8db 	bl	8000f90 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ddc:	e00e      	b.n	8004dfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dde:	f7fc f8d7 	bl	8000f90 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d907      	bls.n	8004dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e150      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
 8004df0:	40023800 	.word	0x40023800
 8004df4:	42470000 	.word	0x42470000
 8004df8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dfc:	4b88      	ldr	r3, [pc, #544]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1ea      	bne.n	8004dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8097 	beq.w	8004f44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e16:	2300      	movs	r3, #0
 8004e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1a:	4b81      	ldr	r3, [pc, #516]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10f      	bne.n	8004e46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	4b7d      	ldr	r3, [pc, #500]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	4a7c      	ldr	r2, [pc, #496]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e36:	4b7a      	ldr	r3, [pc, #488]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e42:	2301      	movs	r3, #1
 8004e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e46:	4b77      	ldr	r3, [pc, #476]	@ (8005024 <HAL_RCC_OscConfig+0x474>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d118      	bne.n	8004e84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e52:	4b74      	ldr	r3, [pc, #464]	@ (8005024 <HAL_RCC_OscConfig+0x474>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a73      	ldr	r2, [pc, #460]	@ (8005024 <HAL_RCC_OscConfig+0x474>)
 8004e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e5e:	f7fc f897 	bl	8000f90 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e66:	f7fc f893 	bl	8000f90 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e10c      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e78:	4b6a      	ldr	r3, [pc, #424]	@ (8005024 <HAL_RCC_OscConfig+0x474>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCC_OscConfig+0x2ea>
 8004e8c:	4b64      	ldr	r3, [pc, #400]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e90:	4a63      	ldr	r2, [pc, #396]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e98:	e01c      	b.n	8004ed4 <HAL_RCC_OscConfig+0x324>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x30c>
 8004ea2:	4b5f      	ldr	r3, [pc, #380]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea6:	4a5e      	ldr	r2, [pc, #376]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004ea8:	f043 0304 	orr.w	r3, r3, #4
 8004eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eae:	4b5c      	ldr	r3, [pc, #368]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb2:	4a5b      	ldr	r2, [pc, #364]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eba:	e00b      	b.n	8004ed4 <HAL_RCC_OscConfig+0x324>
 8004ebc:	4b58      	ldr	r3, [pc, #352]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec0:	4a57      	ldr	r2, [pc, #348]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ec8:	4b55      	ldr	r3, [pc, #340]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ecc:	4a54      	ldr	r2, [pc, #336]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004ece:	f023 0304 	bic.w	r3, r3, #4
 8004ed2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d015      	beq.n	8004f08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004edc:	f7fc f858 	bl	8000f90 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee4:	f7fc f854 	bl	8000f90 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e0cb      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efa:	4b49      	ldr	r3, [pc, #292]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ee      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x334>
 8004f06:	e014      	b.n	8004f32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f08:	f7fc f842 	bl	8000f90 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f10:	f7fc f83e 	bl	8000f90 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e0b5      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f26:	4b3e      	ldr	r3, [pc, #248]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ee      	bne.n	8004f10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d105      	bne.n	8004f44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f38:	4b39      	ldr	r3, [pc, #228]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3c:	4a38      	ldr	r2, [pc, #224]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004f3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80a1 	beq.w	8005090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f4e:	4b34      	ldr	r3, [pc, #208]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d05c      	beq.n	8005014 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d141      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f62:	4b31      	ldr	r3, [pc, #196]	@ (8005028 <HAL_RCC_OscConfig+0x478>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f68:	f7fc f812 	bl	8000f90 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f70:	f7fc f80e 	bl	8000f90 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e087      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f82:	4b27      	ldr	r3, [pc, #156]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f0      	bne.n	8004f70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	019b      	lsls	r3, r3, #6
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa4:	085b      	lsrs	r3, r3, #1
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	041b      	lsls	r3, r3, #16
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb0:	061b      	lsls	r3, r3, #24
 8004fb2:	491b      	ldr	r1, [pc, #108]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005028 <HAL_RCC_OscConfig+0x478>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbe:	f7fb ffe7 	bl	8000f90 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc6:	f7fb ffe3 	bl	8000f90 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e05c      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd8:	4b11      	ldr	r3, [pc, #68]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x416>
 8004fe4:	e054      	b.n	8005090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe6:	4b10      	ldr	r3, [pc, #64]	@ (8005028 <HAL_RCC_OscConfig+0x478>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fec:	f7fb ffd0 	bl	8000f90 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff4:	f7fb ffcc 	bl	8000f90 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e045      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005006:	4b06      	ldr	r3, [pc, #24]	@ (8005020 <HAL_RCC_OscConfig+0x470>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f0      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x444>
 8005012:	e03d      	b.n	8005090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d107      	bne.n	800502c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e038      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
 8005020:	40023800 	.word	0x40023800
 8005024:	40007000 	.word	0x40007000
 8005028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800502c:	4b1b      	ldr	r3, [pc, #108]	@ (800509c <HAL_RCC_OscConfig+0x4ec>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d028      	beq.n	800508c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d121      	bne.n	800508c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005052:	429a      	cmp	r2, r3
 8005054:	d11a      	bne.n	800508c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800505c:	4013      	ands	r3, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005064:	4293      	cmp	r3, r2
 8005066:	d111      	bne.n	800508c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005072:	085b      	lsrs	r3, r3, #1
 8005074:	3b01      	subs	r3, #1
 8005076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005078:	429a      	cmp	r2, r3
 800507a:	d107      	bne.n	800508c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005088:	429a      	cmp	r2, r3
 800508a:	d001      	beq.n	8005090 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800

080050a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0cc      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050b4:	4b68      	ldr	r3, [pc, #416]	@ (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d90c      	bls.n	80050dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c2:	4b65      	ldr	r3, [pc, #404]	@ (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ca:	4b63      	ldr	r3, [pc, #396]	@ (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0b8      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d020      	beq.n	800512a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f4:	4b59      	ldr	r3, [pc, #356]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4a58      	ldr	r2, [pc, #352]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800510c:	4b53      	ldr	r3, [pc, #332]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4a52      	ldr	r2, [pc, #328]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005118:	4b50      	ldr	r3, [pc, #320]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	494d      	ldr	r1, [pc, #308]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d044      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d107      	bne.n	800514e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513e:	4b47      	ldr	r3, [pc, #284]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d119      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e07f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d003      	beq.n	800515e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800515a:	2b03      	cmp	r3, #3
 800515c:	d107      	bne.n	800516e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515e:	4b3f      	ldr	r3, [pc, #252]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e06f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516e:	4b3b      	ldr	r3, [pc, #236]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e067      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800517e:	4b37      	ldr	r3, [pc, #220]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f023 0203 	bic.w	r2, r3, #3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	4934      	ldr	r1, [pc, #208]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	4313      	orrs	r3, r2
 800518e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005190:	f7fb fefe 	bl	8000f90 <HAL_GetTick>
 8005194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005196:	e00a      	b.n	80051ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005198:	f7fb fefa 	bl	8000f90 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e04f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ae:	4b2b      	ldr	r3, [pc, #172]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 020c 	and.w	r2, r3, #12
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	429a      	cmp	r2, r3
 80051be:	d1eb      	bne.n	8005198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051c0:	4b25      	ldr	r3, [pc, #148]	@ (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d20c      	bcs.n	80051e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ce:	4b22      	ldr	r3, [pc, #136]	@ (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d6:	4b20      	ldr	r3, [pc, #128]	@ (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e032      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f4:	4b19      	ldr	r3, [pc, #100]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4916      	ldr	r1, [pc, #88]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005212:	4b12      	ldr	r3, [pc, #72]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	490e      	ldr	r1, [pc, #56]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005226:	f000 f821 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800522a:	4602      	mov	r2, r0
 800522c:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	091b      	lsrs	r3, r3, #4
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	490a      	ldr	r1, [pc, #40]	@ (8005260 <HAL_RCC_ClockConfig+0x1c0>)
 8005238:	5ccb      	ldrb	r3, [r1, r3]
 800523a:	fa22 f303 	lsr.w	r3, r2, r3
 800523e:	4a09      	ldr	r2, [pc, #36]	@ (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 8005240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005242:	4b09      	ldr	r3, [pc, #36]	@ (8005268 <HAL_RCC_ClockConfig+0x1c8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7fb fe5e 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40023c00 	.word	0x40023c00
 800525c:	40023800 	.word	0x40023800
 8005260:	080094f0 	.word	0x080094f0
 8005264:	20000000 	.word	0x20000000
 8005268:	20000004 	.word	0x20000004

0800526c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800526c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005270:	b094      	sub	sp, #80	@ 0x50
 8005272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005284:	4b79      	ldr	r3, [pc, #484]	@ (800546c <HAL_RCC_GetSysClockFreq+0x200>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 030c 	and.w	r3, r3, #12
 800528c:	2b08      	cmp	r3, #8
 800528e:	d00d      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x40>
 8005290:	2b08      	cmp	r3, #8
 8005292:	f200 80e1 	bhi.w	8005458 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_RCC_GetSysClockFreq+0x34>
 800529a:	2b04      	cmp	r3, #4
 800529c:	d003      	beq.n	80052a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800529e:	e0db      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052a0:	4b73      	ldr	r3, [pc, #460]	@ (8005470 <HAL_RCC_GetSysClockFreq+0x204>)
 80052a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052a4:	e0db      	b.n	800545e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052a6:	4b73      	ldr	r3, [pc, #460]	@ (8005474 <HAL_RCC_GetSysClockFreq+0x208>)
 80052a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052aa:	e0d8      	b.n	800545e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052ac:	4b6f      	ldr	r3, [pc, #444]	@ (800546c <HAL_RCC_GetSysClockFreq+0x200>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052b6:	4b6d      	ldr	r3, [pc, #436]	@ (800546c <HAL_RCC_GetSysClockFreq+0x200>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d063      	beq.n	800538a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052c2:	4b6a      	ldr	r3, [pc, #424]	@ (800546c <HAL_RCC_GetSysClockFreq+0x200>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	099b      	lsrs	r3, r3, #6
 80052c8:	2200      	movs	r2, #0
 80052ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052d6:	2300      	movs	r3, #0
 80052d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80052da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052de:	4622      	mov	r2, r4
 80052e0:	462b      	mov	r3, r5
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f04f 0100 	mov.w	r1, #0
 80052ea:	0159      	lsls	r1, r3, #5
 80052ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052f0:	0150      	lsls	r0, r2, #5
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4621      	mov	r1, r4
 80052f8:	1a51      	subs	r1, r2, r1
 80052fa:	6139      	str	r1, [r7, #16]
 80052fc:	4629      	mov	r1, r5
 80052fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005310:	4659      	mov	r1, fp
 8005312:	018b      	lsls	r3, r1, #6
 8005314:	4651      	mov	r1, sl
 8005316:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800531a:	4651      	mov	r1, sl
 800531c:	018a      	lsls	r2, r1, #6
 800531e:	4651      	mov	r1, sl
 8005320:	ebb2 0801 	subs.w	r8, r2, r1
 8005324:	4659      	mov	r1, fp
 8005326:	eb63 0901 	sbc.w	r9, r3, r1
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800533a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800533e:	4690      	mov	r8, r2
 8005340:	4699      	mov	r9, r3
 8005342:	4623      	mov	r3, r4
 8005344:	eb18 0303 	adds.w	r3, r8, r3
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	462b      	mov	r3, r5
 800534c:	eb49 0303 	adc.w	r3, r9, r3
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800535e:	4629      	mov	r1, r5
 8005360:	024b      	lsls	r3, r1, #9
 8005362:	4621      	mov	r1, r4
 8005364:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005368:	4621      	mov	r1, r4
 800536a:	024a      	lsls	r2, r1, #9
 800536c:	4610      	mov	r0, r2
 800536e:	4619      	mov	r1, r3
 8005370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005372:	2200      	movs	r2, #0
 8005374:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005376:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005378:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800537c:	f7fa ff24 	bl	80001c8 <__aeabi_uldivmod>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4613      	mov	r3, r2
 8005386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005388:	e058      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800538a:	4b38      	ldr	r3, [pc, #224]	@ (800546c <HAL_RCC_GetSysClockFreq+0x200>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	099b      	lsrs	r3, r3, #6
 8005390:	2200      	movs	r2, #0
 8005392:	4618      	mov	r0, r3
 8005394:	4611      	mov	r1, r2
 8005396:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800539a:	623b      	str	r3, [r7, #32]
 800539c:	2300      	movs	r3, #0
 800539e:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	f04f 0000 	mov.w	r0, #0
 80053ac:	f04f 0100 	mov.w	r1, #0
 80053b0:	0159      	lsls	r1, r3, #5
 80053b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053b6:	0150      	lsls	r0, r2, #5
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4641      	mov	r1, r8
 80053be:	ebb2 0a01 	subs.w	sl, r2, r1
 80053c2:	4649      	mov	r1, r9
 80053c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053dc:	ebb2 040a 	subs.w	r4, r2, sl
 80053e0:	eb63 050b 	sbc.w	r5, r3, fp
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	00eb      	lsls	r3, r5, #3
 80053ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053f2:	00e2      	lsls	r2, r4, #3
 80053f4:	4614      	mov	r4, r2
 80053f6:	461d      	mov	r5, r3
 80053f8:	4643      	mov	r3, r8
 80053fa:	18e3      	adds	r3, r4, r3
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	464b      	mov	r3, r9
 8005400:	eb45 0303 	adc.w	r3, r5, r3
 8005404:	607b      	str	r3, [r7, #4]
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005412:	4629      	mov	r1, r5
 8005414:	028b      	lsls	r3, r1, #10
 8005416:	4621      	mov	r1, r4
 8005418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800541c:	4621      	mov	r1, r4
 800541e:	028a      	lsls	r2, r1, #10
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005426:	2200      	movs	r2, #0
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	61fa      	str	r2, [r7, #28]
 800542c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005430:	f7fa feca 	bl	80001c8 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4613      	mov	r3, r2
 800543a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800543c:	4b0b      	ldr	r3, [pc, #44]	@ (800546c <HAL_RCC_GetSysClockFreq+0x200>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	0c1b      	lsrs	r3, r3, #16
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	3301      	adds	r3, #1
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800544c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800544e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005456:	e002      	b.n	800545e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005458:	4b05      	ldr	r3, [pc, #20]	@ (8005470 <HAL_RCC_GetSysClockFreq+0x204>)
 800545a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800545c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800545e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005460:	4618      	mov	r0, r3
 8005462:	3750      	adds	r7, #80	@ 0x50
 8005464:	46bd      	mov	sp, r7
 8005466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800546a:	bf00      	nop
 800546c:	40023800 	.word	0x40023800
 8005470:	00f42400 	.word	0x00f42400
 8005474:	007a1200 	.word	0x007a1200

08005478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800547c:	4b03      	ldr	r3, [pc, #12]	@ (800548c <HAL_RCC_GetHCLKFreq+0x14>)
 800547e:	681b      	ldr	r3, [r3, #0]
}
 8005480:	4618      	mov	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20000000 	.word	0x20000000

08005490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005494:	f7ff fff0 	bl	8005478 <HAL_RCC_GetHCLKFreq>
 8005498:	4602      	mov	r2, r0
 800549a:	4b05      	ldr	r3, [pc, #20]	@ (80054b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	0a9b      	lsrs	r3, r3, #10
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	4903      	ldr	r1, [pc, #12]	@ (80054b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a6:	5ccb      	ldrb	r3, [r1, r3]
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40023800 	.word	0x40023800
 80054b4:	08009500 	.word	0x08009500

080054b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d105      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d035      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054e0:	4b62      	ldr	r3, [pc, #392]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054e6:	f7fb fd53 	bl	8000f90 <HAL_GetTick>
 80054ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054ee:	f7fb fd4f 	bl	8000f90 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e0b0      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005500:	4b5b      	ldr	r3, [pc, #364]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f0      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	019a      	lsls	r2, r3, #6
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	071b      	lsls	r3, r3, #28
 8005518:	4955      	ldr	r1, [pc, #340]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005520:	4b52      	ldr	r3, [pc, #328]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005522:	2201      	movs	r2, #1
 8005524:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005526:	f7fb fd33 	bl	8000f90 <HAL_GetTick>
 800552a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800552c:	e008      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800552e:	f7fb fd2f 	bl	8000f90 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e090      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005540:	4b4b      	ldr	r3, [pc, #300]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8083 	beq.w	8005660 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	4b44      	ldr	r3, [pc, #272]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	4a43      	ldr	r2, [pc, #268]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005568:	6413      	str	r3, [r2, #64]	@ 0x40
 800556a:	4b41      	ldr	r3, [pc, #260]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005576:	4b3f      	ldr	r3, [pc, #252]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a3e      	ldr	r2, [pc, #248]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800557c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005580:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005582:	f7fb fd05 	bl	8000f90 <HAL_GetTick>
 8005586:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005588:	e008      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558a:	f7fb fd01 	bl	8000f90 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e062      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800559c:	4b35      	ldr	r3, [pc, #212]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055a8:	4b31      	ldr	r3, [pc, #196]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055b0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d02f      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d028      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055d0:	4b29      	ldr	r3, [pc, #164]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055d6:	4b28      	ldr	r3, [pc, #160]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055dc:	4a24      	ldr	r2, [pc, #144]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055e2:	4b23      	ldr	r3, [pc, #140]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d114      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055ee:	f7fb fccf 	bl	8000f90 <HAL_GetTick>
 80055f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f4:	e00a      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f6:	f7fb fccb 	bl	8000f90 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005604:	4293      	cmp	r3, r2
 8005606:	d901      	bls.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e02a      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800560c:	4b18      	ldr	r3, [pc, #96]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800560e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0ee      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005624:	d10d      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005626:	4b12      	ldr	r3, [pc, #72]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800563a:	490d      	ldr	r1, [pc, #52]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800563c:	4313      	orrs	r3, r2
 800563e:	608b      	str	r3, [r1, #8]
 8005640:	e005      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005642:	4b0b      	ldr	r3, [pc, #44]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	4a0a      	ldr	r2, [pc, #40]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005648:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800564c:	6093      	str	r3, [r2, #8]
 800564e:	4b08      	ldr	r3, [pc, #32]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005650:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800565a:	4905      	ldr	r1, [pc, #20]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800565c:	4313      	orrs	r3, r2
 800565e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	42470068 	.word	0x42470068
 8005670:	40023800 	.word	0x40023800
 8005674:	40007000 	.word	0x40007000
 8005678:	42470e40 	.word	0x42470e40

0800567c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d13f      	bne.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800569a:	4b24      	ldr	r3, [pc, #144]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056a2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d006      	beq.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056b0:	d12f      	bne.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80056b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80056b4:	617b      	str	r3, [r7, #20]
          break;
 80056b6:	e02f      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056b8:	4b1c      	ldr	r3, [pc, #112]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056c4:	d108      	bne.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056c6:	4b19      	ldr	r3, [pc, #100]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056ce:	4a19      	ldr	r2, [pc, #100]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	e007      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056d8:	4b14      	ldr	r3, [pc, #80]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056e0:	4a15      	ldr	r2, [pc, #84]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80056e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80056e8:	4b10      	ldr	r3, [pc, #64]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ee:	099b      	lsrs	r3, r3, #6
 80056f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80056fc:	4b0b      	ldr	r3, [pc, #44]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005702:	0f1b      	lsrs	r3, r3, #28
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	fbb2 f3f3 	udiv	r3, r2, r3
 800570e:	617b      	str	r3, [r7, #20]
          break;
 8005710:	e002      	b.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
          break;
 8005716:	bf00      	nop
        }
      }
      break;
 8005718:	e000      	b.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800571a:	bf00      	nop
    }
  }
  return frequency;
 800571c:	697b      	ldr	r3, [r7, #20]
}
 800571e:	4618      	mov	r0, r3
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40023800 	.word	0x40023800
 8005730:	00bb8000 	.word	0x00bb8000
 8005734:	007a1200 	.word	0x007a1200
 8005738:	00f42400 	.word	0x00f42400

0800573c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e07b      	b.n	8005846 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d108      	bne.n	8005768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800575e:	d009      	beq.n	8005774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	61da      	str	r2, [r3, #28]
 8005766:	e005      	b.n	8005774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fb faa4 	bl	8000cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f8:	ea42 0103 	orr.w	r1, r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005800:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	0c1b      	lsrs	r3, r3, #16
 8005812:	f003 0104 	and.w	r1, r3, #4
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581a:	f003 0210 	and.w	r2, r3, #16
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005834:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800584e:	b084      	sub	sp, #16
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	f107 001c 	add.w	r0, r7, #28
 800585c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005860:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005864:	2b01      	cmp	r3, #1
 8005866:	d123      	bne.n	80058b0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800587c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005890:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005894:	2b01      	cmp	r3, #1
 8005896:	d105      	bne.n	80058a4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f9dc 	bl	8005c62 <USB_CoreReset>
 80058aa:	4603      	mov	r3, r0
 80058ac:	73fb      	strb	r3, [r7, #15]
 80058ae:	e01b      	b.n	80058e8 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f9d0 	bl	8005c62 <USB_CoreReset>
 80058c2:	4603      	mov	r3, r0
 80058c4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80058da:	e005      	b.n	80058e8 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058e8:	7fbb      	ldrb	r3, [r7, #30]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d10b      	bne.n	8005906 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f043 0206 	orr.w	r2, r3, #6
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005912:	b004      	add	sp, #16
 8005914:	4770      	bx	lr

08005916 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f043 0201 	orr.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f023 0201 	bic.w	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	460b      	mov	r3, r1
 8005964:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d115      	bne.n	80059a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005988:	200a      	movs	r0, #10
 800598a:	f7fb fb0d 	bl	8000fa8 <HAL_Delay>
      ms += 10U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	330a      	adds	r3, #10
 8005992:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f956 	bl	8005c46 <USB_GetMode>
 800599a:	4603      	mov	r3, r0
 800599c:	2b01      	cmp	r3, #1
 800599e:	d01e      	beq.n	80059de <USB_SetCurrentMode+0x84>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80059a4:	d9f0      	bls.n	8005988 <USB_SetCurrentMode+0x2e>
 80059a6:	e01a      	b.n	80059de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d115      	bne.n	80059da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059ba:	200a      	movs	r0, #10
 80059bc:	f7fb faf4 	bl	8000fa8 <HAL_Delay>
      ms += 10U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	330a      	adds	r3, #10
 80059c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f93d 	bl	8005c46 <USB_GetMode>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d005      	beq.n	80059de <USB_SetCurrentMode+0x84>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80059d6:	d9f0      	bls.n	80059ba <USB_SetCurrentMode+0x60>
 80059d8:	e001      	b.n	80059de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e005      	b.n	80059ea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80059e2:	d101      	bne.n	80059e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3301      	adds	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a0c:	d901      	bls.n	8005a12 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e01b      	b.n	8005a4a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	daf2      	bge.n	8005a00 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	019b      	lsls	r3, r3, #6
 8005a22:	f043 0220 	orr.w	r2, r3, #32
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a36:	d901      	bls.n	8005a3c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e006      	b.n	8005a4a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d0f0      	beq.n	8005a2a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3301      	adds	r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a6e:	d901      	bls.n	8005a74 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e018      	b.n	8005aa6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	daf2      	bge.n	8005a62 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2210      	movs	r2, #16
 8005a84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a92:	d901      	bls.n	8005a98 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e006      	b.n	8005aa6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b10      	cmp	r3, #16
 8005aa2:	d0f0      	beq.n	8005a86 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b089      	sub	sp, #36	@ 0x24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	4611      	mov	r1, r2
 8005abe:	461a      	mov	r2, r3
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	71fb      	strb	r3, [r7, #7]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ad0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d123      	bne.n	8005b20 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ad8:	88bb      	ldrh	r3, [r7, #4]
 8005ada:	3303      	adds	r3, #3
 8005adc:	089b      	lsrs	r3, r3, #2
 8005ade:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	e018      	b.n	8005b18 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	031a      	lsls	r2, r3, #12
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005af2:	461a      	mov	r2, r3
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	3301      	adds	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3301      	adds	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	3301      	adds	r3, #1
 8005b16:	61bb      	str	r3, [r7, #24]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d3e2      	bcc.n	8005ae6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3724      	adds	r7, #36	@ 0x24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b08b      	sub	sp, #44	@ 0x2c
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b44:	88fb      	ldrh	r3, [r7, #6]
 8005b46:	089b      	lsrs	r3, r3, #2
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b4c:	88fb      	ldrh	r3, [r7, #6]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b54:	2300      	movs	r3, #0
 8005b56:	623b      	str	r3, [r7, #32]
 8005b58:	e014      	b.n	8005b84 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	3301      	adds	r3, #1
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	3301      	adds	r3, #1
 8005b70:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	3301      	adds	r3, #1
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	3301      	adds	r3, #1
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	6a3a      	ldr	r2, [r7, #32]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d3e6      	bcc.n	8005b5a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b8c:	8bfb      	ldrh	r3, [r7, #30]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01e      	beq.n	8005bd0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	f107 0310 	add.w	r3, r7, #16
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	701a      	strb	r2, [r3, #0]
      i++;
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005bc4:	8bfb      	ldrh	r3, [r7, #30]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bca:	8bfb      	ldrh	r3, [r7, #30]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1ea      	bne.n	8005ba6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	372c      	adds	r7, #44	@ 0x2c
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b085      	sub	sp, #20
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	4013      	ands	r3, r2
 8005c36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c38:	68bb      	ldr	r3, [r7, #8]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f003 0301 	and.w	r3, r3, #1
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3301      	adds	r3, #1
 8005c72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c7a:	d901      	bls.n	8005c80 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e01b      	b.n	8005cb8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	daf2      	bge.n	8005c6e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f043 0201 	orr.w	r2, r3, #1
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ca4:	d901      	bls.n	8005caa <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e006      	b.n	8005cb8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d0f0      	beq.n	8005c98 <USB_CoreReset+0x36>

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b086      	sub	sp, #24
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d119      	bne.n	8005d4e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d10a      	bne.n	8005d38 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d30:	f043 0304 	orr.w	r3, r3, #4
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	e014      	b.n	8005d62 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d46:	f023 0304 	bic.w	r3, r3, #4
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e009      	b.n	8005d62 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d5c:	f023 0304 	bic.w	r3, r3, #4
 8005d60:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d62:	2110      	movs	r1, #16
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff fe44 	bl	80059f2 <USB_FlushTxFifo>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff fe6e 	bl	8005a56 <USB_FlushRxFifo>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d84:	2300      	movs	r3, #0
 8005d86:	613b      	str	r3, [r7, #16]
 8005d88:	e015      	b.n	8005db6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d96:	461a      	mov	r2, r3
 8005d98:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005daa:	461a      	mov	r2, r3
 8005dac:	2300      	movs	r3, #0
 8005dae:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	3301      	adds	r3, #1
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005dba:	461a      	mov	r2, r3
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d3e3      	bcc.n	8005d8a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f04f 32ff 	mov.w	r2, #4294967295
 8005dce:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a18      	ldr	r2, [pc, #96]	@ (8005e34 <USB_HostInit+0x170>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d10b      	bne.n	8005df0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dde:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a15      	ldr	r2, [pc, #84]	@ (8005e38 <USB_HostInit+0x174>)
 8005de4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a14      	ldr	r2, [pc, #80]	@ (8005e3c <USB_HostInit+0x178>)
 8005dea:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005dee:	e009      	b.n	8005e04 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2280      	movs	r2, #128	@ 0x80
 8005df4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a11      	ldr	r2, [pc, #68]	@ (8005e40 <USB_HostInit+0x17c>)
 8005dfa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a11      	ldr	r2, [pc, #68]	@ (8005e44 <USB_HostInit+0x180>)
 8005e00:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d105      	bne.n	8005e18 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f043 0210 	orr.w	r2, r3, #16
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e48 <USB_HostInit+0x184>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e30:	b004      	add	sp, #16
 8005e32:	4770      	bx	lr
 8005e34:	40040000 	.word	0x40040000
 8005e38:	01000200 	.word	0x01000200
 8005e3c:	00e00300 	.word	0x00e00300
 8005e40:	00600080 	.word	0x00600080
 8005e44:	004000e0 	.word	0x004000e0
 8005e48:	a3200008 	.word	0xa3200008

08005e4c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005e84:	4313      	orrs	r3, r2
 8005e86:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d107      	bne.n	8005e9e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e94:	461a      	mov	r2, r3
 8005e96:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005e9a:	6053      	str	r3, [r2, #4]
 8005e9c:	e00c      	b.n	8005eb8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d107      	bne.n	8005eb4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005eb0:	6053      	str	r3, [r2, #4]
 8005eb2:	e001      	b.n	8005eb8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005ee6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ef4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ef6:	2064      	movs	r0, #100	@ 0x64
 8005ef8:	f7fb f856 	bl	8000fa8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f08:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f0a:	200a      	movs	r0, #10
 8005f0c:	f7fb f84c 	bl	8000fa8 <HAL_Delay>

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005f3e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <USB_DriveVbus+0x44>
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d106      	bne.n	8005f5e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f5c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f68:	d109      	bne.n	8005f7e <USB_DriveVbus+0x64>
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d106      	bne.n	8005f7e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f7c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	0c5b      	lsrs	r3, r3, #17
 8005faa:	f003 0303 	and.w	r3, r3, #3
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	b29b      	uxth	r3, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	461a      	mov	r2, r3
 8005fea:	4603      	mov	r3, r0
 8005fec:	70fb      	strb	r3, [r7, #3]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	70bb      	strb	r3, [r7, #2]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	4413      	add	r3, r2
 8006006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800600a:	461a      	mov	r2, r3
 800600c:	f04f 33ff 	mov.w	r3, #4294967295
 8006010:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006012:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006016:	2b03      	cmp	r3, #3
 8006018:	d87c      	bhi.n	8006114 <USB_HC_Init+0x138>
 800601a:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <USB_HC_Init+0x44>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006031 	.word	0x08006031
 8006024:	080060d7 	.word	0x080060d7
 8006028:	08006031 	.word	0x08006031
 800602c:	08006099 	.word	0x08006099
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800603c:	461a      	mov	r2, r3
 800603e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006042:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006044:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006048:	2b00      	cmp	r3, #0
 800604a:	da10      	bge.n	800606e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	78fa      	ldrb	r2, [r7, #3]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	440a      	add	r2, r1
 8006062:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800606a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800606c:	e055      	b.n	800611a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a6f      	ldr	r2, [pc, #444]	@ (8006230 <USB_HC_Init+0x254>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d151      	bne.n	800611a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	78fa      	ldrb	r2, [r7, #3]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	440a      	add	r2, r1
 800608c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006090:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006094:	60d3      	str	r3, [r2, #12]
      break;
 8006096:	e040      	b.n	800611a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a4:	461a      	mov	r2, r3
 80060a6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80060aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	da34      	bge.n	800611e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	78fa      	ldrb	r2, [r7, #3]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80060d4:	e023      	b.n	800611e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e2:	461a      	mov	r2, r3
 80060e4:	f240 2325 	movw	r3, #549	@ 0x225
 80060e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	da17      	bge.n	8006122 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	440a      	add	r2, r1
 8006108:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800610c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006110:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006112:	e006      	b.n	8006122 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	77fb      	strb	r3, [r7, #31]
      break;
 8006118:	e004      	b.n	8006124 <USB_HC_Init+0x148>
      break;
 800611a:	bf00      	nop
 800611c:	e002      	b.n	8006124 <USB_HC_Init+0x148>
      break;
 800611e:	bf00      	nop
 8006120:	e000      	b.n	8006124 <USB_HC_Init+0x148>
      break;
 8006122:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4413      	add	r3, r2
 800612c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006130:	461a      	mov	r2, r3
 8006132:	2300      	movs	r3, #0
 8006134:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	4413      	add	r3, r2
 800613e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	78fa      	ldrb	r2, [r7, #3]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	440a      	add	r2, r1
 800614c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006150:	f043 0302 	orr.w	r3, r3, #2
 8006154:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	2101      	movs	r1, #1
 8006166:	fa01 f303 	lsl.w	r3, r1, r3
 800616a:	6939      	ldr	r1, [r7, #16]
 800616c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006170:	4313      	orrs	r3, r2
 8006172:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006180:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006184:	2b00      	cmp	r3, #0
 8006186:	da03      	bge.n	8006190 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006188:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	e001      	b.n	8006194 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff fef9 	bl	8005f8c <USB_GetHostSpeed>
 800619a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800619c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d106      	bne.n	80061b2 <USB_HC_Init+0x1d6>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d003      	beq.n	80061b2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80061aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	e001      	b.n	80061b6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061b6:	787b      	ldrb	r3, [r7, #1]
 80061b8:	059b      	lsls	r3, r3, #22
 80061ba:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061be:	78bb      	ldrb	r3, [r7, #2]
 80061c0:	02db      	lsls	r3, r3, #11
 80061c2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061c6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80061cc:	049b      	lsls	r3, r3, #18
 80061ce:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061d2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80061d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80061d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061da:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	431a      	orrs	r2, r3
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061e4:	78fa      	ldrb	r2, [r7, #3]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80061f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061f4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80061f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d003      	beq.n	8006206 <USB_HC_Init+0x22a>
 80061fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d10f      	bne.n	8006226 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4413      	add	r3, r2
 800620e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	78fa      	ldrb	r2, [r7, #3]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	440a      	add	r2, r1
 800621c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006220:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006224:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006226:	7ffb      	ldrb	r3, [r7, #31]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3720      	adds	r7, #32
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40040000 	.word	0x40040000

08006234 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08c      	sub	sp, #48	@ 0x30
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	4613      	mov	r3, r2
 8006240:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	785b      	ldrb	r3, [r3, #1]
 800624a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800624c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006250:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4a5d      	ldr	r2, [pc, #372]	@ (80063cc <USB_HC_StartXfer+0x198>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d12f      	bne.n	80062ba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d11c      	bne.n	800629a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	7c9b      	ldrb	r3, [r3, #18]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <USB_HC_StartXfer+0x3c>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	7c9b      	ldrb	r3, [r3, #18]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d124      	bne.n	80062ba <USB_HC_StartXfer+0x86>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	799b      	ldrb	r3, [r3, #6]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d120      	bne.n	80062ba <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	4413      	add	r3, r2
 8006280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	6a3a      	ldr	r2, [r7, #32]
 800628c:	440a      	add	r2, r1
 800628e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006296:	60d3      	str	r3, [r2, #12]
 8006298:	e00f      	b.n	80062ba <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	791b      	ldrb	r3, [r3, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10b      	bne.n	80062ba <USB_HC_StartXfer+0x86>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	795b      	ldrb	r3, [r3, #5]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d107      	bne.n	80062ba <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	4619      	mov	r1, r3
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fb6b 	bl	800698c <USB_DoPing>
        return HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	e232      	b.n	8006720 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	799b      	ldrb	r3, [r3, #6]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d158      	bne.n	8006374 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80062c2:	2301      	movs	r3, #1
 80062c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	78db      	ldrb	r3, [r3, #3]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	8a92      	ldrh	r2, [r2, #20]
 80062d4:	fb03 f202 	mul.w	r2, r3, r2
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	61da      	str	r2, [r3, #28]
 80062dc:	e07c      	b.n	80063d8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	7c9b      	ldrb	r3, [r3, #18]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d130      	bne.n	8006348 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	2bbc      	cmp	r3, #188	@ 0xbc
 80062ec:	d918      	bls.n	8006320 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	8a9b      	ldrh	r3, [r3, #20]
 80062f2:	461a      	mov	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d003      	beq.n	8006310 <USB_HC_StartXfer+0xdc>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d103      	bne.n	8006318 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2202      	movs	r2, #2
 8006314:	60da      	str	r2, [r3, #12]
 8006316:	e05f      	b.n	80063d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2201      	movs	r2, #1
 800631c:	60da      	str	r2, [r3, #12]
 800631e:	e05b      	b.n	80063d8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6a1a      	ldr	r2, [r3, #32]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d007      	beq.n	8006340 <USB_HC_StartXfer+0x10c>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d003      	beq.n	8006340 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2204      	movs	r2, #4
 800633c:	60da      	str	r2, [r3, #12]
 800633e:	e04b      	b.n	80063d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2203      	movs	r2, #3
 8006344:	60da      	str	r2, [r3, #12]
 8006346:	e047      	b.n	80063d8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d10d      	bne.n	800636a <USB_HC_StartXfer+0x136>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	8a92      	ldrh	r2, [r2, #20]
 8006356:	4293      	cmp	r3, r2
 8006358:	d907      	bls.n	800636a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800635a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	8a92      	ldrh	r2, [r2, #20]
 8006360:	fb03 f202 	mul.w	r2, r3, r2
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	61da      	str	r2, [r3, #28]
 8006368:	e036      	b.n	80063d8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6a1a      	ldr	r2, [r3, #32]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	61da      	str	r2, [r3, #28]
 8006372:	e031      	b.n	80063d8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d018      	beq.n	80063ae <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	8a92      	ldrh	r2, [r2, #20]
 8006384:	4413      	add	r3, r2
 8006386:	3b01      	subs	r3, #1
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	8a92      	ldrh	r2, [r2, #20]
 800638c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006390:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006392:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006394:	8b7b      	ldrh	r3, [r7, #26]
 8006396:	429a      	cmp	r2, r3
 8006398:	d90b      	bls.n	80063b2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800639a:	8b7b      	ldrh	r3, [r7, #26]
 800639c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800639e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	8a92      	ldrh	r2, [r2, #20]
 80063a4:	fb03 f202 	mul.w	r2, r3, r2
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	61da      	str	r2, [r3, #28]
 80063ac:	e001      	b.n	80063b2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80063ae:	2301      	movs	r3, #1
 80063b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	78db      	ldrb	r3, [r3, #3]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	8a92      	ldrh	r2, [r2, #20]
 80063c0:	fb03 f202 	mul.w	r2, r3, r2
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	61da      	str	r2, [r3, #28]
 80063c8:	e006      	b.n	80063d8 <USB_HC_StartXfer+0x1a4>
 80063ca:	bf00      	nop
 80063cc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	6a1a      	ldr	r2, [r3, #32]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063e2:	04d9      	lsls	r1, r3, #19
 80063e4:	4ba3      	ldr	r3, [pc, #652]	@ (8006674 <USB_HC_StartXfer+0x440>)
 80063e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	7d9b      	ldrb	r3, [r3, #22]
 80063ee:	075b      	lsls	r3, r3, #29
 80063f0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063f4:	69f9      	ldr	r1, [r7, #28]
 80063f6:	0148      	lsls	r0, r1, #5
 80063f8:	6a39      	ldr	r1, [r7, #32]
 80063fa:	4401      	add	r1, r0
 80063fc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006400:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006402:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d009      	beq.n	800641e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6999      	ldr	r1, [r3, #24]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800641a:	460a      	mov	r2, r1
 800641c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	bf0c      	ite	eq
 800642e:	2301      	moveq	r3, #1
 8006430:	2300      	movne	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	4413      	add	r3, r2
 800643e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	6a3a      	ldr	r2, [r7, #32]
 800644a:	440a      	add	r2, r1
 800644c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006450:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006454:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	4413      	add	r3, r2
 800645e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	7e7b      	ldrb	r3, [r7, #25]
 8006466:	075b      	lsls	r3, r3, #29
 8006468:	69f9      	ldr	r1, [r7, #28]
 800646a:	0148      	lsls	r0, r1, #5
 800646c:	6a39      	ldr	r1, [r7, #32]
 800646e:	4401      	add	r1, r0
 8006470:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006474:	4313      	orrs	r3, r2
 8006476:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	799b      	ldrb	r3, [r3, #6]
 800647c:	2b01      	cmp	r3, #1
 800647e:	f040 80c3 	bne.w	8006608 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	7c5b      	ldrb	r3, [r3, #17]
 8006486:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800648c:	4313      	orrs	r3, r2
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	6a3a      	ldr	r2, [r7, #32]
 8006494:	440a      	add	r2, r1
 8006496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800649a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800649e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	6a3a      	ldr	r2, [r7, #32]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064ba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80064be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	79db      	ldrb	r3, [r3, #7]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d123      	bne.n	8006510 <USB_HC_StartXfer+0x2dc>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	78db      	ldrb	r3, [r3, #3]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d11f      	bne.n	8006510 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	6a3a      	ldr	r2, [r7, #32]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ee:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	6a3a      	ldr	r2, [r7, #32]
 8006504:	440a      	add	r2, r1
 8006506:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800650a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800650e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	7c9b      	ldrb	r3, [r3, #18]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d003      	beq.n	8006520 <USB_HC_StartXfer+0x2ec>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	7c9b      	ldrb	r3, [r3, #18]
 800651c:	2b03      	cmp	r3, #3
 800651e:	d117      	bne.n	8006550 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006524:	2b01      	cmp	r3, #1
 8006526:	d113      	bne.n	8006550 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	78db      	ldrb	r3, [r3, #3]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d10f      	bne.n	8006550 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	6a3a      	ldr	r2, [r7, #32]
 8006544:	440a      	add	r2, r1
 8006546:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800654a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800654e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	7c9b      	ldrb	r3, [r3, #18]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d162      	bne.n	800661e <USB_HC_StartXfer+0x3ea>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	78db      	ldrb	r3, [r3, #3]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d15e      	bne.n	800661e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	3b01      	subs	r3, #1
 8006566:	2b03      	cmp	r3, #3
 8006568:	d858      	bhi.n	800661c <USB_HC_StartXfer+0x3e8>
 800656a:	a201      	add	r2, pc, #4	@ (adr r2, 8006570 <USB_HC_StartXfer+0x33c>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	08006581 	.word	0x08006581
 8006574:	080065a3 	.word	0x080065a3
 8006578:	080065c5 	.word	0x080065c5
 800657c:	080065e7 	.word	0x080065e7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	4413      	add	r3, r2
 8006588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	69fa      	ldr	r2, [r7, #28]
 8006590:	0151      	lsls	r1, r2, #5
 8006592:	6a3a      	ldr	r2, [r7, #32]
 8006594:	440a      	add	r2, r1
 8006596:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800659a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800659e:	6053      	str	r3, [r2, #4]
          break;
 80065a0:	e03d      	b.n	800661e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	6a3a      	ldr	r2, [r7, #32]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065bc:	f043 030e 	orr.w	r3, r3, #14
 80065c0:	6053      	str	r3, [r2, #4]
          break;
 80065c2:	e02c      	b.n	800661e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	0151      	lsls	r1, r2, #5
 80065d6:	6a3a      	ldr	r2, [r7, #32]
 80065d8:	440a      	add	r2, r1
 80065da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065e2:	6053      	str	r3, [r2, #4]
          break;
 80065e4:	e01b      	b.n	800661e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	6a3a      	ldr	r2, [r7, #32]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006600:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006604:	6053      	str	r3, [r2, #4]
          break;
 8006606:	e00a      	b.n	800661e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	4413      	add	r3, r2
 8006610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006614:	461a      	mov	r2, r3
 8006616:	2300      	movs	r3, #0
 8006618:	6053      	str	r3, [r2, #4]
 800661a:	e000      	b.n	800661e <USB_HC_StartXfer+0x3ea>
          break;
 800661c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006634:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	78db      	ldrb	r3, [r3, #3]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	e003      	b.n	8006650 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800664e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006656:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	4413      	add	r3, r2
 8006660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006664:	461a      	mov	r2, r3
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	e055      	b.n	8006720 <USB_HC_StartXfer+0x4ec>
 8006674:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	78db      	ldrb	r3, [r3, #3]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d14e      	bne.n	800671e <USB_HC_StartXfer+0x4ea>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d04a      	beq.n	800671e <USB_HC_StartXfer+0x4ea>
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	79db      	ldrb	r3, [r3, #7]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d146      	bne.n	800671e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	7c9b      	ldrb	r3, [r3, #18]
 8006694:	2b03      	cmp	r3, #3
 8006696:	d831      	bhi.n	80066fc <USB_HC_StartXfer+0x4c8>
 8006698:	a201      	add	r2, pc, #4	@ (adr r2, 80066a0 <USB_HC_StartXfer+0x46c>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	080066b1 	.word	0x080066b1
 80066a4:	080066d5 	.word	0x080066d5
 80066a8:	080066b1 	.word	0x080066b1
 80066ac:	080066d5 	.word	0x080066d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	3303      	adds	r3, #3
 80066b6:	089b      	lsrs	r3, r3, #2
 80066b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80066ba:	8afa      	ldrh	r2, [r7, #22]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d91c      	bls.n	8006700 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f043 0220 	orr.w	r2, r3, #32
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80066d2:	e015      	b.n	8006700 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	3303      	adds	r3, #3
 80066da:	089b      	lsrs	r3, r3, #2
 80066dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80066de:	8afa      	ldrh	r2, [r7, #22]
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d90a      	bls.n	8006704 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80066fa:	e003      	b.n	8006704 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80066fc:	bf00      	nop
 80066fe:	e002      	b.n	8006706 <USB_HC_StartXfer+0x4d2>
        break;
 8006700:	bf00      	nop
 8006702:	e000      	b.n	8006706 <USB_HC_StartXfer+0x4d2>
        break;
 8006704:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	6999      	ldr	r1, [r3, #24]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	785a      	ldrb	r2, [r3, #1]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	b29b      	uxth	r3, r3
 8006714:	2000      	movs	r0, #0
 8006716:	9000      	str	r0, [sp, #0]
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff f9ca 	bl	8005ab2 <USB_WritePacket>
  }

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3728      	adds	r7, #40	@ 0x28
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	b29b      	uxth	r3, r3
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800674a:	b480      	push	{r7}
 800674c:	b089      	sub	sp, #36	@ 0x24
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4413      	add	r3, r2
 800676a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	0c9b      	lsrs	r3, r3, #18
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	0fdb      	lsrs	r3, r3, #31
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	4413      	add	r3, r2
 8006796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	0fdb      	lsrs	r3, r3, #31
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d10d      	bne.n	80067cc <USB_HC_Halt+0x82>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10a      	bne.n	80067cc <USB_HC_Halt+0x82>
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d002      	beq.n	80067c8 <USB_HC_Halt+0x7e>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d101      	bne.n	80067cc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	e0d8      	b.n	800697e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <USB_HC_Halt+0x8e>
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d173      	bne.n	80068c0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	0151      	lsls	r1, r2, #5
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	440a      	add	r2, r1
 80067ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d14a      	bne.n	800689a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006808:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d133      	bne.n	8006878 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	440a      	add	r2, r1
 8006826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800682a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800682e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	440a      	add	r2, r1
 8006846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800684a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800684e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	3301      	adds	r3, #1
 8006854:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800685c:	d82e      	bhi.n	80068bc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006870:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006874:	d0ec      	beq.n	8006850 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006876:	e081      	b.n	800697c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	440a      	add	r2, r1
 800688e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006892:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006896:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006898:	e070      	b.n	800697c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068ba:	e05f      	b.n	800697c <USB_HC_Halt+0x232>
            break;
 80068bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068be:	e05d      	b.n	800697c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d133      	bne.n	8006958 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	0151      	lsls	r1, r2, #5
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	440a      	add	r2, r1
 8006906:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800690a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800690e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	440a      	add	r2, r1
 8006926:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800692a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800692e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	3301      	adds	r3, #1
 8006934:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800693c:	d81d      	bhi.n	800697a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006950:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006954:	d0ec      	beq.n	8006930 <USB_HC_Halt+0x1e6>
 8006956:	e011      	b.n	800697c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	4413      	add	r3, r2
 8006960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	0151      	lsls	r1, r2, #5
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	440a      	add	r2, r1
 800696e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006972:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	e000      	b.n	800697c <USB_HC_Halt+0x232>
          break;
 800697a:	bf00      	nop
    }
  }

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3724      	adds	r7, #36	@ 0x24
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80069a0:	2301      	movs	r3, #1
 80069a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	04da      	lsls	r2, r3, #19
 80069a8:	4b15      	ldr	r3, [pc, #84]	@ (8006a00 <USB_DoPing+0x74>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	0151      	lsls	r1, r2, #5
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	440a      	add	r2, r1
 80069b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ea:	461a      	mov	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	1ff80000 	.word	0x1ff80000

08006a04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7fe ff8d 	bl	8005938 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a1e:	2110      	movs	r1, #16
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7fe ffe6 	bl	80059f2 <USB_FlushTxFifo>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff f810 	bl	8005a56 <USB_FlushRxFifo>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a40:	2300      	movs	r3, #0
 8006a42:	61bb      	str	r3, [r7, #24]
 8006a44:	e01f      	b.n	8006a86 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	3301      	adds	r3, #1
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b0f      	cmp	r3, #15
 8006a8a:	d9dc      	bls.n	8006a46 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61bb      	str	r3, [r7, #24]
 8006a90:	e034      	b.n	8006afc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006aa8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ab0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ab8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ad8:	d80c      	bhi.n	8006af4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006aec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006af0:	d0ec      	beq.n	8006acc <USB_StopHost+0xc8>
 8006af2:	e000      	b.n	8006af6 <USB_StopHost+0xf2>
        break;
 8006af4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	3301      	adds	r3, #1
 8006afa:	61bb      	str	r3, [r7, #24]
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2b0f      	cmp	r3, #15
 8006b00:	d9c7      	bls.n	8006a92 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b08:	461a      	mov	r2, r3
 8006b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f04f 32ff 	mov.w	r2, #4294967295
 8006b16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7fe fefc 	bl	8005916 <USB_EnableGlobalInt>

  return ret;
 8006b1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3720      	adds	r7, #32
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006b28:	b590      	push	{r4, r7, lr}
 8006b2a:	b089      	sub	sp, #36	@ 0x24
 8006b2c:	af04      	add	r7, sp, #16
 8006b2e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006b30:	2301      	movs	r3, #1
 8006b32:	2202      	movs	r2, #2
 8006b34:	2102      	movs	r1, #2
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fc85 	bl	8007446 <USBH_FindInterface>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2bff      	cmp	r3, #255	@ 0xff
 8006b44:	d002      	beq.n	8006b4c <USBH_CDC_InterfaceInit+0x24>
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d901      	bls.n	8006b50 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e13d      	b.n	8006dcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fc5a 	bl	800740e <USBH_SelectInterface>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006b64:	2302      	movs	r3, #2
 8006b66:	e131      	b.n	8006dcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006b6e:	2050      	movs	r0, #80	@ 0x50
 8006b70:	f002 fb64 	bl	800923c <malloc>
 8006b74:	4603      	mov	r3, r0
 8006b76:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e11f      	b.n	8006dcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006b8c:	2250      	movs	r2, #80	@ 0x50
 8006b8e:	2100      	movs	r1, #0
 8006b90:	68b8      	ldr	r0, [r7, #8]
 8006b92:	f002 fc11 	bl	80093b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	211a      	movs	r1, #26
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	b25b      	sxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	da15      	bge.n	8006bda <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	211a      	movs	r1, #26
 8006bb4:	fb01 f303 	mul.w	r3, r1, r3
 8006bb8:	4413      	add	r3, r2
 8006bba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006bbe:	781a      	ldrb	r2, [r3, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	211a      	movs	r1, #26
 8006bca:	fb01 f303 	mul.w	r3, r1, r3
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006bd4:	881a      	ldrh	r2, [r3, #0]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	785b      	ldrb	r3, [r3, #1]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 ffbe 	bl	8008b62 <USBH_AllocPipe>
 8006be6:	4603      	mov	r3, r0
 8006be8:	461a      	mov	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	7819      	ldrb	r1, [r3, #0]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	7858      	ldrb	r0, [r3, #1]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	8952      	ldrh	r2, [r2, #10]
 8006c06:	9202      	str	r2, [sp, #8]
 8006c08:	2203      	movs	r2, #3
 8006c0a:	9201      	str	r2, [sp, #4]
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	4623      	mov	r3, r4
 8006c10:	4602      	mov	r2, r0
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 ff76 	bl	8008b04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f002 fa85 	bl	8009130 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006c26:	2300      	movs	r3, #0
 8006c28:	2200      	movs	r2, #0
 8006c2a:	210a      	movs	r1, #10
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fc0a 	bl	8007446 <USBH_FindInterface>
 8006c32:	4603      	mov	r3, r0
 8006c34:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	2bff      	cmp	r3, #255	@ 0xff
 8006c3a:	d002      	beq.n	8006c42 <USBH_CDC_InterfaceInit+0x11a>
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d901      	bls.n	8006c46 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c42:	2302      	movs	r3, #2
 8006c44:	e0c2      	b.n	8006dcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	211a      	movs	r1, #26
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
 8006c50:	4413      	add	r3, r2
 8006c52:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	b25b      	sxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	da16      	bge.n	8006c8c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	211a      	movs	r1, #26
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	4413      	add	r3, r2
 8006c6a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	211a      	movs	r1, #26
 8006c7a:	fb01 f303 	mul.w	r3, r1, r3
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c84:	881a      	ldrh	r2, [r3, #0]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	835a      	strh	r2, [r3, #26]
 8006c8a:	e015      	b.n	8006cb8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	211a      	movs	r1, #26
 8006c92:	fb01 f303 	mul.w	r3, r1, r3
 8006c96:	4413      	add	r3, r2
 8006c98:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c9c:	781a      	ldrb	r2, [r3, #0]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	211a      	movs	r1, #26
 8006ca8:	fb01 f303 	mul.w	r3, r1, r3
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006cb2:	881a      	ldrh	r2, [r3, #0]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	211a      	movs	r1, #26
 8006cbe:	fb01 f303 	mul.w	r3, r1, r3
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	b25b      	sxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	da16      	bge.n	8006cfe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	211a      	movs	r1, #26
 8006cd6:	fb01 f303 	mul.w	r3, r1, r3
 8006cda:	4413      	add	r3, r2
 8006cdc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	211a      	movs	r1, #26
 8006cec:	fb01 f303 	mul.w	r3, r1, r3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006cf6:	881a      	ldrh	r2, [r3, #0]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	835a      	strh	r2, [r3, #26]
 8006cfc:	e015      	b.n	8006d2a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	211a      	movs	r1, #26
 8006d04:	fb01 f303 	mul.w	r3, r1, r3
 8006d08:	4413      	add	r3, r2
 8006d0a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d0e:	781a      	ldrb	r2, [r3, #0]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	211a      	movs	r1, #26
 8006d1a:	fb01 f303 	mul.w	r3, r1, r3
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006d24:	881a      	ldrh	r2, [r3, #0]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	7b9b      	ldrb	r3, [r3, #14]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 ff16 	bl	8008b62 <USBH_AllocPipe>
 8006d36:	4603      	mov	r3, r0
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	7bdb      	ldrb	r3, [r3, #15]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 ff0c 	bl	8008b62 <USBH_AllocPipe>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	7b59      	ldrb	r1, [r3, #13]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	7b98      	ldrb	r0, [r3, #14]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	8b12      	ldrh	r2, [r2, #24]
 8006d6a:	9202      	str	r2, [sp, #8]
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	9201      	str	r2, [sp, #4]
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	4623      	mov	r3, r4
 8006d74:	4602      	mov	r2, r0
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 fec4 	bl	8008b04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	7b19      	ldrb	r1, [r3, #12]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	7bd8      	ldrb	r0, [r3, #15]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	8b52      	ldrh	r2, [r2, #26]
 8006d94:	9202      	str	r2, [sp, #8]
 8006d96:	2202      	movs	r2, #2
 8006d98:	9201      	str	r2, [sp, #4]
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	4623      	mov	r3, r4
 8006d9e:	4602      	mov	r2, r0
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 feaf 	bl	8008b04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	7b5b      	ldrb	r3, [r3, #13]
 8006db2:	2200      	movs	r2, #0
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f002 f9ba 	bl	8009130 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	7b1b      	ldrb	r3, [r3, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f002 f9b3 	bl	8009130 <USBH_LL_SetToggle>

  return USBH_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd90      	pop	{r4, r7, pc}

08006dd4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00e      	beq.n	8006e0c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fea4 	bl	8008b42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 fecf 	bl	8008ba4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	7b1b      	ldrb	r3, [r3, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00e      	beq.n	8006e32 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	7b1b      	ldrb	r3, [r3, #12]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 fe91 	bl	8008b42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	7b1b      	ldrb	r3, [r3, #12]
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 febc 	bl	8008ba4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	7b5b      	ldrb	r3, [r3, #13]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00e      	beq.n	8006e58 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	7b5b      	ldrb	r3, [r3, #13]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 fe7e 	bl	8008b42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	7b5b      	ldrb	r3, [r3, #13]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 fea9 	bl	8008ba4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f002 f9ed 	bl	800924c <free>
    phost->pActiveClass->pData = 0U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e78:	2200      	movs	r2, #0
 8006e7a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3340      	adds	r3, #64	@ 0x40
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f8b1 	bl	8007006 <GetLineCoding>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ea8:	7afb      	ldrb	r3, [r7, #11]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d105      	bne.n	8006eba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006eb4:	2102      	movs	r1, #2
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006eba:	7afb      	ldrb	r3, [r7, #11]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d877      	bhi.n	8006fd8 <USBH_CDC_Process+0x114>
 8006ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef0 <USBH_CDC_Process+0x2c>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f05 	.word	0x08006f05
 8006ef4:	08006f0b 	.word	0x08006f0b
 8006ef8:	08006f3b 	.word	0x08006f3b
 8006efc:	08006faf 	.word	0x08006faf
 8006f00:	08006fbd 	.word	0x08006fbd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]
      break;
 8006f08:	e06d      	b.n	8006fe6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f897 	bl	8007044 <SetLineCoding>
 8006f16:	4603      	mov	r3, r0
 8006f18:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f28:	e058      	b.n	8006fdc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d055      	beq.n	8006fdc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2204      	movs	r2, #4
 8006f34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006f38:	e050      	b.n	8006fdc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	3340      	adds	r3, #64	@ 0x40
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f860 	bl	8007006 <GetLineCoding>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d126      	bne.n	8006f9e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f62:	791b      	ldrb	r3, [r3, #4]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d13b      	bne.n	8006fe0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f72:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d133      	bne.n	8006fe0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f82:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d12b      	bne.n	8006fe0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f90:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d124      	bne.n	8006fe0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f958 	bl	800724c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f9c:	e020      	b.n	8006fe0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d01d      	beq.n	8006fe0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2204      	movs	r2, #4
 8006fa8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006fac:	e018      	b.n	8006fe0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f867 	bl	8007082 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f8da 	bl	800716e <CDC_ProcessReception>
      break;
 8006fba:	e014      	b.n	8006fe6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 f81a 	bl	8007ff8 <USBH_ClrFeature>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006fd6:	e005      	b.n	8006fe4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006fd8:	bf00      	nop
 8006fda:	e004      	b.n	8006fe6 <USBH_CDC_Process+0x122>
      break;
 8006fdc:	bf00      	nop
 8006fde:	e002      	b.n	8006fe6 <USBH_CDC_Process+0x122>
      break;
 8006fe0:	bf00      	nop
 8006fe2:	e000      	b.n	8006fe6 <USBH_CDC_Process+0x122>
      break;
 8006fe4:	bf00      	nop

  }

  return status;
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	22a1      	movs	r2, #161	@ 0xa1
 8007014:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2221      	movs	r2, #33	@ 0x21
 800701a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2207      	movs	r2, #7
 800702c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2207      	movs	r2, #7
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fb14 	bl	8008662 <USBH_CtlReq>
 800703a:	4603      	mov	r3, r0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2221      	movs	r2, #33	@ 0x21
 8007052:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2207      	movs	r2, #7
 800706a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2207      	movs	r2, #7
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 faf5 	bl	8008662 <USBH_CtlReq>
 8007078:	4603      	mov	r3, r0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b086      	sub	sp, #24
 8007086:	af02      	add	r7, sp, #8
 8007088:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007094:	2300      	movs	r3, #0
 8007096:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d002      	beq.n	80070a8 <CDC_ProcessTransmission+0x26>
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d023      	beq.n	80070ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80070a6:	e05e      	b.n	8007166 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	8b12      	ldrh	r2, [r2, #24]
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d90b      	bls.n	80070cc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	69d9      	ldr	r1, [r3, #28]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8b1a      	ldrh	r2, [r3, #24]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	7b5b      	ldrb	r3, [r3, #13]
 80070c0:	2001      	movs	r0, #1
 80070c2:	9000      	str	r0, [sp, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 fcda 	bl	8008a7e <USBH_BulkSendData>
 80070ca:	e00b      	b.n	80070e4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	7b5b      	ldrb	r3, [r3, #13]
 80070da:	2001      	movs	r0, #1
 80070dc:	9000      	str	r0, [sp, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 fccd 	bl	8008a7e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80070ec:	e03b      	b.n	8007166 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	7b5b      	ldrb	r3, [r3, #13]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 fff1 	bl	80090dc <USBH_LL_GetURBState>
 80070fa:	4603      	mov	r3, r0
 80070fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80070fe:	7afb      	ldrb	r3, [r7, #11]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d128      	bne.n	8007156 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	8b12      	ldrh	r2, [r2, #24]
 800710c:	4293      	cmp	r3, r2
 800710e:	d90e      	bls.n	800712e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	8b12      	ldrh	r2, [r2, #24]
 8007118:	1a9a      	subs	r2, r3, r2
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	8b12      	ldrh	r2, [r2, #24]
 8007126:	441a      	add	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	61da      	str	r2, [r3, #28]
 800712c:	e002      	b.n	8007134 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007144:	e00e      	b.n	8007164 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f868 	bl	8007224 <USBH_CDC_TransmitCallback>
      break;
 8007154:	e006      	b.n	8007164 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007156:	7afb      	ldrb	r3, [r7, #11]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d103      	bne.n	8007164 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007164:	bf00      	nop
  }
}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b086      	sub	sp, #24
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007180:	2300      	movs	r3, #0
 8007182:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800718a:	2b03      	cmp	r3, #3
 800718c:	d002      	beq.n	8007194 <CDC_ProcessReception+0x26>
 800718e:	2b04      	cmp	r3, #4
 8007190:	d00e      	beq.n	80071b0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007192:	e043      	b.n	800721c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	6a19      	ldr	r1, [r3, #32]
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	8b5a      	ldrh	r2, [r3, #26]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	7b1b      	ldrb	r3, [r3, #12]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 fc91 	bl	8008ac8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2204      	movs	r2, #4
 80071aa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80071ae:	e035      	b.n	800721c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	7b1b      	ldrb	r3, [r3, #12]
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 ff90 	bl	80090dc <USBH_LL_GetURBState>
 80071bc:	4603      	mov	r3, r0
 80071be:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80071c0:	7cfb      	ldrb	r3, [r7, #19]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d129      	bne.n	800721a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	7b1b      	ldrb	r3, [r3, #12]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 fef3 	bl	8008fb8 <USBH_LL_GetLastXferSize>
 80071d2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d016      	beq.n	800720c <CDC_ProcessReception+0x9e>
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	8b5b      	ldrh	r3, [r3, #26]
 80071e2:	461a      	mov	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d110      	bne.n	800720c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	1ad2      	subs	r2, r2, r3
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	6a1a      	ldr	r2, [r3, #32]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	441a      	add	r2, r3
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2203      	movs	r2, #3
 8007206:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800720a:	e006      	b.n	800721a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f80f 	bl	8007238 <USBH_CDC_ReceiveCallback>
      break;
 800721a:	bf00      	nop
  }
}
 800721c:	bf00      	nop
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4613      	mov	r3, r2
 800726c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007274:	2302      	movs	r3, #2
 8007276:	e029      	b.n	80072cc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	79fa      	ldrb	r2, [r7, #7]
 800727c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f81f 	bl	80072d4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f001 fdc3 	bl	8008e50 <USBH_LL_Init>

  return USBH_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	e009      	b.n	80072fa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	33e0      	adds	r3, #224	@ 0xe0
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	2200      	movs	r2, #0
 80072f2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3301      	adds	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b0f      	cmp	r3, #15
 80072fe:	d9f2      	bls.n	80072e6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e009      	b.n	800731a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3301      	adds	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007320:	d3f1      	bcc.n	8007306 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2240      	movs	r2, #64	@ 0x40
 8007346:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	331c      	adds	r3, #28
 8007372:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007376:	2100      	movs	r1, #0
 8007378:	4618      	mov	r0, r3
 800737a:	f002 f81d 	bl	80093b8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007388:	2100      	movs	r1, #0
 800738a:	4618      	mov	r0, r3
 800738c:	f002 f814 	bl	80093b8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007396:	2212      	movs	r2, #18
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f002 f80c 	bl	80093b8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80073a6:	223e      	movs	r2, #62	@ 0x3e
 80073a8:	2100      	movs	r1, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f002 f804 	bl	80093b8 <memset>

  return USBH_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d016      	beq.n	80073fc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10e      	bne.n	80073f6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80073de:	1c59      	adds	r1, r3, #1
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	33de      	adds	r3, #222	@ 0xde
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]
 80073f4:	e004      	b.n	8007400 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80073f6:	2302      	movs	r3, #2
 80073f8:	73fb      	strb	r3, [r7, #15]
 80073fa:	e001      	b.n	8007400 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80073fc:	2302      	movs	r3, #2
 80073fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	460b      	mov	r3, r1
 8007418:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007424:	78fa      	ldrb	r2, [r7, #3]
 8007426:	429a      	cmp	r2, r3
 8007428:	d204      	bcs.n	8007434 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	78fa      	ldrb	r2, [r7, #3]
 800742e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007432:	e001      	b.n	8007438 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007434:	2302      	movs	r3, #2
 8007436:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007446:	b480      	push	{r7}
 8007448:	b087      	sub	sp, #28
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	4608      	mov	r0, r1
 8007450:	4611      	mov	r1, r2
 8007452:	461a      	mov	r2, r3
 8007454:	4603      	mov	r3, r0
 8007456:	70fb      	strb	r3, [r7, #3]
 8007458:	460b      	mov	r3, r1
 800745a:	70bb      	strb	r3, [r7, #2]
 800745c:	4613      	mov	r3, r2
 800745e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800746e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007470:	e025      	b.n	80074be <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	221a      	movs	r2, #26
 8007476:	fb02 f303 	mul.w	r3, r2, r3
 800747a:	3308      	adds	r3, #8
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	3302      	adds	r3, #2
 8007482:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	795b      	ldrb	r3, [r3, #5]
 8007488:	78fa      	ldrb	r2, [r7, #3]
 800748a:	429a      	cmp	r2, r3
 800748c:	d002      	beq.n	8007494 <USBH_FindInterface+0x4e>
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	2bff      	cmp	r3, #255	@ 0xff
 8007492:	d111      	bne.n	80074b8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007498:	78ba      	ldrb	r2, [r7, #2]
 800749a:	429a      	cmp	r2, r3
 800749c:	d002      	beq.n	80074a4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800749e:	78bb      	ldrb	r3, [r7, #2]
 80074a0:	2bff      	cmp	r3, #255	@ 0xff
 80074a2:	d109      	bne.n	80074b8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80074a8:	787a      	ldrb	r2, [r7, #1]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d002      	beq.n	80074b4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074ae:	787b      	ldrb	r3, [r7, #1]
 80074b0:	2bff      	cmp	r3, #255	@ 0xff
 80074b2:	d101      	bne.n	80074b8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	e006      	b.n	80074c6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	3301      	adds	r3, #1
 80074bc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d9d6      	bls.n	8007472 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80074c4:	23ff      	movs	r3, #255	@ 0xff
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 fcf4 	bl	8008ec8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80074e0:	2101      	movs	r1, #1
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fe0d 	bl	8009102 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af04      	add	r7, sp, #16
 80074fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80074fc:	2302      	movs	r3, #2
 80074fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b01      	cmp	r3, #1
 800750e:	d102      	bne.n	8007516 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2203      	movs	r2, #3
 8007514:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b0b      	cmp	r3, #11
 800751e:	f200 81bb 	bhi.w	8007898 <USBH_Process+0x3a4>
 8007522:	a201      	add	r2, pc, #4	@ (adr r2, 8007528 <USBH_Process+0x34>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	08007559 	.word	0x08007559
 800752c:	0800758b 	.word	0x0800758b
 8007530:	080075f3 	.word	0x080075f3
 8007534:	08007833 	.word	0x08007833
 8007538:	08007899 	.word	0x08007899
 800753c:	08007693 	.word	0x08007693
 8007540:	080077d9 	.word	0x080077d9
 8007544:	080076c9 	.word	0x080076c9
 8007548:	080076e9 	.word	0x080076e9
 800754c:	08007707 	.word	0x08007707
 8007550:	0800774b 	.word	0x0800774b
 8007554:	0800781b 	.word	0x0800781b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 819b 	beq.w	800789c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800756c:	20c8      	movs	r0, #200	@ 0xc8
 800756e:	f001 fe12 	bl	8009196 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fd05 	bl	8008f82 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007588:	e188      	b.n	800789c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007590:	2b01      	cmp	r3, #1
 8007592:	d107      	bne.n	80075a4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075a2:	e18a      	b.n	80078ba <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80075aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075ae:	d914      	bls.n	80075da <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80075b6:	3301      	adds	r3, #1
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d903      	bls.n	80075d2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	220d      	movs	r2, #13
 80075ce:	701a      	strb	r2, [r3, #0]
      break;
 80075d0:	e173      	b.n	80078ba <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
      break;
 80075d8:	e16f      	b.n	80078ba <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80075e0:	f103 020a 	add.w	r2, r3, #10
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80075ea:	200a      	movs	r0, #10
 80075ec:	f001 fdd3 	bl	8009196 <USBH_Delay>
      break;
 80075f0:	e163      	b.n	80078ba <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007602:	2104      	movs	r1, #4
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007608:	2064      	movs	r0, #100	@ 0x64
 800760a:	f001 fdc4 	bl	8009196 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 fc90 	bl	8008f34 <USBH_LL_GetSpeed>
 8007614:	4603      	mov	r3, r0
 8007616:	461a      	mov	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2205      	movs	r2, #5
 8007622:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007624:	2100      	movs	r1, #0
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fa9b 	bl	8008b62 <USBH_AllocPipe>
 800762c:	4603      	mov	r3, r0
 800762e:	461a      	mov	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007634:	2180      	movs	r1, #128	@ 0x80
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fa93 	bl	8008b62 <USBH_AllocPipe>
 800763c:	4603      	mov	r3, r0
 800763e:	461a      	mov	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	7919      	ldrb	r1, [r3, #4]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007658:	9202      	str	r2, [sp, #8]
 800765a:	2200      	movs	r2, #0
 800765c:	9201      	str	r2, [sp, #4]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	4603      	mov	r3, r0
 8007662:	2280      	movs	r2, #128	@ 0x80
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 fa4d 	bl	8008b04 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	7959      	ldrb	r1, [r3, #5]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800767e:	9202      	str	r2, [sp, #8]
 8007680:	2200      	movs	r2, #0
 8007682:	9201      	str	r2, [sp, #4]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	4603      	mov	r3, r0
 8007688:	2200      	movs	r2, #0
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 fa3a 	bl	8008b04 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007690:	e113      	b.n	80078ba <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f916 	bl	80078c4 <USBH_HandleEnum>
 8007698:	4603      	mov	r3, r0
 800769a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f040 80fd 	bne.w	80078a0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d103      	bne.n	80076c0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2208      	movs	r2, #8
 80076bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076be:	e0ef      	b.n	80078a0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2207      	movs	r2, #7
 80076c4:	701a      	strb	r2, [r3, #0]
      break;
 80076c6:	e0eb      	b.n	80078a0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 80e8 	beq.w	80078a4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076da:	2101      	movs	r1, #1
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2208      	movs	r2, #8
 80076e4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80076e6:	e0dd      	b.n	80078a4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc3a 	bl	8007f6a <USBH_SetCfg>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f040 80d5 	bne.w	80078a8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2209      	movs	r2, #9
 8007702:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007704:	e0d0      	b.n	80078a8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d016      	beq.n	8007742 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007714:	2101      	movs	r1, #1
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fc4a 	bl	8007fb0 <USBH_SetFeature>
 800771c:	4603      	mov	r3, r0
 800771e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d103      	bne.n	8007730 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	220a      	movs	r2, #10
 800772c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800772e:	e0bd      	b.n	80078ac <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b03      	cmp	r3, #3
 8007736:	f040 80b9 	bne.w	80078ac <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	220a      	movs	r2, #10
 800773e:	701a      	strb	r2, [r3, #0]
      break;
 8007740:	e0b4      	b.n	80078ac <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	220a      	movs	r2, #10
 8007746:	701a      	strb	r2, [r3, #0]
      break;
 8007748:	e0b0      	b.n	80078ac <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 80ad 	beq.w	80078b0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]
 8007762:	e016      	b.n	8007792 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007764:	7bfa      	ldrb	r2, [r7, #15]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	32de      	adds	r2, #222	@ 0xde
 800776a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776e:	791a      	ldrb	r2, [r3, #4]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007776:	429a      	cmp	r2, r3
 8007778:	d108      	bne.n	800778c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800777a:	7bfa      	ldrb	r2, [r7, #15]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	32de      	adds	r2, #222	@ 0xde
 8007780:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800778a:	e005      	b.n	8007798 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	3301      	adds	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0e5      	beq.n	8007764 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d016      	beq.n	80077d0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	4798      	blx	r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d109      	bne.n	80077c8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2206      	movs	r2, #6
 80077b8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80077c0:	2103      	movs	r1, #3
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077c6:	e073      	b.n	80078b0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	220d      	movs	r2, #13
 80077cc:	701a      	strb	r2, [r3, #0]
      break;
 80077ce:	e06f      	b.n	80078b0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	220d      	movs	r2, #13
 80077d4:	701a      	strb	r2, [r3, #0]
      break;
 80077d6:	e06b      	b.n	80078b0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d017      	beq.n	8007812 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	4798      	blx	r3
 80077ee:	4603      	mov	r3, r0
 80077f0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	220b      	movs	r2, #11
 80077fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007800:	e058      	b.n	80078b4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b02      	cmp	r3, #2
 8007808:	d154      	bne.n	80078b4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	220d      	movs	r2, #13
 800780e:	701a      	strb	r2, [r3, #0]
      break;
 8007810:	e050      	b.n	80078b4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	220d      	movs	r2, #13
 8007816:	701a      	strb	r2, [r3, #0]
      break;
 8007818:	e04c      	b.n	80078b4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007820:	2b00      	cmp	r3, #0
 8007822:	d049      	beq.n	80078b8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	4798      	blx	r3
      }
      break;
 8007830:	e042      	b.n	80078b8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff fd4a 	bl	80072d4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d009      	beq.n	800785e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d005      	beq.n	8007874 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800786e:	2105      	movs	r1, #5
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	d107      	bne.n	8007890 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff fe22 	bl	80074d2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800788e:	e014      	b.n	80078ba <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fb19 	bl	8008ec8 <USBH_LL_Start>
      break;
 8007896:	e010      	b.n	80078ba <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007898:	bf00      	nop
 800789a:	e00e      	b.n	80078ba <USBH_Process+0x3c6>
      break;
 800789c:	bf00      	nop
 800789e:	e00c      	b.n	80078ba <USBH_Process+0x3c6>
      break;
 80078a0:	bf00      	nop
 80078a2:	e00a      	b.n	80078ba <USBH_Process+0x3c6>
    break;
 80078a4:	bf00      	nop
 80078a6:	e008      	b.n	80078ba <USBH_Process+0x3c6>
      break;
 80078a8:	bf00      	nop
 80078aa:	e006      	b.n	80078ba <USBH_Process+0x3c6>
      break;
 80078ac:	bf00      	nop
 80078ae:	e004      	b.n	80078ba <USBH_Process+0x3c6>
      break;
 80078b0:	bf00      	nop
 80078b2:	e002      	b.n	80078ba <USBH_Process+0x3c6>
      break;
 80078b4:	bf00      	nop
 80078b6:	e000      	b.n	80078ba <USBH_Process+0x3c6>
      break;
 80078b8:	bf00      	nop
  }
  return USBH_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af04      	add	r7, sp, #16
 80078ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80078cc:	2301      	movs	r3, #1
 80078ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	785b      	ldrb	r3, [r3, #1]
 80078d8:	2b07      	cmp	r3, #7
 80078da:	f200 81bd 	bhi.w	8007c58 <USBH_HandleEnum+0x394>
 80078de:	a201      	add	r2, pc, #4	@ (adr r2, 80078e4 <USBH_HandleEnum+0x20>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	08007905 	.word	0x08007905
 80078e8:	080079bf 	.word	0x080079bf
 80078ec:	08007a29 	.word	0x08007a29
 80078f0:	08007ab3 	.word	0x08007ab3
 80078f4:	08007b1d 	.word	0x08007b1d
 80078f8:	08007b8d 	.word	0x08007b8d
 80078fc:	08007bd3 	.word	0x08007bd3
 8007900:	08007c19 	.word	0x08007c19
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007904:	2108      	movs	r1, #8
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fa4c 	bl	8007da4 <USBH_Get_DevDesc>
 800790c:	4603      	mov	r3, r0
 800790e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d12e      	bne.n	8007974 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	7919      	ldrb	r1, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800793a:	9202      	str	r2, [sp, #8]
 800793c:	2200      	movs	r2, #0
 800793e:	9201      	str	r2, [sp, #4]
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	4603      	mov	r3, r0
 8007944:	2280      	movs	r2, #128	@ 0x80
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 f8dc 	bl	8008b04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7959      	ldrb	r1, [r3, #5]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007960:	9202      	str	r2, [sp, #8]
 8007962:	2200      	movs	r2, #0
 8007964:	9201      	str	r2, [sp, #4]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4603      	mov	r3, r0
 800796a:	2200      	movs	r2, #0
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 f8c9 	bl	8008b04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007972:	e173      	b.n	8007c5c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b03      	cmp	r3, #3
 8007978:	f040 8170 	bne.w	8007c5c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007982:	3301      	adds	r3, #1
 8007984:	b2da      	uxtb	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007992:	2b03      	cmp	r3, #3
 8007994:	d903      	bls.n	800799e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	220d      	movs	r2, #13
 800799a:	701a      	strb	r2, [r3, #0]
      break;
 800799c:	e15e      	b.n	8007c5c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	795b      	ldrb	r3, [r3, #5]
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 f8fd 	bl	8008ba4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	791b      	ldrb	r3, [r3, #4]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 f8f7 	bl	8008ba4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	701a      	strb	r2, [r3, #0]
      break;
 80079bc:	e14e      	b.n	8007c5c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80079be:	2112      	movs	r1, #18
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f9ef 	bl	8007da4 <USBH_Get_DevDesc>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079d6:	e143      	b.n	8007c60 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b03      	cmp	r3, #3
 80079dc:	f040 8140 	bne.w	8007c60 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079e6:	3301      	adds	r3, #1
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d903      	bls.n	8007a02 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	220d      	movs	r2, #13
 80079fe:	701a      	strb	r2, [r3, #0]
      break;
 8007a00:	e12e      	b.n	8007c60 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	795b      	ldrb	r3, [r3, #5]
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 f8cb 	bl	8008ba4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	791b      	ldrb	r3, [r3, #4]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 f8c5 	bl	8008ba4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	701a      	strb	r2, [r3, #0]
      break;
 8007a26:	e11b      	b.n	8007c60 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a28:	2101      	movs	r1, #1
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fa79 	bl	8007f22 <USBH_SetAddress>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d130      	bne.n	8007a9c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007a3a:	2002      	movs	r0, #2
 8007a3c:	f001 fbab 	bl	8009196 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	7919      	ldrb	r1, [r3, #4]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a62:	9202      	str	r2, [sp, #8]
 8007a64:	2200      	movs	r2, #0
 8007a66:	9201      	str	r2, [sp, #4]
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2280      	movs	r2, #128	@ 0x80
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f001 f848 	bl	8008b04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	7959      	ldrb	r1, [r3, #5]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a88:	9202      	str	r2, [sp, #8]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	9201      	str	r2, [sp, #4]
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	4603      	mov	r3, r0
 8007a92:	2200      	movs	r2, #0
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 f835 	bl	8008b04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a9a:	e0e3      	b.n	8007c64 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	f040 80e0 	bne.w	8007c64 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	220d      	movs	r2, #13
 8007aa8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	705a      	strb	r2, [r3, #1]
      break;
 8007ab0:	e0d8      	b.n	8007c64 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007ab2:	2109      	movs	r1, #9
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f9a1 	bl	8007dfc <USBH_Get_CfgDesc>
 8007aba:	4603      	mov	r3, r0
 8007abc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2204      	movs	r2, #4
 8007ac8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007aca:	e0cd      	b.n	8007c68 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	f040 80ca 	bne.w	8007c68 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ada:	3301      	adds	r3, #1
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d903      	bls.n	8007af6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	220d      	movs	r2, #13
 8007af2:	701a      	strb	r2, [r3, #0]
      break;
 8007af4:	e0b8      	b.n	8007c68 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	795b      	ldrb	r3, [r3, #5]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 f851 	bl	8008ba4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	791b      	ldrb	r3, [r3, #4]
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 f84b 	bl	8008ba4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
      break;
 8007b1a:	e0a5      	b.n	8007c68 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f969 	bl	8007dfc <USBH_Get_CfgDesc>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d103      	bne.n	8007b3c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2205      	movs	r2, #5
 8007b38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b3a:	e097      	b.n	8007c6c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	f040 8094 	bne.w	8007c6c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d903      	bls.n	8007b66 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	220d      	movs	r2, #13
 8007b62:	701a      	strb	r2, [r3, #0]
      break;
 8007b64:	e082      	b.n	8007c6c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	795b      	ldrb	r3, [r3, #5]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 f819 	bl	8008ba4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	791b      	ldrb	r3, [r3, #4]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 f813 	bl	8008ba4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	701a      	strb	r2, [r3, #0]
      break;
 8007b8a:	e06f      	b.n	8007c6c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d019      	beq.n	8007bca <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ba2:	23ff      	movs	r3, #255	@ 0xff
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f953 	bl	8007e50 <USBH_Get_StringDesc>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d103      	bne.n	8007bbc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2206      	movs	r2, #6
 8007bb8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bba:	e059      	b.n	8007c70 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d156      	bne.n	8007c70 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2206      	movs	r2, #6
 8007bc6:	705a      	strb	r2, [r3, #1]
      break;
 8007bc8:	e052      	b.n	8007c70 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2206      	movs	r2, #6
 8007bce:	705a      	strb	r2, [r3, #1]
      break;
 8007bd0:	e04e      	b.n	8007c70 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d019      	beq.n	8007c10 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007be8:	23ff      	movs	r3, #255	@ 0xff
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f930 	bl	8007e50 <USBH_Get_StringDesc>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2207      	movs	r2, #7
 8007bfe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c00:	e038      	b.n	8007c74 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d135      	bne.n	8007c74 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2207      	movs	r2, #7
 8007c0c:	705a      	strb	r2, [r3, #1]
      break;
 8007c0e:	e031      	b.n	8007c74 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2207      	movs	r2, #7
 8007c14:	705a      	strb	r2, [r3, #1]
      break;
 8007c16:	e02d      	b.n	8007c74 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d017      	beq.n	8007c52 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c2e:	23ff      	movs	r3, #255	@ 0xff
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f90d 	bl	8007e50 <USBH_Get_StringDesc>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d102      	bne.n	8007c46 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007c44:	e018      	b.n	8007c78 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d115      	bne.n	8007c78 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c50:	e012      	b.n	8007c78 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]
      break;
 8007c56:	e00f      	b.n	8007c78 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007c58:	bf00      	nop
 8007c5a:	e00e      	b.n	8007c7a <USBH_HandleEnum+0x3b6>
      break;
 8007c5c:	bf00      	nop
 8007c5e:	e00c      	b.n	8007c7a <USBH_HandleEnum+0x3b6>
      break;
 8007c60:	bf00      	nop
 8007c62:	e00a      	b.n	8007c7a <USBH_HandleEnum+0x3b6>
      break;
 8007c64:	bf00      	nop
 8007c66:	e008      	b.n	8007c7a <USBH_HandleEnum+0x3b6>
      break;
 8007c68:	bf00      	nop
 8007c6a:	e006      	b.n	8007c7a <USBH_HandleEnum+0x3b6>
      break;
 8007c6c:	bf00      	nop
 8007c6e:	e004      	b.n	8007c7a <USBH_HandleEnum+0x3b6>
      break;
 8007c70:	bf00      	nop
 8007c72:	e002      	b.n	8007c7a <USBH_HandleEnum+0x3b6>
      break;
 8007c74:	bf00      	nop
 8007c76:	e000      	b.n	8007c7a <USBH_HandleEnum+0x3b6>
      break;
 8007c78:	bf00      	nop
  }
  return Status;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f804 	bl	8007cc6 <USBH_HandleSof>
}
 8007cbe:	bf00      	nop
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b0b      	cmp	r3, #11
 8007cd6:	d10a      	bne.n	8007cee <USBH_HandleSof+0x28>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	4798      	blx	r3
  }
}
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007d06:	bf00      	nop
}
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007d22:	bf00      	nop
}
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f001 f8be 	bl	8008efe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	791b      	ldrb	r3, [r3, #4]
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 ff0b 	bl	8008ba4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	795b      	ldrb	r3, [r3, #5]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 ff05 	bl	8008ba4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007db0:	887b      	ldrh	r3, [r7, #2]
 8007db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007db6:	d901      	bls.n	8007dbc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e01b      	b.n	8007df4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007dc2:	887b      	ldrh	r3, [r7, #2]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007dcc:	2100      	movs	r1, #0
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f872 	bl	8007eb8 <USBH_GetDescriptor>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d109      	bne.n	8007df2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007de4:	887a      	ldrh	r2, [r7, #2]
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f929 	bl	8008040 <USBH_ParseDevDesc>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af02      	add	r7, sp, #8
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	331c      	adds	r3, #28
 8007e0c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007e0e:	887b      	ldrh	r3, [r7, #2]
 8007e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e14:	d901      	bls.n	8007e1a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e016      	b.n	8007e48 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007e1a:	887b      	ldrh	r3, [r7, #2]
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e24:	2100      	movs	r1, #0
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f846 	bl	8007eb8 <USBH_GetDescriptor>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d107      	bne.n	8007e46 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007e36:	887b      	ldrh	r3, [r7, #2]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f9af 	bl	80081a0 <USBH_ParseCfgDesc>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	607a      	str	r2, [r7, #4]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	72fb      	strb	r3, [r7, #11]
 8007e60:	4613      	mov	r3, r2
 8007e62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007e64:	893b      	ldrh	r3, [r7, #8]
 8007e66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e6a:	d802      	bhi.n	8007e72 <USBH_Get_StringDesc+0x22>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e01c      	b.n	8007eb0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007e76:	7afb      	ldrb	r3, [r7, #11]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007e7e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007e86:	893b      	ldrh	r3, [r7, #8]
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 f812 	bl	8007eb8 <USBH_GetDescriptor>
 8007e94:	4603      	mov	r3, r0
 8007e96:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d107      	bne.n	8007eae <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007ea4:	893a      	ldrh	r2, [r7, #8]
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 fb8d 	bl	80085c8 <USBH_ParseStringDesc>
  }

  return status;
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	72fb      	strb	r3, [r7, #11]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	789b      	ldrb	r3, [r3, #2]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d11c      	bne.n	8007f0c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ed2:	7afb      	ldrb	r3, [r7, #11]
 8007ed4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2206      	movs	r2, #6
 8007ee2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	893a      	ldrh	r2, [r7, #8]
 8007ee8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007eea:	893b      	ldrh	r3, [r7, #8]
 8007eec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007ef0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ef4:	d104      	bne.n	8007f00 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f240 4209 	movw	r2, #1033	@ 0x409
 8007efc:	829a      	strh	r2, [r3, #20]
 8007efe:	e002      	b.n	8007f06 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8b3a      	ldrh	r2, [r7, #24]
 8007f0a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007f0c:	8b3b      	ldrh	r3, [r7, #24]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 fba5 	bl	8008662 <USBH_CtlReq>
 8007f18:	4603      	mov	r3, r0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	789b      	ldrb	r3, [r3, #2]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d10f      	bne.n	8007f56 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2205      	movs	r2, #5
 8007f40:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007f42:	78fb      	ldrb	r3, [r7, #3]
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f56:	2200      	movs	r2, #0
 8007f58:	2100      	movs	r1, #0
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fb81 	bl	8008662 <USBH_CtlReq>
 8007f60:	4603      	mov	r3, r0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	789b      	ldrb	r3, [r3, #2]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d10e      	bne.n	8007f9c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2209      	movs	r2, #9
 8007f88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	887a      	ldrh	r2, [r7, #2]
 8007f8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fb5e 	bl	8008662 <USBH_CtlReq>
 8007fa6:	4603      	mov	r3, r0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	789b      	ldrb	r3, [r3, #2]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d10f      	bne.n	8007fe4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2203      	movs	r2, #3
 8007fce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007fd0:	78fb      	ldrb	r3, [r7, #3]
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fb3a 	bl	8008662 <USBH_CtlReq>
 8007fee:	4603      	mov	r3, r0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	789b      	ldrb	r3, [r3, #2]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d10f      	bne.n	800802c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	b29a      	uxth	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800802c:	2200      	movs	r2, #0
 800802e:	2100      	movs	r1, #0
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fb16 	bl	8008662 <USBH_CtlReq>
 8008036:	4603      	mov	r3, r0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	4613      	mov	r3, r2
 800804c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008054:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008060:	2302      	movs	r3, #2
 8008062:	e094      	b.n	800818e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	781a      	ldrb	r2, [r3, #0]
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	785a      	ldrb	r2, [r3, #1]
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	3302      	adds	r3, #2
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	3303      	adds	r3, #3
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	b29b      	uxth	r3, r3
 8008086:	4313      	orrs	r3, r2
 8008088:	b29a      	uxth	r2, r3
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	791a      	ldrb	r2, [r3, #4]
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	795a      	ldrb	r2, [r3, #5]
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	799a      	ldrb	r2, [r3, #6]
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	79da      	ldrb	r2, [r3, #7]
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d004      	beq.n	80080c2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d11b      	bne.n	80080fa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	79db      	ldrb	r3, [r3, #7]
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	dc0f      	bgt.n	80080ea <USBH_ParseDevDesc+0xaa>
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	db0f      	blt.n	80080ee <USBH_ParseDevDesc+0xae>
 80080ce:	3b08      	subs	r3, #8
 80080d0:	4a32      	ldr	r2, [pc, #200]	@ (800819c <USBH_ParseDevDesc+0x15c>)
 80080d2:	fa22 f303 	lsr.w	r3, r2, r3
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	bf14      	ite	ne
 80080de:	2301      	movne	r3, #1
 80080e0:	2300      	moveq	r3, #0
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d106      	bne.n	80080f6 <USBH_ParseDevDesc+0xb6>
 80080e8:	e001      	b.n	80080ee <USBH_ParseDevDesc+0xae>
 80080ea:	2b40      	cmp	r3, #64	@ 0x40
 80080ec:	d003      	beq.n	80080f6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	2208      	movs	r2, #8
 80080f2:	71da      	strb	r2, [r3, #7]
        break;
 80080f4:	e000      	b.n	80080f8 <USBH_ParseDevDesc+0xb8>
        break;
 80080f6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80080f8:	e00e      	b.n	8008118 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008100:	2b02      	cmp	r3, #2
 8008102:	d107      	bne.n	8008114 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	79db      	ldrb	r3, [r3, #7]
 8008108:	2b08      	cmp	r3, #8
 800810a:	d005      	beq.n	8008118 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	2208      	movs	r2, #8
 8008110:	71da      	strb	r2, [r3, #7]
 8008112:	e001      	b.n	8008118 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008114:	2303      	movs	r3, #3
 8008116:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	2b08      	cmp	r3, #8
 800811c:	d936      	bls.n	800818c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	3308      	adds	r3, #8
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	3309      	adds	r3, #9
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	021b      	lsls	r3, r3, #8
 800812e:	b29b      	uxth	r3, r3
 8008130:	4313      	orrs	r3, r2
 8008132:	b29a      	uxth	r2, r3
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	330a      	adds	r3, #10
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	330b      	adds	r3, #11
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	021b      	lsls	r3, r3, #8
 8008148:	b29b      	uxth	r3, r3
 800814a:	4313      	orrs	r3, r2
 800814c:	b29a      	uxth	r2, r3
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	330c      	adds	r3, #12
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	330d      	adds	r3, #13
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	b29b      	uxth	r3, r3
 8008164:	4313      	orrs	r3, r2
 8008166:	b29a      	uxth	r2, r3
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	7b9a      	ldrb	r2, [r3, #14]
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	7bda      	ldrb	r2, [r3, #15]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	7c1a      	ldrb	r2, [r3, #16]
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	7c5a      	ldrb	r2, [r3, #17]
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800818c:	7dfb      	ldrb	r3, [r7, #23]
}
 800818e:	4618      	mov	r0, r3
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	01000101 	.word	0x01000101

080081a0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08c      	sub	sp, #48	@ 0x30
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80081b4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80081ce:	2302      	movs	r3, #2
 80081d0:	e0da      	b.n	8008388 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80081d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b09      	cmp	r3, #9
 80081dc:	d002      	beq.n	80081e4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80081de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e0:	2209      	movs	r2, #9
 80081e2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	781a      	ldrb	r2, [r3, #0]
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	785a      	ldrb	r2, [r3, #1]
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	3302      	adds	r3, #2
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	3303      	adds	r3, #3
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	021b      	lsls	r3, r3, #8
 8008204:	b29b      	uxth	r3, r3
 8008206:	4313      	orrs	r3, r2
 8008208:	b29b      	uxth	r3, r3
 800820a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800820e:	bf28      	it	cs
 8008210:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008214:	b29a      	uxth	r2, r3
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	791a      	ldrb	r2, [r3, #4]
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	795a      	ldrb	r2, [r3, #5]
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	799a      	ldrb	r2, [r3, #6]
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	79da      	ldrb	r2, [r3, #7]
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	7a1a      	ldrb	r2, [r3, #8]
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008242:	88fb      	ldrh	r3, [r7, #6]
 8008244:	2b09      	cmp	r3, #9
 8008246:	f240 809d 	bls.w	8008384 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800824a:	2309      	movs	r3, #9
 800824c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800824e:	2300      	movs	r3, #0
 8008250:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008252:	e081      	b.n	8008358 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008254:	f107 0316 	add.w	r3, r7, #22
 8008258:	4619      	mov	r1, r3
 800825a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800825c:	f000 f9e7 	bl	800862e <USBH_GetNextDesc>
 8008260:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008264:	785b      	ldrb	r3, [r3, #1]
 8008266:	2b04      	cmp	r3, #4
 8008268:	d176      	bne.n	8008358 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800826a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b09      	cmp	r3, #9
 8008270:	d002      	beq.n	8008278 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008274:	2209      	movs	r2, #9
 8008276:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800827c:	221a      	movs	r2, #26
 800827e:	fb02 f303 	mul.w	r3, r2, r3
 8008282:	3308      	adds	r3, #8
 8008284:	6a3a      	ldr	r2, [r7, #32]
 8008286:	4413      	add	r3, r2
 8008288:	3302      	adds	r3, #2
 800828a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800828c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800828e:	69f8      	ldr	r0, [r7, #28]
 8008290:	f000 f87e 	bl	8008390 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800829e:	e043      	b.n	8008328 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082a0:	f107 0316 	add.w	r3, r7, #22
 80082a4:	4619      	mov	r1, r3
 80082a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082a8:	f000 f9c1 	bl	800862e <USBH_GetNextDesc>
 80082ac:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b0:	785b      	ldrb	r3, [r3, #1]
 80082b2:	2b05      	cmp	r3, #5
 80082b4:	d138      	bne.n	8008328 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	795b      	ldrb	r3, [r3, #5]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d113      	bne.n	80082e6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d003      	beq.n	80082ce <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	799b      	ldrb	r3, [r3, #6]
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d10b      	bne.n	80082e6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	79db      	ldrb	r3, [r3, #7]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10b      	bne.n	80082ee <USBH_ParseCfgDesc+0x14e>
 80082d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b09      	cmp	r3, #9
 80082dc:	d007      	beq.n	80082ee <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80082de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e0:	2209      	movs	r2, #9
 80082e2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082e4:	e003      	b.n	80082ee <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80082e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e8:	2207      	movs	r2, #7
 80082ea:	701a      	strb	r2, [r3, #0]
 80082ec:	e000      	b.n	80082f0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082ee:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80082f8:	3201      	adds	r2, #1
 80082fa:	00d2      	lsls	r2, r2, #3
 80082fc:	211a      	movs	r1, #26
 80082fe:	fb01 f303 	mul.w	r3, r1, r3
 8008302:	4413      	add	r3, r2
 8008304:	3308      	adds	r3, #8
 8008306:	6a3a      	ldr	r2, [r7, #32]
 8008308:	4413      	add	r3, r2
 800830a:	3304      	adds	r3, #4
 800830c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800830e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008310:	69b9      	ldr	r1, [r7, #24]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f870 	bl	80083f8 <USBH_ParseEPDesc>
 8008318:	4603      	mov	r3, r0
 800831a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800831e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008322:	3301      	adds	r3, #1
 8008324:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	791b      	ldrb	r3, [r3, #4]
 800832c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008330:	429a      	cmp	r2, r3
 8008332:	d204      	bcs.n	800833e <USBH_ParseCfgDesc+0x19e>
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	885a      	ldrh	r2, [r3, #2]
 8008338:	8afb      	ldrh	r3, [r7, #22]
 800833a:	429a      	cmp	r2, r3
 800833c:	d8b0      	bhi.n	80082a0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	791b      	ldrb	r3, [r3, #4]
 8008342:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008346:	429a      	cmp	r2, r3
 8008348:	d201      	bcs.n	800834e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800834a:	2303      	movs	r3, #3
 800834c:	e01c      	b.n	8008388 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800834e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008352:	3301      	adds	r3, #1
 8008354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800835c:	2b01      	cmp	r3, #1
 800835e:	d805      	bhi.n	800836c <USBH_ParseCfgDesc+0x1cc>
 8008360:	6a3b      	ldr	r3, [r7, #32]
 8008362:	885a      	ldrh	r2, [r3, #2]
 8008364:	8afb      	ldrh	r3, [r7, #22]
 8008366:	429a      	cmp	r2, r3
 8008368:	f63f af74 	bhi.w	8008254 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	791b      	ldrb	r3, [r3, #4]
 8008370:	2b02      	cmp	r3, #2
 8008372:	bf28      	it	cs
 8008374:	2302      	movcs	r3, #2
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800837c:	429a      	cmp	r2, r3
 800837e:	d201      	bcs.n	8008384 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008380:	2303      	movs	r3, #3
 8008382:	e001      	b.n	8008388 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008384:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008388:	4618      	mov	r0, r3
 800838a:	3730      	adds	r7, #48	@ 0x30
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781a      	ldrb	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	785a      	ldrb	r2, [r3, #1]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	789a      	ldrb	r2, [r3, #2]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	78da      	ldrb	r2, [r3, #3]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	3304      	adds	r3, #4
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	bf28      	it	cs
 80083c4:	2302      	movcs	r3, #2
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	795a      	ldrb	r2, [r3, #5]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	799a      	ldrb	r2, [r3, #6]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	79da      	ldrb	r2, [r3, #7]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	7a1a      	ldrb	r2, [r3, #8]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	721a      	strb	r2, [r3, #8]
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	781a      	ldrb	r2, [r3, #0]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	785a      	ldrb	r2, [r3, #1]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	789a      	ldrb	r2, [r3, #2]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	78da      	ldrb	r2, [r3, #3]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3304      	adds	r3, #4
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	3305      	adds	r3, #5
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	021b      	lsls	r3, r3, #8
 8008438:	b29b      	uxth	r3, r3
 800843a:	4313      	orrs	r3, r2
 800843c:	b29a      	uxth	r2, r3
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	799a      	ldrb	r2, [r3, #6]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	889b      	ldrh	r3, [r3, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d009      	beq.n	8008466 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800845a:	d804      	bhi.n	8008466 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008464:	d901      	bls.n	800846a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008466:	2303      	movs	r3, #3
 8008468:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008470:	2b00      	cmp	r3, #0
 8008472:	d136      	bne.n	80084e2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	78db      	ldrb	r3, [r3, #3]
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	2b02      	cmp	r3, #2
 800847e:	d108      	bne.n	8008492 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	889b      	ldrh	r3, [r3, #4]
 8008484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008488:	f240 8097 	bls.w	80085ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800848c:	2303      	movs	r3, #3
 800848e:	75fb      	strb	r3, [r7, #23]
 8008490:	e093      	b.n	80085ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	78db      	ldrb	r3, [r3, #3]
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d107      	bne.n	80084ae <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	889b      	ldrh	r3, [r3, #4]
 80084a2:	2b40      	cmp	r3, #64	@ 0x40
 80084a4:	f240 8089 	bls.w	80085ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80084a8:	2303      	movs	r3, #3
 80084aa:	75fb      	strb	r3, [r7, #23]
 80084ac:	e085      	b.n	80085ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	78db      	ldrb	r3, [r3, #3]
 80084b2:	f003 0303 	and.w	r3, r3, #3
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d005      	beq.n	80084c6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	78db      	ldrb	r3, [r3, #3]
 80084be:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d10a      	bne.n	80084dc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	799b      	ldrb	r3, [r3, #6]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <USBH_ParseEPDesc+0xde>
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	799b      	ldrb	r3, [r3, #6]
 80084d2:	2b10      	cmp	r3, #16
 80084d4:	d970      	bls.n	80085b8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80084d6:	2303      	movs	r3, #3
 80084d8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80084da:	e06d      	b.n	80085b8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80084dc:	2303      	movs	r3, #3
 80084de:	75fb      	strb	r3, [r7, #23]
 80084e0:	e06b      	b.n	80085ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d13c      	bne.n	8008566 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	78db      	ldrb	r3, [r3, #3]
 80084f0:	f003 0303 	and.w	r3, r3, #3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d005      	beq.n	8008504 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	78db      	ldrb	r3, [r3, #3]
 80084fc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008500:	2b00      	cmp	r3, #0
 8008502:	d106      	bne.n	8008512 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	889b      	ldrh	r3, [r3, #4]
 8008508:	2b40      	cmp	r3, #64	@ 0x40
 800850a:	d956      	bls.n	80085ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800850c:	2303      	movs	r3, #3
 800850e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008510:	e053      	b.n	80085ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	78db      	ldrb	r3, [r3, #3]
 8008516:	f003 0303 	and.w	r3, r3, #3
 800851a:	2b01      	cmp	r3, #1
 800851c:	d10e      	bne.n	800853c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	799b      	ldrb	r3, [r3, #6]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d007      	beq.n	8008536 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800852a:	2b10      	cmp	r3, #16
 800852c:	d803      	bhi.n	8008536 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008532:	2b40      	cmp	r3, #64	@ 0x40
 8008534:	d941      	bls.n	80085ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008536:	2303      	movs	r3, #3
 8008538:	75fb      	strb	r3, [r7, #23]
 800853a:	e03e      	b.n	80085ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	78db      	ldrb	r3, [r3, #3]
 8008540:	f003 0303 	and.w	r3, r3, #3
 8008544:	2b03      	cmp	r3, #3
 8008546:	d10b      	bne.n	8008560 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	799b      	ldrb	r3, [r3, #6]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d004      	beq.n	800855a <USBH_ParseEPDesc+0x162>
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	889b      	ldrh	r3, [r3, #4]
 8008554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008558:	d32f      	bcc.n	80085ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800855a:	2303      	movs	r3, #3
 800855c:	75fb      	strb	r3, [r7, #23]
 800855e:	e02c      	b.n	80085ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008560:	2303      	movs	r3, #3
 8008562:	75fb      	strb	r3, [r7, #23]
 8008564:	e029      	b.n	80085ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800856c:	2b02      	cmp	r3, #2
 800856e:	d120      	bne.n	80085b2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	78db      	ldrb	r3, [r3, #3]
 8008574:	f003 0303 	and.w	r3, r3, #3
 8008578:	2b00      	cmp	r3, #0
 800857a:	d106      	bne.n	800858a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	889b      	ldrh	r3, [r3, #4]
 8008580:	2b08      	cmp	r3, #8
 8008582:	d01a      	beq.n	80085ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008584:	2303      	movs	r3, #3
 8008586:	75fb      	strb	r3, [r7, #23]
 8008588:	e017      	b.n	80085ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	78db      	ldrb	r3, [r3, #3]
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	2b03      	cmp	r3, #3
 8008594:	d10a      	bne.n	80085ac <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	799b      	ldrb	r3, [r3, #6]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <USBH_ParseEPDesc+0x1ae>
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	889b      	ldrh	r3, [r3, #4]
 80085a2:	2b08      	cmp	r3, #8
 80085a4:	d909      	bls.n	80085ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085a6:	2303      	movs	r3, #3
 80085a8:	75fb      	strb	r3, [r7, #23]
 80085aa:	e006      	b.n	80085ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80085ac:	2303      	movs	r3, #3
 80085ae:	75fb      	strb	r3, [r7, #23]
 80085b0:	e003      	b.n	80085ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80085b2:	2303      	movs	r3, #3
 80085b4:	75fb      	strb	r3, [r7, #23]
 80085b6:	e000      	b.n	80085ba <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80085b8:	bf00      	nop
  }

  return status;
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	371c      	adds	r7, #28
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3301      	adds	r3, #1
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d120      	bne.n	8008622 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	1e9a      	subs	r2, r3, #2
 80085e6:	88fb      	ldrh	r3, [r7, #6]
 80085e8:	4293      	cmp	r3, r2
 80085ea:	bf28      	it	cs
 80085ec:	4613      	movcs	r3, r2
 80085ee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3302      	adds	r3, #2
 80085f4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80085f6:	2300      	movs	r3, #0
 80085f8:	82fb      	strh	r3, [r7, #22]
 80085fa:	e00b      	b.n	8008614 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80085fc:	8afb      	ldrh	r3, [r7, #22]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	781a      	ldrb	r2, [r3, #0]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	3301      	adds	r3, #1
 800860c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800860e:	8afb      	ldrh	r3, [r7, #22]
 8008610:	3302      	adds	r3, #2
 8008612:	82fb      	strh	r3, [r7, #22]
 8008614:	8afa      	ldrh	r2, [r7, #22]
 8008616:	8abb      	ldrh	r3, [r7, #20]
 8008618:	429a      	cmp	r2, r3
 800861a:	d3ef      	bcc.n	80085fc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2200      	movs	r2, #0
 8008620:	701a      	strb	r2, [r3, #0]
  }
}
 8008622:	bf00      	nop
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800862e:	b480      	push	{r7}
 8008630:	b085      	sub	sp, #20
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	7812      	ldrb	r2, [r2, #0]
 8008640:	4413      	add	r3, r2
 8008642:	b29a      	uxth	r2, r3
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4413      	add	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008654:	68fb      	ldr	r3, [r7, #12]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b086      	sub	sp, #24
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	4613      	mov	r3, r2
 800866e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008670:	2301      	movs	r3, #1
 8008672:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	789b      	ldrb	r3, [r3, #2]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d002      	beq.n	8008682 <USBH_CtlReq+0x20>
 800867c:	2b02      	cmp	r3, #2
 800867e:	d00f      	beq.n	80086a0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008680:	e027      	b.n	80086d2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	88fa      	ldrh	r2, [r7, #6]
 800868c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2201      	movs	r2, #1
 8008692:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2202      	movs	r2, #2
 8008698:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800869a:	2301      	movs	r3, #1
 800869c:	75fb      	strb	r3, [r7, #23]
      break;
 800869e:	e018      	b.n	80086d2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 f81b 	bl	80086dc <USBH_HandleControl>
 80086a6:	4603      	mov	r3, r0
 80086a8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <USBH_CtlReq+0x54>
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d106      	bne.n	80086c4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2201      	movs	r2, #1
 80086ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	761a      	strb	r2, [r3, #24]
      break;
 80086c2:	e005      	b.n	80086d0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d102      	bne.n	80086d0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	709a      	strb	r2, [r3, #2]
      break;
 80086d0:	bf00      	nop
  }
  return status;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	7e1b      	ldrb	r3, [r3, #24]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	2b0a      	cmp	r3, #10
 80086f4:	f200 8156 	bhi.w	80089a4 <USBH_HandleControl+0x2c8>
 80086f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008700 <USBH_HandleControl+0x24>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	0800872d 	.word	0x0800872d
 8008704:	08008747 	.word	0x08008747
 8008708:	080087b1 	.word	0x080087b1
 800870c:	080087d7 	.word	0x080087d7
 8008710:	0800880f 	.word	0x0800880f
 8008714:	08008839 	.word	0x08008839
 8008718:	0800888b 	.word	0x0800888b
 800871c:	080088ad 	.word	0x080088ad
 8008720:	080088e9 	.word	0x080088e9
 8008724:	0800890f 	.word	0x0800890f
 8008728:	0800894d 	.word	0x0800894d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f103 0110 	add.w	r1, r3, #16
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	795b      	ldrb	r3, [r3, #5]
 8008736:	461a      	mov	r2, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f943 	bl	80089c4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2202      	movs	r2, #2
 8008742:	761a      	strb	r2, [r3, #24]
      break;
 8008744:	e139      	b.n	80089ba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	795b      	ldrb	r3, [r3, #5]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fcc5 	bl	80090dc <USBH_LL_GetURBState>
 8008752:	4603      	mov	r3, r0
 8008754:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d11e      	bne.n	800879a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	7c1b      	ldrb	r3, [r3, #16]
 8008760:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008764:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	8adb      	ldrh	r3, [r3, #22]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800876e:	7b7b      	ldrb	r3, [r7, #13]
 8008770:	2b80      	cmp	r3, #128	@ 0x80
 8008772:	d103      	bne.n	800877c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2203      	movs	r2, #3
 8008778:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800877a:	e115      	b.n	80089a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2205      	movs	r2, #5
 8008780:	761a      	strb	r2, [r3, #24]
      break;
 8008782:	e111      	b.n	80089a8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008784:	7b7b      	ldrb	r3, [r7, #13]
 8008786:	2b80      	cmp	r3, #128	@ 0x80
 8008788:	d103      	bne.n	8008792 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2209      	movs	r2, #9
 800878e:	761a      	strb	r2, [r3, #24]
      break;
 8008790:	e10a      	b.n	80089a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2207      	movs	r2, #7
 8008796:	761a      	strb	r2, [r3, #24]
      break;
 8008798:	e106      	b.n	80089a8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	2b04      	cmp	r3, #4
 800879e:	d003      	beq.n	80087a8 <USBH_HandleControl+0xcc>
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	f040 8100 	bne.w	80089a8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	220b      	movs	r2, #11
 80087ac:	761a      	strb	r2, [r3, #24]
      break;
 80087ae:	e0fb      	b.n	80089a8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6899      	ldr	r1, [r3, #8]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	899a      	ldrh	r2, [r3, #12]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	791b      	ldrb	r3, [r3, #4]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f93a 	bl	8008a42 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2204      	movs	r2, #4
 80087d2:	761a      	strb	r2, [r3, #24]
      break;
 80087d4:	e0f1      	b.n	80089ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	791b      	ldrb	r3, [r3, #4]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fc7d 	bl	80090dc <USBH_LL_GetURBState>
 80087e2:	4603      	mov	r3, r0
 80087e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d102      	bne.n	80087f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2209      	movs	r2, #9
 80087f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	2b05      	cmp	r3, #5
 80087f6:	d102      	bne.n	80087fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80087f8:	2303      	movs	r3, #3
 80087fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087fc:	e0d6      	b.n	80089ac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	2b04      	cmp	r3, #4
 8008802:	f040 80d3 	bne.w	80089ac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	220b      	movs	r2, #11
 800880a:	761a      	strb	r2, [r3, #24]
      break;
 800880c:	e0ce      	b.n	80089ac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6899      	ldr	r1, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	899a      	ldrh	r2, [r3, #12]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	795b      	ldrb	r3, [r3, #5]
 800881a:	2001      	movs	r0, #1
 800881c:	9000      	str	r0, [sp, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f8ea 	bl	80089f8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800882a:	b29a      	uxth	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2206      	movs	r2, #6
 8008834:	761a      	strb	r2, [r3, #24]
      break;
 8008836:	e0c0      	b.n	80089ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	795b      	ldrb	r3, [r3, #5]
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fc4c 	bl	80090dc <USBH_LL_GetURBState>
 8008844:	4603      	mov	r3, r0
 8008846:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d103      	bne.n	8008856 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2207      	movs	r2, #7
 8008852:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008854:	e0ac      	b.n	80089b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	2b05      	cmp	r3, #5
 800885a:	d105      	bne.n	8008868 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	220c      	movs	r2, #12
 8008860:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008862:	2303      	movs	r3, #3
 8008864:	73fb      	strb	r3, [r7, #15]
      break;
 8008866:	e0a3      	b.n	80089b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	2b02      	cmp	r3, #2
 800886c:	d103      	bne.n	8008876 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2205      	movs	r2, #5
 8008872:	761a      	strb	r2, [r3, #24]
      break;
 8008874:	e09c      	b.n	80089b0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b04      	cmp	r3, #4
 800887a:	f040 8099 	bne.w	80089b0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	220b      	movs	r2, #11
 8008882:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008884:	2302      	movs	r3, #2
 8008886:	73fb      	strb	r3, [r7, #15]
      break;
 8008888:	e092      	b.n	80089b0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	791b      	ldrb	r3, [r3, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	2100      	movs	r1, #0
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f8d5 	bl	8008a42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800889e:	b29a      	uxth	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2208      	movs	r2, #8
 80088a8:	761a      	strb	r2, [r3, #24]

      break;
 80088aa:	e086      	b.n	80089ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	791b      	ldrb	r3, [r3, #4]
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fc12 	bl	80090dc <USBH_LL_GetURBState>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d105      	bne.n	80088ce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	220d      	movs	r2, #13
 80088c6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088cc:	e072      	b.n	80089b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d103      	bne.n	80088dc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	220b      	movs	r2, #11
 80088d8:	761a      	strb	r2, [r3, #24]
      break;
 80088da:	e06b      	b.n	80089b4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	2b05      	cmp	r3, #5
 80088e0:	d168      	bne.n	80089b4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80088e2:	2303      	movs	r3, #3
 80088e4:	73fb      	strb	r3, [r7, #15]
      break;
 80088e6:	e065      	b.n	80089b4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	795b      	ldrb	r3, [r3, #5]
 80088ec:	2201      	movs	r2, #1
 80088ee:	9200      	str	r2, [sp, #0]
 80088f0:	2200      	movs	r2, #0
 80088f2:	2100      	movs	r1, #0
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f87f 	bl	80089f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008900:	b29a      	uxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	220a      	movs	r2, #10
 800890a:	761a      	strb	r2, [r3, #24]
      break;
 800890c:	e055      	b.n	80089ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	795b      	ldrb	r3, [r3, #5]
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fbe1 	bl	80090dc <USBH_LL_GetURBState>
 800891a:	4603      	mov	r3, r0
 800891c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800891e:	7bbb      	ldrb	r3, [r7, #14]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d105      	bne.n	8008930 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	220d      	movs	r2, #13
 800892c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800892e:	e043      	b.n	80089b8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d103      	bne.n	800893e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2209      	movs	r2, #9
 800893a:	761a      	strb	r2, [r3, #24]
      break;
 800893c:	e03c      	b.n	80089b8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800893e:	7bbb      	ldrb	r3, [r7, #14]
 8008940:	2b04      	cmp	r3, #4
 8008942:	d139      	bne.n	80089b8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	220b      	movs	r2, #11
 8008948:	761a      	strb	r2, [r3, #24]
      break;
 800894a:	e035      	b.n	80089b8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7e5b      	ldrb	r3, [r3, #25]
 8008950:	3301      	adds	r3, #1
 8008952:	b2da      	uxtb	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	765a      	strb	r2, [r3, #25]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	7e5b      	ldrb	r3, [r3, #25]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d806      	bhi.n	800896e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800896c:	e025      	b.n	80089ba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008974:	2106      	movs	r1, #6
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	795b      	ldrb	r3, [r3, #5]
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f90c 	bl	8008ba4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	791b      	ldrb	r3, [r3, #4]
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f906 	bl	8008ba4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800899e:	2302      	movs	r3, #2
 80089a0:	73fb      	strb	r3, [r7, #15]
      break;
 80089a2:	e00a      	b.n	80089ba <USBH_HandleControl+0x2de>

    default:
      break;
 80089a4:	bf00      	nop
 80089a6:	e008      	b.n	80089ba <USBH_HandleControl+0x2de>
      break;
 80089a8:	bf00      	nop
 80089aa:	e006      	b.n	80089ba <USBH_HandleControl+0x2de>
      break;
 80089ac:	bf00      	nop
 80089ae:	e004      	b.n	80089ba <USBH_HandleControl+0x2de>
      break;
 80089b0:	bf00      	nop
 80089b2:	e002      	b.n	80089ba <USBH_HandleControl+0x2de>
      break;
 80089b4:	bf00      	nop
 80089b6:	e000      	b.n	80089ba <USBH_HandleControl+0x2de>
      break;
 80089b8:	bf00      	nop
  }

  return status;
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b088      	sub	sp, #32
 80089c8:	af04      	add	r7, sp, #16
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	4613      	mov	r3, r2
 80089d0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089d2:	79f9      	ldrb	r1, [r7, #7]
 80089d4:	2300      	movs	r3, #0
 80089d6:	9303      	str	r3, [sp, #12]
 80089d8:	2308      	movs	r3, #8
 80089da:	9302      	str	r3, [sp, #8]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	2300      	movs	r3, #0
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	2300      	movs	r3, #0
 80089e6:	2200      	movs	r2, #0
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 fb46 	bl	800907a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af04      	add	r7, sp, #16
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	4611      	mov	r1, r2
 8008a04:	461a      	mov	r2, r3
 8008a06:	460b      	mov	r3, r1
 8008a08:	80fb      	strh	r3, [r7, #6]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a1c:	7979      	ldrb	r1, [r7, #5]
 8008a1e:	7e3b      	ldrb	r3, [r7, #24]
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	88fb      	ldrh	r3, [r7, #6]
 8008a24:	9302      	str	r3, [sp, #8]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	2200      	movs	r2, #0
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 fb21 	bl	800907a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b088      	sub	sp, #32
 8008a46:	af04      	add	r7, sp, #16
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	461a      	mov	r2, r3
 8008a50:	460b      	mov	r3, r1
 8008a52:	80fb      	strh	r3, [r7, #6]
 8008a54:	4613      	mov	r3, r2
 8008a56:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a58:	7979      	ldrb	r1, [r7, #5]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9303      	str	r3, [sp, #12]
 8008a5e:	88fb      	ldrh	r3, [r7, #6]
 8008a60:	9302      	str	r3, [sp, #8]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	2301      	movs	r3, #1
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 fb03 	bl	800907a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a74:	2300      	movs	r3, #0

}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b088      	sub	sp, #32
 8008a82:	af04      	add	r7, sp, #16
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	4611      	mov	r1, r2
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	80fb      	strh	r3, [r7, #6]
 8008a90:	4613      	mov	r3, r2
 8008a92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008aa2:	7979      	ldrb	r1, [r7, #5]
 8008aa4:	7e3b      	ldrb	r3, [r7, #24]
 8008aa6:	9303      	str	r3, [sp, #12]
 8008aa8:	88fb      	ldrh	r3, [r7, #6]
 8008aaa:	9302      	str	r3, [sp, #8]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fade 	bl	800907a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af04      	add	r7, sp, #16
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	80fb      	strh	r3, [r7, #6]
 8008ada:	4613      	mov	r3, r2
 8008adc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ade:	7979      	ldrb	r1, [r7, #5]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9303      	str	r3, [sp, #12]
 8008ae4:	88fb      	ldrh	r3, [r7, #6]
 8008ae6:	9302      	str	r3, [sp, #8]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	2301      	movs	r3, #1
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	2302      	movs	r3, #2
 8008af2:	2201      	movs	r2, #1
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 fac0 	bl	800907a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af04      	add	r7, sp, #16
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	4611      	mov	r1, r2
 8008b10:	461a      	mov	r2, r3
 8008b12:	4603      	mov	r3, r0
 8008b14:	70fb      	strb	r3, [r7, #3]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70bb      	strb	r3, [r7, #2]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b1e:	7878      	ldrb	r0, [r7, #1]
 8008b20:	78ba      	ldrb	r2, [r7, #2]
 8008b22:	78f9      	ldrb	r1, [r7, #3]
 8008b24:	8b3b      	ldrh	r3, [r7, #24]
 8008b26:	9302      	str	r3, [sp, #8]
 8008b28:	7d3b      	ldrb	r3, [r7, #20]
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	7c3b      	ldrb	r3, [r7, #16]
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	4603      	mov	r3, r0
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa53 	bl	8008fde <USBH_LL_OpenPipe>

  return USBH_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008b4e:	78fb      	ldrb	r3, [r7, #3]
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fa72 	bl	800903c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f836 	bl	8008be0 <USBH_GetFreePipe>
 8008b74:	4603      	mov	r3, r0
 8008b76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008b78:	89fb      	ldrh	r3, [r7, #14]
 8008b7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d00a      	beq.n	8008b98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008b82:	78fa      	ldrb	r2, [r7, #3]
 8008b84:	89fb      	ldrh	r3, [r7, #14]
 8008b86:	f003 030f 	and.w	r3, r3, #15
 8008b8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	33e0      	adds	r3, #224	@ 0xe0
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008b98:	89fb      	ldrh	r3, [r7, #14]
 8008b9a:	b2db      	uxtb	r3, r3
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	2b0f      	cmp	r3, #15
 8008bb4:	d80d      	bhi.n	8008bd2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008bb6:	78fb      	ldrb	r3, [r7, #3]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	33e0      	adds	r3, #224	@ 0xe0
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	685a      	ldr	r2, [r3, #4]
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	33e0      	adds	r3, #224	@ 0xe0
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	440b      	add	r3, r1
 8008bd0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]
 8008bf0:	e00f      	b.n	8008c12 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	33e0      	adds	r3, #224	@ 0xe0
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d102      	bne.n	8008c0c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	e007      	b.n	8008c1c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	73fb      	strb	r3, [r7, #15]
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	2b0f      	cmp	r3, #15
 8008c16:	d9ec      	bls.n	8008bf2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	490e      	ldr	r1, [pc, #56]	@ (8008c68 <MX_USB_HOST_Init+0x40>)
 8008c30:	480e      	ldr	r0, [pc, #56]	@ (8008c6c <MX_USB_HOST_Init+0x44>)
 8008c32:	f7fe fb15 	bl	8007260 <USBH_Init>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008c3c:	f7f7 ff14 	bl	8000a68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008c40:	490b      	ldr	r1, [pc, #44]	@ (8008c70 <MX_USB_HOST_Init+0x48>)
 8008c42:	480a      	ldr	r0, [pc, #40]	@ (8008c6c <MX_USB_HOST_Init+0x44>)
 8008c44:	f7fe fbb9 	bl	80073ba <USBH_RegisterClass>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008c4e:	f7f7 ff0b 	bl	8000a68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008c52:	4806      	ldr	r0, [pc, #24]	@ (8008c6c <MX_USB_HOST_Init+0x44>)
 8008c54:	f7fe fc3d 	bl	80074d2 <USBH_Start>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008c5e:	f7f7 ff03 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008c62:	bf00      	nop
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	08008c89 	.word	0x08008c89
 8008c6c:	200001e0 	.word	0x200001e0
 8008c70:	2000000c 	.word	0x2000000c

08008c74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008c78:	4802      	ldr	r0, [pc, #8]	@ (8008c84 <MX_USB_HOST_Process+0x10>)
 8008c7a:	f7fe fc3b 	bl	80074f4 <USBH_Process>
}
 8008c7e:	bf00      	nop
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	200001e0 	.word	0x200001e0

08008c88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	2b04      	cmp	r3, #4
 8008c9a:	d819      	bhi.n	8008cd0 <USBH_UserProcess+0x48>
 8008c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca4 <USBH_UserProcess+0x1c>)
 8008c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca2:	bf00      	nop
 8008ca4:	08008cd1 	.word	0x08008cd1
 8008ca8:	08008cc1 	.word	0x08008cc1
 8008cac:	08008cd1 	.word	0x08008cd1
 8008cb0:	08008cc9 	.word	0x08008cc9
 8008cb4:	08008cb9 	.word	0x08008cb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008cb8:	4b09      	ldr	r3, [pc, #36]	@ (8008ce0 <USBH_UserProcess+0x58>)
 8008cba:	2203      	movs	r2, #3
 8008cbc:	701a      	strb	r2, [r3, #0]
  break;
 8008cbe:	e008      	b.n	8008cd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <USBH_UserProcess+0x58>)
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	701a      	strb	r2, [r3, #0]
  break;
 8008cc6:	e004      	b.n	8008cd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008cc8:	4b05      	ldr	r3, [pc, #20]	@ (8008ce0 <USBH_UserProcess+0x58>)
 8008cca:	2201      	movs	r2, #1
 8008ccc:	701a      	strb	r2, [r3, #0]
  break;
 8008cce:	e000      	b.n	8008cd2 <USBH_UserProcess+0x4a>

  default:
  break;
 8008cd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008cd2:	bf00      	nop
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	200005b8 	.word	0x200005b8

08008ce4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b08a      	sub	sp, #40	@ 0x28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cec:	f107 0314 	add.w	r3, r7, #20
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	605a      	str	r2, [r3, #4]
 8008cf6:	609a      	str	r2, [r3, #8]
 8008cf8:	60da      	str	r2, [r3, #12]
 8008cfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d04:	d147      	bne.n	8008d96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d06:	2300      	movs	r3, #0
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	4b25      	ldr	r3, [pc, #148]	@ (8008da0 <HAL_HCD_MspInit+0xbc>)
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d0e:	4a24      	ldr	r2, [pc, #144]	@ (8008da0 <HAL_HCD_MspInit+0xbc>)
 8008d10:	f043 0301 	orr.w	r3, r3, #1
 8008d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d16:	4b22      	ldr	r3, [pc, #136]	@ (8008da0 <HAL_HCD_MspInit+0xbc>)
 8008d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	613b      	str	r3, [r7, #16]
 8008d20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008d22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008d30:	f107 0314 	add.w	r3, r7, #20
 8008d34:	4619      	mov	r1, r3
 8008d36:	481b      	ldr	r0, [pc, #108]	@ (8008da4 <HAL_HCD_MspInit+0xc0>)
 8008d38:	f7f8 fe6c 	bl	8001a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008d3c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d42:	2302      	movs	r3, #2
 8008d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d4e:	230a      	movs	r3, #10
 8008d50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d52:	f107 0314 	add.w	r3, r7, #20
 8008d56:	4619      	mov	r1, r3
 8008d58:	4812      	ldr	r0, [pc, #72]	@ (8008da4 <HAL_HCD_MspInit+0xc0>)
 8008d5a:	f7f8 fe5b 	bl	8001a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d5e:	4b10      	ldr	r3, [pc, #64]	@ (8008da0 <HAL_HCD_MspInit+0xbc>)
 8008d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d62:	4a0f      	ldr	r2, [pc, #60]	@ (8008da0 <HAL_HCD_MspInit+0xbc>)
 8008d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d68:	6353      	str	r3, [r2, #52]	@ 0x34
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008da0 <HAL_HCD_MspInit+0xbc>)
 8008d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d72:	4a0b      	ldr	r2, [pc, #44]	@ (8008da0 <HAL_HCD_MspInit+0xbc>)
 8008d74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d7a:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <HAL_HCD_MspInit+0xbc>)
 8008d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d86:	2200      	movs	r2, #0
 8008d88:	2100      	movs	r1, #0
 8008d8a:	2043      	movs	r0, #67	@ 0x43
 8008d8c:	f7f8 fe0b 	bl	80019a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d90:	2043      	movs	r0, #67	@ 0x43
 8008d92:	f7f8 fe24 	bl	80019de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d96:	bf00      	nop
 8008d98:	3728      	adds	r7, #40	@ 0x28
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	40023800 	.word	0x40023800
 8008da4:	40020000 	.word	0x40020000

08008da8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe ff73 	bl	8007ca2 <USBH_LL_IncTimer>
}
 8008dbc:	bf00      	nop
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe ffab 	bl	8007d2e <USBH_LL_Connect>
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fe ffb4 	bl	8007d5c <USBH_LL_Disconnect>
}
 8008df4:	bf00      	nop
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70fb      	strb	r3, [r7, #3]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe ff65 	bl	8007cf6 <USBH_LL_PortEnabled>
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fe ff65 	bl	8007d12 <USBH_LL_PortDisabled>
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d12a      	bne.n	8008eb8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008e62:	4a18      	ldr	r2, [pc, #96]	@ (8008ec4 <USBH_LL_Init+0x74>)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a15      	ldr	r2, [pc, #84]	@ (8008ec4 <USBH_LL_Init+0x74>)
 8008e6e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e72:	4b14      	ldr	r3, [pc, #80]	@ (8008ec4 <USBH_LL_Init+0x74>)
 8008e74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008e78:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008e7a:	4b12      	ldr	r3, [pc, #72]	@ (8008ec4 <USBH_LL_Init+0x74>)
 8008e7c:	2208      	movs	r2, #8
 8008e7e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008e80:	4b10      	ldr	r3, [pc, #64]	@ (8008ec4 <USBH_LL_Init+0x74>)
 8008e82:	2201      	movs	r2, #1
 8008e84:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e86:	4b0f      	ldr	r3, [pc, #60]	@ (8008ec4 <USBH_LL_Init+0x74>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ec4 <USBH_LL_Init+0x74>)
 8008e8e:	2202      	movs	r2, #2
 8008e90:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e92:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec4 <USBH_LL_Init+0x74>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008e98:	480a      	ldr	r0, [pc, #40]	@ (8008ec4 <USBH_LL_Init+0x74>)
 8008e9a:	f7f8 ff70 	bl	8001d7e <HAL_HCD_Init>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008ea4:	f7f7 fde0 	bl	8000a68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ea8:	4806      	ldr	r0, [pc, #24]	@ (8008ec4 <USBH_LL_Init+0x74>)
 8008eaa:	f7f9 fbd1 	bl	8002650 <HAL_HCD_GetCurrentFrame>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7fe fee6 	bl	8007c84 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	200005bc 	.word	0x200005bc

08008ec8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7f9 fb3e 	bl	8002560 <HAL_HCD_Start>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 f95e 	bl	80091ac <USBH_Get_USB_Status>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7f9 fb46 	bl	80025a6 <HAL_HCD_Stop>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 f943 	bl	80091ac <USBH_Get_USB_Status>
 8008f26:	4603      	mov	r3, r0
 8008f28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7f9 fb90 	bl	800266c <HAL_HCD_GetCurrentSpeed>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d00c      	beq.n	8008f6c <USBH_LL_GetSpeed+0x38>
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d80d      	bhi.n	8008f72 <USBH_LL_GetSpeed+0x3e>
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d002      	beq.n	8008f60 <USBH_LL_GetSpeed+0x2c>
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d003      	beq.n	8008f66 <USBH_LL_GetSpeed+0x32>
 8008f5e:	e008      	b.n	8008f72 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008f60:	2300      	movs	r3, #0
 8008f62:	73fb      	strb	r3, [r7, #15]
    break;
 8008f64:	e008      	b.n	8008f78 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008f66:	2301      	movs	r3, #1
 8008f68:	73fb      	strb	r3, [r7, #15]
    break;
 8008f6a:	e005      	b.n	8008f78 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f70:	e002      	b.n	8008f78 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008f72:	2301      	movs	r3, #1
 8008f74:	73fb      	strb	r3, [r7, #15]
    break;
 8008f76:	bf00      	nop
  }
  return  speed;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7f9 fb21 	bl	80025e0 <HAL_HCD_ResetPort>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 f901 	bl	80091ac <USBH_Get_USB_Status>
 8008faa:	4603      	mov	r3, r0
 8008fac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fca:	78fa      	ldrb	r2, [r7, #3]
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f9 fb29 	bl	8002626 <HAL_HCD_HC_GetXferCount>
 8008fd4:	4603      	mov	r3, r0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008fde:	b590      	push	{r4, r7, lr}
 8008fe0:	b089      	sub	sp, #36	@ 0x24
 8008fe2:	af04      	add	r7, sp, #16
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	4608      	mov	r0, r1
 8008fe8:	4611      	mov	r1, r2
 8008fea:	461a      	mov	r2, r3
 8008fec:	4603      	mov	r3, r0
 8008fee:	70fb      	strb	r3, [r7, #3]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	70bb      	strb	r3, [r7, #2]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009006:	787c      	ldrb	r4, [r7, #1]
 8009008:	78ba      	ldrb	r2, [r7, #2]
 800900a:	78f9      	ldrb	r1, [r7, #3]
 800900c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800900e:	9302      	str	r3, [sp, #8]
 8009010:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009014:	9301      	str	r3, [sp, #4]
 8009016:	f897 3020 	ldrb.w	r3, [r7, #32]
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	4623      	mov	r3, r4
 800901e:	f7f8 ff15 	bl	8001e4c <HAL_HCD_HC_Init>
 8009022:	4603      	mov	r3, r0
 8009024:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f8bf 	bl	80091ac <USBH_Get_USB_Status>
 800902e:	4603      	mov	r3, r0
 8009030:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009032:	7bbb      	ldrb	r3, [r7, #14]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	bd90      	pop	{r4, r7, pc}

0800903c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009056:	78fa      	ldrb	r2, [r7, #3]
 8009058:	4611      	mov	r1, r2
 800905a:	4618      	mov	r0, r3
 800905c:	f7f8 ffae 	bl	8001fbc <HAL_HCD_HC_Halt>
 8009060:	4603      	mov	r3, r0
 8009062:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f8a0 	bl	80091ac <USBH_Get_USB_Status>
 800906c:	4603      	mov	r3, r0
 800906e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009070:	7bbb      	ldrb	r3, [r7, #14]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800907a:	b590      	push	{r4, r7, lr}
 800907c:	b089      	sub	sp, #36	@ 0x24
 800907e:	af04      	add	r7, sp, #16
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	4608      	mov	r0, r1
 8009084:	4611      	mov	r1, r2
 8009086:	461a      	mov	r2, r3
 8009088:	4603      	mov	r3, r0
 800908a:	70fb      	strb	r3, [r7, #3]
 800908c:	460b      	mov	r3, r1
 800908e:	70bb      	strb	r3, [r7, #2]
 8009090:	4613      	mov	r3, r2
 8009092:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80090a2:	787c      	ldrb	r4, [r7, #1]
 80090a4:	78ba      	ldrb	r2, [r7, #2]
 80090a6:	78f9      	ldrb	r1, [r7, #3]
 80090a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80090ac:	9303      	str	r3, [sp, #12]
 80090ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80090b0:	9302      	str	r3, [sp, #8]
 80090b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b4:	9301      	str	r3, [sp, #4]
 80090b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	4623      	mov	r3, r4
 80090be:	f7f8 ffa1 	bl	8002004 <HAL_HCD_HC_SubmitRequest>
 80090c2:	4603      	mov	r3, r0
 80090c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 f86f 	bl	80091ac <USBH_Get_USB_Status>
 80090ce:	4603      	mov	r3, r0
 80090d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd90      	pop	{r4, r7, pc}

080090dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80090ee:	78fa      	ldrb	r2, [r7, #3]
 80090f0:	4611      	mov	r1, r2
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7f9 fa82 	bl	80025fc <HAL_HCD_HC_GetURBState>
 80090f8:	4603      	mov	r3, r0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	460b      	mov	r3, r1
 800910c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009114:	2b01      	cmp	r3, #1
 8009116:	d103      	bne.n	8009120 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	4618      	mov	r0, r3
 800911c:	f000 f872 	bl	8009204 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009120:	20c8      	movs	r0, #200	@ 0xc8
 8009122:	f7f7 ff41 	bl	8000fa8 <HAL_Delay>
  return USBH_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
 800913c:	4613      	mov	r3, r2
 800913e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009146:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009148:	78fa      	ldrb	r2, [r7, #3]
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	4613      	mov	r3, r2
 800914e:	011b      	lsls	r3, r3, #4
 8009150:	1a9b      	subs	r3, r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	440b      	add	r3, r1
 8009156:	3317      	adds	r3, #23
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	68f9      	ldr	r1, [r7, #12]
 8009162:	4613      	mov	r3, r2
 8009164:	011b      	lsls	r3, r3, #4
 8009166:	1a9b      	subs	r3, r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	440b      	add	r3, r1
 800916c:	333c      	adds	r3, #60	@ 0x3c
 800916e:	78ba      	ldrb	r2, [r7, #2]
 8009170:	701a      	strb	r2, [r3, #0]
 8009172:	e009      	b.n	8009188 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009174:	78fa      	ldrb	r2, [r7, #3]
 8009176:	68f9      	ldr	r1, [r7, #12]
 8009178:	4613      	mov	r3, r2
 800917a:	011b      	lsls	r3, r3, #4
 800917c:	1a9b      	subs	r3, r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	440b      	add	r3, r1
 8009182:	333d      	adds	r3, #61	@ 0x3d
 8009184:	78ba      	ldrb	r2, [r7, #2]
 8009186:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7f7 ff02 	bl	8000fa8 <HAL_Delay>
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	2b03      	cmp	r3, #3
 80091be:	d817      	bhi.n	80091f0 <USBH_Get_USB_Status+0x44>
 80091c0:	a201      	add	r2, pc, #4	@ (adr r2, 80091c8 <USBH_Get_USB_Status+0x1c>)
 80091c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c6:	bf00      	nop
 80091c8:	080091d9 	.word	0x080091d9
 80091cc:	080091df 	.word	0x080091df
 80091d0:	080091e5 	.word	0x080091e5
 80091d4:	080091eb 	.word	0x080091eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73fb      	strb	r3, [r7, #15]
    break;
 80091dc:	e00b      	b.n	80091f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80091de:	2302      	movs	r3, #2
 80091e0:	73fb      	strb	r3, [r7, #15]
    break;
 80091e2:	e008      	b.n	80091f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80091e4:	2301      	movs	r3, #1
 80091e6:	73fb      	strb	r3, [r7, #15]
    break;
 80091e8:	e005      	b.n	80091f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80091ea:	2302      	movs	r3, #2
 80091ec:	73fb      	strb	r3, [r7, #15]
    break;
 80091ee:	e002      	b.n	80091f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80091f0:	2302      	movs	r3, #2
 80091f2:	73fb      	strb	r3, [r7, #15]
    break;
 80091f4:	bf00      	nop
  }
  return usb_status;
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d102      	bne.n	800921e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009218:	2300      	movs	r3, #0
 800921a:	73fb      	strb	r3, [r7, #15]
 800921c:	e001      	b.n	8009222 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800921e:	2301      	movs	r3, #1
 8009220:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	461a      	mov	r2, r3
 8009226:	2101      	movs	r1, #1
 8009228:	4803      	ldr	r0, [pc, #12]	@ (8009238 <MX_DriverVbusFS+0x34>)
 800922a:	f7f8 fd8f 	bl	8001d4c <HAL_GPIO_WritePin>
}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	40020800 	.word	0x40020800

0800923c <malloc>:
 800923c:	4b02      	ldr	r3, [pc, #8]	@ (8009248 <malloc+0xc>)
 800923e:	4601      	mov	r1, r0
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	f000 b82d 	b.w	80092a0 <_malloc_r>
 8009246:	bf00      	nop
 8009248:	2000002c 	.word	0x2000002c

0800924c <free>:
 800924c:	4b02      	ldr	r3, [pc, #8]	@ (8009258 <free+0xc>)
 800924e:	4601      	mov	r1, r0
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	f000 b8f5 	b.w	8009440 <_free_r>
 8009256:	bf00      	nop
 8009258:	2000002c 	.word	0x2000002c

0800925c <sbrk_aligned>:
 800925c:	b570      	push	{r4, r5, r6, lr}
 800925e:	4e0f      	ldr	r6, [pc, #60]	@ (800929c <sbrk_aligned+0x40>)
 8009260:	460c      	mov	r4, r1
 8009262:	6831      	ldr	r1, [r6, #0]
 8009264:	4605      	mov	r5, r0
 8009266:	b911      	cbnz	r1, 800926e <sbrk_aligned+0x12>
 8009268:	f000 f8ae 	bl	80093c8 <_sbrk_r>
 800926c:	6030      	str	r0, [r6, #0]
 800926e:	4621      	mov	r1, r4
 8009270:	4628      	mov	r0, r5
 8009272:	f000 f8a9 	bl	80093c8 <_sbrk_r>
 8009276:	1c43      	adds	r3, r0, #1
 8009278:	d103      	bne.n	8009282 <sbrk_aligned+0x26>
 800927a:	f04f 34ff 	mov.w	r4, #4294967295
 800927e:	4620      	mov	r0, r4
 8009280:	bd70      	pop	{r4, r5, r6, pc}
 8009282:	1cc4      	adds	r4, r0, #3
 8009284:	f024 0403 	bic.w	r4, r4, #3
 8009288:	42a0      	cmp	r0, r4
 800928a:	d0f8      	beq.n	800927e <sbrk_aligned+0x22>
 800928c:	1a21      	subs	r1, r4, r0
 800928e:	4628      	mov	r0, r5
 8009290:	f000 f89a 	bl	80093c8 <_sbrk_r>
 8009294:	3001      	adds	r0, #1
 8009296:	d1f2      	bne.n	800927e <sbrk_aligned+0x22>
 8009298:	e7ef      	b.n	800927a <sbrk_aligned+0x1e>
 800929a:	bf00      	nop
 800929c:	2000099c 	.word	0x2000099c

080092a0 <_malloc_r>:
 80092a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a4:	1ccd      	adds	r5, r1, #3
 80092a6:	f025 0503 	bic.w	r5, r5, #3
 80092aa:	3508      	adds	r5, #8
 80092ac:	2d0c      	cmp	r5, #12
 80092ae:	bf38      	it	cc
 80092b0:	250c      	movcc	r5, #12
 80092b2:	2d00      	cmp	r5, #0
 80092b4:	4606      	mov	r6, r0
 80092b6:	db01      	blt.n	80092bc <_malloc_r+0x1c>
 80092b8:	42a9      	cmp	r1, r5
 80092ba:	d904      	bls.n	80092c6 <_malloc_r+0x26>
 80092bc:	230c      	movs	r3, #12
 80092be:	6033      	str	r3, [r6, #0]
 80092c0:	2000      	movs	r0, #0
 80092c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800939c <_malloc_r+0xfc>
 80092ca:	f000 f869 	bl	80093a0 <__malloc_lock>
 80092ce:	f8d8 3000 	ldr.w	r3, [r8]
 80092d2:	461c      	mov	r4, r3
 80092d4:	bb44      	cbnz	r4, 8009328 <_malloc_r+0x88>
 80092d6:	4629      	mov	r1, r5
 80092d8:	4630      	mov	r0, r6
 80092da:	f7ff ffbf 	bl	800925c <sbrk_aligned>
 80092de:	1c43      	adds	r3, r0, #1
 80092e0:	4604      	mov	r4, r0
 80092e2:	d158      	bne.n	8009396 <_malloc_r+0xf6>
 80092e4:	f8d8 4000 	ldr.w	r4, [r8]
 80092e8:	4627      	mov	r7, r4
 80092ea:	2f00      	cmp	r7, #0
 80092ec:	d143      	bne.n	8009376 <_malloc_r+0xd6>
 80092ee:	2c00      	cmp	r4, #0
 80092f0:	d04b      	beq.n	800938a <_malloc_r+0xea>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	4639      	mov	r1, r7
 80092f6:	4630      	mov	r0, r6
 80092f8:	eb04 0903 	add.w	r9, r4, r3
 80092fc:	f000 f864 	bl	80093c8 <_sbrk_r>
 8009300:	4581      	cmp	r9, r0
 8009302:	d142      	bne.n	800938a <_malloc_r+0xea>
 8009304:	6821      	ldr	r1, [r4, #0]
 8009306:	1a6d      	subs	r5, r5, r1
 8009308:	4629      	mov	r1, r5
 800930a:	4630      	mov	r0, r6
 800930c:	f7ff ffa6 	bl	800925c <sbrk_aligned>
 8009310:	3001      	adds	r0, #1
 8009312:	d03a      	beq.n	800938a <_malloc_r+0xea>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	442b      	add	r3, r5
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	f8d8 3000 	ldr.w	r3, [r8]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	bb62      	cbnz	r2, 800937c <_malloc_r+0xdc>
 8009322:	f8c8 7000 	str.w	r7, [r8]
 8009326:	e00f      	b.n	8009348 <_malloc_r+0xa8>
 8009328:	6822      	ldr	r2, [r4, #0]
 800932a:	1b52      	subs	r2, r2, r5
 800932c:	d420      	bmi.n	8009370 <_malloc_r+0xd0>
 800932e:	2a0b      	cmp	r2, #11
 8009330:	d917      	bls.n	8009362 <_malloc_r+0xc2>
 8009332:	1961      	adds	r1, r4, r5
 8009334:	42a3      	cmp	r3, r4
 8009336:	6025      	str	r5, [r4, #0]
 8009338:	bf18      	it	ne
 800933a:	6059      	strne	r1, [r3, #4]
 800933c:	6863      	ldr	r3, [r4, #4]
 800933e:	bf08      	it	eq
 8009340:	f8c8 1000 	streq.w	r1, [r8]
 8009344:	5162      	str	r2, [r4, r5]
 8009346:	604b      	str	r3, [r1, #4]
 8009348:	4630      	mov	r0, r6
 800934a:	f000 f82f 	bl	80093ac <__malloc_unlock>
 800934e:	f104 000b 	add.w	r0, r4, #11
 8009352:	1d23      	adds	r3, r4, #4
 8009354:	f020 0007 	bic.w	r0, r0, #7
 8009358:	1ac2      	subs	r2, r0, r3
 800935a:	bf1c      	itt	ne
 800935c:	1a1b      	subne	r3, r3, r0
 800935e:	50a3      	strne	r3, [r4, r2]
 8009360:	e7af      	b.n	80092c2 <_malloc_r+0x22>
 8009362:	6862      	ldr	r2, [r4, #4]
 8009364:	42a3      	cmp	r3, r4
 8009366:	bf0c      	ite	eq
 8009368:	f8c8 2000 	streq.w	r2, [r8]
 800936c:	605a      	strne	r2, [r3, #4]
 800936e:	e7eb      	b.n	8009348 <_malloc_r+0xa8>
 8009370:	4623      	mov	r3, r4
 8009372:	6864      	ldr	r4, [r4, #4]
 8009374:	e7ae      	b.n	80092d4 <_malloc_r+0x34>
 8009376:	463c      	mov	r4, r7
 8009378:	687f      	ldr	r7, [r7, #4]
 800937a:	e7b6      	b.n	80092ea <_malloc_r+0x4a>
 800937c:	461a      	mov	r2, r3
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	42a3      	cmp	r3, r4
 8009382:	d1fb      	bne.n	800937c <_malloc_r+0xdc>
 8009384:	2300      	movs	r3, #0
 8009386:	6053      	str	r3, [r2, #4]
 8009388:	e7de      	b.n	8009348 <_malloc_r+0xa8>
 800938a:	230c      	movs	r3, #12
 800938c:	6033      	str	r3, [r6, #0]
 800938e:	4630      	mov	r0, r6
 8009390:	f000 f80c 	bl	80093ac <__malloc_unlock>
 8009394:	e794      	b.n	80092c0 <_malloc_r+0x20>
 8009396:	6005      	str	r5, [r0, #0]
 8009398:	e7d6      	b.n	8009348 <_malloc_r+0xa8>
 800939a:	bf00      	nop
 800939c:	200009a0 	.word	0x200009a0

080093a0 <__malloc_lock>:
 80093a0:	4801      	ldr	r0, [pc, #4]	@ (80093a8 <__malloc_lock+0x8>)
 80093a2:	f000 b84b 	b.w	800943c <__retarget_lock_acquire_recursive>
 80093a6:	bf00      	nop
 80093a8:	20000ae0 	.word	0x20000ae0

080093ac <__malloc_unlock>:
 80093ac:	4801      	ldr	r0, [pc, #4]	@ (80093b4 <__malloc_unlock+0x8>)
 80093ae:	f000 b846 	b.w	800943e <__retarget_lock_release_recursive>
 80093b2:	bf00      	nop
 80093b4:	20000ae0 	.word	0x20000ae0

080093b8 <memset>:
 80093b8:	4402      	add	r2, r0
 80093ba:	4603      	mov	r3, r0
 80093bc:	4293      	cmp	r3, r2
 80093be:	d100      	bne.n	80093c2 <memset+0xa>
 80093c0:	4770      	bx	lr
 80093c2:	f803 1b01 	strb.w	r1, [r3], #1
 80093c6:	e7f9      	b.n	80093bc <memset+0x4>

080093c8 <_sbrk_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4d06      	ldr	r5, [pc, #24]	@ (80093e4 <_sbrk_r+0x1c>)
 80093cc:	2300      	movs	r3, #0
 80093ce:	4604      	mov	r4, r0
 80093d0:	4608      	mov	r0, r1
 80093d2:	602b      	str	r3, [r5, #0]
 80093d4:	f7f7 fd04 	bl	8000de0 <_sbrk>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d102      	bne.n	80093e2 <_sbrk_r+0x1a>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	b103      	cbz	r3, 80093e2 <_sbrk_r+0x1a>
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	bd38      	pop	{r3, r4, r5, pc}
 80093e4:	20000adc 	.word	0x20000adc

080093e8 <__errno>:
 80093e8:	4b01      	ldr	r3, [pc, #4]	@ (80093f0 <__errno+0x8>)
 80093ea:	6818      	ldr	r0, [r3, #0]
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	2000002c 	.word	0x2000002c

080093f4 <__libc_init_array>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	4d0d      	ldr	r5, [pc, #52]	@ (800942c <__libc_init_array+0x38>)
 80093f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009430 <__libc_init_array+0x3c>)
 80093fa:	1b64      	subs	r4, r4, r5
 80093fc:	10a4      	asrs	r4, r4, #2
 80093fe:	2600      	movs	r6, #0
 8009400:	42a6      	cmp	r6, r4
 8009402:	d109      	bne.n	8009418 <__libc_init_array+0x24>
 8009404:	4d0b      	ldr	r5, [pc, #44]	@ (8009434 <__libc_init_array+0x40>)
 8009406:	4c0c      	ldr	r4, [pc, #48]	@ (8009438 <__libc_init_array+0x44>)
 8009408:	f000 f864 	bl	80094d4 <_init>
 800940c:	1b64      	subs	r4, r4, r5
 800940e:	10a4      	asrs	r4, r4, #2
 8009410:	2600      	movs	r6, #0
 8009412:	42a6      	cmp	r6, r4
 8009414:	d105      	bne.n	8009422 <__libc_init_array+0x2e>
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	f855 3b04 	ldr.w	r3, [r5], #4
 800941c:	4798      	blx	r3
 800941e:	3601      	adds	r6, #1
 8009420:	e7ee      	b.n	8009400 <__libc_init_array+0xc>
 8009422:	f855 3b04 	ldr.w	r3, [r5], #4
 8009426:	4798      	blx	r3
 8009428:	3601      	adds	r6, #1
 800942a:	e7f2      	b.n	8009412 <__libc_init_array+0x1e>
 800942c:	08009510 	.word	0x08009510
 8009430:	08009510 	.word	0x08009510
 8009434:	08009510 	.word	0x08009510
 8009438:	08009514 	.word	0x08009514

0800943c <__retarget_lock_acquire_recursive>:
 800943c:	4770      	bx	lr

0800943e <__retarget_lock_release_recursive>:
 800943e:	4770      	bx	lr

08009440 <_free_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	4605      	mov	r5, r0
 8009444:	2900      	cmp	r1, #0
 8009446:	d041      	beq.n	80094cc <_free_r+0x8c>
 8009448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800944c:	1f0c      	subs	r4, r1, #4
 800944e:	2b00      	cmp	r3, #0
 8009450:	bfb8      	it	lt
 8009452:	18e4      	addlt	r4, r4, r3
 8009454:	f7ff ffa4 	bl	80093a0 <__malloc_lock>
 8009458:	4a1d      	ldr	r2, [pc, #116]	@ (80094d0 <_free_r+0x90>)
 800945a:	6813      	ldr	r3, [r2, #0]
 800945c:	b933      	cbnz	r3, 800946c <_free_r+0x2c>
 800945e:	6063      	str	r3, [r4, #4]
 8009460:	6014      	str	r4, [r2, #0]
 8009462:	4628      	mov	r0, r5
 8009464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009468:	f7ff bfa0 	b.w	80093ac <__malloc_unlock>
 800946c:	42a3      	cmp	r3, r4
 800946e:	d908      	bls.n	8009482 <_free_r+0x42>
 8009470:	6820      	ldr	r0, [r4, #0]
 8009472:	1821      	adds	r1, r4, r0
 8009474:	428b      	cmp	r3, r1
 8009476:	bf01      	itttt	eq
 8009478:	6819      	ldreq	r1, [r3, #0]
 800947a:	685b      	ldreq	r3, [r3, #4]
 800947c:	1809      	addeq	r1, r1, r0
 800947e:	6021      	streq	r1, [r4, #0]
 8009480:	e7ed      	b.n	800945e <_free_r+0x1e>
 8009482:	461a      	mov	r2, r3
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	b10b      	cbz	r3, 800948c <_free_r+0x4c>
 8009488:	42a3      	cmp	r3, r4
 800948a:	d9fa      	bls.n	8009482 <_free_r+0x42>
 800948c:	6811      	ldr	r1, [r2, #0]
 800948e:	1850      	adds	r0, r2, r1
 8009490:	42a0      	cmp	r0, r4
 8009492:	d10b      	bne.n	80094ac <_free_r+0x6c>
 8009494:	6820      	ldr	r0, [r4, #0]
 8009496:	4401      	add	r1, r0
 8009498:	1850      	adds	r0, r2, r1
 800949a:	4283      	cmp	r3, r0
 800949c:	6011      	str	r1, [r2, #0]
 800949e:	d1e0      	bne.n	8009462 <_free_r+0x22>
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	6053      	str	r3, [r2, #4]
 80094a6:	4408      	add	r0, r1
 80094a8:	6010      	str	r0, [r2, #0]
 80094aa:	e7da      	b.n	8009462 <_free_r+0x22>
 80094ac:	d902      	bls.n	80094b4 <_free_r+0x74>
 80094ae:	230c      	movs	r3, #12
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	e7d6      	b.n	8009462 <_free_r+0x22>
 80094b4:	6820      	ldr	r0, [r4, #0]
 80094b6:	1821      	adds	r1, r4, r0
 80094b8:	428b      	cmp	r3, r1
 80094ba:	bf04      	itt	eq
 80094bc:	6819      	ldreq	r1, [r3, #0]
 80094be:	685b      	ldreq	r3, [r3, #4]
 80094c0:	6063      	str	r3, [r4, #4]
 80094c2:	bf04      	itt	eq
 80094c4:	1809      	addeq	r1, r1, r0
 80094c6:	6021      	streq	r1, [r4, #0]
 80094c8:	6054      	str	r4, [r2, #4]
 80094ca:	e7ca      	b.n	8009462 <_free_r+0x22>
 80094cc:	bd38      	pop	{r3, r4, r5, pc}
 80094ce:	bf00      	nop
 80094d0:	200009a0 	.word	0x200009a0

080094d4 <_init>:
 80094d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d6:	bf00      	nop
 80094d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094da:	bc08      	pop	{r3}
 80094dc:	469e      	mov	lr, r3
 80094de:	4770      	bx	lr

080094e0 <_fini>:
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	bf00      	nop
 80094e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094e6:	bc08      	pop	{r3}
 80094e8:	469e      	mov	lr, r3
 80094ea:	4770      	bx	lr
