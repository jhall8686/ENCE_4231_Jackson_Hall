
Ultrasonic_Sensor_Challenge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa40  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800abc8  0800abc8  0000bbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abe4  0800abe4  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abe4  0800abe4  0000bbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abec  0800abec  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abec  0800abec  0000bbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abf0  0800abf0  0000bbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800abf4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000ac0  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b3c  20000b3c  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e5b  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e3c  00000000  00000000  00025f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  00029d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b8  00000000  00000000  0002b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243aa  00000000  00000000  0002c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db12  00000000  00000000  00050992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41e0  00000000  00000000  0006e4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00142684  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065a8  00000000  00000000  001426c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  00148c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800abb0 	.word	0x0800abb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800abb0 	.word	0x0800abb0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b988 	b.w	8000ccc <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	468e      	mov	lr, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	4688      	mov	r8, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14a      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d962      	bls.n	8000ab0 <__udivmoddi4+0xdc>
 80009ea:	fab2 f682 	clz	r6, r2
 80009ee:	b14e      	cbz	r6, 8000a04 <__udivmoddi4+0x30>
 80009f0:	f1c6 0320 	rsb	r3, r6, #32
 80009f4:	fa01 f806 	lsl.w	r8, r1, r6
 80009f8:	fa20 f303 	lsr.w	r3, r0, r3
 80009fc:	40b7      	lsls	r7, r6
 80009fe:	ea43 0808 	orr.w	r8, r3, r8
 8000a02:	40b4      	lsls	r4, r6
 8000a04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a08:	fa1f fc87 	uxth.w	ip, r7
 8000a0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a10:	0c23      	lsrs	r3, r4, #16
 8000a12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d909      	bls.n	8000a36 <__udivmoddi4+0x62>
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a28:	f080 80ea 	bcs.w	8000c00 <__udivmoddi4+0x22c>
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	f240 80e7 	bls.w	8000c00 <__udivmoddi4+0x22c>
 8000a32:	3902      	subs	r1, #2
 8000a34:	443b      	add	r3, r7
 8000a36:	1a9a      	subs	r2, r3, r2
 8000a38:	b2a3      	uxth	r3, r4
 8000a3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a4a:	459c      	cmp	ip, r3
 8000a4c:	d909      	bls.n	8000a62 <__udivmoddi4+0x8e>
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a54:	f080 80d6 	bcs.w	8000c04 <__udivmoddi4+0x230>
 8000a58:	459c      	cmp	ip, r3
 8000a5a:	f240 80d3 	bls.w	8000c04 <__udivmoddi4+0x230>
 8000a5e:	443b      	add	r3, r7
 8000a60:	3802      	subs	r0, #2
 8000a62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a66:	eba3 030c 	sub.w	r3, r3, ip
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11d      	cbz	r5, 8000a76 <__udivmoddi4+0xa2>
 8000a6e:	40f3      	lsrs	r3, r6
 8000a70:	2200      	movs	r2, #0
 8000a72:	e9c5 3200 	strd	r3, r2, [r5]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d905      	bls.n	8000a8a <__udivmoddi4+0xb6>
 8000a7e:	b10d      	cbz	r5, 8000a84 <__udivmoddi4+0xb0>
 8000a80:	e9c5 0100 	strd	r0, r1, [r5]
 8000a84:	2100      	movs	r1, #0
 8000a86:	4608      	mov	r0, r1
 8000a88:	e7f5      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000a8a:	fab3 f183 	clz	r1, r3
 8000a8e:	2900      	cmp	r1, #0
 8000a90:	d146      	bne.n	8000b20 <__udivmoddi4+0x14c>
 8000a92:	4573      	cmp	r3, lr
 8000a94:	d302      	bcc.n	8000a9c <__udivmoddi4+0xc8>
 8000a96:	4282      	cmp	r2, r0
 8000a98:	f200 8105 	bhi.w	8000ca6 <__udivmoddi4+0x2d2>
 8000a9c:	1a84      	subs	r4, r0, r2
 8000a9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	4690      	mov	r8, r2
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d0e5      	beq.n	8000a76 <__udivmoddi4+0xa2>
 8000aaa:	e9c5 4800 	strd	r4, r8, [r5]
 8000aae:	e7e2      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	f000 8090 	beq.w	8000bd6 <__udivmoddi4+0x202>
 8000ab6:	fab2 f682 	clz	r6, r2
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	f040 80a4 	bne.w	8000c08 <__udivmoddi4+0x234>
 8000ac0:	1a8a      	subs	r2, r1, r2
 8000ac2:	0c03      	lsrs	r3, r0, #16
 8000ac4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	b2bc      	uxth	r4, r7
 8000acc:	2101      	movs	r1, #1
 8000ace:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ad2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ada:	fb04 f20c 	mul.w	r2, r4, ip
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d907      	bls.n	8000af2 <__udivmoddi4+0x11e>
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ae8:	d202      	bcs.n	8000af0 <__udivmoddi4+0x11c>
 8000aea:	429a      	cmp	r2, r3
 8000aec:	f200 80e0 	bhi.w	8000cb0 <__udivmoddi4+0x2dc>
 8000af0:	46c4      	mov	ip, r8
 8000af2:	1a9b      	subs	r3, r3, r2
 8000af4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000af8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000afc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b00:	fb02 f404 	mul.w	r4, r2, r4
 8000b04:	429c      	cmp	r4, r3
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0x144>
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x142>
 8000b10:	429c      	cmp	r4, r3
 8000b12:	f200 80ca 	bhi.w	8000caa <__udivmoddi4+0x2d6>
 8000b16:	4602      	mov	r2, r0
 8000b18:	1b1b      	subs	r3, r3, r4
 8000b1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b1e:	e7a5      	b.n	8000a6c <__udivmoddi4+0x98>
 8000b20:	f1c1 0620 	rsb	r6, r1, #32
 8000b24:	408b      	lsls	r3, r1
 8000b26:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2a:	431f      	orrs	r7, r3
 8000b2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b30:	fa20 f306 	lsr.w	r3, r0, r6
 8000b34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b3c:	4323      	orrs	r3, r4
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	fa1f fc87 	uxth.w	ip, r7
 8000b46:	fbbe f0f9 	udiv	r0, lr, r9
 8000b4a:	0c1c      	lsrs	r4, r3, #16
 8000b4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b58:	45a6      	cmp	lr, r4
 8000b5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b5e:	d909      	bls.n	8000b74 <__udivmoddi4+0x1a0>
 8000b60:	193c      	adds	r4, r7, r4
 8000b62:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b66:	f080 809c 	bcs.w	8000ca2 <__udivmoddi4+0x2ce>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f240 8099 	bls.w	8000ca2 <__udivmoddi4+0x2ce>
 8000b70:	3802      	subs	r0, #2
 8000b72:	443c      	add	r4, r7
 8000b74:	eba4 040e 	sub.w	r4, r4, lr
 8000b78:	fa1f fe83 	uxth.w	lr, r3
 8000b7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b80:	fb09 4413 	mls	r4, r9, r3, r4
 8000b84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x1ce>
 8000b90:	193c      	adds	r4, r7, r4
 8000b92:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b96:	f080 8082 	bcs.w	8000c9e <__udivmoddi4+0x2ca>
 8000b9a:	45a4      	cmp	ip, r4
 8000b9c:	d97f      	bls.n	8000c9e <__udivmoddi4+0x2ca>
 8000b9e:	3b02      	subs	r3, #2
 8000ba0:	443c      	add	r4, r7
 8000ba2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ba6:	eba4 040c 	sub.w	r4, r4, ip
 8000baa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bae:	4564      	cmp	r4, ip
 8000bb0:	4673      	mov	r3, lr
 8000bb2:	46e1      	mov	r9, ip
 8000bb4:	d362      	bcc.n	8000c7c <__udivmoddi4+0x2a8>
 8000bb6:	d05f      	beq.n	8000c78 <__udivmoddi4+0x2a4>
 8000bb8:	b15d      	cbz	r5, 8000bd2 <__udivmoddi4+0x1fe>
 8000bba:	ebb8 0203 	subs.w	r2, r8, r3
 8000bbe:	eb64 0409 	sbc.w	r4, r4, r9
 8000bc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000bc6:	fa22 f301 	lsr.w	r3, r2, r1
 8000bca:	431e      	orrs	r6, r3
 8000bcc:	40cc      	lsrs	r4, r1
 8000bce:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	e74f      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000bd6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bda:	0c01      	lsrs	r1, r0, #16
 8000bdc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000be0:	b280      	uxth	r0, r0
 8000be2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000be6:	463b      	mov	r3, r7
 8000be8:	4638      	mov	r0, r7
 8000bea:	463c      	mov	r4, r7
 8000bec:	46b8      	mov	r8, r7
 8000bee:	46be      	mov	lr, r7
 8000bf0:	2620      	movs	r6, #32
 8000bf2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bf6:	eba2 0208 	sub.w	r2, r2, r8
 8000bfa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bfe:	e766      	b.n	8000ace <__udivmoddi4+0xfa>
 8000c00:	4601      	mov	r1, r0
 8000c02:	e718      	b.n	8000a36 <__udivmoddi4+0x62>
 8000c04:	4610      	mov	r0, r2
 8000c06:	e72c      	b.n	8000a62 <__udivmoddi4+0x8e>
 8000c08:	f1c6 0220 	rsb	r2, r6, #32
 8000c0c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	40b1      	lsls	r1, r6
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c28:	0c11      	lsrs	r1, r2, #16
 8000c2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2e:	fb08 f904 	mul.w	r9, r8, r4
 8000c32:	40b0      	lsls	r0, r6
 8000c34:	4589      	cmp	r9, r1
 8000c36:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c3a:	b280      	uxth	r0, r0
 8000c3c:	d93e      	bls.n	8000cbc <__udivmoddi4+0x2e8>
 8000c3e:	1879      	adds	r1, r7, r1
 8000c40:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c44:	d201      	bcs.n	8000c4a <__udivmoddi4+0x276>
 8000c46:	4589      	cmp	r9, r1
 8000c48:	d81f      	bhi.n	8000c8a <__udivmoddi4+0x2b6>
 8000c4a:	eba1 0109 	sub.w	r1, r1, r9
 8000c4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c52:	fb09 f804 	mul.w	r8, r9, r4
 8000c56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c5a:	b292      	uxth	r2, r2
 8000c5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c60:	4542      	cmp	r2, r8
 8000c62:	d229      	bcs.n	8000cb8 <__udivmoddi4+0x2e4>
 8000c64:	18ba      	adds	r2, r7, r2
 8000c66:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c6a:	d2c4      	bcs.n	8000bf6 <__udivmoddi4+0x222>
 8000c6c:	4542      	cmp	r2, r8
 8000c6e:	d2c2      	bcs.n	8000bf6 <__udivmoddi4+0x222>
 8000c70:	f1a9 0102 	sub.w	r1, r9, #2
 8000c74:	443a      	add	r2, r7
 8000c76:	e7be      	b.n	8000bf6 <__udivmoddi4+0x222>
 8000c78:	45f0      	cmp	r8, lr
 8000c7a:	d29d      	bcs.n	8000bb8 <__udivmoddi4+0x1e4>
 8000c7c:	ebbe 0302 	subs.w	r3, lr, r2
 8000c80:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c84:	3801      	subs	r0, #1
 8000c86:	46e1      	mov	r9, ip
 8000c88:	e796      	b.n	8000bb8 <__udivmoddi4+0x1e4>
 8000c8a:	eba7 0909 	sub.w	r9, r7, r9
 8000c8e:	4449      	add	r1, r9
 8000c90:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c94:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c98:	fb09 f804 	mul.w	r8, r9, r4
 8000c9c:	e7db      	b.n	8000c56 <__udivmoddi4+0x282>
 8000c9e:	4673      	mov	r3, lr
 8000ca0:	e77f      	b.n	8000ba2 <__udivmoddi4+0x1ce>
 8000ca2:	4650      	mov	r0, sl
 8000ca4:	e766      	b.n	8000b74 <__udivmoddi4+0x1a0>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e6fd      	b.n	8000aa6 <__udivmoddi4+0xd2>
 8000caa:	443b      	add	r3, r7
 8000cac:	3a02      	subs	r2, #2
 8000cae:	e733      	b.n	8000b18 <__udivmoddi4+0x144>
 8000cb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cb4:	443b      	add	r3, r7
 8000cb6:	e71c      	b.n	8000af2 <__udivmoddi4+0x11e>
 8000cb8:	4649      	mov	r1, r9
 8000cba:	e79c      	b.n	8000bf6 <__udivmoddi4+0x222>
 8000cbc:	eba1 0109 	sub.w	r1, r1, r9
 8000cc0:	46c4      	mov	ip, r8
 8000cc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc6:	fb09 f804 	mul.w	r8, r9, r4
 8000cca:	e7c4      	b.n	8000c56 <__udivmoddi4+0x282>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd4:	f000 fe68 	bl	80019a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd8:	f000 f846 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cdc:	f000 fa1a 	bl	8001114 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ce0:	f000 f8ac 	bl	8000e3c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ce4:	f000 f8d8 	bl	8000e98 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ce8:	f000 f906 	bl	8000ef8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000cec:	f009 fb0a 	bl	800a304 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000cf0:	f000 f938 	bl	8000f64 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cf4:	f000 f9ba 	bl	800106c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4817      	ldr	r0, [pc, #92]	@ (8000d58 <main+0x88>)
 8000cfc:	f004 ff8c 	bl	8005c18 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d00:	2100      	movs	r1, #0
 8000d02:	4816      	ldr	r0, [pc, #88]	@ (8000d5c <main+0x8c>)
 8000d04:	f005 f8a0 	bl	8005e48 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	gDistance_cm = gPulseLength*.0340/2;
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <main+0x90>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fb9d 	bl	800044c <__aeabi_ui2d>
 8000d12:	a30f      	add	r3, pc, #60	@ (adr r3, 8000d50 <main+0x80>)
 8000d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d18:	f7ff fc12 	bl	8000540 <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4610      	mov	r0, r2
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d2c:	f7ff fd32 	bl	8000794 <__aeabi_ddiv>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4610      	mov	r0, r2
 8000d36:	4619      	mov	r1, r3
 8000d38:	f7ff fe14 	bl	8000964 <__aeabi_d2uiz>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a09      	ldr	r2, [pc, #36]	@ (8000d64 <main+0x94>)
 8000d40:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d42:	f009 fb05 	bl	800a350 <MX_USB_HOST_Process>
	gDistance_cm = gPulseLength*.0340/2;
 8000d46:	bf00      	nop
 8000d48:	e7de      	b.n	8000d08 <main+0x38>
 8000d4a:	bf00      	nop
 8000d4c:	f3af 8000 	nop.w
 8000d50:	b020c49c 	.word	0xb020c49c
 8000d54:	3fa16872 	.word	0x3fa16872
 8000d58:	2000018c 	.word	0x2000018c
 8000d5c:	200001d4 	.word	0x200001d4
 8000d60:	20000224 	.word	0x20000224
 8000d64:	2000022c 	.word	0x2000022c

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b094      	sub	sp, #80	@ 0x50
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	2230      	movs	r2, #48	@ 0x30
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f009 fe8c 	bl	800aa94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	4b28      	ldr	r3, [pc, #160]	@ (8000e34 <SystemClock_Config+0xcc>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	4a27      	ldr	r2, [pc, #156]	@ (8000e34 <SystemClock_Config+0xcc>)
 8000d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9c:	4b25      	ldr	r3, [pc, #148]	@ (8000e34 <SystemClock_Config+0xcc>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <SystemClock_Config+0xd0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a21      	ldr	r2, [pc, #132]	@ (8000e38 <SystemClock_Config+0xd0>)
 8000db2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <SystemClock_Config+0xd0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ddc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000de0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de2:	2302      	movs	r3, #2
 8000de4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000de6:	2307      	movs	r3, #7
 8000de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dea:	f107 0320 	add.w	r3, r7, #32
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 f874 	bl	8004edc <HAL_RCC_OscConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dfa:	f000 faeb 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfe:	230f      	movs	r3, #15
 8000e00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e02:	2302      	movs	r3, #2
 8000e04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e0a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	2105      	movs	r1, #5
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fad5 	bl	80053cc <HAL_RCC_ClockConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e28:	f000 fad4 	bl	80013d4 <Error_Handler>
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3750      	adds	r7, #80	@ 0x50
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40007000 	.word	0x40007000

08000e3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e42:	4a13      	ldr	r2, [pc, #76]	@ (8000e90 <MX_I2C1_Init+0x54>)
 8000e44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e48:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <MX_I2C1_Init+0x58>)
 8000e4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e7a:	f003 fa4b 	bl	8004314 <HAL_I2C_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e84:	f000 faa6 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000098 	.word	0x20000098
 8000e90:	40005400 	.word	0x40005400
 8000e94:	000186a0 	.word	0x000186a0

08000e98 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <MX_I2S3_Init+0x54>)
 8000e9e:	4a14      	ldr	r2, [pc, #80]	@ (8000ef0 <MX_I2S3_Init+0x58>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <MX_I2S3_Init+0x54>)
 8000ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ea8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <MX_I2S3_Init+0x54>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <MX_I2S3_Init+0x54>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <MX_I2S3_Init+0x54>)
 8000eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ebc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <MX_I2S3_Init+0x54>)
 8000ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef4 <MX_I2S3_Init+0x5c>)
 8000ec2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <MX_I2S3_Init+0x54>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000eca:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <MX_I2S3_Init+0x54>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <MX_I2S3_Init+0x54>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	@ (8000eec <MX_I2S3_Init+0x54>)
 8000ed8:	f003 fb60 	bl	800459c <HAL_I2S_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000ee2:	f000 fa77 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000ec 	.word	0x200000ec
 8000ef0:	40003c00 	.word	0x40003c00
 8000ef4:	00017700 	.word	0x00017700

08000ef8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000efc:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000efe:	4a18      	ldr	r2, [pc, #96]	@ (8000f60 <MX_SPI1_Init+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f02:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000f04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000f24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000f44:	220a      	movs	r2, #10
 8000f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	@ (8000f5c <MX_SPI1_Init+0x64>)
 8000f4a:	f004 fd8d 	bl	8005a68 <HAL_SPI_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f54:	f000 fa3e 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000134 	.word	0x20000134
 8000f60:	40013000 	.word	0x40013000

08000f64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b092      	sub	sp, #72	@ 0x48
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
 8000f84:	615a      	str	r2, [r3, #20]
 8000f86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f009 fd80 	bl	800aa94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f94:	4b33      	ldr	r3, [pc, #204]	@ (8001064 <MX_TIM1_Init+0x100>)
 8000f96:	4a34      	ldr	r2, [pc, #208]	@ (8001068 <MX_TIM1_Init+0x104>)
 8000f98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 8000f9a:	4b32      	ldr	r3, [pc, #200]	@ (8001064 <MX_TIM1_Init+0x100>)
 8000f9c:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000fa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b30      	ldr	r3, [pc, #192]	@ (8001064 <MX_TIM1_Init+0x100>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8001064 <MX_TIM1_Init+0x100>)
 8000faa:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001064 <MX_TIM1_Init+0x100>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001064 <MX_TIM1_Init+0x100>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbc:	4b29      	ldr	r3, [pc, #164]	@ (8001064 <MX_TIM1_Init+0x100>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fc2:	4828      	ldr	r0, [pc, #160]	@ (8001064 <MX_TIM1_Init+0x100>)
 8000fc4:	f004 fdd9 	bl	8005b7a <HAL_TIM_PWM_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000fce:	f000 fa01 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fda:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4820      	ldr	r0, [pc, #128]	@ (8001064 <MX_TIM1_Init+0x100>)
 8000fe2:	f005 febf 	bl	8006d64 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000fec:	f000 f9f2 	bl	80013d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff0:	2360      	movs	r3, #96	@ 0x60
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	4813      	ldr	r0, [pc, #76]	@ (8001064 <MX_TIM1_Init+0x100>)
 8001016:	f005 f9cb 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001020:	f000 f9d8 	bl	80013d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001038:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <MX_TIM1_Init+0x100>)
 8001048:	f005 ff08 	bl	8006e5c <HAL_TIMEx_ConfigBreakDeadTime>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001052:	f000 f9bf 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001056:	4803      	ldr	r0, [pc, #12]	@ (8001064 <MX_TIM1_Init+0x100>)
 8001058:	f000 fb88 	bl	800176c <HAL_TIM_MspPostInit>

}
 800105c:	bf00      	nop
 800105e:	3748      	adds	r7, #72	@ 0x48
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000018c 	.word	0x2000018c
 8001068:	40010000 	.word	0x40010000

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800107c:	463b      	mov	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001088:	4b20      	ldr	r3, [pc, #128]	@ (800110c <MX_TIM2_Init+0xa0>)
 800108a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800108e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001090:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <MX_TIM2_Init+0xa0>)
 8001092:	2253      	movs	r2, #83	@ 0x53
 8001094:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <MX_TIM2_Init+0xa0>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000-1;
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <MX_TIM2_Init+0xa0>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	@ (8001110 <MX_TIM2_Init+0xa4>)
 80010a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <MX_TIM2_Init+0xa0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <MX_TIM2_Init+0xa0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010ae:	4817      	ldr	r0, [pc, #92]	@ (800110c <MX_TIM2_Init+0xa0>)
 80010b0:	f004 fe7a 	bl	8005da8 <HAL_TIM_IC_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80010ba:	f000 f98b 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4619      	mov	r1, r3
 80010cc:	480f      	ldr	r0, [pc, #60]	@ (800110c <MX_TIM2_Init+0xa0>)
 80010ce:	f005 fe49 	bl	8006d64 <HAL_TIMEx_MasterConfigSynchronization>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010d8:	f000 f97c 	bl	80013d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010dc:	230a      	movs	r3, #10
 80010de:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010e0:	2301      	movs	r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	@ (800110c <MX_TIM2_Init+0xa0>)
 80010f4:	f005 f8c0 	bl	8006278 <HAL_TIM_IC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010fe:	f000 f969 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200001d4 	.word	0x200001d4
 8001110:	0001869f 	.word	0x0001869f

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	@ 0x30
 8001118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	4b7c      	ldr	r3, [pc, #496]	@ (8001320 <MX_GPIO_Init+0x20c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a7b      	ldr	r2, [pc, #492]	@ (8001320 <MX_GPIO_Init+0x20c>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b79      	ldr	r3, [pc, #484]	@ (8001320 <MX_GPIO_Init+0x20c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	4b75      	ldr	r3, [pc, #468]	@ (8001320 <MX_GPIO_Init+0x20c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a74      	ldr	r2, [pc, #464]	@ (8001320 <MX_GPIO_Init+0x20c>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b72      	ldr	r3, [pc, #456]	@ (8001320 <MX_GPIO_Init+0x20c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b6e      	ldr	r3, [pc, #440]	@ (8001320 <MX_GPIO_Init+0x20c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a6d      	ldr	r2, [pc, #436]	@ (8001320 <MX_GPIO_Init+0x20c>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b6b      	ldr	r3, [pc, #428]	@ (8001320 <MX_GPIO_Init+0x20c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b67      	ldr	r3, [pc, #412]	@ (8001320 <MX_GPIO_Init+0x20c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a66      	ldr	r2, [pc, #408]	@ (8001320 <MX_GPIO_Init+0x20c>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b64      	ldr	r3, [pc, #400]	@ (8001320 <MX_GPIO_Init+0x20c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b60      	ldr	r3, [pc, #384]	@ (8001320 <MX_GPIO_Init+0x20c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001320 <MX_GPIO_Init+0x20c>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001320 <MX_GPIO_Init+0x20c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b59      	ldr	r3, [pc, #356]	@ (8001320 <MX_GPIO_Init+0x20c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a58      	ldr	r2, [pc, #352]	@ (8001320 <MX_GPIO_Init+0x20c>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b56      	ldr	r3, [pc, #344]	@ (8001320 <MX_GPIO_Init+0x20c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2108      	movs	r1, #8
 80011d6:	4853      	ldr	r0, [pc, #332]	@ (8001324 <MX_GPIO_Init+0x210>)
 80011d8:	f000 ff2a 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2101      	movs	r1, #1
 80011e0:	4851      	ldr	r0, [pc, #324]	@ (8001328 <MX_GPIO_Init+0x214>)
 80011e2:	f000 ff25 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011e6:	2200      	movs	r2, #0
 80011e8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80011ec:	484f      	ldr	r0, [pc, #316]	@ (800132c <MX_GPIO_Init+0x218>)
 80011ee:	f000 ff1f 	bl	8002030 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011f2:	2308      	movs	r3, #8
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4846      	ldr	r0, [pc, #280]	@ (8001324 <MX_GPIO_Init+0x210>)
 800120a:	f000 fd75 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800120e:	2301      	movs	r3, #1
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4840      	ldr	r0, [pc, #256]	@ (8001328 <MX_GPIO_Init+0x214>)
 8001226:	f000 fd67 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800122a:	2302      	movs	r3, #2
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800122e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001234:	2302      	movs	r3, #2
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	483a      	ldr	r0, [pc, #232]	@ (8001328 <MX_GPIO_Init+0x214>)
 8001240:	f000 fd5a 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001244:	2308      	movs	r3, #8
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001254:	2305      	movs	r3, #5
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	4832      	ldr	r0, [pc, #200]	@ (8001328 <MX_GPIO_Init+0x214>)
 8001260:	f000 fd4a 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001264:	2301      	movs	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001268:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	482d      	ldr	r0, [pc, #180]	@ (8001330 <MX_GPIO_Init+0x21c>)
 800127a:	f000 fd3d 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800127e:	2304      	movs	r3, #4
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4828      	ldr	r0, [pc, #160]	@ (8001334 <MX_GPIO_Init+0x220>)
 8001292:	f000 fd31 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a8:	2305      	movs	r3, #5
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4820      	ldr	r0, [pc, #128]	@ (8001334 <MX_GPIO_Init+0x220>)
 80012b4:	f000 fd20 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80012b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012c2:	2302      	movs	r3, #2
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	4619      	mov	r1, r3
 80012cc:	4817      	ldr	r0, [pc, #92]	@ (800132c <MX_GPIO_Init+0x218>)
 80012ce:	f000 fd13 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012d2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80012d6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4810      	ldr	r0, [pc, #64]	@ (800132c <MX_GPIO_Init+0x218>)
 80012ec:	f000 fd04 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80012f0:	2320      	movs	r3, #32
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	480a      	ldr	r0, [pc, #40]	@ (800132c <MX_GPIO_Init+0x218>)
 8001304:	f000 fcf8 	bl	8001cf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	2007      	movs	r0, #7
 800130e:	f000 fcbc 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001312:	2007      	movs	r0, #7
 8001314:	f000 fcd5 	bl	8001cc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001318:	bf00      	nop
 800131a:	3730      	adds	r7, #48	@ 0x30
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40021000 	.word	0x40021000
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40020000 	.word	0x40020000
 8001334:	40020400 	.word	0x40020400

08001338 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 4 */


//Triggers on both edges of the echo signal
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001348:	d137      	bne.n	80013ba <HAL_TIM_IC_CaptureCallback+0x82>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7f1b      	ldrb	r3, [r3, #28]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d133      	bne.n	80013ba <HAL_TIM_IC_CaptureCallback+0x82>
	{

		if(!gEchoRec) {
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10a      	bne.n	8001370 <HAL_TIM_IC_CaptureCallback+0x38>
			gCount1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800135a:	2100      	movs	r1, #0
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f005 f8e9 	bl	8006534 <HAL_TIM_ReadCapturedValue>
 8001362:	4603      	mov	r3, r0
 8001364:	4a18      	ldr	r2, [pc, #96]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001366:	6013      	str	r3, [r2, #0]
			gEchoRec = 1;
 8001368:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
				gPulseLength = (0xFFFF - gCount1) + gCount2 + 1;
			}
			gEchoRec = 0;
		}
	}
}
 800136e:	e024      	b.n	80013ba <HAL_TIM_IC_CaptureCallback+0x82>
		else if(gEchoRec) {
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_TIM_IC_CaptureCallback+0x82>
			gCount2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001378:	2100      	movs	r1, #0
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f005 f8da 	bl	8006534 <HAL_TIM_ReadCapturedValue>
 8001380:	4603      	mov	r3, r0
 8001382:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x94>)
 8001384:	6013      	str	r3, [r2, #0]
			if(gCount2 > gCount1) {
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x94>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x90>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d907      	bls.n	80013a2 <HAL_TIM_IC_CaptureCallback+0x6a>
				gPulseLength = gCount2-gCount1;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x94>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x98>)
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e008      	b.n	80013b4 <HAL_TIM_IC_CaptureCallback+0x7c>
				gPulseLength = (0xFFFF - gCount1) + gCount2 + 1;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x94>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x90>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80013b0:	4a07      	ldr	r2, [pc, #28]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x98>)
 80013b2:	6013      	str	r3, [r2, #0]
			gEchoRec = 0;
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000228 	.word	0x20000228
 80013c8:	2000021c 	.word	0x2000021c
 80013cc:	20000220 	.word	0x20000220
 80013d0:	20000224 	.word	0x20000224

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <Error_Handler+0x8>

080013e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	4a0f      	ldr	r2, [pc, #60]	@ (800142c <HAL_MspInit+0x4c>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f6:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	4a08      	ldr	r2, [pc, #32]	@ (800142c <HAL_MspInit+0x4c>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	@ 0x40
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800141e:	2007      	movs	r0, #7
 8001420:	f000 fc28 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a19      	ldr	r2, [pc, #100]	@ (80014b4 <HAL_I2C_MspInit+0x84>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d12c      	bne.n	80014ac <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <HAL_I2C_MspInit+0x88>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <HAL_I2C_MspInit+0x88>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <HAL_I2C_MspInit+0x88>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800146e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001474:	2312      	movs	r3, #18
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001478:	2301      	movs	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001480:	2304      	movs	r3, #4
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	480c      	ldr	r0, [pc, #48]	@ (80014bc <HAL_I2C_MspInit+0x8c>)
 800148c:	f000 fc34 	bl	8001cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_I2C_MspInit+0x88>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	4a07      	ldr	r2, [pc, #28]	@ (80014b8 <HAL_I2C_MspInit+0x88>)
 800149a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800149e:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <HAL_I2C_MspInit+0x88>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	@ 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40005400 	.word	0x40005400
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020400 	.word	0x40020400

080014c0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08e      	sub	sp, #56	@ 0x38
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a31      	ldr	r2, [pc, #196]	@ (80015b0 <HAL_I2S_MspInit+0xf0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d15a      	bne.n	80015a6 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014f0:	2301      	movs	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80014f4:	23c0      	movs	r3, #192	@ 0xc0
 80014f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4618      	mov	r0, r3
 8001502:	f004 f96f 	bl	80057e4 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800150c:	f7ff ff62 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <HAL_I2S_MspInit+0xf4>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001518:	4a26      	ldr	r2, [pc, #152]	@ (80015b4 <HAL_I2S_MspInit+0xf4>)
 800151a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800151e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001520:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <HAL_I2S_MspInit+0xf4>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <HAL_I2S_MspInit+0xf4>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001534:	4a1f      	ldr	r2, [pc, #124]	@ (80015b4 <HAL_I2S_MspInit+0xf4>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6313      	str	r3, [r2, #48]	@ 0x30
 800153c:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <HAL_I2S_MspInit+0xf4>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <HAL_I2S_MspInit+0xf4>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	4a18      	ldr	r2, [pc, #96]	@ (80015b4 <HAL_I2S_MspInit+0xf4>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6313      	str	r3, [r2, #48]	@ 0x30
 8001558:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <HAL_I2S_MspInit+0xf4>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001564:	2310      	movs	r3, #16
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001574:	2306      	movs	r3, #6
 8001576:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	480e      	ldr	r0, [pc, #56]	@ (80015b8 <HAL_I2S_MspInit+0xf8>)
 8001580:	f000 fbba 	bl	8001cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001584:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001596:	2306      	movs	r3, #6
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	4806      	ldr	r0, [pc, #24]	@ (80015bc <HAL_I2S_MspInit+0xfc>)
 80015a2:	f000 fba9 	bl	8001cf8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80015a6:	bf00      	nop
 80015a8:	3738      	adds	r7, #56	@ 0x38
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40003c00 	.word	0x40003c00
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40020800 	.word	0x40020800

080015c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	@ (8001644 <HAL_SPI_MspInit+0x84>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12b      	bne.n	800163a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <HAL_SPI_MspInit+0x88>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	4a17      	ldr	r2, [pc, #92]	@ (8001648 <HAL_SPI_MspInit+0x88>)
 80015ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_SPI_MspInit+0x88>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_SPI_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a10      	ldr	r2, [pc, #64]	@ (8001648 <HAL_SPI_MspInit+0x88>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <HAL_SPI_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800161a:	23e0      	movs	r3, #224	@ 0xe0
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800162a:	2305      	movs	r3, #5
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	@ (800164c <HAL_SPI_MspInit+0x8c>)
 8001636:	f000 fb5f 	bl	8001cf8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40013000 	.word	0x40013000
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000

08001650 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a1a      	ldr	r2, [pc, #104]	@ (80016c8 <HAL_TIM_PWM_MspInit+0x78>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12d      	bne.n	80016be <HAL_TIM_PWM_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <HAL_TIM_PWM_MspInit+0x7c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	4a18      	ldr	r2, [pc, #96]	@ (80016cc <HAL_TIM_PWM_MspInit+0x7c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6453      	str	r3, [r2, #68]	@ 0x44
 8001672:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <HAL_TIM_PWM_MspInit+0x7c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	2018      	movs	r0, #24
 8001684:	f000 fb01 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001688:	2018      	movs	r0, #24
 800168a:	f000 fb1a 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2019      	movs	r0, #25
 8001694:	f000 faf9 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001698:	2019      	movs	r0, #25
 800169a:	f000 fb12 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	201a      	movs	r0, #26
 80016a4:	f000 faf1 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016a8:	201a      	movs	r0, #26
 80016aa:	f000 fb0a 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	201b      	movs	r0, #27
 80016b4:	f000 fae9 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016b8:	201b      	movs	r0, #27
 80016ba:	f000 fb02 	bl	8001cc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40010000 	.word	0x40010000
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	@ 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016f0:	d134      	bne.n	800175c <HAL_TIM_IC_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_TIM_IC_MspInit+0x94>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001764 <HAL_TIM_IC_MspInit+0x94>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6413      	str	r3, [r2, #64]	@ 0x40
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <HAL_TIM_IC_MspInit+0x94>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <HAL_TIM_IC_MspInit+0x94>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a13      	ldr	r2, [pc, #76]	@ (8001764 <HAL_TIM_IC_MspInit+0x94>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_TIM_IC_MspInit+0x94>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800172a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800173c:	2301      	movs	r3, #1
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4808      	ldr	r0, [pc, #32]	@ (8001768 <HAL_TIM_IC_MspInit+0x98>)
 8001748:	f000 fad6 	bl	8001cf8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	201c      	movs	r0, #28
 8001752:	f000 fa9a 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001756:	201c      	movs	r0, #28
 8001758:	f000 fab3 	bl	8001cc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	@ 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	40020000 	.word	0x40020000

0800176c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <HAL_TIM_MspPostInit+0x68>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d11e      	bne.n	80017cc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <HAL_TIM_MspPostInit+0x6c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a10      	ldr	r2, [pc, #64]	@ (80017d8 <HAL_TIM_MspPostInit+0x6c>)
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <HAL_TIM_MspPostInit+0x6c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017bc:	2301      	movs	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4619      	mov	r1, r3
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <HAL_TIM_MspPostInit+0x70>)
 80017c8:	f000 fa96 	bl	8001cf8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017cc:	bf00      	nop
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40010000 	.word	0x40010000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40021000 	.word	0x40021000

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <NMI_Handler+0x4>

080017e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <MemManage_Handler+0x4>

080017f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <UsageFault_Handler+0x4>

08001808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001836:	f000 f909 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}

0800183e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001842:	2002      	movs	r0, #2
 8001844:	f000 fc0e 	bl	8002064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001852:	f004 fc21 	bl	8006098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000018c 	.word	0x2000018c

08001860 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001866:	f004 fc17 	bl	8006098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000018c 	.word	0x2000018c

08001874 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800187a:	f004 fc0d 	bl	8006098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000018c 	.word	0x2000018c

08001888 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <TIM1_CC_IRQHandler+0x10>)
 800188e:	f004 fc03 	bl	8006098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000018c 	.word	0x2000018c

0800189c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <TIM2_IRQHandler+0x10>)
 80018a2:	f004 fbf9 	bl	8006098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200001d4 	.word	0x200001d4

080018b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <OTG_FS_IRQHandler+0x10>)
 80018b6:	f000 fed9 	bl	800266c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000614 	.word	0x20000614

080018c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018cc:	4a14      	ldr	r2, [pc, #80]	@ (8001920 <_sbrk+0x5c>)
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <_sbrk+0x60>)
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <_sbrk+0x64>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	@ (800192c <_sbrk+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d207      	bcs.n	8001904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f4:	f009 f8e6 	bl	800aac4 <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	220c      	movs	r2, #12
 80018fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	e009      	b.n	8001918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190a:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <_sbrk+0x64>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <_sbrk+0x64>)
 8001914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20020000 	.word	0x20020000
 8001924:	00000400 	.word	0x00000400
 8001928:	20000230 	.word	0x20000230
 800192c:	20000b40 	.word	0x20000b40

08001930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <SystemInit+0x20>)
 8001936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800193a:	4a05      	ldr	r2, [pc, #20]	@ (8001950 <SystemInit+0x20>)
 800193c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001954:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800198c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001958:	f7ff ffea 	bl	8001930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800195c:	480c      	ldr	r0, [pc, #48]	@ (8001990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195e:	490d      	ldr	r1, [pc, #52]	@ (8001994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001960:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001974:	4c0a      	ldr	r4, [pc, #40]	@ (80019a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001982:	f009 f8a5 	bl	800aad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001986:	f7ff f9a3 	bl	8000cd0 <main>
  bx  lr    
 800198a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800198c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001994:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001998:	0800abf4 	.word	0x0800abf4
  ldr r2, =_sbss
 800199c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80019a0:	20000b3c 	.word	0x20000b3c

080019a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC_IRQHandler>
	...

080019a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ac:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <HAL_Init+0x40>)
 80019b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <HAL_Init+0x40>)
 80019be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a07      	ldr	r2, [pc, #28]	@ (80019e8 <HAL_Init+0x40>)
 80019ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f94f 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f808 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f7ff fd00 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023c00 	.word	0x40023c00

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f4:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <HAL_InitTick+0x54>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <HAL_InitTick+0x58>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f967 	bl	8001cde <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00e      	b.n	8001a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d80a      	bhi.n	8001a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f000 f92f 	bl	8001c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2c:	4a06      	ldr	r2, [pc, #24]	@ (8001a48 <HAL_InitTick+0x5c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_IncTick+0x20>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_IncTick+0x24>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <HAL_IncTick+0x24>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000234 	.word	0x20000234

08001a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b03      	ldr	r3, [pc, #12]	@ (8001a88 <HAL_GetTick+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000234 	.word	0x20000234

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff ffee 	bl	8001a74 <HAL_GetTick>
 8001a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d005      	beq.n	8001ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_Delay+0x44>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ab2:	bf00      	nop
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8f7      	bhi.n	8001ab4 <HAL_Delay+0x28>
  {
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db0b      	blt.n	8001b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4907      	ldr	r1, [pc, #28]	@ (8001b70 <__NVIC_EnableIRQ+0x38>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	@ (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	@ 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff29 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff3e 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff8e 	bl	8001bc8 <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5d 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff31 	bl	8001b38 <__NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffa2 	bl	8001c30 <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e16b      	b.n	8001fec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d14:	2201      	movs	r2, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	f040 815a 	bne.w	8001fe6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d005      	beq.n	8001d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d130      	bne.n	8001dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d80:	2201      	movs	r2, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 0201 	and.w	r2, r3, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d017      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d123      	bne.n	8001e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	08da      	lsrs	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3208      	adds	r2, #8
 8001dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	08da      	lsrs	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3208      	adds	r2, #8
 8001e36:	69b9      	ldr	r1, [r7, #24]
 8001e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0203 	and.w	r2, r3, #3
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80b4 	beq.w	8001fe6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b60      	ldr	r3, [pc, #384]	@ (8002004 <HAL_GPIO_Init+0x30c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	4a5f      	ldr	r2, [pc, #380]	@ (8002004 <HAL_GPIO_Init+0x30c>)
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002004 <HAL_GPIO_Init+0x30c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002008 <HAL_GPIO_Init+0x310>)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	@ (800200c <HAL_GPIO_Init+0x314>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d02b      	beq.n	8001f1e <HAL_GPIO_Init+0x226>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a51      	ldr	r2, [pc, #324]	@ (8002010 <HAL_GPIO_Init+0x318>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d025      	beq.n	8001f1a <HAL_GPIO_Init+0x222>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a50      	ldr	r2, [pc, #320]	@ (8002014 <HAL_GPIO_Init+0x31c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01f      	beq.n	8001f16 <HAL_GPIO_Init+0x21e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	@ (8002018 <HAL_GPIO_Init+0x320>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_GPIO_Init+0x21a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4e      	ldr	r2, [pc, #312]	@ (800201c <HAL_GPIO_Init+0x324>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0x216>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4d      	ldr	r2, [pc, #308]	@ (8002020 <HAL_GPIO_Init+0x328>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00d      	beq.n	8001f0a <HAL_GPIO_Init+0x212>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4c      	ldr	r2, [pc, #304]	@ (8002024 <HAL_GPIO_Init+0x32c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <HAL_GPIO_Init+0x20e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8002028 <HAL_GPIO_Init+0x330>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_GPIO_Init+0x20a>
 8001efe:	2307      	movs	r3, #7
 8001f00:	e00e      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f02:	2308      	movs	r3, #8
 8001f04:	e00c      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f06:	2306      	movs	r3, #6
 8001f08:	e00a      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	e008      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e004      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e002      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f002 0203 	and.w	r2, r2, #3
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	4093      	lsls	r3, r2
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f30:	4935      	ldr	r1, [pc, #212]	@ (8002008 <HAL_GPIO_Init+0x310>)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800202c <HAL_GPIO_Init+0x334>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f62:	4a32      	ldr	r2, [pc, #200]	@ (800202c <HAL_GPIO_Init+0x334>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f68:	4b30      	ldr	r3, [pc, #192]	@ (800202c <HAL_GPIO_Init+0x334>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f8c:	4a27      	ldr	r2, [pc, #156]	@ (800202c <HAL_GPIO_Init+0x334>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f92:	4b26      	ldr	r3, [pc, #152]	@ (800202c <HAL_GPIO_Init+0x334>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800202c <HAL_GPIO_Init+0x334>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800202c <HAL_GPIO_Init+0x334>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe0:	4a12      	ldr	r2, [pc, #72]	@ (800202c <HAL_GPIO_Init+0x334>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	f67f ae90 	bls.w	8001d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40013800 	.word	0x40013800
 800200c:	40020000 	.word	0x40020000
 8002010:	40020400 	.word	0x40020400
 8002014:	40020800 	.word	0x40020800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	40021000 	.word	0x40021000
 8002020:	40021400 	.word	0x40021400
 8002024:	40021800 	.word	0x40021800
 8002028:	40021c00 	.word	0x40021c00
 800202c:	40013c00 	.word	0x40013c00

08002030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
 800203c:	4613      	mov	r3, r2
 800203e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002040:	787b      	ldrb	r3, [r7, #1]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800204c:	e003      	b.n	8002056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	041a      	lsls	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	619a      	str	r2, [r3, #24]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800206e:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d006      	beq.n	8002088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800207a:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f806 	bl	8002094 <HAL_GPIO_EXTI_Callback>
  }
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40013c00 	.word	0x40013c00

08002094 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af02      	add	r7, sp, #8
 80020b0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e059      	b.n	8002170 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f008 f972 	bl	800a3c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2203      	movs	r2, #3
 80020e0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ea:	d102      	bne.n	80020f2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f004 ff8b 	bl	8007012 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7c1a      	ldrb	r2, [r3, #16]
 8002104:	f88d 2000 	strb.w	r2, [sp]
 8002108:	3304      	adds	r3, #4
 800210a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210c:	f004 ff0c 	bl	8006f28 <USB_CoreInit>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2202      	movs	r2, #2
 800211a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e026      	b.n	8002170 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2101      	movs	r1, #1
 8002128:	4618      	mov	r0, r3
 800212a:	f004 ff83 	bl	8007034 <USB_SetCurrentMode>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e017      	b.n	8002170 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7c1a      	ldrb	r2, [r3, #16]
 8002148:	f88d 2000 	strb.w	r2, [sp]
 800214c:	3304      	adds	r3, #4
 800214e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002150:	f005 f926 	bl	80073a0 <USB_HostInit>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e004      	b.n	8002170 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b08b      	sub	sp, #44	@ 0x2c
 800217c:	af04      	add	r7, sp, #16
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4603      	mov	r3, r0
 8002188:	70fb      	strb	r3, [r7, #3]
 800218a:	460b      	mov	r3, r1
 800218c:	70bb      	strb	r3, [r7, #2]
 800218e:	4613      	mov	r3, r2
 8002190:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002192:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002194:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_HCD_HC_Init+0x2c>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e09d      	b.n	80022e0 <HAL_HCD_HC_Init+0x168>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3319      	adds	r3, #25
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	3314      	adds	r3, #20
 80021d0:	787a      	ldrb	r2, [r7, #1]
 80021d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021d4:	78fa      	ldrb	r2, [r7, #3]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	3315      	adds	r3, #21
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3326      	adds	r3, #38	@ 0x26
 80021f8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80021fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	78bb      	ldrb	r3, [r7, #2]
 8002202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002206:	b2d8      	uxtb	r0, r3
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	3316      	adds	r3, #22
 8002216:	4602      	mov	r2, r0
 8002218:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fbc8 	bl	80029b4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002224:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002228:	2b00      	cmp	r3, #0
 800222a:	da0a      	bge.n	8002242 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	3317      	adds	r3, #23
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e009      	b.n	8002256 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	3317      	adds	r3, #23
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f005 fa04 	bl	8007668 <USB_GetHostSpeed>
 8002260:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002262:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10b      	bne.n	8002282 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800226a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800226e:	2b01      	cmp	r3, #1
 8002270:	d107      	bne.n	8002282 <HAL_HCD_HC_Init+0x10a>
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d104      	bne.n	8002282 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2bbc      	cmp	r3, #188	@ 0xbc
 800227c:	d901      	bls.n	8002282 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800227e:	23bc      	movs	r3, #188	@ 0xbc
 8002280:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	3318      	adds	r3, #24
 8002292:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002296:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	b298      	uxth	r0, r3
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	3328      	adds	r3, #40	@ 0x28
 80022ac:	4602      	mov	r2, r0
 80022ae:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	787c      	ldrb	r4, [r7, #1]
 80022ba:	78ba      	ldrb	r2, [r7, #2]
 80022bc:	78f9      	ldrb	r1, [r7, #3]
 80022be:	9302      	str	r3, [sp, #8]
 80022c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022c4:	9301      	str	r3, [sp, #4]
 80022c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	4623      	mov	r3, r4
 80022ce:	f005 f9f3 	bl	80076b8 <USB_HC_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}

080022e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_HCD_HC_Halt+0x1e>
 8002302:	2302      	movs	r3, #2
 8002304:	e00f      	b.n	8002326 <HAL_HCD_HC_Halt+0x3e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f005 fd85 	bl	8007e26 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002324:	7bfb      	ldrb	r3, [r7, #15]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4603      	mov	r3, r0
 8002340:	70fb      	strb	r3, [r7, #3]
 8002342:	460b      	mov	r3, r1
 8002344:	70bb      	strb	r3, [r7, #2]
 8002346:	4613      	mov	r3, r2
 8002348:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	3317      	adds	r3, #23
 800235a:	78ba      	ldrb	r2, [r7, #2]
 800235c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	3326      	adds	r3, #38	@ 0x26
 800236e:	787a      	ldrb	r2, [r7, #1]
 8002370:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002372:	7c3b      	ldrb	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d114      	bne.n	80023a2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	332a      	adds	r3, #42	@ 0x2a
 8002388:	2203      	movs	r2, #3
 800238a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	3319      	adds	r3, #25
 800239c:	7f3a      	ldrb	r2, [r7, #28]
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e009      	b.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023a2:	78fa      	ldrb	r2, [r7, #3]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	332a      	adds	r3, #42	@ 0x2a
 80023b2:	2202      	movs	r2, #2
 80023b4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80023b6:	787b      	ldrb	r3, [r7, #1]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	f200 8102 	bhi.w	80025c2 <HAL_HCD_HC_SubmitRequest+0x292>
 80023be:	a201      	add	r2, pc, #4	@ (adr r2, 80023c4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	080023d5 	.word	0x080023d5
 80023c8:	080025ad 	.word	0x080025ad
 80023cc:	08002499 	.word	0x08002499
 80023d0:	08002523 	.word	0x08002523
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80023d4:	7c3b      	ldrb	r3, [r7, #16]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f040 80f5 	bne.w	80025c6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80023dc:	78bb      	ldrb	r3, [r7, #2]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d12d      	bne.n	800243e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80023e2:	8b3b      	ldrh	r3, [r7, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	333d      	adds	r3, #61	@ 0x3d
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	333d      	adds	r3, #61	@ 0x3d
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10a      	bne.n	8002428 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	332a      	adds	r3, #42	@ 0x2a
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002426:	e0ce      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	332a      	adds	r3, #42	@ 0x2a
 8002438:	2202      	movs	r2, #2
 800243a:	701a      	strb	r2, [r3, #0]
      break;
 800243c:	e0c3      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	331a      	adds	r3, #26
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	f040 80b8 	bne.w	80025c6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	333c      	adds	r3, #60	@ 0x3c
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	332a      	adds	r3, #42	@ 0x2a
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
      break;
 8002480:	e0a1      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	332a      	adds	r3, #42	@ 0x2a
 8002492:	2202      	movs	r2, #2
 8002494:	701a      	strb	r2, [r3, #0]
      break;
 8002496:	e096      	b.n	80025c6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002498:	78bb      	ldrb	r3, [r7, #2]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d120      	bne.n	80024e0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	333d      	adds	r3, #61	@ 0x3d
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	332a      	adds	r3, #42	@ 0x2a
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024c8:	e07e      	b.n	80025c8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	332a      	adds	r3, #42	@ 0x2a
 80024da:	2202      	movs	r2, #2
 80024dc:	701a      	strb	r2, [r3, #0]
      break;
 80024de:	e073      	b.n	80025c8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	333c      	adds	r3, #60	@ 0x3c
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	332a      	adds	r3, #42	@ 0x2a
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
      break;
 800250a:	e05d      	b.n	80025c8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	332a      	adds	r3, #42	@ 0x2a
 800251c:	2202      	movs	r2, #2
 800251e:	701a      	strb	r2, [r3, #0]
      break;
 8002520:	e052      	b.n	80025c8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002522:	78bb      	ldrb	r3, [r7, #2]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d120      	bne.n	800256a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	333d      	adds	r3, #61	@ 0x3d
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10a      	bne.n	8002554 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	332a      	adds	r3, #42	@ 0x2a
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002552:	e039      	b.n	80025c8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	332a      	adds	r3, #42	@ 0x2a
 8002564:	2202      	movs	r2, #2
 8002566:	701a      	strb	r2, [r3, #0]
      break;
 8002568:	e02e      	b.n	80025c8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	333c      	adds	r3, #60	@ 0x3c
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	332a      	adds	r3, #42	@ 0x2a
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
      break;
 8002594:	e018      	b.n	80025c8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	332a      	adds	r3, #42	@ 0x2a
 80025a6:	2202      	movs	r2, #2
 80025a8:	701a      	strb	r2, [r3, #0]
      break;
 80025aa:	e00d      	b.n	80025c8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	332a      	adds	r3, #42	@ 0x2a
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
      break;
 80025c0:	e002      	b.n	80025c8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80025c6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	332c      	adds	r3, #44	@ 0x2c
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	8b39      	ldrh	r1, [r7, #24]
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4403      	add	r3, r0
 80025ec:	3334      	adds	r3, #52	@ 0x34
 80025ee:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	334c      	adds	r3, #76	@ 0x4c
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3338      	adds	r3, #56	@ 0x38
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3315      	adds	r3, #21
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	334d      	adds	r3, #77	@ 0x4d
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	3310      	adds	r3, #16
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	1d19      	adds	r1, r3, #4
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	799b      	ldrb	r3, [r3, #6]
 800265a:	461a      	mov	r2, r3
 800265c:	f005 f958 	bl	8007910 <USB_HC_StartXfer>
 8002660:	4603      	mov	r3, r0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop

0800266c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f004 fe4c 	bl	8007320 <USB_GetMode>
 8002688:	4603      	mov	r3, r0
 800268a:	2b01      	cmp	r3, #1
 800268c:	f040 80fb 	bne.w	8002886 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f004 fe0f 	bl	80072b8 <USB_ReadInterrupts>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80f1 	beq.w	8002884 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fe06 	bl	80072b8 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026b6:	d104      	bne.n	80026c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80026c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 fdf6 	bl	80072b8 <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026d6:	d104      	bne.n	80026e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80026e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 fde6 	bl	80072b8 <USB_ReadInterrupts>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026f6:	d104      	bne.n	8002702 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002700:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f004 fdd6 	bl	80072b8 <USB_ReadInterrupts>
 800270c:	4603      	mov	r3, r0
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d103      	bne.n	800271e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2202      	movs	r2, #2
 800271c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f004 fdc8 	bl	80072b8 <USB_ReadInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800272e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002732:	d120      	bne.n	8002776 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800273c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d113      	bne.n	8002776 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800274e:	2110      	movs	r1, #16
 8002750:	6938      	ldr	r0, [r7, #16]
 8002752:	f004 fcbb 	bl	80070cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002756:	6938      	ldr	r0, [r7, #16]
 8002758:	f004 fcea 	bl	8007130 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7a5b      	ldrb	r3, [r3, #9]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d105      	bne.n	8002770 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2101      	movs	r1, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f004 fedc 	bl	8007528 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f007 fea3 	bl	800a4bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fd9c 	bl	80072b8 <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002786:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800278a:	d102      	bne.n	8002792 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f001 fd4d 	bl	800422c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f004 fd8e 	bl	80072b8 <USB_ReadInterrupts>
 800279c:	4603      	mov	r3, r0
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d106      	bne.n	80027b4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f007 fe6c 	bl	800a484 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2208      	movs	r2, #8
 80027b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f004 fd7d 	bl	80072b8 <USB_ReadInterrupts>
 80027be:	4603      	mov	r3, r0
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027c8:	d139      	bne.n	800283e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f005 fb18 	bl	8007e04 <USB_HC_ReadInterrupt>
 80027d4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e025      	b.n	8002828 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d018      	beq.n	8002822 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002806:	d106      	bne.n	8002816 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f905 	bl	8002a1e <HCD_HC_IN_IRQHandler>
 8002814:	e005      	b.n	8002822 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 ff67 	bl	80036f0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	795b      	ldrb	r3, [r3, #5]
 800282c:	461a      	mov	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	4293      	cmp	r3, r2
 8002832:	d3d3      	bcc.n	80027dc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800283c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f004 fd38 	bl	80072b8 <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b10      	cmp	r3, #16
 8002850:	d101      	bne.n	8002856 <HAL_HCD_IRQHandler+0x1ea>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_HCD_IRQHandler+0x1ec>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d014      	beq.n	8002886 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0210 	bic.w	r2, r2, #16
 800286a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f001 fbfe 	bl	800406e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0210 	orr.w	r2, r2, #16
 8002880:	619a      	str	r2, [r3, #24]
 8002882:	e000      	b.n	8002886 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002884:	bf00      	nop
    }
  }
}
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_HCD_Start+0x16>
 800289e:	2302      	movs	r3, #2
 80028a0:	e013      	b.n	80028ca <HAL_HCD_Start+0x3e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2101      	movs	r1, #1
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 fea0 	bl	80075f6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f004 fb98 	bl	8006ff0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_HCD_Stop+0x16>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e00d      	b.n	8002904 <HAL_HCD_Stop+0x32>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f005 fbf3 	bl	80080e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f004 fe42 	bl	80075a2 <USB_ResetPort>
 800291e:	4603      	mov	r3, r0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	334c      	adds	r3, #76	@ 0x4c
 8002944:	781b      	ldrb	r3, [r3, #0]
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3338      	adds	r3, #56	@ 0x38
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fe84 	bl	8007696 <USB_GetCurrentFrame>
 800298e:	4603      	mov	r3, r0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f004 fe5f 	bl	8007668 <USB_GetHostSpeed>
 80029aa:	4603      	mov	r3, r0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	331a      	adds	r3, #26
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	331b      	adds	r3, #27
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3325      	adds	r3, #37	@ 0x25
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3324      	adds	r3, #36	@ 0x24
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f004 fc4e 	bl	80072de <USB_ReadChInterrupts>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d11a      	bne.n	8002a82 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	334d      	adds	r3, #77	@ 0x4d
 8002a6e:	2207      	movs	r2, #7
 8002a70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f005 f9d3 	bl	8007e26 <USB_HC_Halt>
 8002a80:	e09e      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f004 fc27 	bl	80072de <USB_ReadChInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a9a:	d11b      	bne.n	8002ad4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	334d      	adds	r3, #77	@ 0x4d
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f005 f9aa 	bl	8007e26 <USB_HC_Halt>
 8002ad2:	e075      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f004 fbfe 	bl	80072de <USB_ReadChInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d11a      	bne.n	8002b22 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2308      	movs	r3, #8
 8002afc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	334d      	adds	r3, #77	@ 0x4d
 8002b0e:	2206      	movs	r2, #6
 8002b10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f005 f983 	bl	8007e26 <USB_HC_Halt>
 8002b20:	e04e      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 fbd7 	bl	80072de <USB_ReadChInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3a:	d11b      	bne.n	8002b74 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	334d      	adds	r3, #77	@ 0x4d
 8002b60:	2209      	movs	r2, #9
 8002b62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f005 f95a 	bl	8007e26 <USB_HC_Halt>
 8002b72:	e025      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f004 fbae 	bl	80072de <USB_ReadChInterrupts>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b88:	2b80      	cmp	r3, #128	@ 0x80
 8002b8a:	d119      	bne.n	8002bc0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	334d      	adds	r3, #77	@ 0x4d
 8002bae:	2207      	movs	r2, #7
 8002bb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f005 f933 	bl	8007e26 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 fb88 	bl	80072de <USB_ReadChInterrupts>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bd8:	d112      	bne.n	8002c00 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f005 f91f 	bl	8007e26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bfa:	6093      	str	r3, [r2, #8]
 8002bfc:	f000 bd75 	b.w	80036ea <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f004 fb68 	bl	80072de <USB_ReadChInterrupts>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	f040 8128 	bne.w	8002e6a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c26:	461a      	mov	r2, r3
 8002c28:	2320      	movs	r3, #32
 8002c2a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	331b      	adds	r3, #27
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d119      	bne.n	8002c76 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	331b      	adds	r3, #27
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	0151      	lsls	r1, r2, #5
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	440a      	add	r2, r1
 8002c6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c74:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	799b      	ldrb	r3, [r3, #6]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01b      	beq.n	8002cb6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3330      	adds	r3, #48	@ 0x30
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	1ac9      	subs	r1, r1, r3
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4403      	add	r3, r0
 8002cb2:	3338      	adds	r3, #56	@ 0x38
 8002cb4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	334d      	adds	r3, #77	@ 0x4d
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3344      	adds	r3, #68	@ 0x44
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cea:	461a      	mov	r2, r3
 8002cec:	2301      	movs	r3, #1
 8002cee:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3326      	adds	r3, #38	@ 0x26
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	3326      	adds	r3, #38	@ 0x26
 8002d16:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d110      	bne.n	8002d3e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f005 f87e 	bl	8007e26 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d36:	461a      	mov	r2, r3
 8002d38:	2310      	movs	r3, #16
 8002d3a:	6093      	str	r3, [r2, #8]
 8002d3c:	e03d      	b.n	8002dba <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3326      	adds	r3, #38	@ 0x26
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d00a      	beq.n	8002d6a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3326      	adds	r3, #38	@ 0x26
 8002d64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d127      	bne.n	8002dba <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	0151      	lsls	r1, r2, #5
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	440a      	add	r2, r1
 8002d80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d88:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	334c      	adds	r3, #76	@ 0x4c
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	334c      	adds	r3, #76	@ 0x4c
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f007 fb8f 	bl	800a4d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	799b      	ldrb	r3, [r3, #6]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d13b      	bne.n	8002e3a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3338      	adds	r3, #56	@ 0x38
 8002dd2:	6819      	ldr	r1, [r3, #0]
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4403      	add	r3, r0
 8002de2:	3328      	adds	r3, #40	@ 0x28
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	440b      	add	r3, r1
 8002de8:	1e59      	subs	r1, r3, #1
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4403      	add	r3, r0
 8002df8:	3328      	adds	r3, #40	@ 0x28
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 8470 	beq.w	80036ea <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	333c      	adds	r3, #60	@ 0x3c
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	f083 0301 	eor.w	r3, r3, #1
 8002e22:	b2d8      	uxtb	r0, r3
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	333c      	adds	r3, #60	@ 0x3c
 8002e32:	4602      	mov	r2, r0
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	f000 bc58 	b.w	80036ea <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	333c      	adds	r3, #60	@ 0x3c
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2d8      	uxtb	r0, r3
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	333c      	adds	r3, #60	@ 0x3c
 8002e62:	4602      	mov	r2, r0
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	f000 bc40 	b.w	80036ea <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f004 fa33 	bl	80072de <USB_ReadChInterrupts>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d131      	bne.n	8002ee6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2320      	movs	r3, #32
 8002e92:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	331a      	adds	r3, #26
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	f040 841f 	bne.w	80036ea <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	331b      	adds	r3, #27
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	334d      	adds	r3, #77	@ 0x4d
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f004 ffa2 	bl	8007e26 <USB_HC_Halt>
 8002ee2:	f000 bc02 	b.w	80036ea <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f004 f9f5 	bl	80072de <USB_ReadChInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	f040 8305 	bne.w	800350a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2302      	movs	r3, #2
 8002f10:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	334d      	adds	r3, #77	@ 0x4d
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d114      	bne.n	8002f52 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	334d      	adds	r3, #77	@ 0x4d
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	334c      	adds	r3, #76	@ 0x4c
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e2cc      	b.n	80034ec <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	334d      	adds	r3, #77	@ 0x4d
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b06      	cmp	r3, #6
 8002f66:	d114      	bne.n	8002f92 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	334d      	adds	r3, #77	@ 0x4d
 8002f78:	2202      	movs	r2, #2
 8002f7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	334c      	adds	r3, #76	@ 0x4c
 8002f8c:	2205      	movs	r2, #5
 8002f8e:	701a      	strb	r2, [r3, #0]
 8002f90:	e2ac      	b.n	80034ec <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	334d      	adds	r3, #77	@ 0x4d
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b07      	cmp	r3, #7
 8002fa6:	d00b      	beq.n	8002fc0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	334d      	adds	r3, #77	@ 0x4d
 8002fb8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002fba:	2b09      	cmp	r3, #9
 8002fbc:	f040 80a6 	bne.w	800310c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	334d      	adds	r3, #77	@ 0x4d
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3344      	adds	r3, #68	@ 0x44
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	1c59      	adds	r1, r3, #1
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4403      	add	r3, r0
 8002ff4:	3344      	adds	r3, #68	@ 0x44
 8002ff6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	3344      	adds	r3, #68	@ 0x44
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d943      	bls.n	8003096 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	3344      	adds	r3, #68	@ 0x44
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	331a      	adds	r3, #26
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d123      	bne.n	8003080 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	331b      	adds	r3, #27
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	331c      	adds	r3, #28
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	0151      	lsls	r1, r2, #5
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	440a      	add	r2, r1
 8003076:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800307a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800307e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	334c      	adds	r3, #76	@ 0x4c
 8003090:	2204      	movs	r2, #4
 8003092:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003094:	e229      	b.n	80034ea <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	334c      	adds	r3, #76	@ 0x4c
 80030a6:	2202      	movs	r2, #2
 80030a8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	3326      	adds	r3, #38	@ 0x26
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	3326      	adds	r3, #38	@ 0x26
 80030d0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	f040 8209 	bne.w	80034ea <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030ee:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030f6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003104:	461a      	mov	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800310a:	e1ee      	b.n	80034ea <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	334d      	adds	r3, #77	@ 0x4d
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b05      	cmp	r3, #5
 8003120:	f040 80c8 	bne.w	80032b4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	334d      	adds	r3, #77	@ 0x4d
 8003134:	2202      	movs	r2, #2
 8003136:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	331b      	adds	r3, #27
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	f040 81ce 	bne.w	80034ec <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3326      	adds	r3, #38	@ 0x26
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d16b      	bne.n	800323e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3348      	adds	r3, #72	@ 0x48
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	1c59      	adds	r1, r3, #1
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4403      	add	r3, r0
 8003186:	3348      	adds	r3, #72	@ 0x48
 8003188:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3348      	adds	r3, #72	@ 0x48
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d943      	bls.n	8003228 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3348      	adds	r3, #72	@ 0x48
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	331b      	adds	r3, #27
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3344      	adds	r3, #68	@ 0x44
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d809      	bhi.n	80031f2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	331c      	adds	r3, #28
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	0151      	lsls	r1, r2, #5
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	440a      	add	r2, r1
 8003208:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800320c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003210:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	334c      	adds	r3, #76	@ 0x4c
 8003222:	2204      	movs	r2, #4
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e014      	b.n	8003252 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	334c      	adds	r3, #76	@ 0x4c
 8003238:	2202      	movs	r2, #2
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e009      	b.n	8003252 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	334c      	adds	r3, #76	@ 0x4c
 800324e:	2202      	movs	r2, #2
 8003250:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	3326      	adds	r3, #38	@ 0x26
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	3326      	adds	r3, #38	@ 0x26
 8003278:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800327a:	2b02      	cmp	r3, #2
 800327c:	f040 8136 	bne.w	80034ec <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003296:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800329e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ac:	461a      	mov	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e11b      	b.n	80034ec <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	334d      	adds	r3, #77	@ 0x4d
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	f040 8081 	bne.w	80033ce <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	334d      	adds	r3, #77	@ 0x4d
 80032dc:	2202      	movs	r2, #2
 80032de:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	331b      	adds	r3, #27
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	f040 80fa 	bne.w	80034ec <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	334c      	adds	r3, #76	@ 0x4c
 8003308:	2202      	movs	r2, #2
 800330a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	0151      	lsls	r1, r2, #5
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	440a      	add	r2, r1
 8003322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	0151      	lsls	r1, r2, #5
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	440a      	add	r2, r1
 8003342:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800334a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	0151      	lsls	r1, r2, #5
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	440a      	add	r2, r1
 8003362:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003366:	f023 0320 	bic.w	r3, r3, #32
 800336a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	3326      	adds	r3, #38	@ 0x26
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00b      	beq.n	800339a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3326      	adds	r3, #38	@ 0x26
 8003392:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003394:	2b02      	cmp	r3, #2
 8003396:	f040 80a9 	bne.w	80034ec <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033b0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033b8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	e08e      	b.n	80034ec <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	334d      	adds	r3, #77	@ 0x4d
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d143      	bne.n	800346c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334d      	adds	r3, #77	@ 0x4d
 80033f4:	2202      	movs	r2, #2
 80033f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	334c      	adds	r3, #76	@ 0x4c
 8003408:	2202      	movs	r2, #2
 800340a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	3326      	adds	r3, #38	@ 0x26
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	3326      	adds	r3, #38	@ 0x26
 8003432:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003434:	2b02      	cmp	r3, #2
 8003436:	d159      	bne.n	80034ec <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800344e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003456:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003464:	461a      	mov	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e03f      	b.n	80034ec <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	334d      	adds	r3, #77	@ 0x4d
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b08      	cmp	r3, #8
 8003480:	d126      	bne.n	80034d0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	334d      	adds	r3, #77	@ 0x4d
 8003492:	2202      	movs	r2, #2
 8003494:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	3344      	adds	r3, #68	@ 0x44
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	1c59      	adds	r1, r3, #1
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4403      	add	r3, r0
 80034b6:	3344      	adds	r3, #68	@ 0x44
 80034b8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	334c      	adds	r3, #76	@ 0x4c
 80034ca:	2204      	movs	r2, #4
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e00d      	b.n	80034ec <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	334d      	adds	r3, #77	@ 0x4d
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	f000 8100 	beq.w	80036e8 <HCD_HC_IN_IRQHandler+0xcca>
 80034e8:	e000      	b.n	80034ec <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034ea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	334c      	adds	r3, #76	@ 0x4c
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f006 ffe8 	bl	800a4d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003508:	e0ef      	b.n	80036ea <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f003 fee3 	bl	80072de <USB_ReadChInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351e:	2b40      	cmp	r3, #64	@ 0x40
 8003520:	d12f      	bne.n	8003582 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800352e:	461a      	mov	r2, r3
 8003530:	2340      	movs	r3, #64	@ 0x40
 8003532:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	334d      	adds	r3, #77	@ 0x4d
 8003544:	2205      	movs	r2, #5
 8003546:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	331a      	adds	r3, #26
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	3344      	adds	r3, #68	@ 0x44
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f004 fc53 	bl	8007e26 <USB_HC_Halt>
 8003580:	e0b3      	b.n	80036ea <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f003 fea7 	bl	80072de <USB_ReadChInterrupts>
 8003590:	4603      	mov	r3, r0
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b10      	cmp	r3, #16
 8003598:	f040 80a7 	bne.w	80036ea <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3326      	adds	r3, #38	@ 0x26
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d11b      	bne.n	80035ea <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	3344      	adds	r3, #68	@ 0x44
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	334d      	adds	r3, #77	@ 0x4d
 80035d6:	2204      	movs	r2, #4
 80035d8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f004 fc1f 	bl	8007e26 <USB_HC_Halt>
 80035e8:	e03f      	b.n	800366a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3326      	adds	r3, #38	@ 0x26
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	3326      	adds	r3, #38	@ 0x26
 8003610:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003612:	2b02      	cmp	r3, #2
 8003614:	d129      	bne.n	800366a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	3344      	adds	r3, #68	@ 0x44
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	799b      	ldrb	r3, [r3, #6]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HCD_HC_IN_IRQHandler+0xc2a>
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	331b      	adds	r3, #27
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d110      	bne.n	800366a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	334d      	adds	r3, #77	@ 0x4d
 8003658:	2204      	movs	r2, #4
 800365a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f004 fbde 	bl	8007e26 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	331b      	adds	r3, #27
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d129      	bne.n	80036d4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	331b      	adds	r3, #27
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	0151      	lsls	r1, r2, #5
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	440a      	add	r2, r1
 80036aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	0151      	lsls	r1, r2, #5
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	440a      	add	r2, r1
 80036ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036ce:	f043 0320 	orr.w	r3, r3, #32
 80036d2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e0:	461a      	mov	r2, r3
 80036e2:	2310      	movs	r3, #16
 80036e4:	6093      	str	r3, [r2, #8]
 80036e6:	e000      	b.n	80036ea <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80036e8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f003 fde5 	bl	80072de <USB_ReadChInterrupts>
 8003714:	4603      	mov	r3, r0
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d11b      	bne.n	8003756 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800372a:	461a      	mov	r2, r3
 800372c:	2304      	movs	r3, #4
 800372e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	334d      	adds	r3, #77	@ 0x4d
 8003740:	2207      	movs	r2, #7
 8003742:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f004 fb6a 	bl	8007e26 <USB_HC_Halt>
 8003752:	f000 bc89 	b.w	8004068 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f003 fdbd 	bl	80072de <USB_ReadChInterrupts>
 8003764:	4603      	mov	r3, r0
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b20      	cmp	r3, #32
 800376c:	f040 8082 	bne.w	8003874 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800377c:	461a      	mov	r2, r3
 800377e:	2320      	movs	r3, #32
 8003780:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3319      	adds	r3, #25
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d124      	bne.n	80037e2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	3319      	adds	r3, #25
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037ac:	78fa      	ldrb	r2, [r7, #3]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	334c      	adds	r3, #76	@ 0x4c
 80037bc:	2202      	movs	r2, #2
 80037be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	334d      	adds	r3, #77	@ 0x4d
 80037d0:	2203      	movs	r2, #3
 80037d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f004 fb22 	bl	8007e26 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	331a      	adds	r3, #26
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	f040 8437 	bne.w	8004068 <HCD_HC_OUT_IRQHandler+0x978>
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	331b      	adds	r3, #27
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f040 842b 	bne.w	8004068 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	3326      	adds	r3, #38	@ 0x26
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d009      	beq.n	800383c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	331b      	adds	r3, #27
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	334d      	adds	r3, #77	@ 0x4d
 800384c:	2203      	movs	r2, #3
 800384e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f004 fae4 	bl	8007e26 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3344      	adds	r3, #68	@ 0x44
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e3f9      	b.n	8004068 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f003 fd2e 	bl	80072de <USB_ReadChInterrupts>
 8003882:	4603      	mov	r3, r0
 8003884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800388c:	d111      	bne.n	80038b2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4413      	add	r3, r2
 8003896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800389a:	461a      	mov	r2, r3
 800389c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038a0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f004 fabb 	bl	8007e26 <USB_HC_Halt>
 80038b0:	e3da      	b.n	8004068 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f003 fd0f 	bl	80072de <USB_ReadChInterrupts>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d168      	bne.n	800399c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	3344      	adds	r3, #68	@ 0x44
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f003 fcf9 	bl	80072de <USB_ReadChInterrupts>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f2:	2b40      	cmp	r3, #64	@ 0x40
 80038f4:	d112      	bne.n	800391c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	3319      	adds	r3, #25
 8003906:	2201      	movs	r2, #1
 8003908:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003916:	461a      	mov	r2, r3
 8003918:	2340      	movs	r3, #64	@ 0x40
 800391a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	331b      	adds	r3, #27
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d019      	beq.n	8003966 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	331b      	adds	r3, #27
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	0151      	lsls	r1, r2, #5
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	440a      	add	r2, r1
 800395c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003964:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4413      	add	r3, r2
 800396e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003972:	461a      	mov	r2, r3
 8003974:	2301      	movs	r3, #1
 8003976:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	334d      	adds	r3, #77	@ 0x4d
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f004 fa46 	bl	8007e26 <USB_HC_Halt>
 800399a:	e365      	b.n	8004068 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f003 fc9a 	bl	80072de <USB_ReadChInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b0:	2b40      	cmp	r3, #64	@ 0x40
 80039b2:	d139      	bne.n	8003a28 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	334d      	adds	r3, #77	@ 0x4d
 80039c4:	2205      	movs	r2, #5
 80039c6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	331a      	adds	r3, #26
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3319      	adds	r3, #25
 80039ee:	2201      	movs	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	3344      	adds	r3, #68	@ 0x44
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 fa09 	bl	8007e26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a20:	461a      	mov	r2, r3
 8003a22:	2340      	movs	r3, #64	@ 0x40
 8003a24:	6093      	str	r3, [r2, #8]
 8003a26:	e31f      	b.n	8004068 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 fc54 	bl	80072de <USB_ReadChInterrupts>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d11a      	bne.n	8003a76 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2308      	movs	r3, #8
 8003a50:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	334d      	adds	r3, #77	@ 0x4d
 8003a62:	2206      	movs	r2, #6
 8003a64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f004 f9d9 	bl	8007e26 <USB_HC_Halt>
 8003a74:	e2f8      	b.n	8004068 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f003 fc2d 	bl	80072de <USB_ReadChInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b10      	cmp	r3, #16
 8003a8c:	d144      	bne.n	8003b18 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3344      	adds	r3, #68	@ 0x44
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	334d      	adds	r3, #77	@ 0x4d
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3319      	adds	r3, #25
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d114      	bne.n	8003af6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003acc:	78fa      	ldrb	r2, [r7, #3]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	3318      	adds	r3, #24
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	3319      	adds	r3, #25
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f004 f991 	bl	8007e26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b10:	461a      	mov	r2, r3
 8003b12:	2310      	movs	r3, #16
 8003b14:	6093      	str	r3, [r2, #8]
 8003b16:	e2a7      	b.n	8004068 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 fbdc 	bl	80072de <USB_ReadChInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2c:	2b80      	cmp	r3, #128	@ 0x80
 8003b2e:	f040 8083 	bne.w	8003c38 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	799b      	ldrb	r3, [r3, #6]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d111      	bne.n	8003b5e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	334d      	adds	r3, #77	@ 0x4d
 8003b4a:	2207      	movs	r2, #7
 8003b4c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	4611      	mov	r1, r2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f004 f965 	bl	8007e26 <USB_HC_Halt>
 8003b5c:	e062      	b.n	8003c24 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3344      	adds	r3, #68	@ 0x44
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	1c59      	adds	r1, r3, #1
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4403      	add	r3, r0
 8003b7e:	3344      	adds	r3, #68	@ 0x44
 8003b80:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	3344      	adds	r3, #68	@ 0x44
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d922      	bls.n	8003bde <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	3344      	adds	r3, #68	@ 0x44
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	334c      	adds	r3, #76	@ 0x4c
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	334c      	adds	r3, #76	@ 0x4c
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f006 fc7e 	bl	800a4d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bdc:	e022      	b.n	8003c24 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	334c      	adds	r3, #76	@ 0x4c
 8003bee:	2202      	movs	r2, #2
 8003bf0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c08:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c10:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c30:	461a      	mov	r2, r3
 8003c32:	2380      	movs	r3, #128	@ 0x80
 8003c34:	6093      	str	r3, [r2, #8]
 8003c36:	e217      	b.n	8004068 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 fb4c 	bl	80072de <USB_ReadChInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c50:	d11b      	bne.n	8003c8a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	334d      	adds	r3, #77	@ 0x4d
 8003c62:	2209      	movs	r2, #9
 8003c64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f004 f8d9 	bl	8007e26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c80:	461a      	mov	r2, r3
 8003c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c86:	6093      	str	r3, [r2, #8]
 8003c88:	e1ee      	b.n	8004068 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f003 fb23 	bl	80072de <USB_ReadChInterrupts>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	f040 81df 	bne.w	8004062 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	334d      	adds	r3, #77	@ 0x4d
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	f040 8093 	bne.w	8003df4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	334d      	adds	r3, #77	@ 0x4d
 8003cde:	2202      	movs	r2, #2
 8003ce0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	334c      	adds	r3, #76	@ 0x4c
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3326      	adds	r3, #38	@ 0x26
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d00b      	beq.n	8003d24 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	3326      	adds	r3, #38	@ 0x26
 8003d1c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	f040 8190 	bne.w	8004044 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	799b      	ldrb	r3, [r3, #6]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d115      	bne.n	8003d58 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	333d      	adds	r3, #61	@ 0x3d
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	f083 0301 	eor.w	r3, r3, #1
 8003d44:	b2d8      	uxtb	r0, r3
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	333d      	adds	r3, #61	@ 0x3d
 8003d54:	4602      	mov	r2, r0
 8003d56:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	799b      	ldrb	r3, [r3, #6]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	f040 8171 	bne.w	8004044 <HCD_HC_OUT_IRQHandler+0x954>
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	3334      	adds	r3, #52	@ 0x34
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8165 	beq.w	8004044 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	3334      	adds	r3, #52	@ 0x34
 8003d8a:	6819      	ldr	r1, [r3, #0]
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4403      	add	r3, r0
 8003d9a:	3328      	adds	r3, #40	@ 0x28
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	440b      	add	r3, r1
 8003da0:	1e59      	subs	r1, r3, #1
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4403      	add	r3, r0
 8003db0:	3328      	adds	r3, #40	@ 0x28
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003db8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 813f 	beq.w	8004044 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	333d      	adds	r3, #61	@ 0x3d
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	f083 0301 	eor.w	r3, r3, #1
 8003dde:	b2d8      	uxtb	r0, r3
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	333d      	adds	r3, #61	@ 0x3d
 8003dee:	4602      	mov	r2, r0
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	e127      	b.n	8004044 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	334d      	adds	r3, #77	@ 0x4d
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d120      	bne.n	8003e4c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	334d      	adds	r3, #77	@ 0x4d
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	331b      	adds	r3, #27
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	f040 8107 	bne.w	8004044 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	334c      	adds	r3, #76	@ 0x4c
 8003e46:	2202      	movs	r2, #2
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e0fb      	b.n	8004044 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	334d      	adds	r3, #77	@ 0x4d
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d13a      	bne.n	8003ed8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	334d      	adds	r3, #77	@ 0x4d
 8003e72:	2202      	movs	r2, #2
 8003e74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	334c      	adds	r3, #76	@ 0x4c
 8003e86:	2202      	movs	r2, #2
 8003e88:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	331b      	adds	r3, #27
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	f040 80d1 	bne.w	8004044 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	331b      	adds	r3, #27
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	0151      	lsls	r1, r2, #5
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	440a      	add	r2, r1
 8003ecc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ed4:	6053      	str	r3, [r2, #4]
 8003ed6:	e0b5      	b.n	8004044 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	334d      	adds	r3, #77	@ 0x4d
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b05      	cmp	r3, #5
 8003eec:	d114      	bne.n	8003f18 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	334d      	adds	r3, #77	@ 0x4d
 8003efe:	2202      	movs	r2, #2
 8003f00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	334c      	adds	r3, #76	@ 0x4c
 8003f12:	2202      	movs	r2, #2
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e095      	b.n	8004044 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	334d      	adds	r3, #77	@ 0x4d
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d114      	bne.n	8003f58 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	334d      	adds	r3, #77	@ 0x4d
 8003f3e:	2202      	movs	r2, #2
 8003f40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	334c      	adds	r3, #76	@ 0x4c
 8003f52:	2205      	movs	r2, #5
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	e075      	b.n	8004044 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334d      	adds	r3, #77	@ 0x4d
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b07      	cmp	r3, #7
 8003f6c:	d00a      	beq.n	8003f84 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334d      	adds	r3, #77	@ 0x4d
 8003f7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f80:	2b09      	cmp	r3, #9
 8003f82:	d170      	bne.n	8004066 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f84:	78fa      	ldrb	r2, [r7, #3]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	334d      	adds	r3, #77	@ 0x4d
 8003f94:	2202      	movs	r2, #2
 8003f96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	3344      	adds	r3, #68	@ 0x44
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	1c59      	adds	r1, r3, #1
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4403      	add	r3, r0
 8003fb8:	3344      	adds	r3, #68	@ 0x44
 8003fba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	3344      	adds	r3, #68	@ 0x44
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d914      	bls.n	8003ffc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	3344      	adds	r3, #68	@ 0x44
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	334c      	adds	r3, #76	@ 0x4c
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ffa:	e022      	b.n	8004042 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	334c      	adds	r3, #76	@ 0x4c
 800400c:	2202      	movs	r2, #2
 800400e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4413      	add	r3, r2
 8004018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004026:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800402e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4413      	add	r3, r2
 8004038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800403c:	461a      	mov	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004042:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	334c      	adds	r3, #76	@ 0x4c
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f006 fa3c 	bl	800a4d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004060:	e002      	b.n	8004068 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004062:	bf00      	nop
 8004064:	e000      	b.n	8004068 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004066:	bf00      	nop
  }
}
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b08a      	sub	sp, #40	@ 0x28
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	0c5b      	lsrs	r3, r3, #17
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040a2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d004      	beq.n	80040b4 <HCD_RXQLVL_IRQHandler+0x46>
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	f000 80b6 	beq.w	800421e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040b2:	e0b7      	b.n	8004224 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80b3 	beq.w	8004222 <HCD_RXQLVL_IRQHandler+0x1b4>
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4613      	mov	r3, r2
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	332c      	adds	r3, #44	@ 0x2c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80a7 	beq.w	8004222 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4613      	mov	r3, r2
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	3338      	adds	r3, #56	@ 0x38
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	18d1      	adds	r1, r2, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4403      	add	r3, r0
 80040f8:	3334      	adds	r3, #52	@ 0x34
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4299      	cmp	r1, r3
 80040fe:	f200 8083 	bhi.w	8004208 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	332c      	adds	r3, #44	@ 0x2c
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	b292      	uxth	r2, r2
 800411c:	4619      	mov	r1, r3
 800411e:	f003 f873 	bl	8007208 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4613      	mov	r3, r2
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	332c      	adds	r3, #44	@ 0x2c
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	18d1      	adds	r1, r2, r3
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4613      	mov	r3, r2
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4403      	add	r3, r0
 8004146:	332c      	adds	r3, #44	@ 0x2c
 8004148:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	3338      	adds	r3, #56	@ 0x38
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	18d1      	adds	r1, r2, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4613      	mov	r3, r2
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4403      	add	r3, r0
 800416e:	3338      	adds	r3, #56	@ 0x38
 8004170:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	0cdb      	lsrs	r3, r3, #19
 8004182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004186:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	3328      	adds	r3, #40	@ 0x28
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4293      	cmp	r3, r2
 80041a0:	d13f      	bne.n	8004222 <HCD_RXQLVL_IRQHandler+0x1b4>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d03c      	beq.n	8004222 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80041be:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041c6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041d4:	461a      	mov	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4613      	mov	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	333c      	adds	r3, #60	@ 0x3c
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	f083 0301 	eor.w	r3, r3, #1
 80041f0:	b2d8      	uxtb	r0, r3
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4613      	mov	r3, r2
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	333c      	adds	r3, #60	@ 0x3c
 8004202:	4602      	mov	r2, r0
 8004204:	701a      	strb	r2, [r3, #0]
      break;
 8004206:	e00c      	b.n	8004222 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4613      	mov	r3, r2
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	334c      	adds	r3, #76	@ 0x4c
 8004218:	2204      	movs	r2, #4
 800421a:	701a      	strb	r2, [r3, #0]
      break;
 800421c:	e001      	b.n	8004222 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004222:	bf00      	nop
  }
}
 8004224:	bf00      	nop
 8004226:	3728      	adds	r7, #40	@ 0x28
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004258:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b02      	cmp	r3, #2
 8004262:	d10b      	bne.n	800427c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b01      	cmp	r3, #1
 800426c:	d102      	bne.n	8004274 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f006 f916 	bl	800a4a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f043 0302 	orr.w	r3, r3, #2
 800427a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b08      	cmp	r3, #8
 8004284:	d132      	bne.n	80042ec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f043 0308 	orr.w	r3, r3, #8
 800428c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b04      	cmp	r3, #4
 8004296:	d126      	bne.n	80042e6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	7a5b      	ldrb	r3, [r3, #9]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d113      	bne.n	80042c8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80042a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042aa:	d106      	bne.n	80042ba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2102      	movs	r1, #2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f003 f938 	bl	8007528 <USB_InitFSLSPClkSel>
 80042b8:	e011      	b.n	80042de <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2101      	movs	r1, #1
 80042c0:	4618      	mov	r0, r3
 80042c2:	f003 f931 	bl	8007528 <USB_InitFSLSPClkSel>
 80042c6:	e00a      	b.n	80042de <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	79db      	ldrb	r3, [r3, #7]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d106      	bne.n	80042de <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042d6:	461a      	mov	r2, r3
 80042d8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80042dc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f006 f908 	bl	800a4f4 <HAL_HCD_PortEnabled_Callback>
 80042e4:	e002      	b.n	80042ec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f006 f912 	bl	800a510 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d103      	bne.n	80042fe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f043 0320 	orr.w	r3, r3, #32
 80042fc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004304:	461a      	mov	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6013      	str	r3, [r2, #0]
}
 800430a:	bf00      	nop
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e12b      	b.n	800457e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fd f878 	bl	8001430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2224      	movs	r2, #36	@ 0x24
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004366:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004376:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004378:	f001 fa20 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 800437c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4a81      	ldr	r2, [pc, #516]	@ (8004588 <HAL_I2C_Init+0x274>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d807      	bhi.n	8004398 <HAL_I2C_Init+0x84>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4a80      	ldr	r2, [pc, #512]	@ (800458c <HAL_I2C_Init+0x278>)
 800438c:	4293      	cmp	r3, r2
 800438e:	bf94      	ite	ls
 8004390:	2301      	movls	r3, #1
 8004392:	2300      	movhi	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e006      	b.n	80043a6 <HAL_I2C_Init+0x92>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a7d      	ldr	r2, [pc, #500]	@ (8004590 <HAL_I2C_Init+0x27c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	bf94      	ite	ls
 80043a0:	2301      	movls	r3, #1
 80043a2:	2300      	movhi	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e0e7      	b.n	800457e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4a78      	ldr	r2, [pc, #480]	@ (8004594 <HAL_I2C_Init+0x280>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	0c9b      	lsrs	r3, r3, #18
 80043b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a6a      	ldr	r2, [pc, #424]	@ (8004588 <HAL_I2C_Init+0x274>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d802      	bhi.n	80043e8 <HAL_I2C_Init+0xd4>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	3301      	adds	r3, #1
 80043e6:	e009      	b.n	80043fc <HAL_I2C_Init+0xe8>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	4a69      	ldr	r2, [pc, #420]	@ (8004598 <HAL_I2C_Init+0x284>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	3301      	adds	r3, #1
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	430b      	orrs	r3, r1
 8004402:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800440e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	495c      	ldr	r1, [pc, #368]	@ (8004588 <HAL_I2C_Init+0x274>)
 8004418:	428b      	cmp	r3, r1
 800441a:	d819      	bhi.n	8004450 <HAL_I2C_Init+0x13c>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e59      	subs	r1, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	fbb1 f3f3 	udiv	r3, r1, r3
 800442a:	1c59      	adds	r1, r3, #1
 800442c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004430:	400b      	ands	r3, r1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_I2C_Init+0x138>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1e59      	subs	r1, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fbb1 f3f3 	udiv	r3, r1, r3
 8004444:	3301      	adds	r3, #1
 8004446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444a:	e051      	b.n	80044f0 <HAL_I2C_Init+0x1dc>
 800444c:	2304      	movs	r3, #4
 800444e:	e04f      	b.n	80044f0 <HAL_I2C_Init+0x1dc>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d111      	bne.n	800447c <HAL_I2C_Init+0x168>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	1e58      	subs	r0, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	440b      	add	r3, r1
 8004466:	fbb0 f3f3 	udiv	r3, r0, r3
 800446a:	3301      	adds	r3, #1
 800446c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004470:	2b00      	cmp	r3, #0
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	e012      	b.n	80044a2 <HAL_I2C_Init+0x18e>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	1e58      	subs	r0, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6859      	ldr	r1, [r3, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	0099      	lsls	r1, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004492:	3301      	adds	r3, #1
 8004494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004498:	2b00      	cmp	r3, #0
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_Init+0x196>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e022      	b.n	80044f0 <HAL_I2C_Init+0x1dc>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10e      	bne.n	80044d0 <HAL_I2C_Init+0x1bc>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1e58      	subs	r0, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6859      	ldr	r1, [r3, #4]
 80044ba:	460b      	mov	r3, r1
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	440b      	add	r3, r1
 80044c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80044c4:	3301      	adds	r3, #1
 80044c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ce:	e00f      	b.n	80044f0 <HAL_I2C_Init+0x1dc>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1e58      	subs	r0, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	0099      	lsls	r1, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e6:	3301      	adds	r3, #1
 80044e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	6809      	ldr	r1, [r1, #0]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69da      	ldr	r2, [r3, #28]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800451e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6911      	ldr	r1, [r2, #16]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68d2      	ldr	r2, [r2, #12]
 800452a:	4311      	orrs	r1, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	430b      	orrs	r3, r1
 8004532:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	000186a0 	.word	0x000186a0
 800458c:	001e847f 	.word	0x001e847f
 8004590:	003d08ff 	.word	0x003d08ff
 8004594:	431bde83 	.word	0x431bde83
 8004598:	10624dd3 	.word	0x10624dd3

0800459c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e128      	b.n	8004800 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a90      	ldr	r2, [pc, #576]	@ (8004808 <HAL_I2S_Init+0x26c>)
 80045c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7fc ff79 	bl	80014c0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2202      	movs	r2, #2
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80045e4:	f023 030f 	bic.w	r3, r3, #15
 80045e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2202      	movs	r2, #2
 80045f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d060      	beq.n	80046bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004602:	2310      	movs	r3, #16
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e001      	b.n	800460c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004608:	2320      	movs	r3, #32
 800460a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b20      	cmp	r3, #32
 8004612:	d802      	bhi.n	800461a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800461a:	2001      	movs	r0, #1
 800461c:	f001 f9c4 	bl	80059a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004620:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800462a:	d125      	bne.n	8004678 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d010      	beq.n	8004656 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	fbb2 f2f3 	udiv	r2, r2, r3
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	461a      	mov	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	3305      	adds	r3, #5
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	e01f      	b.n	8004696 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	461a      	mov	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004672:	3305      	adds	r3, #5
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e00e      	b.n	8004696 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	461a      	mov	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004692:	3305      	adds	r3, #5
 8004694:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4a5c      	ldr	r2, [pc, #368]	@ (800480c <HAL_I2S_Init+0x270>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	08db      	lsrs	r3, r3, #3
 80046a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e003      	b.n	80046c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80046bc:	2302      	movs	r3, #2
 80046be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d902      	bls.n	80046d0 <HAL_I2S_Init+0x134>
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	2bff      	cmp	r3, #255	@ 0xff
 80046ce:	d907      	bls.n	80046e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d4:	f043 0210 	orr.w	r2, r3, #16
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e08f      	b.n	8004800 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	ea42 0103 	orr.w	r1, r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80046fe:	f023 030f 	bic.w	r3, r3, #15
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6851      	ldr	r1, [r2, #4]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6892      	ldr	r2, [r2, #8]
 800470a:	4311      	orrs	r1, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	68d2      	ldr	r2, [r2, #12]
 8004710:	4311      	orrs	r1, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6992      	ldr	r2, [r2, #24]
 8004716:	430a      	orrs	r2, r1
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004722:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d161      	bne.n	80047f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a38      	ldr	r2, [pc, #224]	@ (8004810 <HAL_I2S_Init+0x274>)
 8004730:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a37      	ldr	r2, [pc, #220]	@ (8004814 <HAL_I2S_Init+0x278>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d101      	bne.n	8004740 <HAL_I2S_Init+0x1a4>
 800473c:	4b36      	ldr	r3, [pc, #216]	@ (8004818 <HAL_I2S_Init+0x27c>)
 800473e:	e001      	b.n	8004744 <HAL_I2S_Init+0x1a8>
 8004740:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	4932      	ldr	r1, [pc, #200]	@ (8004814 <HAL_I2S_Init+0x278>)
 800474c:	428a      	cmp	r2, r1
 800474e:	d101      	bne.n	8004754 <HAL_I2S_Init+0x1b8>
 8004750:	4a31      	ldr	r2, [pc, #196]	@ (8004818 <HAL_I2S_Init+0x27c>)
 8004752:	e001      	b.n	8004758 <HAL_I2S_Init+0x1bc>
 8004754:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004758:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800475c:	f023 030f 	bic.w	r3, r3, #15
 8004760:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2b      	ldr	r2, [pc, #172]	@ (8004814 <HAL_I2S_Init+0x278>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d101      	bne.n	8004770 <HAL_I2S_Init+0x1d4>
 800476c:	4b2a      	ldr	r3, [pc, #168]	@ (8004818 <HAL_I2S_Init+0x27c>)
 800476e:	e001      	b.n	8004774 <HAL_I2S_Init+0x1d8>
 8004770:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004774:	2202      	movs	r2, #2
 8004776:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a25      	ldr	r2, [pc, #148]	@ (8004814 <HAL_I2S_Init+0x278>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d101      	bne.n	8004786 <HAL_I2S_Init+0x1ea>
 8004782:	4b25      	ldr	r3, [pc, #148]	@ (8004818 <HAL_I2S_Init+0x27c>)
 8004784:	e001      	b.n	800478a <HAL_I2S_Init+0x1ee>
 8004786:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004796:	d003      	beq.n	80047a0 <HAL_I2S_Init+0x204>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d103      	bne.n	80047a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80047a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e001      	b.n	80047ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047b6:	4313      	orrs	r3, r2
 80047b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047c0:	4313      	orrs	r3, r2
 80047c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047ca:	4313      	orrs	r3, r2
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	897b      	ldrh	r3, [r7, #10]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80047d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a0d      	ldr	r2, [pc, #52]	@ (8004814 <HAL_I2S_Init+0x278>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d101      	bne.n	80047e8 <HAL_I2S_Init+0x24c>
 80047e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <HAL_I2S_Init+0x27c>)
 80047e6:	e001      	b.n	80047ec <HAL_I2S_Init+0x250>
 80047e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047ec:	897a      	ldrh	r2, [r7, #10]
 80047ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	08004913 	.word	0x08004913
 800480c:	cccccccd 	.word	0xcccccccd
 8004810:	08004a29 	.word	0x08004a29
 8004814:	40003800 	.word	0x40003800
 8004818:	40003400 	.word	0x40003400

0800481c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	881a      	ldrh	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10e      	bne.n	80048ac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800489c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff ffb8 	bl	800481c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	b292      	uxth	r2, r2
 80048c8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ce:	1c9a      	adds	r2, r3, #2
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10e      	bne.n	800490a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048fa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ff93 	bl	8004830 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b086      	sub	sp, #24
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b04      	cmp	r3, #4
 800492c:	d13a      	bne.n	80049a4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d109      	bne.n	800494c <I2S_IRQHandler+0x3a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004942:	2b40      	cmp	r3, #64	@ 0x40
 8004944:	d102      	bne.n	800494c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff ffb4 	bl	80048b4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004952:	2b40      	cmp	r3, #64	@ 0x40
 8004954:	d126      	bne.n	80049a4 <I2S_IRQHandler+0x92>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b20      	cmp	r3, #32
 8004962:	d11f      	bne.n	80049a4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004972:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004996:	f043 0202 	orr.w	r2, r3, #2
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff ff50 	bl	8004844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d136      	bne.n	8004a1e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d109      	bne.n	80049ce <I2S_IRQHandler+0xbc>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c4:	2b80      	cmp	r3, #128	@ 0x80
 80049c6:	d102      	bne.n	80049ce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff ff45 	bl	8004858 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d122      	bne.n	8004a1e <I2S_IRQHandler+0x10c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d11b      	bne.n	8004a1e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049f4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a10:	f043 0204 	orr.w	r2, r3, #4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ff13 	bl	8004844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a92      	ldr	r2, [pc, #584]	@ (8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d101      	bne.n	8004a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004a42:	4b92      	ldr	r3, [pc, #584]	@ (8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a44:	e001      	b.n	8004a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004a46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a8b      	ldr	r2, [pc, #556]	@ (8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d101      	bne.n	8004a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004a60:	4b8a      	ldr	r3, [pc, #552]	@ (8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a62:	e001      	b.n	8004a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004a64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a74:	d004      	beq.n	8004a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 8099 	bne.w	8004bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d107      	bne.n	8004a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f925 	bl	8004ce4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d107      	bne.n	8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f9c8 	bl	8004e44 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aba:	2b40      	cmp	r3, #64	@ 0x40
 8004abc:	d13a      	bne.n	8004b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d035      	beq.n	8004b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a6e      	ldr	r2, [pc, #440]	@ (8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d101      	bne.n	8004ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ad4:	e001      	b.n	8004ada <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004ad6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4969      	ldr	r1, [pc, #420]	@ (8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ae2:	428b      	cmp	r3, r1
 8004ae4:	d101      	bne.n	8004aea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004ae6:	4b69      	ldr	r3, [pc, #420]	@ (8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ae8:	e001      	b.n	8004aee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004aea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004aee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004af2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b26:	f043 0202 	orr.w	r2, r3, #2
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff fe88 	bl	8004844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	f040 80c3 	bne.w	8004cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 80bd 	beq.w	8004cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b5a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a49      	ldr	r2, [pc, #292]	@ (8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d101      	bne.n	8004b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004b66:	4b49      	ldr	r3, [pc, #292]	@ (8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b68:	e001      	b.n	8004b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004b6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4944      	ldr	r1, [pc, #272]	@ (8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b76:	428b      	cmp	r3, r1
 8004b78:	d101      	bne.n	8004b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004b7a:	4b44      	ldr	r3, [pc, #272]	@ (8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b7c:	e001      	b.n	8004b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004b7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b86:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba2:	f043 0204 	orr.w	r2, r3, #4
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff fe4a 	bl	8004844 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bb0:	e089      	b.n	8004cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d107      	bne.n	8004bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f8be 	bl	8004d48 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d107      	bne.n	8004be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f8fd 	bl	8004de0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bec:	2b40      	cmp	r3, #64	@ 0x40
 8004bee:	d12f      	bne.n	8004c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d02a      	beq.n	8004c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c08:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d101      	bne.n	8004c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004c14:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c16:	e001      	b.n	8004c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004c18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4919      	ldr	r1, [pc, #100]	@ (8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c24:	428b      	cmp	r3, r1
 8004c26:	d101      	bne.n	8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004c28:	4b18      	ldr	r3, [pc, #96]	@ (8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c2a:	e001      	b.n	8004c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004c2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c42:	f043 0202 	orr.w	r2, r3, #2
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff fdfa 	bl	8004844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d136      	bne.n	8004cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d031      	beq.n	8004cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a07      	ldr	r2, [pc, #28]	@ (8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004c6e:	4b07      	ldr	r3, [pc, #28]	@ (8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c70:	e001      	b.n	8004c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004c72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4902      	ldr	r1, [pc, #8]	@ (8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c7e:	428b      	cmp	r3, r1
 8004c80:	d106      	bne.n	8004c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004c82:	4b02      	ldr	r3, [pc, #8]	@ (8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c84:	e006      	b.n	8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004c86:	bf00      	nop
 8004c88:	40003800 	.word	0x40003800
 8004c8c:	40003400 	.word	0x40003400
 8004c90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c98:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ca8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb6:	f043 0204 	orr.w	r2, r3, #4
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fdc0 	bl	8004844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cc4:	e000      	b.n	8004cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004cc6:	bf00      	nop
}
 8004cc8:	bf00      	nop
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	1c99      	adds	r1, r3, #2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6251      	str	r1, [r2, #36]	@ 0x24
 8004cf6:	881a      	ldrh	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d113      	bne.n	8004d3e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff ffc9 	bl	8004cd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	1c99      	adds	r1, r3, #2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6251      	str	r1, [r2, #36]	@ 0x24
 8004d5a:	8819      	ldrh	r1, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd8 <I2SEx_TxISR_I2SExt+0x90>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d101      	bne.n	8004d6a <I2SEx_TxISR_I2SExt+0x22>
 8004d66:	4b1d      	ldr	r3, [pc, #116]	@ (8004ddc <I2SEx_TxISR_I2SExt+0x94>)
 8004d68:	e001      	b.n	8004d6e <I2SEx_TxISR_I2SExt+0x26>
 8004d6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d6e:	460a      	mov	r2, r1
 8004d70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d121      	bne.n	8004dce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a12      	ldr	r2, [pc, #72]	@ (8004dd8 <I2SEx_TxISR_I2SExt+0x90>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d101      	bne.n	8004d98 <I2SEx_TxISR_I2SExt+0x50>
 8004d94:	4b11      	ldr	r3, [pc, #68]	@ (8004ddc <I2SEx_TxISR_I2SExt+0x94>)
 8004d96:	e001      	b.n	8004d9c <I2SEx_TxISR_I2SExt+0x54>
 8004d98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	490d      	ldr	r1, [pc, #52]	@ (8004dd8 <I2SEx_TxISR_I2SExt+0x90>)
 8004da4:	428b      	cmp	r3, r1
 8004da6:	d101      	bne.n	8004dac <I2SEx_TxISR_I2SExt+0x64>
 8004da8:	4b0c      	ldr	r3, [pc, #48]	@ (8004ddc <I2SEx_TxISR_I2SExt+0x94>)
 8004daa:	e001      	b.n	8004db0 <I2SEx_TxISR_I2SExt+0x68>
 8004dac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004db0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004db4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d106      	bne.n	8004dce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff ff81 	bl	8004cd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40003800 	.word	0x40003800
 8004ddc:	40003400 	.word	0x40003400

08004de0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68d8      	ldr	r0, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	1c99      	adds	r1, r3, #2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004df8:	b282      	uxth	r2, r0
 8004dfa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d113      	bne.n	8004e3c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e22:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff ff4a 	bl	8004cd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a20      	ldr	r2, [pc, #128]	@ (8004ed4 <I2SEx_RxISR_I2SExt+0x90>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d101      	bne.n	8004e5a <I2SEx_RxISR_I2SExt+0x16>
 8004e56:	4b20      	ldr	r3, [pc, #128]	@ (8004ed8 <I2SEx_RxISR_I2SExt+0x94>)
 8004e58:	e001      	b.n	8004e5e <I2SEx_RxISR_I2SExt+0x1a>
 8004e5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e5e:	68d8      	ldr	r0, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	1c99      	adds	r1, r3, #2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004e6a:	b282      	uxth	r2, r0
 8004e6c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d121      	bne.n	8004eca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a12      	ldr	r2, [pc, #72]	@ (8004ed4 <I2SEx_RxISR_I2SExt+0x90>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d101      	bne.n	8004e94 <I2SEx_RxISR_I2SExt+0x50>
 8004e90:	4b11      	ldr	r3, [pc, #68]	@ (8004ed8 <I2SEx_RxISR_I2SExt+0x94>)
 8004e92:	e001      	b.n	8004e98 <I2SEx_RxISR_I2SExt+0x54>
 8004e94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	490d      	ldr	r1, [pc, #52]	@ (8004ed4 <I2SEx_RxISR_I2SExt+0x90>)
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	d101      	bne.n	8004ea8 <I2SEx_RxISR_I2SExt+0x64>
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <I2SEx_RxISR_I2SExt+0x94>)
 8004ea6:	e001      	b.n	8004eac <I2SEx_RxISR_I2SExt+0x68>
 8004ea8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004eac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004eb0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ff03 	bl	8004cd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40003800 	.word	0x40003800
 8004ed8:	40003400 	.word	0x40003400

08004edc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e267      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d075      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004efa:	4b88      	ldr	r3, [pc, #544]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d00c      	beq.n	8004f20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f06:	4b85      	ldr	r3, [pc, #532]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d112      	bne.n	8004f38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f12:	4b82      	ldr	r3, [pc, #520]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f1e:	d10b      	bne.n	8004f38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f20:	4b7e      	ldr	r3, [pc, #504]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d05b      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x108>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d157      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e242      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f40:	d106      	bne.n	8004f50 <HAL_RCC_OscConfig+0x74>
 8004f42:	4b76      	ldr	r3, [pc, #472]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a75      	ldr	r2, [pc, #468]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e01d      	b.n	8004f8c <HAL_RCC_OscConfig+0xb0>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f58:	d10c      	bne.n	8004f74 <HAL_RCC_OscConfig+0x98>
 8004f5a:	4b70      	ldr	r3, [pc, #448]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a6f      	ldr	r2, [pc, #444]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	4b6d      	ldr	r3, [pc, #436]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a6c      	ldr	r2, [pc, #432]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	e00b      	b.n	8004f8c <HAL_RCC_OscConfig+0xb0>
 8004f74:	4b69      	ldr	r3, [pc, #420]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a68      	ldr	r2, [pc, #416]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b66      	ldr	r3, [pc, #408]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a65      	ldr	r2, [pc, #404]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d013      	beq.n	8004fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f94:	f7fc fd6e 	bl	8001a74 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fc fd6a 	bl	8001a74 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	@ 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e207      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fae:	4b5b      	ldr	r3, [pc, #364]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0xc0>
 8004fba:	e014      	b.n	8004fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbc:	f7fc fd5a 	bl	8001a74 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc4:	f7fc fd56 	bl	8001a74 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	@ 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e1f3      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd6:	4b51      	ldr	r3, [pc, #324]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0xe8>
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d063      	beq.n	80050ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ffe:	4b47      	ldr	r3, [pc, #284]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005006:	2b08      	cmp	r3, #8
 8005008:	d11c      	bne.n	8005044 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800500a:	4b44      	ldr	r3, [pc, #272]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d116      	bne.n	8005044 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005016:	4b41      	ldr	r3, [pc, #260]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_RCC_OscConfig+0x152>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d001      	beq.n	800502e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e1c7      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502e:	4b3b      	ldr	r3, [pc, #236]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4937      	ldr	r1, [pc, #220]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005042:	e03a      	b.n	80050ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d020      	beq.n	800508e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800504c:	4b34      	ldr	r3, [pc, #208]	@ (8005120 <HAL_RCC_OscConfig+0x244>)
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005052:	f7fc fd0f 	bl	8001a74 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505a:	f7fc fd0b 	bl	8001a74 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e1a8      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506c:	4b2b      	ldr	r3, [pc, #172]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005078:	4b28      	ldr	r3, [pc, #160]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4925      	ldr	r1, [pc, #148]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8005088:	4313      	orrs	r3, r2
 800508a:	600b      	str	r3, [r1, #0]
 800508c:	e015      	b.n	80050ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800508e:	4b24      	ldr	r3, [pc, #144]	@ (8005120 <HAL_RCC_OscConfig+0x244>)
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fc fcee 	bl	8001a74 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800509c:	f7fc fcea 	bl	8001a74 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e187      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ae:	4b1b      	ldr	r3, [pc, #108]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d036      	beq.n	8005134 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d016      	beq.n	80050fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ce:	4b15      	ldr	r3, [pc, #84]	@ (8005124 <HAL_RCC_OscConfig+0x248>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d4:	f7fc fcce 	bl	8001a74 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050dc:	f7fc fcca 	bl	8001a74 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e167      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ee:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 80050f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0x200>
 80050fa:	e01b      	b.n	8005134 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050fc:	4b09      	ldr	r3, [pc, #36]	@ (8005124 <HAL_RCC_OscConfig+0x248>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005102:	f7fc fcb7 	bl	8001a74 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005108:	e00e      	b.n	8005128 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800510a:	f7fc fcb3 	bl	8001a74 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d907      	bls.n	8005128 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e150      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 800511c:	40023800 	.word	0x40023800
 8005120:	42470000 	.word	0x42470000
 8005124:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005128:	4b88      	ldr	r3, [pc, #544]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 800512a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1ea      	bne.n	800510a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8097 	beq.w	8005270 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005146:	4b81      	ldr	r3, [pc, #516]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10f      	bne.n	8005172 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005152:	2300      	movs	r3, #0
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	4b7d      	ldr	r3, [pc, #500]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	4a7c      	ldr	r2, [pc, #496]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 800515c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005160:	6413      	str	r3, [r2, #64]	@ 0x40
 8005162:	4b7a      	ldr	r3, [pc, #488]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516a:	60bb      	str	r3, [r7, #8]
 800516c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800516e:	2301      	movs	r3, #1
 8005170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005172:	4b77      	ldr	r3, [pc, #476]	@ (8005350 <HAL_RCC_OscConfig+0x474>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d118      	bne.n	80051b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800517e:	4b74      	ldr	r3, [pc, #464]	@ (8005350 <HAL_RCC_OscConfig+0x474>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a73      	ldr	r2, [pc, #460]	@ (8005350 <HAL_RCC_OscConfig+0x474>)
 8005184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800518a:	f7fc fc73 	bl	8001a74 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005192:	f7fc fc6f 	bl	8001a74 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e10c      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005350 <HAL_RCC_OscConfig+0x474>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d106      	bne.n	80051c6 <HAL_RCC_OscConfig+0x2ea>
 80051b8:	4b64      	ldr	r3, [pc, #400]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051bc:	4a63      	ldr	r2, [pc, #396]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c4:	e01c      	b.n	8005200 <HAL_RCC_OscConfig+0x324>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d10c      	bne.n	80051e8 <HAL_RCC_OscConfig+0x30c>
 80051ce:	4b5f      	ldr	r3, [pc, #380]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	4a5e      	ldr	r2, [pc, #376]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051d4:	f043 0304 	orr.w	r3, r3, #4
 80051d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051da:	4b5c      	ldr	r3, [pc, #368]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	4a5b      	ldr	r2, [pc, #364]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051e6:	e00b      	b.n	8005200 <HAL_RCC_OscConfig+0x324>
 80051e8:	4b58      	ldr	r3, [pc, #352]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ec:	4a57      	ldr	r2, [pc, #348]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f4:	4b55      	ldr	r3, [pc, #340]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f8:	4a54      	ldr	r2, [pc, #336]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051fa:	f023 0304 	bic.w	r3, r3, #4
 80051fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d015      	beq.n	8005234 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005208:	f7fc fc34 	bl	8001a74 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520e:	e00a      	b.n	8005226 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005210:	f7fc fc30 	bl	8001a74 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e0cb      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005226:	4b49      	ldr	r3, [pc, #292]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0ee      	beq.n	8005210 <HAL_RCC_OscConfig+0x334>
 8005232:	e014      	b.n	800525e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005234:	f7fc fc1e 	bl	8001a74 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523a:	e00a      	b.n	8005252 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523c:	f7fc fc1a 	bl	8001a74 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e0b5      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005252:	4b3e      	ldr	r3, [pc, #248]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1ee      	bne.n	800523c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d105      	bne.n	8005270 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005264:	4b39      	ldr	r3, [pc, #228]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005268:	4a38      	ldr	r2, [pc, #224]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 800526a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800526e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80a1 	beq.w	80053bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800527a:	4b34      	ldr	r3, [pc, #208]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b08      	cmp	r3, #8
 8005284:	d05c      	beq.n	8005340 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d141      	bne.n	8005312 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800528e:	4b31      	ldr	r3, [pc, #196]	@ (8005354 <HAL_RCC_OscConfig+0x478>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005294:	f7fc fbee 	bl	8001a74 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529c:	f7fc fbea 	bl	8001a74 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e087      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ae:	4b27      	ldr	r3, [pc, #156]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69da      	ldr	r2, [r3, #28]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c8:	019b      	lsls	r3, r3, #6
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	085b      	lsrs	r3, r3, #1
 80052d2:	3b01      	subs	r3, #1
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	491b      	ldr	r1, [pc, #108]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005354 <HAL_RCC_OscConfig+0x478>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ea:	f7fc fbc3 	bl	8001a74 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f2:	f7fc fbbf 	bl	8001a74 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e05c      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005304:	4b11      	ldr	r3, [pc, #68]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0x416>
 8005310:	e054      	b.n	80053bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005312:	4b10      	ldr	r3, [pc, #64]	@ (8005354 <HAL_RCC_OscConfig+0x478>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005318:	f7fc fbac 	bl	8001a74 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005320:	f7fc fba8 	bl	8001a74 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e045      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005332:	4b06      	ldr	r3, [pc, #24]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x444>
 800533e:	e03d      	b.n	80053bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d107      	bne.n	8005358 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e038      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 800534c:	40023800 	.word	0x40023800
 8005350:	40007000 	.word	0x40007000
 8005354:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005358:	4b1b      	ldr	r3, [pc, #108]	@ (80053c8 <HAL_RCC_OscConfig+0x4ec>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d028      	beq.n	80053b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005370:	429a      	cmp	r2, r3
 8005372:	d121      	bne.n	80053b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537e:	429a      	cmp	r2, r3
 8005380:	d11a      	bne.n	80053b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005388:	4013      	ands	r3, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800538e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005390:	4293      	cmp	r3, r2
 8005392:	d111      	bne.n	80053b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	3b01      	subs	r3, #1
 80053a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40023800 	.word	0x40023800

080053cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e0cc      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053e0:	4b68      	ldr	r3, [pc, #416]	@ (8005584 <HAL_RCC_ClockConfig+0x1b8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d90c      	bls.n	8005408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ee:	4b65      	ldr	r3, [pc, #404]	@ (8005584 <HAL_RCC_ClockConfig+0x1b8>)
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f6:	4b63      	ldr	r3, [pc, #396]	@ (8005584 <HAL_RCC_ClockConfig+0x1b8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e0b8      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d020      	beq.n	8005456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005420:	4b59      	ldr	r3, [pc, #356]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4a58      	ldr	r2, [pc, #352]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800542a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005438:	4b53      	ldr	r3, [pc, #332]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	4a52      	ldr	r2, [pc, #328]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005444:	4b50      	ldr	r3, [pc, #320]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	494d      	ldr	r1, [pc, #308]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	4313      	orrs	r3, r2
 8005454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d044      	beq.n	80054ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d107      	bne.n	800547a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800546a:	4b47      	ldr	r3, [pc, #284]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d119      	bne.n	80054aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e07f      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d003      	beq.n	800548a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005486:	2b03      	cmp	r3, #3
 8005488:	d107      	bne.n	800549a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800548a:	4b3f      	ldr	r3, [pc, #252]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e06f      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549a:	4b3b      	ldr	r3, [pc, #236]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e067      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054aa:	4b37      	ldr	r3, [pc, #220]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f023 0203 	bic.w	r2, r3, #3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4934      	ldr	r1, [pc, #208]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054bc:	f7fc fada 	bl	8001a74 <HAL_GetTick>
 80054c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c2:	e00a      	b.n	80054da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c4:	f7fc fad6 	bl	8001a74 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e04f      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054da:	4b2b      	ldr	r3, [pc, #172]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 020c 	and.w	r2, r3, #12
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d1eb      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054ec:	4b25      	ldr	r3, [pc, #148]	@ (8005584 <HAL_RCC_ClockConfig+0x1b8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d20c      	bcs.n	8005514 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054fa:	4b22      	ldr	r3, [pc, #136]	@ (8005584 <HAL_RCC_ClockConfig+0x1b8>)
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005502:	4b20      	ldr	r3, [pc, #128]	@ (8005584 <HAL_RCC_ClockConfig+0x1b8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d001      	beq.n	8005514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e032      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005520:	4b19      	ldr	r3, [pc, #100]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	4916      	ldr	r1, [pc, #88]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	4313      	orrs	r3, r2
 8005530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800553e:	4b12      	ldr	r3, [pc, #72]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	490e      	ldr	r1, [pc, #56]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	4313      	orrs	r3, r2
 8005550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005552:	f000 f821 	bl	8005598 <HAL_RCC_GetSysClockFreq>
 8005556:	4602      	mov	r2, r0
 8005558:	4b0b      	ldr	r3, [pc, #44]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	091b      	lsrs	r3, r3, #4
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	490a      	ldr	r1, [pc, #40]	@ (800558c <HAL_RCC_ClockConfig+0x1c0>)
 8005564:	5ccb      	ldrb	r3, [r1, r3]
 8005566:	fa22 f303 	lsr.w	r3, r2, r3
 800556a:	4a09      	ldr	r2, [pc, #36]	@ (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 800556c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800556e:	4b09      	ldr	r3, [pc, #36]	@ (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f7fc fa3a 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40023c00 	.word	0x40023c00
 8005588:	40023800 	.word	0x40023800
 800558c:	0800abcc 	.word	0x0800abcc
 8005590:	20000000 	.word	0x20000000
 8005594:	20000004 	.word	0x20000004

08005598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800559c:	b094      	sub	sp, #80	@ 0x50
 800559e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055b0:	4b79      	ldr	r3, [pc, #484]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x200>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 030c 	and.w	r3, r3, #12
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d00d      	beq.n	80055d8 <HAL_RCC_GetSysClockFreq+0x40>
 80055bc:	2b08      	cmp	r3, #8
 80055be:	f200 80e1 	bhi.w	8005784 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_RCC_GetSysClockFreq+0x34>
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d003      	beq.n	80055d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80055ca:	e0db      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055cc:	4b73      	ldr	r3, [pc, #460]	@ (800579c <HAL_RCC_GetSysClockFreq+0x204>)
 80055ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055d0:	e0db      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055d2:	4b73      	ldr	r3, [pc, #460]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80055d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055d6:	e0d8      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x200>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d063      	beq.n	80056b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x200>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	099b      	lsrs	r3, r3, #6
 80055f4:	2200      	movs	r2, #0
 80055f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005600:	633b      	str	r3, [r7, #48]	@ 0x30
 8005602:	2300      	movs	r3, #0
 8005604:	637b      	str	r3, [r7, #52]	@ 0x34
 8005606:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800560a:	4622      	mov	r2, r4
 800560c:	462b      	mov	r3, r5
 800560e:	f04f 0000 	mov.w	r0, #0
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	0159      	lsls	r1, r3, #5
 8005618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800561c:	0150      	lsls	r0, r2, #5
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4621      	mov	r1, r4
 8005624:	1a51      	subs	r1, r2, r1
 8005626:	6139      	str	r1, [r7, #16]
 8005628:	4629      	mov	r1, r5
 800562a:	eb63 0301 	sbc.w	r3, r3, r1
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800563c:	4659      	mov	r1, fp
 800563e:	018b      	lsls	r3, r1, #6
 8005640:	4651      	mov	r1, sl
 8005642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005646:	4651      	mov	r1, sl
 8005648:	018a      	lsls	r2, r1, #6
 800564a:	4651      	mov	r1, sl
 800564c:	ebb2 0801 	subs.w	r8, r2, r1
 8005650:	4659      	mov	r1, fp
 8005652:	eb63 0901 	sbc.w	r9, r3, r1
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800566a:	4690      	mov	r8, r2
 800566c:	4699      	mov	r9, r3
 800566e:	4623      	mov	r3, r4
 8005670:	eb18 0303 	adds.w	r3, r8, r3
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	462b      	mov	r3, r5
 8005678:	eb49 0303 	adc.w	r3, r9, r3
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800568a:	4629      	mov	r1, r5
 800568c:	024b      	lsls	r3, r1, #9
 800568e:	4621      	mov	r1, r4
 8005690:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005694:	4621      	mov	r1, r4
 8005696:	024a      	lsls	r2, r1, #9
 8005698:	4610      	mov	r0, r2
 800569a:	4619      	mov	r1, r3
 800569c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800569e:	2200      	movs	r2, #0
 80056a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056a8:	f7fb f97c 	bl	80009a4 <__aeabi_uldivmod>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4613      	mov	r3, r2
 80056b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b4:	e058      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056b6:	4b38      	ldr	r3, [pc, #224]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x200>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	099b      	lsrs	r3, r3, #6
 80056bc:	2200      	movs	r2, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	4611      	mov	r1, r2
 80056c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056c6:	623b      	str	r3, [r7, #32]
 80056c8:	2300      	movs	r3, #0
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80056cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056d0:	4642      	mov	r2, r8
 80056d2:	464b      	mov	r3, r9
 80056d4:	f04f 0000 	mov.w	r0, #0
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	0159      	lsls	r1, r3, #5
 80056de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056e2:	0150      	lsls	r0, r2, #5
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4641      	mov	r1, r8
 80056ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80056ee:	4649      	mov	r1, r9
 80056f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005700:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005704:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005708:	ebb2 040a 	subs.w	r4, r2, sl
 800570c:	eb63 050b 	sbc.w	r5, r3, fp
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	00eb      	lsls	r3, r5, #3
 800571a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800571e:	00e2      	lsls	r2, r4, #3
 8005720:	4614      	mov	r4, r2
 8005722:	461d      	mov	r5, r3
 8005724:	4643      	mov	r3, r8
 8005726:	18e3      	adds	r3, r4, r3
 8005728:	603b      	str	r3, [r7, #0]
 800572a:	464b      	mov	r3, r9
 800572c:	eb45 0303 	adc.w	r3, r5, r3
 8005730:	607b      	str	r3, [r7, #4]
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800573e:	4629      	mov	r1, r5
 8005740:	028b      	lsls	r3, r1, #10
 8005742:	4621      	mov	r1, r4
 8005744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005748:	4621      	mov	r1, r4
 800574a:	028a      	lsls	r2, r1, #10
 800574c:	4610      	mov	r0, r2
 800574e:	4619      	mov	r1, r3
 8005750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005752:	2200      	movs	r2, #0
 8005754:	61bb      	str	r3, [r7, #24]
 8005756:	61fa      	str	r2, [r7, #28]
 8005758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800575c:	f7fb f922 	bl	80009a4 <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4613      	mov	r3, r2
 8005766:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005768:	4b0b      	ldr	r3, [pc, #44]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x200>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	0c1b      	lsrs	r3, r3, #16
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	3301      	adds	r3, #1
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005778:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800577a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800577c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005780:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005782:	e002      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005784:	4b05      	ldr	r3, [pc, #20]	@ (800579c <HAL_RCC_GetSysClockFreq+0x204>)
 8005786:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800578a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800578c:	4618      	mov	r0, r3
 800578e:	3750      	adds	r7, #80	@ 0x50
 8005790:	46bd      	mov	sp, r7
 8005792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800
 800579c:	00f42400 	.word	0x00f42400
 80057a0:	007a1200 	.word	0x007a1200

080057a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057a8:	4b03      	ldr	r3, [pc, #12]	@ (80057b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057aa:	681b      	ldr	r3, [r3, #0]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000000 	.word	0x20000000

080057bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057c0:	f7ff fff0 	bl	80057a4 <HAL_RCC_GetHCLKFreq>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b05      	ldr	r3, [pc, #20]	@ (80057dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	0a9b      	lsrs	r3, r3, #10
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	4903      	ldr	r1, [pc, #12]	@ (80057e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d2:	5ccb      	ldrb	r3, [r1, r3]
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d8:	4618      	mov	r0, r3
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40023800 	.word	0x40023800
 80057e0:	0800abdc 	.word	0x0800abdc

080057e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d105      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005808:	2b00      	cmp	r3, #0
 800580a:	d035      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800580c:	4b62      	ldr	r3, [pc, #392]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005812:	f7fc f92f 	bl	8001a74 <HAL_GetTick>
 8005816:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005818:	e008      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800581a:	f7fc f92b 	bl	8001a74 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e0b0      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800582c:	4b5b      	ldr	r3, [pc, #364]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1f0      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	019a      	lsls	r2, r3, #6
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	071b      	lsls	r3, r3, #28
 8005844:	4955      	ldr	r1, [pc, #340]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800584c:	4b52      	ldr	r3, [pc, #328]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005852:	f7fc f90f 	bl	8001a74 <HAL_GetTick>
 8005856:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005858:	e008      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800585a:	f7fc f90b 	bl	8001a74 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e090      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800586c:	4b4b      	ldr	r3, [pc, #300]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8083 	beq.w	800598c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	4b44      	ldr	r3, [pc, #272]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588e:	4a43      	ldr	r2, [pc, #268]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005894:	6413      	str	r3, [r2, #64]	@ 0x40
 8005896:	4b41      	ldr	r3, [pc, #260]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058a2:	4b3f      	ldr	r3, [pc, #252]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a3e      	ldr	r2, [pc, #248]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058ae:	f7fc f8e1 	bl	8001a74 <HAL_GetTick>
 80058b2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80058b4:	e008      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b6:	f7fc f8dd 	bl	8001a74 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e062      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80058c8:	4b35      	ldr	r3, [pc, #212]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0f0      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058d4:	4b31      	ldr	r3, [pc, #196]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058dc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d02f      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d028      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058f2:	4b2a      	ldr	r3, [pc, #168]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058fc:	4b29      	ldr	r3, [pc, #164]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058fe:	2201      	movs	r2, #1
 8005900:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005902:	4b28      	ldr	r3, [pc, #160]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005908:	4a24      	ldr	r2, [pc, #144]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800590e:	4b23      	ldr	r3, [pc, #140]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b01      	cmp	r3, #1
 8005918:	d114      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800591a:	f7fc f8ab 	bl	8001a74 <HAL_GetTick>
 800591e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005920:	e00a      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005922:	f7fc f8a7 	bl	8001a74 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005930:	4293      	cmp	r3, r2
 8005932:	d901      	bls.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e02a      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005938:	4b18      	ldr	r3, [pc, #96]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0ee      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800594c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005950:	d10d      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005952:	4b12      	ldr	r3, [pc, #72]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005966:	490d      	ldr	r1, [pc, #52]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005968:	4313      	orrs	r3, r2
 800596a:	608b      	str	r3, [r1, #8]
 800596c:	e005      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800596e:	4b0b      	ldr	r3, [pc, #44]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	4a0a      	ldr	r2, [pc, #40]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005974:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005978:	6093      	str	r3, [r2, #8]
 800597a:	4b08      	ldr	r3, [pc, #32]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800597c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005986:	4905      	ldr	r1, [pc, #20]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005988:	4313      	orrs	r3, r2
 800598a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	42470068 	.word	0x42470068
 800599c:	40023800 	.word	0x40023800
 80059a0:	40007000 	.word	0x40007000
 80059a4:	42470e40 	.word	0x42470e40

080059a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d13f      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80059c6:	4b24      	ldr	r3, [pc, #144]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059ce:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d006      	beq.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059dc:	d12f      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80059de:	4b1f      	ldr	r3, [pc, #124]	@ (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80059e0:	617b      	str	r3, [r7, #20]
          break;
 80059e2:	e02f      	b.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80059e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059f0:	d108      	bne.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059f2:	4b19      	ldr	r3, [pc, #100]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059fa:	4a19      	ldr	r2, [pc, #100]	@ (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	e007      	b.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a04:	4b14      	ldr	r3, [pc, #80]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a0c:	4a15      	ldr	r2, [pc, #84]	@ (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a12:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a14:	4b10      	ldr	r3, [pc, #64]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a1a:	099b      	lsrs	r3, r3, #6
 8005a1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a28:	4b0b      	ldr	r3, [pc, #44]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a2e:	0f1b      	lsrs	r3, r3, #28
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	617b      	str	r3, [r7, #20]
          break;
 8005a3c:	e002      	b.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
          break;
 8005a42:	bf00      	nop
        }
      }
      break;
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005a46:	bf00      	nop
    }
  }
  return frequency;
 8005a48:	697b      	ldr	r3, [r7, #20]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	00bb8000 	.word	0x00bb8000
 8005a60:	007a1200 	.word	0x007a1200
 8005a64:	00f42400 	.word	0x00f42400

08005a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e07b      	b.n	8005b72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d108      	bne.n	8005a94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a8a:	d009      	beq.n	8005aa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	61da      	str	r2, [r3, #28]
 8005a92:	e005      	b.n	8005aa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fb fd80 	bl	80015c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ad6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b24:	ea42 0103 	orr.w	r1, r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	0c1b      	lsrs	r3, r3, #16
 8005b3e:	f003 0104 	and.w	r1, r3, #4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b46:	f003 0210 	and.w	r2, r3, #16
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e041      	b.n	8005c10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d106      	bne.n	8005ba6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7fb fd55 	bl	8001650 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f000 fd27 	bl	800660c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d109      	bne.n	8005c3c <HAL_TIM_PWM_Start+0x24>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	bf14      	ite	ne
 8005c34:	2301      	movne	r3, #1
 8005c36:	2300      	moveq	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	e022      	b.n	8005c82 <HAL_TIM_PWM_Start+0x6a>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d109      	bne.n	8005c56 <HAL_TIM_PWM_Start+0x3e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	bf14      	ite	ne
 8005c4e:	2301      	movne	r3, #1
 8005c50:	2300      	moveq	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	e015      	b.n	8005c82 <HAL_TIM_PWM_Start+0x6a>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d109      	bne.n	8005c70 <HAL_TIM_PWM_Start+0x58>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	bf14      	ite	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	2300      	moveq	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	e008      	b.n	8005c82 <HAL_TIM_PWM_Start+0x6a>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	bf14      	ite	ne
 8005c7c:	2301      	movne	r3, #1
 8005c7e:	2300      	moveq	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e07c      	b.n	8005d84 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <HAL_TIM_PWM_Start+0x82>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c98:	e013      	b.n	8005cc2 <HAL_TIM_PWM_Start+0xaa>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d104      	bne.n	8005caa <HAL_TIM_PWM_Start+0x92>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ca8:	e00b      	b.n	8005cc2 <HAL_TIM_PWM_Start+0xaa>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d104      	bne.n	8005cba <HAL_TIM_PWM_Start+0xa2>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cb8:	e003      	b.n	8005cc2 <HAL_TIM_PWM_Start+0xaa>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f001 f824 	bl	8006d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8005d8c <HAL_TIM_PWM_Start+0x174>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d004      	beq.n	8005ce4 <HAL_TIM_PWM_Start+0xcc>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a2c      	ldr	r2, [pc, #176]	@ (8005d90 <HAL_TIM_PWM_Start+0x178>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d101      	bne.n	8005ce8 <HAL_TIM_PWM_Start+0xd0>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <HAL_TIM_PWM_Start+0xd2>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cfc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a22      	ldr	r2, [pc, #136]	@ (8005d8c <HAL_TIM_PWM_Start+0x174>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d022      	beq.n	8005d4e <HAL_TIM_PWM_Start+0x136>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d10:	d01d      	beq.n	8005d4e <HAL_TIM_PWM_Start+0x136>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1f      	ldr	r2, [pc, #124]	@ (8005d94 <HAL_TIM_PWM_Start+0x17c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d018      	beq.n	8005d4e <HAL_TIM_PWM_Start+0x136>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1d      	ldr	r2, [pc, #116]	@ (8005d98 <HAL_TIM_PWM_Start+0x180>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <HAL_TIM_PWM_Start+0x136>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d9c <HAL_TIM_PWM_Start+0x184>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00e      	beq.n	8005d4e <HAL_TIM_PWM_Start+0x136>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a16      	ldr	r2, [pc, #88]	@ (8005d90 <HAL_TIM_PWM_Start+0x178>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d009      	beq.n	8005d4e <HAL_TIM_PWM_Start+0x136>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a18      	ldr	r2, [pc, #96]	@ (8005da0 <HAL_TIM_PWM_Start+0x188>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_TIM_PWM_Start+0x136>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a16      	ldr	r2, [pc, #88]	@ (8005da4 <HAL_TIM_PWM_Start+0x18c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d111      	bne.n	8005d72 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b06      	cmp	r3, #6
 8005d5e:	d010      	beq.n	8005d82 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d70:	e007      	b.n	8005d82 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	40010400 	.word	0x40010400
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40000c00 	.word	0x40000c00
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40001800 	.word	0x40001800

08005da8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e041      	b.n	8005e3e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fb fc7e 	bl	80016d0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f000 fc10 	bl	800660c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d104      	bne.n	8005e66 <HAL_TIM_IC_Start_IT+0x1e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	e013      	b.n	8005e8e <HAL_TIM_IC_Start_IT+0x46>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d104      	bne.n	8005e76 <HAL_TIM_IC_Start_IT+0x2e>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	e00b      	b.n	8005e8e <HAL_TIM_IC_Start_IT+0x46>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d104      	bne.n	8005e86 <HAL_TIM_IC_Start_IT+0x3e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	e003      	b.n	8005e8e <HAL_TIM_IC_Start_IT+0x46>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <HAL_TIM_IC_Start_IT+0x58>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e013      	b.n	8005ec8 <HAL_TIM_IC_Start_IT+0x80>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d104      	bne.n	8005eb0 <HAL_TIM_IC_Start_IT+0x68>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	e00b      	b.n	8005ec8 <HAL_TIM_IC_Start_IT+0x80>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d104      	bne.n	8005ec0 <HAL_TIM_IC_Start_IT+0x78>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e003      	b.n	8005ec8 <HAL_TIM_IC_Start_IT+0x80>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eca:	7bbb      	ldrb	r3, [r7, #14]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d102      	bne.n	8005ed6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ed0:	7b7b      	ldrb	r3, [r7, #13]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d001      	beq.n	8005eda <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e0cc      	b.n	8006074 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_IC_Start_IT+0xa2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ee8:	e013      	b.n	8005f12 <HAL_TIM_IC_Start_IT+0xca>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_IC_Start_IT+0xb2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ef8:	e00b      	b.n	8005f12 <HAL_TIM_IC_Start_IT+0xca>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_IC_Start_IT+0xc2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f08:	e003      	b.n	8005f12 <HAL_TIM_IC_Start_IT+0xca>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <HAL_TIM_IC_Start_IT+0xda>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f20:	e013      	b.n	8005f4a <HAL_TIM_IC_Start_IT+0x102>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_IC_Start_IT+0xea>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f30:	e00b      	b.n	8005f4a <HAL_TIM_IC_Start_IT+0x102>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d104      	bne.n	8005f42 <HAL_TIM_IC_Start_IT+0xfa>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f40:	e003      	b.n	8005f4a <HAL_TIM_IC_Start_IT+0x102>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b0c      	cmp	r3, #12
 8005f4e:	d841      	bhi.n	8005fd4 <HAL_TIM_IC_Start_IT+0x18c>
 8005f50:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <HAL_TIM_IC_Start_IT+0x110>)
 8005f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	08005f8d 	.word	0x08005f8d
 8005f5c:	08005fd5 	.word	0x08005fd5
 8005f60:	08005fd5 	.word	0x08005fd5
 8005f64:	08005fd5 	.word	0x08005fd5
 8005f68:	08005f9f 	.word	0x08005f9f
 8005f6c:	08005fd5 	.word	0x08005fd5
 8005f70:	08005fd5 	.word	0x08005fd5
 8005f74:	08005fd5 	.word	0x08005fd5
 8005f78:	08005fb1 	.word	0x08005fb1
 8005f7c:	08005fd5 	.word	0x08005fd5
 8005f80:	08005fd5 	.word	0x08005fd5
 8005f84:	08005fd5 	.word	0x08005fd5
 8005f88:	08005fc3 	.word	0x08005fc3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0202 	orr.w	r2, r2, #2
 8005f9a:	60da      	str	r2, [r3, #12]
      break;
 8005f9c:	e01d      	b.n	8005fda <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0204 	orr.w	r2, r2, #4
 8005fac:	60da      	str	r2, [r3, #12]
      break;
 8005fae:	e014      	b.n	8005fda <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0208 	orr.w	r2, r2, #8
 8005fbe:	60da      	str	r2, [r3, #12]
      break;
 8005fc0:	e00b      	b.n	8005fda <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0210 	orr.w	r2, r2, #16
 8005fd0:	60da      	str	r2, [r3, #12]
      break;
 8005fd2:	e002      	b.n	8005fda <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d148      	bne.n	8006072 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fe95 	bl	8006d18 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a22      	ldr	r2, [pc, #136]	@ (800607c <HAL_TIM_IC_Start_IT+0x234>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d022      	beq.n	800603e <HAL_TIM_IC_Start_IT+0x1f6>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006000:	d01d      	beq.n	800603e <HAL_TIM_IC_Start_IT+0x1f6>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1e      	ldr	r2, [pc, #120]	@ (8006080 <HAL_TIM_IC_Start_IT+0x238>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d018      	beq.n	800603e <HAL_TIM_IC_Start_IT+0x1f6>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1c      	ldr	r2, [pc, #112]	@ (8006084 <HAL_TIM_IC_Start_IT+0x23c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d013      	beq.n	800603e <HAL_TIM_IC_Start_IT+0x1f6>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1b      	ldr	r2, [pc, #108]	@ (8006088 <HAL_TIM_IC_Start_IT+0x240>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00e      	beq.n	800603e <HAL_TIM_IC_Start_IT+0x1f6>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a19      	ldr	r2, [pc, #100]	@ (800608c <HAL_TIM_IC_Start_IT+0x244>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d009      	beq.n	800603e <HAL_TIM_IC_Start_IT+0x1f6>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a18      	ldr	r2, [pc, #96]	@ (8006090 <HAL_TIM_IC_Start_IT+0x248>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d004      	beq.n	800603e <HAL_TIM_IC_Start_IT+0x1f6>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a16      	ldr	r2, [pc, #88]	@ (8006094 <HAL_TIM_IC_Start_IT+0x24c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d111      	bne.n	8006062 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b06      	cmp	r3, #6
 800604e:	d010      	beq.n	8006072 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006060:	e007      	b.n	8006072 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0201 	orr.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40010000 	.word	0x40010000
 8006080:	40000400 	.word	0x40000400
 8006084:	40000800 	.word	0x40000800
 8006088:	40000c00 	.word	0x40000c00
 800608c:	40010400 	.word	0x40010400
 8006090:	40014000 	.word	0x40014000
 8006094:	40001800 	.word	0x40001800

08006098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d020      	beq.n	80060fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01b      	beq.n	80060fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0202 	mvn.w	r2, #2
 80060cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fb f928 	bl	8001338 <HAL_TIM_IC_CaptureCallback>
 80060e8:	e005      	b.n	80060f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fa70 	bl	80065d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fa77 	bl	80065e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d020      	beq.n	8006148 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01b      	beq.n	8006148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0204 	mvn.w	r2, #4
 8006118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2202      	movs	r2, #2
 800611e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fb f902 	bl	8001338 <HAL_TIM_IC_CaptureCallback>
 8006134:	e005      	b.n	8006142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fa4a 	bl	80065d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fa51 	bl	80065e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d020      	beq.n	8006194 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f003 0308 	and.w	r3, r3, #8
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01b      	beq.n	8006194 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0208 	mvn.w	r2, #8
 8006164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2204      	movs	r2, #4
 800616a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fb f8dc 	bl	8001338 <HAL_TIM_IC_CaptureCallback>
 8006180:	e005      	b.n	800618e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa24 	bl	80065d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fa2b 	bl	80065e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b00      	cmp	r3, #0
 800619c:	d020      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01b      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0210 	mvn.w	r2, #16
 80061b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2208      	movs	r2, #8
 80061b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fb f8b6 	bl	8001338 <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f9fe 	bl	80065d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fa05 	bl	80065e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00c      	beq.n	8006204 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0201 	mvn.w	r2, #1
 80061fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f9dc 	bl	80065bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fe76 	bl	8006f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00c      	beq.n	800624c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f9d6 	bl	80065f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0220 	mvn.w	r2, #32
 8006268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fe48 	bl	8006f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006292:	2302      	movs	r3, #2
 8006294:	e088      	b.n	80063a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d11b      	bne.n	80062dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80062b4:	f000 fc06 	bl	8006ac4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 020c 	bic.w	r2, r2, #12
 80062c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6999      	ldr	r1, [r3, #24]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	619a      	str	r2, [r3, #24]
 80062da:	e060      	b.n	800639e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d11c      	bne.n	800631c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80062f2:	f000 fc5b 	bl	8006bac <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699a      	ldr	r2, [r3, #24]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006304:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6999      	ldr	r1, [r3, #24]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	021a      	lsls	r2, r3, #8
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	619a      	str	r2, [r3, #24]
 800631a:	e040      	b.n	800639e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b08      	cmp	r3, #8
 8006320:	d11b      	bne.n	800635a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006332:	f000 fc78 	bl	8006c26 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 020c 	bic.w	r2, r2, #12
 8006344:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69d9      	ldr	r1, [r3, #28]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	61da      	str	r2, [r3, #28]
 8006358:	e021      	b.n	800639e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b0c      	cmp	r3, #12
 800635e:	d11c      	bne.n	800639a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006370:	f000 fc95 	bl	8006c9e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69da      	ldr	r2, [r3, #28]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006382:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69d9      	ldr	r1, [r3, #28]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	021a      	lsls	r2, r3, #8
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	61da      	str	r2, [r3, #28]
 8006398:	e001      	b.n	800639e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e0ae      	b.n	800652c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b0c      	cmp	r3, #12
 80063da:	f200 809f 	bhi.w	800651c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063de:	a201      	add	r2, pc, #4	@ (adr r2, 80063e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	08006419 	.word	0x08006419
 80063e8:	0800651d 	.word	0x0800651d
 80063ec:	0800651d 	.word	0x0800651d
 80063f0:	0800651d 	.word	0x0800651d
 80063f4:	08006459 	.word	0x08006459
 80063f8:	0800651d 	.word	0x0800651d
 80063fc:	0800651d 	.word	0x0800651d
 8006400:	0800651d 	.word	0x0800651d
 8006404:	0800649b 	.word	0x0800649b
 8006408:	0800651d 	.word	0x0800651d
 800640c:	0800651d 	.word	0x0800651d
 8006410:	0800651d 	.word	0x0800651d
 8006414:	080064db 	.word	0x080064db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f9a0 	bl	8006764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0208 	orr.w	r2, r2, #8
 8006432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0204 	bic.w	r2, r2, #4
 8006442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6999      	ldr	r1, [r3, #24]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	619a      	str	r2, [r3, #24]
      break;
 8006456:	e064      	b.n	8006522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	4618      	mov	r0, r3
 8006460:	f000 f9f0 	bl	8006844 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699a      	ldr	r2, [r3, #24]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6999      	ldr	r1, [r3, #24]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	021a      	lsls	r2, r3, #8
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	619a      	str	r2, [r3, #24]
      break;
 8006498:	e043      	b.n	8006522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fa45 	bl	8006930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69da      	ldr	r2, [r3, #28]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0208 	orr.w	r2, r2, #8
 80064b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0204 	bic.w	r2, r2, #4
 80064c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69d9      	ldr	r1, [r3, #28]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	691a      	ldr	r2, [r3, #16]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	61da      	str	r2, [r3, #28]
      break;
 80064d8:	e023      	b.n	8006522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68b9      	ldr	r1, [r7, #8]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fa99 	bl	8006a18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69da      	ldr	r2, [r3, #28]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69d9      	ldr	r1, [r3, #28]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	021a      	lsls	r2, r3, #8
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	61da      	str	r2, [r3, #28]
      break;
 800651a:	e002      	b.n	8006522 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	75fb      	strb	r3, [r7, #23]
      break;
 8006520:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800652a:	7dfb      	ldrb	r3, [r7, #23]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b0c      	cmp	r3, #12
 8006546:	d831      	bhi.n	80065ac <HAL_TIM_ReadCapturedValue+0x78>
 8006548:	a201      	add	r2, pc, #4	@ (adr r2, 8006550 <HAL_TIM_ReadCapturedValue+0x1c>)
 800654a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654e:	bf00      	nop
 8006550:	08006585 	.word	0x08006585
 8006554:	080065ad 	.word	0x080065ad
 8006558:	080065ad 	.word	0x080065ad
 800655c:	080065ad 	.word	0x080065ad
 8006560:	0800658f 	.word	0x0800658f
 8006564:	080065ad 	.word	0x080065ad
 8006568:	080065ad 	.word	0x080065ad
 800656c:	080065ad 	.word	0x080065ad
 8006570:	08006599 	.word	0x08006599
 8006574:	080065ad 	.word	0x080065ad
 8006578:	080065ad 	.word	0x080065ad
 800657c:	080065ad 	.word	0x080065ad
 8006580:	080065a3 	.word	0x080065a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800658a:	60fb      	str	r3, [r7, #12]

      break;
 800658c:	e00f      	b.n	80065ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006594:	60fb      	str	r3, [r7, #12]

      break;
 8006596:	e00a      	b.n	80065ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800659e:	60fb      	str	r3, [r7, #12]

      break;
 80065a0:	e005      	b.n	80065ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a8:	60fb      	str	r3, [r7, #12]

      break;
 80065aa:	e000      	b.n	80065ae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80065ac:	bf00      	nop
  }

  return tmpreg;
 80065ae:	68fb      	ldr	r3, [r7, #12]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a46      	ldr	r2, [pc, #280]	@ (8006738 <TIM_Base_SetConfig+0x12c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <TIM_Base_SetConfig+0x40>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800662a:	d00f      	beq.n	800664c <TIM_Base_SetConfig+0x40>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a43      	ldr	r2, [pc, #268]	@ (800673c <TIM_Base_SetConfig+0x130>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00b      	beq.n	800664c <TIM_Base_SetConfig+0x40>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a42      	ldr	r2, [pc, #264]	@ (8006740 <TIM_Base_SetConfig+0x134>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d007      	beq.n	800664c <TIM_Base_SetConfig+0x40>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a41      	ldr	r2, [pc, #260]	@ (8006744 <TIM_Base_SetConfig+0x138>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_Base_SetConfig+0x40>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a40      	ldr	r2, [pc, #256]	@ (8006748 <TIM_Base_SetConfig+0x13c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d108      	bne.n	800665e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a35      	ldr	r2, [pc, #212]	@ (8006738 <TIM_Base_SetConfig+0x12c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d02b      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800666c:	d027      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a32      	ldr	r2, [pc, #200]	@ (800673c <TIM_Base_SetConfig+0x130>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d023      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a31      	ldr	r2, [pc, #196]	@ (8006740 <TIM_Base_SetConfig+0x134>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d01f      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a30      	ldr	r2, [pc, #192]	@ (8006744 <TIM_Base_SetConfig+0x138>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01b      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a2f      	ldr	r2, [pc, #188]	@ (8006748 <TIM_Base_SetConfig+0x13c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d017      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a2e      	ldr	r2, [pc, #184]	@ (800674c <TIM_Base_SetConfig+0x140>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a2d      	ldr	r2, [pc, #180]	@ (8006750 <TIM_Base_SetConfig+0x144>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00f      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a2c      	ldr	r2, [pc, #176]	@ (8006754 <TIM_Base_SetConfig+0x148>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00b      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006758 <TIM_Base_SetConfig+0x14c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d007      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a2a      	ldr	r2, [pc, #168]	@ (800675c <TIM_Base_SetConfig+0x150>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_Base_SetConfig+0xb2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a29      	ldr	r2, [pc, #164]	@ (8006760 <TIM_Base_SetConfig+0x154>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d108      	bne.n	80066d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a10      	ldr	r2, [pc, #64]	@ (8006738 <TIM_Base_SetConfig+0x12c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_Base_SetConfig+0xf8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a12      	ldr	r2, [pc, #72]	@ (8006748 <TIM_Base_SetConfig+0x13c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d103      	bne.n	800670c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b01      	cmp	r3, #1
 800671c:	d105      	bne.n	800672a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f023 0201 	bic.w	r2, r3, #1
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	611a      	str	r2, [r3, #16]
  }
}
 800672a:	bf00      	nop
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40010000 	.word	0x40010000
 800673c:	40000400 	.word	0x40000400
 8006740:	40000800 	.word	0x40000800
 8006744:	40000c00 	.word	0x40000c00
 8006748:	40010400 	.word	0x40010400
 800674c:	40014000 	.word	0x40014000
 8006750:	40014400 	.word	0x40014400
 8006754:	40014800 	.word	0x40014800
 8006758:	40001800 	.word	0x40001800
 800675c:	40001c00 	.word	0x40001c00
 8006760:	40002000 	.word	0x40002000

08006764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	f023 0201 	bic.w	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0303 	bic.w	r3, r3, #3
 800679a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f023 0302 	bic.w	r3, r3, #2
 80067ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a20      	ldr	r2, [pc, #128]	@ (800683c <TIM_OC1_SetConfig+0xd8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_OC1_SetConfig+0x64>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006840 <TIM_OC1_SetConfig+0xdc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d10c      	bne.n	80067e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 0308 	bic.w	r3, r3, #8
 80067ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f023 0304 	bic.w	r3, r3, #4
 80067e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a15      	ldr	r2, [pc, #84]	@ (800683c <TIM_OC1_SetConfig+0xd8>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_OC1_SetConfig+0x8e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a14      	ldr	r2, [pc, #80]	@ (8006840 <TIM_OC1_SetConfig+0xdc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d111      	bne.n	8006816 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	621a      	str	r2, [r3, #32]
}
 8006830:	bf00      	nop
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	40010000 	.word	0x40010000
 8006840:	40010400 	.word	0x40010400

08006844 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	f023 0210 	bic.w	r2, r3, #16
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800687a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	021b      	lsls	r3, r3, #8
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f023 0320 	bic.w	r3, r3, #32
 800688e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	011b      	lsls	r3, r3, #4
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a22      	ldr	r2, [pc, #136]	@ (8006928 <TIM_OC2_SetConfig+0xe4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_OC2_SetConfig+0x68>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a21      	ldr	r2, [pc, #132]	@ (800692c <TIM_OC2_SetConfig+0xe8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d10d      	bne.n	80068c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	011b      	lsls	r3, r3, #4
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a17      	ldr	r2, [pc, #92]	@ (8006928 <TIM_OC2_SetConfig+0xe4>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_OC2_SetConfig+0x94>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a16      	ldr	r2, [pc, #88]	@ (800692c <TIM_OC2_SetConfig+0xe8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d113      	bne.n	8006900 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40010000 	.word	0x40010000
 800692c:	40010400 	.word	0x40010400

08006930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0303 	bic.w	r3, r3, #3
 8006966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	021b      	lsls	r3, r3, #8
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a21      	ldr	r2, [pc, #132]	@ (8006a10 <TIM_OC3_SetConfig+0xe0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d003      	beq.n	8006996 <TIM_OC3_SetConfig+0x66>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a20      	ldr	r2, [pc, #128]	@ (8006a14 <TIM_OC3_SetConfig+0xe4>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d10d      	bne.n	80069b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800699c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a16      	ldr	r2, [pc, #88]	@ (8006a10 <TIM_OC3_SetConfig+0xe0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d003      	beq.n	80069c2 <TIM_OC3_SetConfig+0x92>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a15      	ldr	r2, [pc, #84]	@ (8006a14 <TIM_OC3_SetConfig+0xe4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d113      	bne.n	80069ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	621a      	str	r2, [r3, #32]
}
 8006a04:	bf00      	nop
 8006a06:	371c      	adds	r7, #28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	40010000 	.word	0x40010000
 8006a14:	40010400 	.word	0x40010400

08006a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	031b      	lsls	r3, r3, #12
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a12      	ldr	r2, [pc, #72]	@ (8006abc <TIM_OC4_SetConfig+0xa4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d003      	beq.n	8006a80 <TIM_OC4_SetConfig+0x68>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a11      	ldr	r2, [pc, #68]	@ (8006ac0 <TIM_OC4_SetConfig+0xa8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d109      	bne.n	8006a94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	019b      	lsls	r3, r3, #6
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	621a      	str	r2, [r3, #32]
}
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40010000 	.word	0x40010000
 8006ac0:	40010400 	.word	0x40010400

08006ac4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	f023 0201 	bic.w	r2, r3, #1
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a28      	ldr	r2, [pc, #160]	@ (8006b90 <TIM_TI1_SetConfig+0xcc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d01b      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af8:	d017      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4a25      	ldr	r2, [pc, #148]	@ (8006b94 <TIM_TI1_SetConfig+0xd0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d013      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a24      	ldr	r2, [pc, #144]	@ (8006b98 <TIM_TI1_SetConfig+0xd4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00f      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a23      	ldr	r2, [pc, #140]	@ (8006b9c <TIM_TI1_SetConfig+0xd8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00b      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a22      	ldr	r2, [pc, #136]	@ (8006ba0 <TIM_TI1_SetConfig+0xdc>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d007      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4a21      	ldr	r2, [pc, #132]	@ (8006ba4 <TIM_TI1_SetConfig+0xe0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d003      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4a20      	ldr	r2, [pc, #128]	@ (8006ba8 <TIM_TI1_SetConfig+0xe4>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d101      	bne.n	8006b2e <TIM_TI1_SetConfig+0x6a>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <TIM_TI1_SetConfig+0x6c>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0303 	bic.w	r3, r3, #3
 8006b3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e003      	b.n	8006b4e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f023 030a 	bic.w	r3, r3, #10
 8006b68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f003 030a 	and.w	r3, r3, #10
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40010400 	.word	0x40010400
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40001800 	.word	0x40001800

08006bac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f023 0210 	bic.w	r2, r3, #16
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	031b      	lsls	r3, r3, #12
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bfe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b087      	sub	sp, #28
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	607a      	str	r2, [r7, #4]
 8006c32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c62:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006c76:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	621a      	str	r2, [r3, #32]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b087      	sub	sp, #28
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
 8006caa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	021b      	lsls	r3, r3, #8
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	031b      	lsls	r3, r3, #12
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	031b      	lsls	r3, r3, #12
 8006cf6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	621a      	str	r2, [r3, #32]
}
 8006d0c:	bf00      	nop
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	401a      	ands	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a1a      	ldr	r2, [r3, #32]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d50:	431a      	orrs	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
	...

08006d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e05a      	b.n	8006e32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a21      	ldr	r2, [pc, #132]	@ (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d022      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dc8:	d01d      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a1d      	ldr	r2, [pc, #116]	@ (8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1a      	ldr	r2, [pc, #104]	@ (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a18      	ldr	r2, [pc, #96]	@ (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a17      	ldr	r2, [pc, #92]	@ (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a15      	ldr	r2, [pc, #84]	@ (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d10c      	bne.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40010000 	.word	0x40010000
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40000800 	.word	0x40000800
 8006e4c:	40000c00 	.word	0x40000c00
 8006e50:	40010400 	.word	0x40010400
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40001800 	.word	0x40001800

08006e5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e03d      	b.n	8006ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f28:	b084      	sub	sp, #16
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	f107 001c 	add.w	r0, r7, #28
 8006f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d123      	bne.n	8006f8a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d105      	bne.n	8006f7e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f9dc 	bl	800733c <USB_CoreReset>
 8006f84:	4603      	mov	r3, r0
 8006f86:	73fb      	strb	r3, [r7, #15]
 8006f88:	e01b      	b.n	8006fc2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f9d0 	bl	800733c <USB_CoreReset>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006fa0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d106      	bne.n	8006fb6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006fb4:	e005      	b.n	8006fc2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fc2:	7fbb      	ldrb	r3, [r7, #30]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d10b      	bne.n	8006fe0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f043 0206 	orr.w	r2, r3, #6
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f043 0220 	orr.w	r2, r3, #32
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fec:	b004      	add	sp, #16
 8006fee:	4770      	bx	lr

08006ff0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f043 0201 	orr.w	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f023 0201 	bic.w	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d115      	bne.n	8007082 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007062:	200a      	movs	r0, #10
 8007064:	f7fa fd12 	bl	8001a8c <HAL_Delay>
      ms += 10U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	330a      	adds	r3, #10
 800706c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f956 	bl	8007320 <USB_GetMode>
 8007074:	4603      	mov	r3, r0
 8007076:	2b01      	cmp	r3, #1
 8007078:	d01e      	beq.n	80070b8 <USB_SetCurrentMode+0x84>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2bc7      	cmp	r3, #199	@ 0xc7
 800707e:	d9f0      	bls.n	8007062 <USB_SetCurrentMode+0x2e>
 8007080:	e01a      	b.n	80070b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007082:	78fb      	ldrb	r3, [r7, #3]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d115      	bne.n	80070b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007094:	200a      	movs	r0, #10
 8007096:	f7fa fcf9 	bl	8001a8c <HAL_Delay>
      ms += 10U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	330a      	adds	r3, #10
 800709e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f93d 	bl	8007320 <USB_GetMode>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <USB_SetCurrentMode+0x84>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80070b0:	d9f0      	bls.n	8007094 <USB_SetCurrentMode+0x60>
 80070b2:	e001      	b.n	80070b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e005      	b.n	80070c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80070bc:	d101      	bne.n	80070c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e000      	b.n	80070c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070e6:	d901      	bls.n	80070ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e01b      	b.n	8007124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	daf2      	bge.n	80070da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	019b      	lsls	r3, r3, #6
 80070fc:	f043 0220 	orr.w	r2, r3, #32
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007110:	d901      	bls.n	8007116 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e006      	b.n	8007124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b20      	cmp	r3, #32
 8007120:	d0f0      	beq.n	8007104 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007148:	d901      	bls.n	800714e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e018      	b.n	8007180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	daf2      	bge.n	800713c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2210      	movs	r2, #16
 800715e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3301      	adds	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800716c:	d901      	bls.n	8007172 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e006      	b.n	8007180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f003 0310 	and.w	r3, r3, #16
 800717a:	2b10      	cmp	r3, #16
 800717c:	d0f0      	beq.n	8007160 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800718c:	b480      	push	{r7}
 800718e:	b089      	sub	sp, #36	@ 0x24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	4611      	mov	r1, r2
 8007198:	461a      	mov	r2, r3
 800719a:	460b      	mov	r3, r1
 800719c:	71fb      	strb	r3, [r7, #7]
 800719e:	4613      	mov	r3, r2
 80071a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d123      	bne.n	80071fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071b2:	88bb      	ldrh	r3, [r7, #4]
 80071b4:	3303      	adds	r3, #3
 80071b6:	089b      	lsrs	r3, r3, #2
 80071b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071ba:	2300      	movs	r3, #0
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	e018      	b.n	80071f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	031a      	lsls	r2, r3, #12
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071cc:	461a      	mov	r2, r3
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	3301      	adds	r3, #1
 80071d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	3301      	adds	r3, #1
 80071de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	3301      	adds	r3, #1
 80071e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	3301      	adds	r3, #1
 80071ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	3301      	adds	r3, #1
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d3e2      	bcc.n	80071c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3724      	adds	r7, #36	@ 0x24
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007208:	b480      	push	{r7}
 800720a:	b08b      	sub	sp, #44	@ 0x2c
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	089b      	lsrs	r3, r3, #2
 8007222:	b29b      	uxth	r3, r3
 8007224:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007226:	88fb      	ldrh	r3, [r7, #6]
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800722e:	2300      	movs	r3, #0
 8007230:	623b      	str	r3, [r7, #32]
 8007232:	e014      	b.n	800725e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	3301      	adds	r3, #1
 8007244:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	3301      	adds	r3, #1
 800724a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800724c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724e:	3301      	adds	r3, #1
 8007250:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	3301      	adds	r3, #1
 8007256:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	3301      	adds	r3, #1
 800725c:	623b      	str	r3, [r7, #32]
 800725e:	6a3a      	ldr	r2, [r7, #32]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	429a      	cmp	r2, r3
 8007264:	d3e6      	bcc.n	8007234 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007266:	8bfb      	ldrh	r3, [r7, #30]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01e      	beq.n	80072aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007276:	461a      	mov	r2, r3
 8007278:	f107 0310 	add.w	r3, r7, #16
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	b2db      	uxtb	r3, r3
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	fa22 f303 	lsr.w	r3, r2, r3
 800728c:	b2da      	uxtb	r2, r3
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	701a      	strb	r2, [r3, #0]
      i++;
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	3301      	adds	r3, #1
 8007296:	623b      	str	r3, [r7, #32]
      pDest++;
 8007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729a:	3301      	adds	r3, #1
 800729c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800729e:	8bfb      	ldrh	r3, [r7, #30]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072a4:	8bfb      	ldrh	r3, [r7, #30]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1ea      	bne.n	8007280 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	372c      	adds	r7, #44	@ 0x2c
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4013      	ands	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072d0:	68fb      	ldr	r3, [r7, #12]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80072de:	b480      	push	{r7}
 80072e0:	b085      	sub	sp, #20
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	460b      	mov	r3, r1
 80072e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80072ee:	78fb      	ldrb	r3, [r7, #3]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4413      	add	r3, r2
 8007306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	4013      	ands	r3, r2
 8007310:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007312:	68bb      	ldr	r3, [r7, #8]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	f003 0301 	and.w	r3, r3, #1
}
 8007330:	4618      	mov	r0, r3
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3301      	adds	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007354:	d901      	bls.n	800735a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e01b      	b.n	8007392 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	daf2      	bge.n	8007348 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f043 0201 	orr.w	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3301      	adds	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800737e:	d901      	bls.n	8007384 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e006      	b.n	8007392 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b01      	cmp	r3, #1
 800738e:	d0f0      	beq.n	8007372 <USB_CoreReset+0x36>

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
	...

080073a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073a0:	b084      	sub	sp, #16
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b086      	sub	sp, #24
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80073ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073c0:	461a      	mov	r2, r3
 80073c2:	2300      	movs	r3, #0
 80073c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d119      	bne.n	800742a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80073f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d10a      	bne.n	8007414 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800740c:	f043 0304 	orr.w	r3, r3, #4
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	e014      	b.n	800743e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007422:	f023 0304 	bic.w	r3, r3, #4
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	e009      	b.n	800743e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007438:	f023 0304 	bic.w	r3, r3, #4
 800743c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800743e:	2110      	movs	r1, #16
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fe43 	bl	80070cc <USB_FlushTxFifo>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fe6d 	bl	8007130 <USB_FlushRxFifo>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007460:	2300      	movs	r3, #0
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	e015      	b.n	8007492 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4413      	add	r3, r2
 800746e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007472:	461a      	mov	r2, r3
 8007474:	f04f 33ff 	mov.w	r3, #4294967295
 8007478:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4413      	add	r3, r2
 8007482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007486:	461a      	mov	r2, r3
 8007488:	2300      	movs	r3, #0
 800748a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	3301      	adds	r3, #1
 8007490:	613b      	str	r3, [r7, #16]
 8007492:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007496:	461a      	mov	r2, r3
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	4293      	cmp	r3, r2
 800749c:	d3e3      	bcc.n	8007466 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f04f 32ff 	mov.w	r2, #4294967295
 80074aa:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a18      	ldr	r2, [pc, #96]	@ (8007510 <USB_HostInit+0x170>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d10b      	bne.n	80074cc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074ba:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a15      	ldr	r2, [pc, #84]	@ (8007514 <USB_HostInit+0x174>)
 80074c0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a14      	ldr	r2, [pc, #80]	@ (8007518 <USB_HostInit+0x178>)
 80074c6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80074ca:	e009      	b.n	80074e0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2280      	movs	r2, #128	@ 0x80
 80074d0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a11      	ldr	r2, [pc, #68]	@ (800751c <USB_HostInit+0x17c>)
 80074d6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a11      	ldr	r2, [pc, #68]	@ (8007520 <USB_HostInit+0x180>)
 80074dc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d105      	bne.n	80074f4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	f043 0210 	orr.w	r2, r3, #16
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007524 <USB_HostInit+0x184>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007500:	7dfb      	ldrb	r3, [r7, #23]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800750c:	b004      	add	sp, #16
 800750e:	4770      	bx	lr
 8007510:	40040000 	.word	0x40040000
 8007514:	01000200 	.word	0x01000200
 8007518:	00e00300 	.word	0x00e00300
 800751c:	00600080 	.word	0x00600080
 8007520:	004000e0 	.word	0x004000e0
 8007524:	a3200008 	.word	0xa3200008

08007528 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007546:	f023 0303 	bic.w	r3, r3, #3
 800754a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	68f9      	ldr	r1, [r7, #12]
 800755c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007560:	4313      	orrs	r3, r2
 8007562:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d107      	bne.n	800757a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007570:	461a      	mov	r2, r3
 8007572:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007576:	6053      	str	r3, [r2, #4]
 8007578:	e00c      	b.n	8007594 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d107      	bne.n	8007590 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007586:	461a      	mov	r2, r3
 8007588:	f241 7370 	movw	r3, #6000	@ 0x1770
 800758c:	6053      	str	r3, [r2, #4]
 800758e:	e001      	b.n	8007594 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e000      	b.n	8007596 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80075c2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80075cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80075d2:	2064      	movs	r0, #100	@ 0x64
 80075d4:	f7fa fa5a 	bl	8001a8c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80075e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075e4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80075e6:	200a      	movs	r0, #10
 80075e8:	f7fa fa50 	bl	8001a8c <HAL_Delay>

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	460b      	mov	r3, r1
 8007600:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800761a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d109      	bne.n	800763a <USB_DriveVbus+0x44>
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d106      	bne.n	800763a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007634:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007638:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007644:	d109      	bne.n	800765a <USB_DriveVbus+0x64>
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007654:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007658:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	0c5b      	lsrs	r3, r3, #17
 8007686:	f003 0303 	and.w	r3, r3, #3
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	b29b      	uxth	r3, r3
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	4608      	mov	r0, r1
 80076c2:	4611      	mov	r1, r2
 80076c4:	461a      	mov	r2, r3
 80076c6:	4603      	mov	r3, r0
 80076c8:	70fb      	strb	r3, [r7, #3]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70bb      	strb	r3, [r7, #2]
 80076ce:	4613      	mov	r3, r2
 80076d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80076da:	78fb      	ldrb	r3, [r7, #3]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e6:	461a      	mov	r2, r3
 80076e8:	f04f 33ff 	mov.w	r3, #4294967295
 80076ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80076ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d87c      	bhi.n	80077f0 <USB_HC_Init+0x138>
 80076f6:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <USB_HC_Init+0x44>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	0800770d 	.word	0x0800770d
 8007700:	080077b3 	.word	0x080077b3
 8007704:	0800770d 	.word	0x0800770d
 8007708:	08007775 	.word	0x08007775
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	4413      	add	r3, r2
 8007714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007718:	461a      	mov	r2, r3
 800771a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800771e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007720:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007724:	2b00      	cmp	r3, #0
 8007726:	da10      	bge.n	800774a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	4413      	add	r3, r2
 8007730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	78fa      	ldrb	r2, [r7, #3]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	440a      	add	r2, r1
 800773e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007746:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007748:	e055      	b.n	80077f6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a6f      	ldr	r2, [pc, #444]	@ (800790c <USB_HC_Init+0x254>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d151      	bne.n	80077f6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	4413      	add	r3, r2
 800775a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	78fa      	ldrb	r2, [r7, #3]
 8007762:	0151      	lsls	r1, r2, #5
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	440a      	add	r2, r1
 8007768:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800776c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007770:	60d3      	str	r3, [r2, #12]
      break;
 8007772:	e040      	b.n	80077f6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	4413      	add	r3, r2
 800777c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007780:	461a      	mov	r2, r3
 8007782:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007786:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007788:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800778c:	2b00      	cmp	r3, #0
 800778e:	da34      	bge.n	80077fa <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	4413      	add	r3, r2
 8007798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	78fa      	ldrb	r2, [r7, #3]
 80077a0:	0151      	lsls	r1, r2, #5
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	440a      	add	r2, r1
 80077a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077ae:	60d3      	str	r3, [r2, #12]
      }

      break;
 80077b0:	e023      	b.n	80077fa <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077be:	461a      	mov	r2, r3
 80077c0:	f240 2325 	movw	r3, #549	@ 0x225
 80077c4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80077c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	da17      	bge.n	80077fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80077ce:	78fb      	ldrb	r3, [r7, #3]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	78fa      	ldrb	r2, [r7, #3]
 80077de:	0151      	lsls	r1, r2, #5
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	440a      	add	r2, r1
 80077e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077e8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80077ec:	60d3      	str	r3, [r2, #12]
      }
      break;
 80077ee:	e006      	b.n	80077fe <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	77fb      	strb	r3, [r7, #31]
      break;
 80077f4:	e004      	b.n	8007800 <USB_HC_Init+0x148>
      break;
 80077f6:	bf00      	nop
 80077f8:	e002      	b.n	8007800 <USB_HC_Init+0x148>
      break;
 80077fa:	bf00      	nop
 80077fc:	e000      	b.n	8007800 <USB_HC_Init+0x148>
      break;
 80077fe:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	4413      	add	r3, r2
 8007808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800780c:	461a      	mov	r2, r3
 800780e:	2300      	movs	r3, #0
 8007810:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007812:	78fb      	ldrb	r3, [r7, #3]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	4413      	add	r3, r2
 800781a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	78fa      	ldrb	r2, [r7, #3]
 8007822:	0151      	lsls	r1, r2, #5
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	440a      	add	r2, r1
 8007828:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800782c:	f043 0302 	orr.w	r3, r3, #2
 8007830:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	2101      	movs	r1, #1
 8007842:	fa01 f303 	lsl.w	r3, r1, r3
 8007846:	6939      	ldr	r1, [r7, #16]
 8007848:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800784c:	4313      	orrs	r3, r2
 800784e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800785c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007860:	2b00      	cmp	r3, #0
 8007862:	da03      	bge.n	800786c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007864:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007868:	61bb      	str	r3, [r7, #24]
 800786a:	e001      	b.n	8007870 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff fef9 	bl	8007668 <USB_GetHostSpeed>
 8007876:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007878:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800787c:	2b02      	cmp	r3, #2
 800787e:	d106      	bne.n	800788e <USB_HC_Init+0x1d6>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d003      	beq.n	800788e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007886:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	e001      	b.n	8007892 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007892:	787b      	ldrb	r3, [r7, #1]
 8007894:	059b      	lsls	r3, r3, #22
 8007896:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800789a:	78bb      	ldrb	r3, [r7, #2]
 800789c:	02db      	lsls	r3, r3, #11
 800789e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078a2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80078a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078a8:	049b      	lsls	r3, r3, #18
 80078aa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80078ae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80078b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80078b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80078b6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	431a      	orrs	r2, r3
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078c0:	78fa      	ldrb	r2, [r7, #3]
 80078c2:	0151      	lsls	r1, r2, #5
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	440a      	add	r2, r1
 80078c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80078cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078d0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80078d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d003      	beq.n	80078e2 <USB_HC_Init+0x22a>
 80078da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d10f      	bne.n	8007902 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80078e2:	78fb      	ldrb	r3, [r7, #3]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	78fa      	ldrb	r2, [r7, #3]
 80078f2:	0151      	lsls	r1, r2, #5
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	440a      	add	r2, r1
 80078f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007900:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007902:	7ffb      	ldrb	r3, [r7, #31]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3720      	adds	r7, #32
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40040000 	.word	0x40040000

08007910 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08c      	sub	sp, #48	@ 0x30
 8007914:	af02      	add	r7, sp, #8
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	4613      	mov	r3, r2
 800791c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	785b      	ldrb	r3, [r3, #1]
 8007926:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007928:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800792c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4a5d      	ldr	r2, [pc, #372]	@ (8007aa8 <USB_HC_StartXfer+0x198>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d12f      	bne.n	8007996 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d11c      	bne.n	8007976 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	7c9b      	ldrb	r3, [r3, #18]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <USB_HC_StartXfer+0x3c>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	7c9b      	ldrb	r3, [r3, #18]
 8007948:	2b02      	cmp	r3, #2
 800794a:	d124      	bne.n	8007996 <USB_HC_StartXfer+0x86>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	799b      	ldrb	r3, [r3, #6]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d120      	bne.n	8007996 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	4413      	add	r3, r2
 800795c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	69fa      	ldr	r2, [r7, #28]
 8007964:	0151      	lsls	r1, r2, #5
 8007966:	6a3a      	ldr	r2, [r7, #32]
 8007968:	440a      	add	r2, r1
 800796a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800796e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007972:	60d3      	str	r3, [r2, #12]
 8007974:	e00f      	b.n	8007996 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	791b      	ldrb	r3, [r3, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10b      	bne.n	8007996 <USB_HC_StartXfer+0x86>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	795b      	ldrb	r3, [r3, #5]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d107      	bne.n	8007996 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	785b      	ldrb	r3, [r3, #1]
 800798a:	4619      	mov	r1, r3
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fb6b 	bl	8008068 <USB_DoPing>
        return HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	e232      	b.n	8007dfc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	799b      	ldrb	r3, [r3, #6]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d158      	bne.n	8007a50 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800799e:	2301      	movs	r3, #1
 80079a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	78db      	ldrb	r3, [r3, #3]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d007      	beq.n	80079ba <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	8a92      	ldrh	r2, [r2, #20]
 80079b0:	fb03 f202 	mul.w	r2, r3, r2
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	61da      	str	r2, [r3, #28]
 80079b8:	e07c      	b.n	8007ab4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	7c9b      	ldrb	r3, [r3, #18]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d130      	bne.n	8007a24 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	2bbc      	cmp	r3, #188	@ 0xbc
 80079c8:	d918      	bls.n	80079fc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	8a9b      	ldrh	r3, [r3, #20]
 80079ce:	461a      	mov	r2, r3
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	69da      	ldr	r2, [r3, #28]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d003      	beq.n	80079ec <USB_HC_StartXfer+0xdc>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d103      	bne.n	80079f4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2202      	movs	r2, #2
 80079f0:	60da      	str	r2, [r3, #12]
 80079f2:	e05f      	b.n	8007ab4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2201      	movs	r2, #1
 80079f8:	60da      	str	r2, [r3, #12]
 80079fa:	e05b      	b.n	8007ab4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	6a1a      	ldr	r2, [r3, #32]
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d007      	beq.n	8007a1c <USB_HC_StartXfer+0x10c>
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d003      	beq.n	8007a1c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2204      	movs	r2, #4
 8007a18:	60da      	str	r2, [r3, #12]
 8007a1a:	e04b      	b.n	8007ab4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2203      	movs	r2, #3
 8007a20:	60da      	str	r2, [r3, #12]
 8007a22:	e047      	b.n	8007ab4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d10d      	bne.n	8007a46 <USB_HC_StartXfer+0x136>
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	8a92      	ldrh	r2, [r2, #20]
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d907      	bls.n	8007a46 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	8a92      	ldrh	r2, [r2, #20]
 8007a3c:	fb03 f202 	mul.w	r2, r3, r2
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	61da      	str	r2, [r3, #28]
 8007a44:	e036      	b.n	8007ab4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6a1a      	ldr	r2, [r3, #32]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	61da      	str	r2, [r3, #28]
 8007a4e:	e031      	b.n	8007ab4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d018      	beq.n	8007a8a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	8a92      	ldrh	r2, [r2, #20]
 8007a60:	4413      	add	r3, r2
 8007a62:	3b01      	subs	r3, #1
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	8a92      	ldrh	r2, [r2, #20]
 8007a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a6c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007a6e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007a70:	8b7b      	ldrh	r3, [r7, #26]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d90b      	bls.n	8007a8e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007a76:	8b7b      	ldrh	r3, [r7, #26]
 8007a78:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	8a92      	ldrh	r2, [r2, #20]
 8007a80:	fb03 f202 	mul.w	r2, r3, r2
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	61da      	str	r2, [r3, #28]
 8007a88:	e001      	b.n	8007a8e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	78db      	ldrb	r3, [r3, #3]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00a      	beq.n	8007aac <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	8a92      	ldrh	r2, [r2, #20]
 8007a9c:	fb03 f202 	mul.w	r2, r3, r2
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	61da      	str	r2, [r3, #28]
 8007aa4:	e006      	b.n	8007ab4 <USB_HC_StartXfer+0x1a4>
 8007aa6:	bf00      	nop
 8007aa8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	6a1a      	ldr	r2, [r3, #32]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007abc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007abe:	04d9      	lsls	r1, r3, #19
 8007ac0:	4ba3      	ldr	r3, [pc, #652]	@ (8007d50 <USB_HC_StartXfer+0x440>)
 8007ac2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ac4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	7d9b      	ldrb	r3, [r3, #22]
 8007aca:	075b      	lsls	r3, r3, #29
 8007acc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ad0:	69f9      	ldr	r1, [r7, #28]
 8007ad2:	0148      	lsls	r0, r1, #5
 8007ad4:	6a39      	ldr	r1, [r7, #32]
 8007ad6:	4401      	add	r1, r0
 8007ad8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007adc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ade:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d009      	beq.n	8007afa <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	6999      	ldr	r1, [r3, #24]
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af6:	460a      	mov	r2, r1
 8007af8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf0c      	ite	eq
 8007b0a:	2301      	moveq	r3, #1
 8007b0c:	2300      	movne	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	0151      	lsls	r1, r2, #5
 8007b24:	6a3a      	ldr	r2, [r7, #32]
 8007b26:	440a      	add	r2, r1
 8007b28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b2c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b30:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	7e7b      	ldrb	r3, [r7, #25]
 8007b42:	075b      	lsls	r3, r3, #29
 8007b44:	69f9      	ldr	r1, [r7, #28]
 8007b46:	0148      	lsls	r0, r1, #5
 8007b48:	6a39      	ldr	r1, [r7, #32]
 8007b4a:	4401      	add	r1, r0
 8007b4c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007b50:	4313      	orrs	r3, r2
 8007b52:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	799b      	ldrb	r3, [r3, #6]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	f040 80c3 	bne.w	8007ce4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	7c5b      	ldrb	r3, [r3, #17]
 8007b62:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	69fa      	ldr	r2, [r7, #28]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	6a3a      	ldr	r2, [r7, #32]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b7a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	69fa      	ldr	r2, [r7, #28]
 8007b8c:	0151      	lsls	r1, r2, #5
 8007b8e:	6a3a      	ldr	r2, [r7, #32]
 8007b90:	440a      	add	r2, r1
 8007b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b96:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007b9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	79db      	ldrb	r3, [r3, #7]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d123      	bne.n	8007bec <USB_HC_StartXfer+0x2dc>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	78db      	ldrb	r3, [r3, #3]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d11f      	bne.n	8007bec <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	69fa      	ldr	r2, [r7, #28]
 8007bbc:	0151      	lsls	r1, r2, #5
 8007bbe:	6a3a      	ldr	r2, [r7, #32]
 8007bc0:	440a      	add	r2, r1
 8007bc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bca:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	0151      	lsls	r1, r2, #5
 8007bde:	6a3a      	ldr	r2, [r7, #32]
 8007be0:	440a      	add	r2, r1
 8007be2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bea:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	7c9b      	ldrb	r3, [r3, #18]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d003      	beq.n	8007bfc <USB_HC_StartXfer+0x2ec>
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	7c9b      	ldrb	r3, [r3, #18]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d117      	bne.n	8007c2c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d113      	bne.n	8007c2c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	78db      	ldrb	r3, [r3, #3]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d10f      	bne.n	8007c2c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	0151      	lsls	r1, r2, #5
 8007c1e:	6a3a      	ldr	r2, [r7, #32]
 8007c20:	440a      	add	r2, r1
 8007c22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c2a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	7c9b      	ldrb	r3, [r3, #18]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d162      	bne.n	8007cfa <USB_HC_StartXfer+0x3ea>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	78db      	ldrb	r3, [r3, #3]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d15e      	bne.n	8007cfa <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d858      	bhi.n	8007cf8 <USB_HC_StartXfer+0x3e8>
 8007c46:	a201      	add	r2, pc, #4	@ (adr r2, 8007c4c <USB_HC_StartXfer+0x33c>)
 8007c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4c:	08007c5d 	.word	0x08007c5d
 8007c50:	08007c7f 	.word	0x08007c7f
 8007c54:	08007ca1 	.word	0x08007ca1
 8007c58:	08007cc3 	.word	0x08007cc3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	69fa      	ldr	r2, [r7, #28]
 8007c6c:	0151      	lsls	r1, r2, #5
 8007c6e:	6a3a      	ldr	r2, [r7, #32]
 8007c70:	440a      	add	r2, r1
 8007c72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c7a:	6053      	str	r3, [r2, #4]
          break;
 8007c7c:	e03d      	b.n	8007cfa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	0151      	lsls	r1, r2, #5
 8007c90:	6a3a      	ldr	r2, [r7, #32]
 8007c92:	440a      	add	r2, r1
 8007c94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c98:	f043 030e 	orr.w	r3, r3, #14
 8007c9c:	6053      	str	r3, [r2, #4]
          break;
 8007c9e:	e02c      	b.n	8007cfa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	0151      	lsls	r1, r2, #5
 8007cb2:	6a3a      	ldr	r2, [r7, #32]
 8007cb4:	440a      	add	r2, r1
 8007cb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007cbe:	6053      	str	r3, [r2, #4]
          break;
 8007cc0:	e01b      	b.n	8007cfa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	69fa      	ldr	r2, [r7, #28]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	6a3a      	ldr	r2, [r7, #32]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ce0:	6053      	str	r3, [r2, #4]
          break;
 8007ce2:	e00a      	b.n	8007cfa <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	6053      	str	r3, [r2, #4]
 8007cf6:	e000      	b.n	8007cfa <USB_HC_StartXfer+0x3ea>
          break;
 8007cf8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d10:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	78db      	ldrb	r3, [r3, #3]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d004      	beq.n	8007d24 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d20:	613b      	str	r3, [r7, #16]
 8007d22:	e003      	b.n	8007d2c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d2a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d32:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d40:	461a      	mov	r2, r3
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e055      	b.n	8007dfc <USB_HC_StartXfer+0x4ec>
 8007d50:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	78db      	ldrb	r3, [r3, #3]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d14e      	bne.n	8007dfa <USB_HC_StartXfer+0x4ea>
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d04a      	beq.n	8007dfa <USB_HC_StartXfer+0x4ea>
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	79db      	ldrb	r3, [r3, #7]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d146      	bne.n	8007dfa <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	7c9b      	ldrb	r3, [r3, #18]
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d831      	bhi.n	8007dd8 <USB_HC_StartXfer+0x4c8>
 8007d74:	a201      	add	r2, pc, #4	@ (adr r2, 8007d7c <USB_HC_StartXfer+0x46c>)
 8007d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7a:	bf00      	nop
 8007d7c:	08007d8d 	.word	0x08007d8d
 8007d80:	08007db1 	.word	0x08007db1
 8007d84:	08007d8d 	.word	0x08007d8d
 8007d88:	08007db1 	.word	0x08007db1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	3303      	adds	r3, #3
 8007d92:	089b      	lsrs	r3, r3, #2
 8007d94:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007d96:	8afa      	ldrh	r2, [r7, #22]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d91c      	bls.n	8007ddc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	f043 0220 	orr.w	r2, r3, #32
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	619a      	str	r2, [r3, #24]
        }
        break;
 8007dae:	e015      	b.n	8007ddc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	3303      	adds	r3, #3
 8007db6:	089b      	lsrs	r3, r3, #2
 8007db8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007dba:	8afa      	ldrh	r2, [r7, #22]
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d90a      	bls.n	8007de0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007dd6:	e003      	b.n	8007de0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007dd8:	bf00      	nop
 8007dda:	e002      	b.n	8007de2 <USB_HC_StartXfer+0x4d2>
        break;
 8007ddc:	bf00      	nop
 8007dde:	e000      	b.n	8007de2 <USB_HC_StartXfer+0x4d2>
        break;
 8007de0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	6999      	ldr	r1, [r3, #24]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	785a      	ldrb	r2, [r3, #1]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	2000      	movs	r0, #0
 8007df2:	9000      	str	r0, [sp, #0]
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff f9c9 	bl	800718c <USB_WritePacket>
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3728      	adds	r7, #40	@ 0x28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	b29b      	uxth	r3, r3
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b089      	sub	sp, #36	@ 0x24
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	0c9b      	lsrs	r3, r3, #18
 8007e4e:	f003 0303 	and.w	r3, r3, #3
 8007e52:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	0fdb      	lsrs	r3, r3, #31
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	0fdb      	lsrs	r3, r3, #31
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f003 0320 	and.w	r3, r3, #32
 8007e88:	2b20      	cmp	r3, #32
 8007e8a:	d10d      	bne.n	8007ea8 <USB_HC_Halt+0x82>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <USB_HC_Halt+0x82>
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d005      	beq.n	8007ea4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d002      	beq.n	8007ea4 <USB_HC_Halt+0x7e>
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d101      	bne.n	8007ea8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e0d8      	b.n	800805a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <USB_HC_Halt+0x8e>
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d173      	bne.n	8007f9c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	0151      	lsls	r1, r2, #5
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	440a      	add	r2, r1
 8007eca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ece:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ed2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f003 0320 	and.w	r3, r3, #32
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d14a      	bne.n	8007f76 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d133      	bne.n	8007f54 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	0151      	lsls	r1, r2, #5
 8007efe:	69fa      	ldr	r2, [r7, #28]
 8007f00:	440a      	add	r2, r1
 8007f02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f0a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	0151      	lsls	r1, r2, #5
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	440a      	add	r2, r1
 8007f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f2a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f38:	d82e      	bhi.n	8007f98 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f50:	d0ec      	beq.n	8007f2c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f52:	e081      	b.n	8008058 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	0151      	lsls	r1, r2, #5
 8007f66:	69fa      	ldr	r2, [r7, #28]
 8007f68:	440a      	add	r2, r1
 8007f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f72:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f74:	e070      	b.n	8008058 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	0151      	lsls	r1, r2, #5
 8007f88:	69fa      	ldr	r2, [r7, #28]
 8007f8a:	440a      	add	r2, r1
 8007f8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f94:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f96:	e05f      	b.n	8008058 <USB_HC_Halt+0x232>
            break;
 8007f98:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f9a:	e05d      	b.n	8008058 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	0151      	lsls	r1, r2, #5
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	440a      	add	r2, r1
 8007fb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d133      	bne.n	8008034 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	0151      	lsls	r1, r2, #5
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	440a      	add	r2, r1
 8007fe2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fe6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	0151      	lsls	r1, r2, #5
 8007ffe:	69fa      	ldr	r2, [r7, #28]
 8008000:	440a      	add	r2, r1
 8008002:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008006:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800800a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	3301      	adds	r3, #1
 8008010:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008018:	d81d      	bhi.n	8008056 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800802c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008030:	d0ec      	beq.n	800800c <USB_HC_Halt+0x1e6>
 8008032:	e011      	b.n	8008058 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	4413      	add	r3, r2
 800803c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69ba      	ldr	r2, [r7, #24]
 8008044:	0151      	lsls	r1, r2, #5
 8008046:	69fa      	ldr	r2, [r7, #28]
 8008048:	440a      	add	r2, r1
 800804a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800804e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008052:	6013      	str	r3, [r2, #0]
 8008054:	e000      	b.n	8008058 <USB_HC_Halt+0x232>
          break;
 8008056:	bf00      	nop
    }
  }

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3724      	adds	r7, #36	@ 0x24
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
	...

08008068 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800807c:	2301      	movs	r3, #1
 800807e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	04da      	lsls	r2, r3, #19
 8008084:	4b15      	ldr	r3, [pc, #84]	@ (80080dc <USB_DoPing+0x74>)
 8008086:	4013      	ands	r3, r2
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	0151      	lsls	r1, r2, #5
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	440a      	add	r2, r1
 8008090:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008094:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008098:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80080b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c6:	461a      	mov	r2, r3
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	1ff80000 	.word	0x1ff80000

080080e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7fe ff8c 	bl	8007012 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080fa:	2110      	movs	r1, #16
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7fe ffe5 	bl	80070cc <USB_FlushTxFifo>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff f80f 	bl	8007130 <USB_FlushRxFifo>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800811c:	2300      	movs	r3, #0
 800811e:	61bb      	str	r3, [r7, #24]
 8008120:	e01f      	b.n	8008162 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	4413      	add	r3, r2
 800812a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008138:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008140:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008148:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	4413      	add	r3, r2
 8008152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008156:	461a      	mov	r2, r3
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	3301      	adds	r3, #1
 8008160:	61bb      	str	r3, [r7, #24]
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b0f      	cmp	r3, #15
 8008166:	d9dc      	bls.n	8008122 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008168:	2300      	movs	r3, #0
 800816a:	61bb      	str	r3, [r7, #24]
 800816c:	e034      	b.n	80081d8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	4413      	add	r3, r2
 8008176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008184:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800818c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008194:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	4413      	add	r3, r2
 800819e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081a2:	461a      	mov	r2, r3
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081b4:	d80c      	bhi.n	80081d0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081cc:	d0ec      	beq.n	80081a8 <USB_StopHost+0xc8>
 80081ce:	e000      	b.n	80081d2 <USB_StopHost+0xf2>
        break;
 80081d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	3301      	adds	r3, #1
 80081d6:	61bb      	str	r3, [r7, #24]
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	2b0f      	cmp	r3, #15
 80081dc:	d9c7      	bls.n	800816e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081e4:	461a      	mov	r2, r3
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f04f 32ff 	mov.w	r2, #4294967295
 80081f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7fe fefb 	bl	8006ff0 <USB_EnableGlobalInt>

  return ret;
 80081fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3720      	adds	r7, #32
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008204:	b590      	push	{r4, r7, lr}
 8008206:	b089      	sub	sp, #36	@ 0x24
 8008208:	af04      	add	r7, sp, #16
 800820a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800820c:	2301      	movs	r3, #1
 800820e:	2202      	movs	r2, #2
 8008210:	2102      	movs	r1, #2
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fc85 	bl	8008b22 <USBH_FindInterface>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	2bff      	cmp	r3, #255	@ 0xff
 8008220:	d002      	beq.n	8008228 <USBH_CDC_InterfaceInit+0x24>
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d901      	bls.n	800822c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008228:	2302      	movs	r3, #2
 800822a:	e13d      	b.n	80084a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fc5a 	bl	8008aea <USBH_SelectInterface>
 8008236:	4603      	mov	r3, r0
 8008238:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008240:	2302      	movs	r3, #2
 8008242:	e131      	b.n	80084a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800824a:	2050      	movs	r0, #80	@ 0x50
 800824c:	f002 fb64 	bl	800a918 <malloc>
 8008250:	4603      	mov	r3, r0
 8008252:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008264:	2302      	movs	r3, #2
 8008266:	e11f      	b.n	80084a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008268:	2250      	movs	r2, #80	@ 0x50
 800826a:	2100      	movs	r1, #0
 800826c:	68b8      	ldr	r0, [r7, #8]
 800826e:	f002 fc11 	bl	800aa94 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	211a      	movs	r1, #26
 8008278:	fb01 f303 	mul.w	r3, r1, r3
 800827c:	4413      	add	r3, r2
 800827e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	b25b      	sxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	da15      	bge.n	80082b6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	211a      	movs	r1, #26
 8008290:	fb01 f303 	mul.w	r3, r1, r3
 8008294:	4413      	add	r3, r2
 8008296:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800829a:	781a      	ldrb	r2, [r3, #0]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	211a      	movs	r1, #26
 80082a6:	fb01 f303 	mul.w	r3, r1, r3
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80082b0:	881a      	ldrh	r2, [r3, #0]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 ffbe 	bl	800a23e <USBH_AllocPipe>
 80082c2:	4603      	mov	r3, r0
 80082c4:	461a      	mov	r2, r3
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	7819      	ldrb	r1, [r3, #0]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	7858      	ldrb	r0, [r3, #1]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	8952      	ldrh	r2, [r2, #10]
 80082e2:	9202      	str	r2, [sp, #8]
 80082e4:	2203      	movs	r2, #3
 80082e6:	9201      	str	r2, [sp, #4]
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	4623      	mov	r3, r4
 80082ec:	4602      	mov	r2, r0
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 ff76 	bl	800a1e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	2200      	movs	r2, #0
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f002 fa85 	bl	800a80c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008302:	2300      	movs	r3, #0
 8008304:	2200      	movs	r2, #0
 8008306:	210a      	movs	r1, #10
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fc0a 	bl	8008b22 <USBH_FindInterface>
 800830e:	4603      	mov	r3, r0
 8008310:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2bff      	cmp	r3, #255	@ 0xff
 8008316:	d002      	beq.n	800831e <USBH_CDC_InterfaceInit+0x11a>
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d901      	bls.n	8008322 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800831e:	2302      	movs	r3, #2
 8008320:	e0c2      	b.n	80084a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	211a      	movs	r1, #26
 8008328:	fb01 f303 	mul.w	r3, r1, r3
 800832c:	4413      	add	r3, r2
 800832e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	b25b      	sxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	da16      	bge.n	8008368 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	211a      	movs	r1, #26
 8008340:	fb01 f303 	mul.w	r3, r1, r3
 8008344:	4413      	add	r3, r2
 8008346:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800834a:	781a      	ldrb	r2, [r3, #0]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	211a      	movs	r1, #26
 8008356:	fb01 f303 	mul.w	r3, r1, r3
 800835a:	4413      	add	r3, r2
 800835c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008360:	881a      	ldrh	r2, [r3, #0]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	835a      	strh	r2, [r3, #26]
 8008366:	e015      	b.n	8008394 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	211a      	movs	r1, #26
 800836e:	fb01 f303 	mul.w	r3, r1, r3
 8008372:	4413      	add	r3, r2
 8008374:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008378:	781a      	ldrb	r2, [r3, #0]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	211a      	movs	r1, #26
 8008384:	fb01 f303 	mul.w	r3, r1, r3
 8008388:	4413      	add	r3, r2
 800838a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800838e:	881a      	ldrh	r2, [r3, #0]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	211a      	movs	r1, #26
 800839a:	fb01 f303 	mul.w	r3, r1, r3
 800839e:	4413      	add	r3, r2
 80083a0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	b25b      	sxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	da16      	bge.n	80083da <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	211a      	movs	r1, #26
 80083b2:	fb01 f303 	mul.w	r3, r1, r3
 80083b6:	4413      	add	r3, r2
 80083b8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80083bc:	781a      	ldrb	r2, [r3, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	211a      	movs	r1, #26
 80083c8:	fb01 f303 	mul.w	r3, r1, r3
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80083d2:	881a      	ldrh	r2, [r3, #0]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	835a      	strh	r2, [r3, #26]
 80083d8:	e015      	b.n	8008406 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	211a      	movs	r1, #26
 80083e0:	fb01 f303 	mul.w	r3, r1, r3
 80083e4:	4413      	add	r3, r2
 80083e6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80083ea:	781a      	ldrb	r2, [r3, #0]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	211a      	movs	r1, #26
 80083f6:	fb01 f303 	mul.w	r3, r1, r3
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008400:	881a      	ldrh	r2, [r3, #0]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	7b9b      	ldrb	r3, [r3, #14]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 ff16 	bl	800a23e <USBH_AllocPipe>
 8008412:	4603      	mov	r3, r0
 8008414:	461a      	mov	r2, r3
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	7bdb      	ldrb	r3, [r3, #15]
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 ff0c 	bl	800a23e <USBH_AllocPipe>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	7b59      	ldrb	r1, [r3, #13]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	7b98      	ldrb	r0, [r3, #14]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	8b12      	ldrh	r2, [r2, #24]
 8008446:	9202      	str	r2, [sp, #8]
 8008448:	2202      	movs	r2, #2
 800844a:	9201      	str	r2, [sp, #4]
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	4623      	mov	r3, r4
 8008450:	4602      	mov	r2, r0
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 fec4 	bl	800a1e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	7b19      	ldrb	r1, [r3, #12]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	7bd8      	ldrb	r0, [r3, #15]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	8b52      	ldrh	r2, [r2, #26]
 8008470:	9202      	str	r2, [sp, #8]
 8008472:	2202      	movs	r2, #2
 8008474:	9201      	str	r2, [sp, #4]
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	4623      	mov	r3, r4
 800847a:	4602      	mov	r2, r0
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f001 feaf 	bl	800a1e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	7b5b      	ldrb	r3, [r3, #13]
 800848e:	2200      	movs	r2, #0
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f002 f9ba 	bl	800a80c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	7b1b      	ldrb	r3, [r3, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f002 f9b3 	bl	800a80c <USBH_LL_SetToggle>

  return USBH_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd90      	pop	{r4, r7, pc}

080084b0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00e      	beq.n	80084e8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f001 fea4 	bl	800a21e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f001 fecf 	bl	800a280 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	7b1b      	ldrb	r3, [r3, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00e      	beq.n	800850e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	7b1b      	ldrb	r3, [r3, #12]
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f001 fe91 	bl	800a21e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	7b1b      	ldrb	r3, [r3, #12]
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 febc 	bl	800a280 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	7b5b      	ldrb	r3, [r3, #13]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00e      	beq.n	8008534 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	7b5b      	ldrb	r3, [r3, #13]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 fe7e 	bl	800a21e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	7b5b      	ldrb	r3, [r3, #13]
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 fea9 	bl	800a280 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	4618      	mov	r0, r3
 800854a:	f002 f9ed 	bl	800a928 <free>
    phost->pActiveClass->pData = 0U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008554:	2200      	movs	r2, #0
 8008556:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3340      	adds	r3, #64	@ 0x40
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f8b1 	bl	80086e2 <GetLineCoding>
 8008580:	4603      	mov	r3, r0
 8008582:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008584:	7afb      	ldrb	r3, [r7, #11]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d105      	bne.n	8008596 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008590:	2102      	movs	r1, #2
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008596:	7afb      	ldrb	r3, [r7, #11]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80085a8:	2301      	movs	r3, #1
 80085aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d877      	bhi.n	80086b4 <USBH_CDC_Process+0x114>
 80085c4:	a201      	add	r2, pc, #4	@ (adr r2, 80085cc <USBH_CDC_Process+0x2c>)
 80085c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ca:	bf00      	nop
 80085cc:	080085e1 	.word	0x080085e1
 80085d0:	080085e7 	.word	0x080085e7
 80085d4:	08008617 	.word	0x08008617
 80085d8:	0800868b 	.word	0x0800868b
 80085dc:	08008699 	.word	0x08008699
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73fb      	strb	r3, [r7, #15]
      break;
 80085e4:	e06d      	b.n	80086c2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f897 	bl	8008720 <SetLineCoding>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d104      	bne.n	8008606 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008604:	e058      	b.n	80086b8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d055      	beq.n	80086b8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2204      	movs	r2, #4
 8008610:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008614:	e050      	b.n	80086b8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	3340      	adds	r3, #64	@ 0x40
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f860 	bl	80086e2 <GetLineCoding>
 8008622:	4603      	mov	r3, r0
 8008624:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d126      	bne.n	800867a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800863e:	791b      	ldrb	r3, [r3, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d13b      	bne.n	80086bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800864e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008650:	429a      	cmp	r2, r3
 8008652:	d133      	bne.n	80086bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800865e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008660:	429a      	cmp	r2, r3
 8008662:	d12b      	bne.n	80086bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800866c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800866e:	429a      	cmp	r2, r3
 8008670:	d124      	bne.n	80086bc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f958 	bl	8008928 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008678:	e020      	b.n	80086bc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d01d      	beq.n	80086bc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2204      	movs	r2, #4
 8008684:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008688:	e018      	b.n	80086bc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f867 	bl	800875e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f8da 	bl	800884a <CDC_ProcessReception>
      break;
 8008696:	e014      	b.n	80086c2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008698:	2100      	movs	r1, #0
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 f81a 	bl	80096d4 <USBH_ClrFeature>
 80086a0:	4603      	mov	r3, r0
 80086a2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80086b2:	e005      	b.n	80086c0 <USBH_CDC_Process+0x120>

    default:
      break;
 80086b4:	bf00      	nop
 80086b6:	e004      	b.n	80086c2 <USBH_CDC_Process+0x122>
      break;
 80086b8:	bf00      	nop
 80086ba:	e002      	b.n	80086c2 <USBH_CDC_Process+0x122>
      break;
 80086bc:	bf00      	nop
 80086be:	e000      	b.n	80086c2 <USBH_CDC_Process+0x122>
      break;
 80086c0:	bf00      	nop

  }

  return status;
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	22a1      	movs	r2, #161	@ 0xa1
 80086f0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2221      	movs	r2, #33	@ 0x21
 80086f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2207      	movs	r2, #7
 8008708:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2207      	movs	r2, #7
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 fb14 	bl	8009d3e <USBH_CtlReq>
 8008716:	4603      	mov	r3, r0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2221      	movs	r2, #33	@ 0x21
 800872e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2207      	movs	r2, #7
 8008746:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2207      	movs	r2, #7
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 faf5 	bl	8009d3e <USBH_CtlReq>
 8008754:	4603      	mov	r3, r0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b086      	sub	sp, #24
 8008762:	af02      	add	r7, sp, #8
 8008764:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008770:	2300      	movs	r3, #0
 8008772:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800877a:	2b01      	cmp	r3, #1
 800877c:	d002      	beq.n	8008784 <CDC_ProcessTransmission+0x26>
 800877e:	2b02      	cmp	r3, #2
 8008780:	d023      	beq.n	80087ca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008782:	e05e      	b.n	8008842 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	8b12      	ldrh	r2, [r2, #24]
 800878c:	4293      	cmp	r3, r2
 800878e:	d90b      	bls.n	80087a8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	69d9      	ldr	r1, [r3, #28]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	8b1a      	ldrh	r2, [r3, #24]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	7b5b      	ldrb	r3, [r3, #13]
 800879c:	2001      	movs	r0, #1
 800879e:	9000      	str	r0, [sp, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 fcda 	bl	800a15a <USBH_BulkSendData>
 80087a6:	e00b      	b.n	80087c0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	7b5b      	ldrb	r3, [r3, #13]
 80087b6:	2001      	movs	r0, #1
 80087b8:	9000      	str	r0, [sp, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 fccd 	bl	800a15a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80087c8:	e03b      	b.n	8008842 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	7b5b      	ldrb	r3, [r3, #13]
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f001 fff1 	bl	800a7b8 <USBH_LL_GetURBState>
 80087d6:	4603      	mov	r3, r0
 80087d8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80087da:	7afb      	ldrb	r3, [r7, #11]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d128      	bne.n	8008832 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	8b12      	ldrh	r2, [r2, #24]
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d90e      	bls.n	800880a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	8b12      	ldrh	r2, [r2, #24]
 80087f4:	1a9a      	subs	r2, r3, r2
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	8b12      	ldrh	r2, [r2, #24]
 8008802:	441a      	add	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	61da      	str	r2, [r3, #28]
 8008808:	e002      	b.n	8008810 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008820:	e00e      	b.n	8008840 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f868 	bl	8008900 <USBH_CDC_TransmitCallback>
      break;
 8008830:	e006      	b.n	8008840 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008832:	7afb      	ldrb	r3, [r7, #11]
 8008834:	2b02      	cmp	r3, #2
 8008836:	d103      	bne.n	8008840 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008840:	bf00      	nop
  }
}
 8008842:	bf00      	nop
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b086      	sub	sp, #24
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800885c:	2300      	movs	r3, #0
 800885e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008866:	2b03      	cmp	r3, #3
 8008868:	d002      	beq.n	8008870 <CDC_ProcessReception+0x26>
 800886a:	2b04      	cmp	r3, #4
 800886c:	d00e      	beq.n	800888c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800886e:	e043      	b.n	80088f8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	6a19      	ldr	r1, [r3, #32]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	8b5a      	ldrh	r2, [r3, #26]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	7b1b      	ldrb	r3, [r3, #12]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 fc91 	bl	800a1a4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2204      	movs	r2, #4
 8008886:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800888a:	e035      	b.n	80088f8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	7b1b      	ldrb	r3, [r3, #12]
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 ff90 	bl	800a7b8 <USBH_LL_GetURBState>
 8008898:	4603      	mov	r3, r0
 800889a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800889c:	7cfb      	ldrb	r3, [r7, #19]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d129      	bne.n	80088f6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	7b1b      	ldrb	r3, [r3, #12]
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 fef3 	bl	800a694 <USBH_LL_GetLastXferSize>
 80088ae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d016      	beq.n	80088e8 <CDC_ProcessReception+0x9e>
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	8b5b      	ldrh	r3, [r3, #26]
 80088be:	461a      	mov	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d110      	bne.n	80088e8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	1ad2      	subs	r2, r2, r3
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	6a1a      	ldr	r2, [r3, #32]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	441a      	add	r2, r3
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2203      	movs	r2, #3
 80088e2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80088e6:	e006      	b.n	80088f6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f80f 	bl	8008914 <USBH_CDC_ReceiveCallback>
      break;
 80088f6:	bf00      	nop
  }
}
 80088f8:	bf00      	nop
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	4613      	mov	r3, r2
 8008948:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008950:	2302      	movs	r3, #2
 8008952:	e029      	b.n	80089a8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	79fa      	ldrb	r2, [r7, #7]
 8008958:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f81f 	bl	80089b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f001 fdc3 	bl	800a52c <USBH_LL_Init>

  return USBH_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e009      	b.n	80089d6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	33e0      	adds	r3, #224	@ 0xe0
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	2200      	movs	r2, #0
 80089ce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	3301      	adds	r3, #1
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b0f      	cmp	r3, #15
 80089da:	d9f2      	bls.n	80089c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	e009      	b.n	80089f6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80089ec:	2200      	movs	r2, #0
 80089ee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3301      	adds	r3, #1
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089fc:	d3f1      	bcc.n	80089e2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2240      	movs	r2, #64	@ 0x40
 8008a22:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	331c      	adds	r3, #28
 8008a4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a52:	2100      	movs	r1, #0
 8008a54:	4618      	mov	r0, r3
 8008a56:	f002 f81d 	bl	800aa94 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a64:	2100      	movs	r1, #0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f002 f814 	bl	800aa94 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008a72:	2212      	movs	r2, #18
 8008a74:	2100      	movs	r1, #0
 8008a76:	4618      	mov	r0, r3
 8008a78:	f002 f80c 	bl	800aa94 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008a82:	223e      	movs	r2, #62	@ 0x3e
 8008a84:	2100      	movs	r1, #0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f002 f804 	bl	800aa94 <memset>

  return USBH_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b085      	sub	sp, #20
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d016      	beq.n	8008ad8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10e      	bne.n	8008ad2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008aba:	1c59      	adds	r1, r3, #1
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	33de      	adds	r3, #222	@ 0xde
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
 8008ad0:	e004      	b.n	8008adc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	73fb      	strb	r3, [r7, #15]
 8008ad6:	e001      	b.n	8008adc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008ad8:	2302      	movs	r3, #2
 8008ada:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b085      	sub	sp, #20
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008b00:	78fa      	ldrb	r2, [r7, #3]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d204      	bcs.n	8008b10 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	78fa      	ldrb	r2, [r7, #3]
 8008b0a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008b0e:	e001      	b.n	8008b14 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008b10:	2302      	movs	r3, #2
 8008b12:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b087      	sub	sp, #28
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	4608      	mov	r0, r1
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	461a      	mov	r2, r3
 8008b30:	4603      	mov	r3, r0
 8008b32:	70fb      	strb	r3, [r7, #3]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70bb      	strb	r3, [r7, #2]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008b4a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b4c:	e025      	b.n	8008b9a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	221a      	movs	r2, #26
 8008b52:	fb02 f303 	mul.w	r3, r2, r3
 8008b56:	3308      	adds	r3, #8
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	3302      	adds	r3, #2
 8008b5e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	795b      	ldrb	r3, [r3, #5]
 8008b64:	78fa      	ldrb	r2, [r7, #3]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d002      	beq.n	8008b70 <USBH_FindInterface+0x4e>
 8008b6a:	78fb      	ldrb	r3, [r7, #3]
 8008b6c:	2bff      	cmp	r3, #255	@ 0xff
 8008b6e:	d111      	bne.n	8008b94 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b74:	78ba      	ldrb	r2, [r7, #2]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d002      	beq.n	8008b80 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b7a:	78bb      	ldrb	r3, [r7, #2]
 8008b7c:	2bff      	cmp	r3, #255	@ 0xff
 8008b7e:	d109      	bne.n	8008b94 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b84:	787a      	ldrb	r2, [r7, #1]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d002      	beq.n	8008b90 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b8a:	787b      	ldrb	r3, [r7, #1]
 8008b8c:	2bff      	cmp	r3, #255	@ 0xff
 8008b8e:	d101      	bne.n	8008b94 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	e006      	b.n	8008ba2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
 8008b96:	3301      	adds	r3, #1
 8008b98:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b9a:	7dfb      	ldrb	r3, [r7, #23]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d9d6      	bls.n	8008b4e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008ba0:	23ff      	movs	r3, #255	@ 0xff
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f001 fcf4 	bl	800a5a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f001 fe0d 	bl	800a7de <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af04      	add	r7, sp, #16
 8008bd6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008bd8:	2302      	movs	r3, #2
 8008bda:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d102      	bne.n	8008bf2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2203      	movs	r2, #3
 8008bf0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b0b      	cmp	r3, #11
 8008bfa:	f200 81bb 	bhi.w	8008f74 <USBH_Process+0x3a4>
 8008bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008c04 <USBH_Process+0x34>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c35 	.word	0x08008c35
 8008c08:	08008c67 	.word	0x08008c67
 8008c0c:	08008ccf 	.word	0x08008ccf
 8008c10:	08008f0f 	.word	0x08008f0f
 8008c14:	08008f75 	.word	0x08008f75
 8008c18:	08008d6f 	.word	0x08008d6f
 8008c1c:	08008eb5 	.word	0x08008eb5
 8008c20:	08008da5 	.word	0x08008da5
 8008c24:	08008dc5 	.word	0x08008dc5
 8008c28:	08008de3 	.word	0x08008de3
 8008c2c:	08008e27 	.word	0x08008e27
 8008c30:	08008ef7 	.word	0x08008ef7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 819b 	beq.w	8008f78 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008c48:	20c8      	movs	r0, #200	@ 0xc8
 8008c4a:	f001 fe12 	bl	800a872 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f001 fd05 	bl	800a65e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c64:	e188      	b.n	8008f78 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d107      	bne.n	8008c80 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c7e:	e18a      	b.n	8008f96 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008c86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c8a:	d914      	bls.n	8008cb6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008c92:	3301      	adds	r3, #1
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d903      	bls.n	8008cae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	220d      	movs	r2, #13
 8008caa:	701a      	strb	r2, [r3, #0]
      break;
 8008cac:	e173      	b.n	8008f96 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
      break;
 8008cb4:	e16f      	b.n	8008f96 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008cbc:	f103 020a 	add.w	r2, r3, #10
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008cc6:	200a      	movs	r0, #10
 8008cc8:	f001 fdd3 	bl	800a872 <USBH_Delay>
      break;
 8008ccc:	e163      	b.n	8008f96 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008cde:	2104      	movs	r1, #4
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008ce4:	2064      	movs	r0, #100	@ 0x64
 8008ce6:	f001 fdc4 	bl	800a872 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 fc90 	bl	800a610 <USBH_LL_GetSpeed>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2205      	movs	r2, #5
 8008cfe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008d00:	2100      	movs	r1, #0
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 fa9b 	bl	800a23e <USBH_AllocPipe>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008d10:	2180      	movs	r1, #128	@ 0x80
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 fa93 	bl	800a23e <USBH_AllocPipe>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	7919      	ldrb	r1, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d34:	9202      	str	r2, [sp, #8]
 8008d36:	2200      	movs	r2, #0
 8008d38:	9201      	str	r2, [sp, #4]
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2280      	movs	r2, #128	@ 0x80
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 fa4d 	bl	800a1e0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	7959      	ldrb	r1, [r3, #5]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d5a:	9202      	str	r2, [sp, #8]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	9201      	str	r2, [sp, #4]
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	4603      	mov	r3, r0
 8008d64:	2200      	movs	r2, #0
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 fa3a 	bl	800a1e0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d6c:	e113      	b.n	8008f96 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f916 	bl	8008fa0 <USBH_HandleEnum>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 80fd 	bne.w	8008f7c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d103      	bne.n	8008d9c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2208      	movs	r2, #8
 8008d98:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d9a:	e0ef      	b.n	8008f7c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2207      	movs	r2, #7
 8008da0:	701a      	strb	r2, [r3, #0]
      break;
 8008da2:	e0eb      	b.n	8008f7c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 80e8 	beq.w	8008f80 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008db6:	2101      	movs	r1, #1
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2208      	movs	r2, #8
 8008dc0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008dc2:	e0dd      	b.n	8008f80 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fc3a 	bl	8009646 <USBH_SetCfg>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f040 80d5 	bne.w	8008f84 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2209      	movs	r2, #9
 8008dde:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008de0:	e0d0      	b.n	8008f84 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d016      	beq.n	8008e1e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008df0:	2101      	movs	r1, #1
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fc4a 	bl	800968c <USBH_SetFeature>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d103      	bne.n	8008e0c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	220a      	movs	r2, #10
 8008e08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e0a:	e0bd      	b.n	8008f88 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	f040 80b9 	bne.w	8008f88 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	220a      	movs	r2, #10
 8008e1a:	701a      	strb	r2, [r3, #0]
      break;
 8008e1c:	e0b4      	b.n	8008f88 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	220a      	movs	r2, #10
 8008e22:	701a      	strb	r2, [r3, #0]
      break;
 8008e24:	e0b0      	b.n	8008f88 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 80ad 	beq.w	8008f8c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]
 8008e3e:	e016      	b.n	8008e6e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008e40:	7bfa      	ldrb	r2, [r7, #15]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	32de      	adds	r2, #222	@ 0xde
 8008e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4a:	791a      	ldrb	r2, [r3, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d108      	bne.n	8008e68 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008e56:	7bfa      	ldrb	r2, [r7, #15]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	32de      	adds	r2, #222	@ 0xde
 8008e5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008e66:	e005      	b.n	8008e74 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	73fb      	strb	r3, [r7, #15]
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0e5      	beq.n	8008e40 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d016      	beq.n	8008eac <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	4798      	blx	r3
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d109      	bne.n	8008ea4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2206      	movs	r2, #6
 8008e94:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e9c:	2103      	movs	r1, #3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ea2:	e073      	b.n	8008f8c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	220d      	movs	r2, #13
 8008ea8:	701a      	strb	r2, [r3, #0]
      break;
 8008eaa:	e06f      	b.n	8008f8c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	220d      	movs	r2, #13
 8008eb0:	701a      	strb	r2, [r3, #0]
      break;
 8008eb2:	e06b      	b.n	8008f8c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d017      	beq.n	8008eee <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4798      	blx	r3
 8008eca:	4603      	mov	r3, r0
 8008ecc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d103      	bne.n	8008ede <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	220b      	movs	r2, #11
 8008eda:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008edc:	e058      	b.n	8008f90 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d154      	bne.n	8008f90 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	220d      	movs	r2, #13
 8008eea:	701a      	strb	r2, [r3, #0]
      break;
 8008eec:	e050      	b.n	8008f90 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	220d      	movs	r2, #13
 8008ef2:	701a      	strb	r2, [r3, #0]
      break;
 8008ef4:	e04c      	b.n	8008f90 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d049      	beq.n	8008f94 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	4798      	blx	r3
      }
      break;
 8008f0c:	e042      	b.n	8008f94 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff fd4a 	bl	80089b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d009      	beq.n	8008f3a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d005      	beq.n	8008f50 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f4a:	2105      	movs	r1, #5
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d107      	bne.n	8008f6c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7ff fe22 	bl	8008bae <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f6a:	e014      	b.n	8008f96 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 fb19 	bl	800a5a4 <USBH_LL_Start>
      break;
 8008f72:	e010      	b.n	8008f96 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008f74:	bf00      	nop
 8008f76:	e00e      	b.n	8008f96 <USBH_Process+0x3c6>
      break;
 8008f78:	bf00      	nop
 8008f7a:	e00c      	b.n	8008f96 <USBH_Process+0x3c6>
      break;
 8008f7c:	bf00      	nop
 8008f7e:	e00a      	b.n	8008f96 <USBH_Process+0x3c6>
    break;
 8008f80:	bf00      	nop
 8008f82:	e008      	b.n	8008f96 <USBH_Process+0x3c6>
      break;
 8008f84:	bf00      	nop
 8008f86:	e006      	b.n	8008f96 <USBH_Process+0x3c6>
      break;
 8008f88:	bf00      	nop
 8008f8a:	e004      	b.n	8008f96 <USBH_Process+0x3c6>
      break;
 8008f8c:	bf00      	nop
 8008f8e:	e002      	b.n	8008f96 <USBH_Process+0x3c6>
      break;
 8008f90:	bf00      	nop
 8008f92:	e000      	b.n	8008f96 <USBH_Process+0x3c6>
      break;
 8008f94:	bf00      	nop
  }
  return USBH_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af04      	add	r7, sp, #16
 8008fa6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008fac:	2301      	movs	r3, #1
 8008fae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	785b      	ldrb	r3, [r3, #1]
 8008fb4:	2b07      	cmp	r3, #7
 8008fb6:	f200 81bd 	bhi.w	8009334 <USBH_HandleEnum+0x394>
 8008fba:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc0 <USBH_HandleEnum+0x20>)
 8008fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc0:	08008fe1 	.word	0x08008fe1
 8008fc4:	0800909b 	.word	0x0800909b
 8008fc8:	08009105 	.word	0x08009105
 8008fcc:	0800918f 	.word	0x0800918f
 8008fd0:	080091f9 	.word	0x080091f9
 8008fd4:	08009269 	.word	0x08009269
 8008fd8:	080092af 	.word	0x080092af
 8008fdc:	080092f5 	.word	0x080092f5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008fe0:	2108      	movs	r1, #8
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fa4c 	bl	8009480 <USBH_Get_DevDesc>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d12e      	bne.n	8009050 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	7919      	ldrb	r1, [r3, #4]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009016:	9202      	str	r2, [sp, #8]
 8009018:	2200      	movs	r2, #0
 800901a:	9201      	str	r2, [sp, #4]
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	4603      	mov	r3, r0
 8009020:	2280      	movs	r2, #128	@ 0x80
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f001 f8dc 	bl	800a1e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	7959      	ldrb	r1, [r3, #5]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800903c:	9202      	str	r2, [sp, #8]
 800903e:	2200      	movs	r2, #0
 8009040:	9201      	str	r2, [sp, #4]
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	4603      	mov	r3, r0
 8009046:	2200      	movs	r2, #0
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 f8c9 	bl	800a1e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800904e:	e173      	b.n	8009338 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b03      	cmp	r3, #3
 8009054:	f040 8170 	bne.w	8009338 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800905e:	3301      	adds	r3, #1
 8009060:	b2da      	uxtb	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800906e:	2b03      	cmp	r3, #3
 8009070:	d903      	bls.n	800907a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	220d      	movs	r2, #13
 8009076:	701a      	strb	r2, [r3, #0]
      break;
 8009078:	e15e      	b.n	8009338 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	795b      	ldrb	r3, [r3, #5]
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f001 f8fd 	bl	800a280 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	791b      	ldrb	r3, [r3, #4]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 f8f7 	bl	800a280 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	701a      	strb	r2, [r3, #0]
      break;
 8009098:	e14e      	b.n	8009338 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800909a:	2112      	movs	r1, #18
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f9ef 	bl	8009480 <USBH_Get_DevDesc>
 80090a2:	4603      	mov	r3, r0
 80090a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d103      	bne.n	80090b4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80090b2:	e143      	b.n	800933c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	f040 8140 	bne.w	800933c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090c2:	3301      	adds	r3, #1
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d903      	bls.n	80090de <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	220d      	movs	r2, #13
 80090da:	701a      	strb	r2, [r3, #0]
      break;
 80090dc:	e12e      	b.n	800933c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	795b      	ldrb	r3, [r3, #5]
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f001 f8cb 	bl	800a280 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	791b      	ldrb	r3, [r3, #4]
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f001 f8c5 	bl	800a280 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	701a      	strb	r2, [r3, #0]
      break;
 8009102:	e11b      	b.n	800933c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009104:	2101      	movs	r1, #1
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa79 	bl	80095fe <USBH_SetAddress>
 800910c:	4603      	mov	r3, r0
 800910e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d130      	bne.n	8009178 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009116:	2002      	movs	r0, #2
 8009118:	f001 fbab 	bl	800a872 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2203      	movs	r2, #3
 8009128:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	7919      	ldrb	r1, [r3, #4]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800913e:	9202      	str	r2, [sp, #8]
 8009140:	2200      	movs	r2, #0
 8009142:	9201      	str	r2, [sp, #4]
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	4603      	mov	r3, r0
 8009148:	2280      	movs	r2, #128	@ 0x80
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 f848 	bl	800a1e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	7959      	ldrb	r1, [r3, #5]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009164:	9202      	str	r2, [sp, #8]
 8009166:	2200      	movs	r2, #0
 8009168:	9201      	str	r2, [sp, #4]
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	4603      	mov	r3, r0
 800916e:	2200      	movs	r2, #0
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f001 f835 	bl	800a1e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009176:	e0e3      	b.n	8009340 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	2b03      	cmp	r3, #3
 800917c:	f040 80e0 	bne.w	8009340 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	220d      	movs	r2, #13
 8009184:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	705a      	strb	r2, [r3, #1]
      break;
 800918c:	e0d8      	b.n	8009340 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800918e:	2109      	movs	r1, #9
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f9a1 	bl	80094d8 <USBH_Get_CfgDesc>
 8009196:	4603      	mov	r3, r0
 8009198:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d103      	bne.n	80091a8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2204      	movs	r2, #4
 80091a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80091a6:	e0cd      	b.n	8009344 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	f040 80ca 	bne.w	8009344 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80091b6:	3301      	adds	r3, #1
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d903      	bls.n	80091d2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	220d      	movs	r2, #13
 80091ce:	701a      	strb	r2, [r3, #0]
      break;
 80091d0:	e0b8      	b.n	8009344 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	795b      	ldrb	r3, [r3, #5]
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f001 f851 	bl	800a280 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	791b      	ldrb	r3, [r3, #4]
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 f84b 	bl	800a280 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
      break;
 80091f6:	e0a5      	b.n	8009344 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80091fe:	4619      	mov	r1, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f969 	bl	80094d8 <USBH_Get_CfgDesc>
 8009206:	4603      	mov	r3, r0
 8009208:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800920a:	7bbb      	ldrb	r3, [r7, #14]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d103      	bne.n	8009218 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2205      	movs	r2, #5
 8009214:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009216:	e097      	b.n	8009348 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009218:	7bbb      	ldrb	r3, [r7, #14]
 800921a:	2b03      	cmp	r3, #3
 800921c:	f040 8094 	bne.w	8009348 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009226:	3301      	adds	r3, #1
 8009228:	b2da      	uxtb	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009236:	2b03      	cmp	r3, #3
 8009238:	d903      	bls.n	8009242 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	220d      	movs	r2, #13
 800923e:	701a      	strb	r2, [r3, #0]
      break;
 8009240:	e082      	b.n	8009348 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	795b      	ldrb	r3, [r3, #5]
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 f819 	bl	800a280 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	791b      	ldrb	r3, [r3, #4]
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 f813 	bl	800a280 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	701a      	strb	r2, [r3, #0]
      break;
 8009266:	e06f      	b.n	8009348 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800926e:	2b00      	cmp	r3, #0
 8009270:	d019      	beq.n	80092a6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800927e:	23ff      	movs	r3, #255	@ 0xff
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f953 	bl	800952c <USBH_Get_StringDesc>
 8009286:	4603      	mov	r3, r0
 8009288:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d103      	bne.n	8009298 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2206      	movs	r2, #6
 8009294:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009296:	e059      	b.n	800934c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	2b03      	cmp	r3, #3
 800929c:	d156      	bne.n	800934c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2206      	movs	r2, #6
 80092a2:	705a      	strb	r2, [r3, #1]
      break;
 80092a4:	e052      	b.n	800934c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2206      	movs	r2, #6
 80092aa:	705a      	strb	r2, [r3, #1]
      break;
 80092ac:	e04e      	b.n	800934c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d019      	beq.n	80092ec <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80092c4:	23ff      	movs	r3, #255	@ 0xff
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f930 	bl	800952c <USBH_Get_StringDesc>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d103      	bne.n	80092de <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2207      	movs	r2, #7
 80092da:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80092dc:	e038      	b.n	8009350 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092de:	7bbb      	ldrb	r3, [r7, #14]
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d135      	bne.n	8009350 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2207      	movs	r2, #7
 80092e8:	705a      	strb	r2, [r3, #1]
      break;
 80092ea:	e031      	b.n	8009350 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2207      	movs	r2, #7
 80092f0:	705a      	strb	r2, [r3, #1]
      break;
 80092f2:	e02d      	b.n	8009350 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d017      	beq.n	800932e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800930a:	23ff      	movs	r3, #255	@ 0xff
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f90d 	bl	800952c <USBH_Get_StringDesc>
 8009312:	4603      	mov	r3, r0
 8009314:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009316:	7bbb      	ldrb	r3, [r7, #14]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009320:	e018      	b.n	8009354 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009322:	7bbb      	ldrb	r3, [r7, #14]
 8009324:	2b03      	cmp	r3, #3
 8009326:	d115      	bne.n	8009354 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
      break;
 800932c:	e012      	b.n	8009354 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	73fb      	strb	r3, [r7, #15]
      break;
 8009332:	e00f      	b.n	8009354 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009334:	bf00      	nop
 8009336:	e00e      	b.n	8009356 <USBH_HandleEnum+0x3b6>
      break;
 8009338:	bf00      	nop
 800933a:	e00c      	b.n	8009356 <USBH_HandleEnum+0x3b6>
      break;
 800933c:	bf00      	nop
 800933e:	e00a      	b.n	8009356 <USBH_HandleEnum+0x3b6>
      break;
 8009340:	bf00      	nop
 8009342:	e008      	b.n	8009356 <USBH_HandleEnum+0x3b6>
      break;
 8009344:	bf00      	nop
 8009346:	e006      	b.n	8009356 <USBH_HandleEnum+0x3b6>
      break;
 8009348:	bf00      	nop
 800934a:	e004      	b.n	8009356 <USBH_HandleEnum+0x3b6>
      break;
 800934c:	bf00      	nop
 800934e:	e002      	b.n	8009356 <USBH_HandleEnum+0x3b6>
      break;
 8009350:	bf00      	nop
 8009352:	e000      	b.n	8009356 <USBH_HandleEnum+0x3b6>
      break;
 8009354:	bf00      	nop
  }
  return Status;
 8009356:	7bfb      	ldrb	r3, [r7, #15]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009372:	bf00      	nop
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800938c:	1c5a      	adds	r2, r3, #1
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f804 	bl	80093a2 <USBH_HandleSof>
}
 800939a:	bf00      	nop
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b082      	sub	sp, #8
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b0b      	cmp	r3, #11
 80093b2:	d10a      	bne.n	80093ca <USBH_HandleSof+0x28>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d005      	beq.n	80093ca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	4798      	blx	r3
  }
}
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80093e2:	bf00      	nop
}
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80093fe:	bf00      	nop
}
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800940a:	b480      	push	{r7}
 800940c:	b083      	sub	sp, #12
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 f8be 	bl	800a5da <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	791b      	ldrb	r3, [r3, #4]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 ff0b 	bl	800a280 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	795b      	ldrb	r3, [r3, #5]
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 ff05 	bl	800a280 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af02      	add	r7, sp, #8
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800948c:	887b      	ldrh	r3, [r7, #2]
 800948e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009492:	d901      	bls.n	8009498 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009494:	2303      	movs	r3, #3
 8009496:	e01b      	b.n	80094d0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800949e:	887b      	ldrh	r3, [r7, #2]
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	4613      	mov	r3, r2
 80094a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80094a8:	2100      	movs	r1, #0
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f872 	bl	8009594 <USBH_GetDescriptor>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d109      	bne.n	80094ce <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80094c0:	887a      	ldrh	r2, [r7, #2]
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f929 	bl	800971c <USBH_ParseDevDesc>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af02      	add	r7, sp, #8
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	331c      	adds	r3, #28
 80094e8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80094ea:	887b      	ldrh	r3, [r7, #2]
 80094ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094f0:	d901      	bls.n	80094f6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e016      	b.n	8009524 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80094f6:	887b      	ldrh	r3, [r7, #2]
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009500:	2100      	movs	r1, #0
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f846 	bl	8009594 <USBH_GetDescriptor>
 8009508:	4603      	mov	r3, r0
 800950a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d107      	bne.n	8009522 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009512:	887b      	ldrh	r3, [r7, #2]
 8009514:	461a      	mov	r2, r3
 8009516:	68b9      	ldr	r1, [r7, #8]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f9af 	bl	800987c <USBH_ParseCfgDesc>
 800951e:	4603      	mov	r3, r0
 8009520:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009522:	7bfb      	ldrb	r3, [r7, #15]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b088      	sub	sp, #32
 8009530:	af02      	add	r7, sp, #8
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	607a      	str	r2, [r7, #4]
 8009536:	461a      	mov	r2, r3
 8009538:	460b      	mov	r3, r1
 800953a:	72fb      	strb	r3, [r7, #11]
 800953c:	4613      	mov	r3, r2
 800953e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009540:	893b      	ldrh	r3, [r7, #8]
 8009542:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009546:	d802      	bhi.n	800954e <USBH_Get_StringDesc+0x22>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800954e:	2303      	movs	r3, #3
 8009550:	e01c      	b.n	800958c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009552:	7afb      	ldrb	r3, [r7, #11]
 8009554:	b29b      	uxth	r3, r3
 8009556:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800955a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009562:	893b      	ldrh	r3, [r7, #8]
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	460b      	mov	r3, r1
 8009568:	2100      	movs	r1, #0
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f000 f812 	bl	8009594 <USBH_GetDescriptor>
 8009570:	4603      	mov	r3, r0
 8009572:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d107      	bne.n	800958a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009580:	893a      	ldrh	r2, [r7, #8]
 8009582:	6879      	ldr	r1, [r7, #4]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fb8d 	bl	8009ca4 <USBH_ParseStringDesc>
  }

  return status;
 800958a:	7dfb      	ldrb	r3, [r7, #23]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	607b      	str	r3, [r7, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	72fb      	strb	r3, [r7, #11]
 80095a2:	4613      	mov	r3, r2
 80095a4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	789b      	ldrb	r3, [r3, #2]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d11c      	bne.n	80095e8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80095ae:	7afb      	ldrb	r3, [r7, #11]
 80095b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2206      	movs	r2, #6
 80095be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	893a      	ldrh	r2, [r7, #8]
 80095c4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80095c6:	893b      	ldrh	r3, [r7, #8]
 80095c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80095cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095d0:	d104      	bne.n	80095dc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f240 4209 	movw	r2, #1033	@ 0x409
 80095d8:	829a      	strh	r2, [r3, #20]
 80095da:	e002      	b.n	80095e2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8b3a      	ldrh	r2, [r7, #24]
 80095e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80095e8:	8b3b      	ldrh	r3, [r7, #24]
 80095ea:	461a      	mov	r2, r3
 80095ec:	6879      	ldr	r1, [r7, #4]
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f000 fba5 	bl	8009d3e <USBH_CtlReq>
 80095f4:	4603      	mov	r3, r0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b082      	sub	sp, #8
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	460b      	mov	r3, r1
 8009608:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	789b      	ldrb	r3, [r3, #2]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d10f      	bne.n	8009632 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2205      	movs	r2, #5
 800961c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800961e:	78fb      	ldrb	r3, [r7, #3]
 8009620:	b29a      	uxth	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009632:	2200      	movs	r2, #0
 8009634:	2100      	movs	r1, #0
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fb81 	bl	8009d3e <USBH_CtlReq>
 800963c:	4603      	mov	r3, r0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	460b      	mov	r3, r1
 8009650:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	789b      	ldrb	r3, [r3, #2]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d10e      	bne.n	8009678 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2209      	movs	r2, #9
 8009664:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	887a      	ldrh	r2, [r7, #2]
 800966a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009678:	2200      	movs	r2, #0
 800967a:	2100      	movs	r1, #0
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fb5e 	bl	8009d3e <USBH_CtlReq>
 8009682:	4603      	mov	r3, r0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	789b      	ldrb	r3, [r3, #2]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d10f      	bne.n	80096c0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2203      	movs	r2, #3
 80096aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80096ac:	78fb      	ldrb	r3, [r7, #3]
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096c0:	2200      	movs	r2, #0
 80096c2:	2100      	movs	r1, #0
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fb3a 	bl	8009d3e <USBH_CtlReq>
 80096ca:	4603      	mov	r3, r0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	789b      	ldrb	r3, [r3, #2]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d10f      	bne.n	8009708 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80096fa:	78fb      	ldrb	r3, [r7, #3]
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009708:	2200      	movs	r2, #0
 800970a:	2100      	movs	r1, #0
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fb16 	bl	8009d3e <USBH_CtlReq>
 8009712:	4603      	mov	r3, r0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	4613      	mov	r3, r2
 8009728:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009730:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800973c:	2302      	movs	r3, #2
 800973e:	e094      	b.n	800986a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	781a      	ldrb	r2, [r3, #0]
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	785a      	ldrb	r2, [r3, #1]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	3302      	adds	r3, #2
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	461a      	mov	r2, r3
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	3303      	adds	r3, #3
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	021b      	lsls	r3, r3, #8
 8009760:	b29b      	uxth	r3, r3
 8009762:	4313      	orrs	r3, r2
 8009764:	b29a      	uxth	r2, r3
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	791a      	ldrb	r2, [r3, #4]
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	795a      	ldrb	r2, [r3, #5]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	799a      	ldrb	r2, [r3, #6]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	79da      	ldrb	r2, [r3, #7]
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009790:	2b00      	cmp	r3, #0
 8009792:	d004      	beq.n	800979e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800979a:	2b01      	cmp	r3, #1
 800979c:	d11b      	bne.n	80097d6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	79db      	ldrb	r3, [r3, #7]
 80097a2:	2b20      	cmp	r3, #32
 80097a4:	dc0f      	bgt.n	80097c6 <USBH_ParseDevDesc+0xaa>
 80097a6:	2b08      	cmp	r3, #8
 80097a8:	db0f      	blt.n	80097ca <USBH_ParseDevDesc+0xae>
 80097aa:	3b08      	subs	r3, #8
 80097ac:	4a32      	ldr	r2, [pc, #200]	@ (8009878 <USBH_ParseDevDesc+0x15c>)
 80097ae:	fa22 f303 	lsr.w	r3, r2, r3
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	bf14      	ite	ne
 80097ba:	2301      	movne	r3, #1
 80097bc:	2300      	moveq	r3, #0
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d106      	bne.n	80097d2 <USBH_ParseDevDesc+0xb6>
 80097c4:	e001      	b.n	80097ca <USBH_ParseDevDesc+0xae>
 80097c6:	2b40      	cmp	r3, #64	@ 0x40
 80097c8:	d003      	beq.n	80097d2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2208      	movs	r2, #8
 80097ce:	71da      	strb	r2, [r3, #7]
        break;
 80097d0:	e000      	b.n	80097d4 <USBH_ParseDevDesc+0xb8>
        break;
 80097d2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80097d4:	e00e      	b.n	80097f4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d107      	bne.n	80097f0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	79db      	ldrb	r3, [r3, #7]
 80097e4:	2b08      	cmp	r3, #8
 80097e6:	d005      	beq.n	80097f4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	2208      	movs	r2, #8
 80097ec:	71da      	strb	r2, [r3, #7]
 80097ee:	e001      	b.n	80097f4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80097f0:	2303      	movs	r3, #3
 80097f2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80097f4:	88fb      	ldrh	r3, [r7, #6]
 80097f6:	2b08      	cmp	r3, #8
 80097f8:	d936      	bls.n	8009868 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	3308      	adds	r3, #8
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	461a      	mov	r2, r3
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	3309      	adds	r3, #9
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	021b      	lsls	r3, r3, #8
 800980a:	b29b      	uxth	r3, r3
 800980c:	4313      	orrs	r3, r2
 800980e:	b29a      	uxth	r2, r3
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	330a      	adds	r3, #10
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	330b      	adds	r3, #11
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	021b      	lsls	r3, r3, #8
 8009824:	b29b      	uxth	r3, r3
 8009826:	4313      	orrs	r3, r2
 8009828:	b29a      	uxth	r2, r3
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	330c      	adds	r3, #12
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	330d      	adds	r3, #13
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	b29b      	uxth	r3, r3
 8009840:	4313      	orrs	r3, r2
 8009842:	b29a      	uxth	r2, r3
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	7b9a      	ldrb	r2, [r3, #14]
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	7bda      	ldrb	r2, [r3, #15]
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	7c1a      	ldrb	r2, [r3, #16]
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	7c5a      	ldrb	r2, [r3, #17]
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009868:	7dfb      	ldrb	r3, [r7, #23]
}
 800986a:	4618      	mov	r0, r3
 800986c:	371c      	adds	r7, #28
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	01000101 	.word	0x01000101

0800987c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08c      	sub	sp, #48	@ 0x30
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	4613      	mov	r3, r2
 8009888:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009890:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d101      	bne.n	80098ae <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80098aa:	2302      	movs	r3, #2
 80098ac:	e0da      	b.n	8009a64 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80098b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	2b09      	cmp	r3, #9
 80098b8:	d002      	beq.n	80098c0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80098ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098bc:	2209      	movs	r2, #9
 80098be:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	781a      	ldrb	r2, [r3, #0]
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	785a      	ldrb	r2, [r3, #1]
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	3302      	adds	r3, #2
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	461a      	mov	r2, r3
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	3303      	adds	r3, #3
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	021b      	lsls	r3, r3, #8
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	4313      	orrs	r3, r2
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ea:	bf28      	it	cs
 80098ec:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	791a      	ldrb	r2, [r3, #4]
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	795a      	ldrb	r2, [r3, #5]
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	799a      	ldrb	r2, [r3, #6]
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	79da      	ldrb	r2, [r3, #7]
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	7a1a      	ldrb	r2, [r3, #8]
 800991a:	6a3b      	ldr	r3, [r7, #32]
 800991c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800991e:	88fb      	ldrh	r3, [r7, #6]
 8009920:	2b09      	cmp	r3, #9
 8009922:	f240 809d 	bls.w	8009a60 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009926:	2309      	movs	r3, #9
 8009928:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800992a:	2300      	movs	r3, #0
 800992c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800992e:	e081      	b.n	8009a34 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009930:	f107 0316 	add.w	r3, r7, #22
 8009934:	4619      	mov	r1, r3
 8009936:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009938:	f000 f9e7 	bl	8009d0a <USBH_GetNextDesc>
 800993c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800993e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	2b04      	cmp	r3, #4
 8009944:	d176      	bne.n	8009a34 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b09      	cmp	r3, #9
 800994c:	d002      	beq.n	8009954 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800994e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009950:	2209      	movs	r2, #9
 8009952:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009958:	221a      	movs	r2, #26
 800995a:	fb02 f303 	mul.w	r3, r2, r3
 800995e:	3308      	adds	r3, #8
 8009960:	6a3a      	ldr	r2, [r7, #32]
 8009962:	4413      	add	r3, r2
 8009964:	3302      	adds	r3, #2
 8009966:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009968:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800996a:	69f8      	ldr	r0, [r7, #28]
 800996c:	f000 f87e 	bl	8009a6c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009976:	2300      	movs	r3, #0
 8009978:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800997a:	e043      	b.n	8009a04 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800997c:	f107 0316 	add.w	r3, r7, #22
 8009980:	4619      	mov	r1, r3
 8009982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009984:	f000 f9c1 	bl	8009d0a <USBH_GetNextDesc>
 8009988:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	785b      	ldrb	r3, [r3, #1]
 800998e:	2b05      	cmp	r3, #5
 8009990:	d138      	bne.n	8009a04 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	795b      	ldrb	r3, [r3, #5]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d113      	bne.n	80099c2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d003      	beq.n	80099aa <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	799b      	ldrb	r3, [r3, #6]
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d10b      	bne.n	80099c2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	79db      	ldrb	r3, [r3, #7]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10b      	bne.n	80099ca <USBH_ParseCfgDesc+0x14e>
 80099b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	2b09      	cmp	r3, #9
 80099b8:	d007      	beq.n	80099ca <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80099ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099bc:	2209      	movs	r2, #9
 80099be:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099c0:	e003      	b.n	80099ca <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80099c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c4:	2207      	movs	r2, #7
 80099c6:	701a      	strb	r2, [r3, #0]
 80099c8:	e000      	b.n	80099cc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099ca:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80099cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099d0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80099d4:	3201      	adds	r2, #1
 80099d6:	00d2      	lsls	r2, r2, #3
 80099d8:	211a      	movs	r1, #26
 80099da:	fb01 f303 	mul.w	r3, r1, r3
 80099de:	4413      	add	r3, r2
 80099e0:	3308      	adds	r3, #8
 80099e2:	6a3a      	ldr	r2, [r7, #32]
 80099e4:	4413      	add	r3, r2
 80099e6:	3304      	adds	r3, #4
 80099e8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80099ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099ec:	69b9      	ldr	r1, [r7, #24]
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 f870 	bl	8009ad4 <USBH_ParseEPDesc>
 80099f4:	4603      	mov	r3, r0
 80099f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80099fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099fe:	3301      	adds	r3, #1
 8009a00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	791b      	ldrb	r3, [r3, #4]
 8009a08:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d204      	bcs.n	8009a1a <USBH_ParseCfgDesc+0x19e>
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	885a      	ldrh	r2, [r3, #2]
 8009a14:	8afb      	ldrh	r3, [r7, #22]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d8b0      	bhi.n	800997c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	791b      	ldrb	r3, [r3, #4]
 8009a1e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d201      	bcs.n	8009a2a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e01c      	b.n	8009a64 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a2e:	3301      	adds	r3, #1
 8009a30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d805      	bhi.n	8009a48 <USBH_ParseCfgDesc+0x1cc>
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	885a      	ldrh	r2, [r3, #2]
 8009a40:	8afb      	ldrh	r3, [r7, #22]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	f63f af74 	bhi.w	8009930 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	791b      	ldrb	r3, [r3, #4]
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	bf28      	it	cs
 8009a50:	2302      	movcs	r3, #2
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d201      	bcs.n	8009a60 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e001      	b.n	8009a64 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009a60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3730      	adds	r7, #48	@ 0x30
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	781a      	ldrb	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	785a      	ldrb	r2, [r3, #1]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	789a      	ldrb	r2, [r3, #2]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	78da      	ldrb	r2, [r3, #3]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	bf28      	it	cs
 8009aa0:	2302      	movcs	r3, #2
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	795a      	ldrb	r2, [r3, #5]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	799a      	ldrb	r2, [r3, #6]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	79da      	ldrb	r2, [r3, #7]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	7a1a      	ldrb	r2, [r3, #8]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	721a      	strb	r2, [r3, #8]
}
 8009ac8:	bf00      	nop
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	781a      	ldrb	r2, [r3, #0]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	785a      	ldrb	r2, [r3, #1]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	789a      	ldrb	r2, [r3, #2]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	78da      	ldrb	r2, [r3, #3]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3304      	adds	r3, #4
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3305      	adds	r3, #5
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	021b      	lsls	r3, r3, #8
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	4313      	orrs	r3, r2
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	799a      	ldrb	r2, [r3, #6]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	889b      	ldrh	r3, [r3, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d009      	beq.n	8009b42 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b36:	d804      	bhi.n	8009b42 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b40:	d901      	bls.n	8009b46 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009b42:	2303      	movs	r3, #3
 8009b44:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d136      	bne.n	8009bbe <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	78db      	ldrb	r3, [r3, #3]
 8009b54:	f003 0303 	and.w	r3, r3, #3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d108      	bne.n	8009b6e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	889b      	ldrh	r3, [r3, #4]
 8009b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b64:	f240 8097 	bls.w	8009c96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	75fb      	strb	r3, [r7, #23]
 8009b6c:	e093      	b.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	78db      	ldrb	r3, [r3, #3]
 8009b72:	f003 0303 	and.w	r3, r3, #3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d107      	bne.n	8009b8a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	889b      	ldrh	r3, [r3, #4]
 8009b7e:	2b40      	cmp	r3, #64	@ 0x40
 8009b80:	f240 8089 	bls.w	8009c96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b84:	2303      	movs	r3, #3
 8009b86:	75fb      	strb	r3, [r7, #23]
 8009b88:	e085      	b.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	78db      	ldrb	r3, [r3, #3]
 8009b8e:	f003 0303 	and.w	r3, r3, #3
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d005      	beq.n	8009ba2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	78db      	ldrb	r3, [r3, #3]
 8009b9a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d10a      	bne.n	8009bb8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	799b      	ldrb	r3, [r3, #6]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d003      	beq.n	8009bb2 <USBH_ParseEPDesc+0xde>
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	799b      	ldrb	r3, [r3, #6]
 8009bae:	2b10      	cmp	r3, #16
 8009bb0:	d970      	bls.n	8009c94 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009bb6:	e06d      	b.n	8009c94 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	75fb      	strb	r3, [r7, #23]
 8009bbc:	e06b      	b.n	8009c96 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d13c      	bne.n	8009c42 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	78db      	ldrb	r3, [r3, #3]
 8009bcc:	f003 0303 	and.w	r3, r3, #3
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d005      	beq.n	8009be0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	78db      	ldrb	r3, [r3, #3]
 8009bd8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d106      	bne.n	8009bee <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	889b      	ldrh	r3, [r3, #4]
 8009be4:	2b40      	cmp	r3, #64	@ 0x40
 8009be6:	d956      	bls.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009be8:	2303      	movs	r3, #3
 8009bea:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009bec:	e053      	b.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	78db      	ldrb	r3, [r3, #3]
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d10e      	bne.n	8009c18 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	799b      	ldrb	r3, [r3, #6]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d007      	beq.n	8009c12 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009c06:	2b10      	cmp	r3, #16
 8009c08:	d803      	bhi.n	8009c12 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009c0e:	2b40      	cmp	r3, #64	@ 0x40
 8009c10:	d941      	bls.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c12:	2303      	movs	r3, #3
 8009c14:	75fb      	strb	r3, [r7, #23]
 8009c16:	e03e      	b.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	78db      	ldrb	r3, [r3, #3]
 8009c1c:	f003 0303 	and.w	r3, r3, #3
 8009c20:	2b03      	cmp	r3, #3
 8009c22:	d10b      	bne.n	8009c3c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	799b      	ldrb	r3, [r3, #6]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d004      	beq.n	8009c36 <USBH_ParseEPDesc+0x162>
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	889b      	ldrh	r3, [r3, #4]
 8009c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c34:	d32f      	bcc.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c36:	2303      	movs	r3, #3
 8009c38:	75fb      	strb	r3, [r7, #23]
 8009c3a:	e02c      	b.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	75fb      	strb	r3, [r7, #23]
 8009c40:	e029      	b.n	8009c96 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d120      	bne.n	8009c8e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	78db      	ldrb	r3, [r3, #3]
 8009c50:	f003 0303 	and.w	r3, r3, #3
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d106      	bne.n	8009c66 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	889b      	ldrh	r3, [r3, #4]
 8009c5c:	2b08      	cmp	r3, #8
 8009c5e:	d01a      	beq.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c60:	2303      	movs	r3, #3
 8009c62:	75fb      	strb	r3, [r7, #23]
 8009c64:	e017      	b.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	78db      	ldrb	r3, [r3, #3]
 8009c6a:	f003 0303 	and.w	r3, r3, #3
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d10a      	bne.n	8009c88 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	799b      	ldrb	r3, [r3, #6]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d003      	beq.n	8009c82 <USBH_ParseEPDesc+0x1ae>
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	889b      	ldrh	r3, [r3, #4]
 8009c7e:	2b08      	cmp	r3, #8
 8009c80:	d909      	bls.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c82:	2303      	movs	r3, #3
 8009c84:	75fb      	strb	r3, [r7, #23]
 8009c86:	e006      	b.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	75fb      	strb	r3, [r7, #23]
 8009c8c:	e003      	b.n	8009c96 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	75fb      	strb	r3, [r7, #23]
 8009c92:	e000      	b.n	8009c96 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c94:	bf00      	nop
  }

  return status;
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	371c      	adds	r7, #28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	d120      	bne.n	8009cfe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	1e9a      	subs	r2, r3, #2
 8009cc2:	88fb      	ldrh	r3, [r7, #6]
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	bf28      	it	cs
 8009cc8:	4613      	movcs	r3, r2
 8009cca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	3302      	adds	r3, #2
 8009cd0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	82fb      	strh	r3, [r7, #22]
 8009cd6:	e00b      	b.n	8009cf0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009cd8:	8afb      	ldrh	r3, [r7, #22]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	4413      	add	r3, r2
 8009cde:	781a      	ldrb	r2, [r3, #0]
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009cea:	8afb      	ldrh	r3, [r7, #22]
 8009cec:	3302      	adds	r3, #2
 8009cee:	82fb      	strh	r3, [r7, #22]
 8009cf0:	8afa      	ldrh	r2, [r7, #22]
 8009cf2:	8abb      	ldrh	r3, [r7, #20]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d3ef      	bcc.n	8009cd8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	701a      	strb	r2, [r3, #0]
  }
}
 8009cfe:	bf00      	nop
 8009d00:	371c      	adds	r7, #28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b085      	sub	sp, #20
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	7812      	ldrb	r2, [r2, #0]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d30:	68fb      	ldr	r3, [r7, #12]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b086      	sub	sp, #24
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	789b      	ldrb	r3, [r3, #2]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d002      	beq.n	8009d5e <USBH_CtlReq+0x20>
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d00f      	beq.n	8009d7c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009d5c:	e027      	b.n	8009dae <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	88fa      	ldrh	r2, [r7, #6]
 8009d68:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2202      	movs	r2, #2
 8009d74:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009d76:	2301      	movs	r3, #1
 8009d78:	75fb      	strb	r3, [r7, #23]
      break;
 8009d7a:	e018      	b.n	8009dae <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 f81b 	bl	8009db8 <USBH_HandleControl>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <USBH_CtlReq+0x54>
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d106      	bne.n	8009da0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2201      	movs	r2, #1
 8009d96:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	761a      	strb	r2, [r3, #24]
      break;
 8009d9e:	e005      	b.n	8009dac <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d102      	bne.n	8009dac <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2201      	movs	r2, #1
 8009daa:	709a      	strb	r2, [r3, #2]
      break;
 8009dac:	bf00      	nop
  }
  return status;
 8009dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af02      	add	r7, sp, #8
 8009dbe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	7e1b      	ldrb	r3, [r3, #24]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	2b0a      	cmp	r3, #10
 8009dd0:	f200 8156 	bhi.w	800a080 <USBH_HandleControl+0x2c8>
 8009dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8009ddc <USBH_HandleControl+0x24>)
 8009dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dda:	bf00      	nop
 8009ddc:	08009e09 	.word	0x08009e09
 8009de0:	08009e23 	.word	0x08009e23
 8009de4:	08009e8d 	.word	0x08009e8d
 8009de8:	08009eb3 	.word	0x08009eb3
 8009dec:	08009eeb 	.word	0x08009eeb
 8009df0:	08009f15 	.word	0x08009f15
 8009df4:	08009f67 	.word	0x08009f67
 8009df8:	08009f89 	.word	0x08009f89
 8009dfc:	08009fc5 	.word	0x08009fc5
 8009e00:	08009feb 	.word	0x08009feb
 8009e04:	0800a029 	.word	0x0800a029
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f103 0110 	add.w	r1, r3, #16
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	795b      	ldrb	r3, [r3, #5]
 8009e12:	461a      	mov	r2, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f943 	bl	800a0a0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	761a      	strb	r2, [r3, #24]
      break;
 8009e20:	e139      	b.n	800a096 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	795b      	ldrb	r3, [r3, #5]
 8009e26:	4619      	mov	r1, r3
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fcc5 	bl	800a7b8 <USBH_LL_GetURBState>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e32:	7bbb      	ldrb	r3, [r7, #14]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d11e      	bne.n	8009e76 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	7c1b      	ldrb	r3, [r3, #16]
 8009e3c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009e40:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	8adb      	ldrh	r3, [r3, #22]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009e4a:	7b7b      	ldrb	r3, [r7, #13]
 8009e4c:	2b80      	cmp	r3, #128	@ 0x80
 8009e4e:	d103      	bne.n	8009e58 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2203      	movs	r2, #3
 8009e54:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e56:	e115      	b.n	800a084 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2205      	movs	r2, #5
 8009e5c:	761a      	strb	r2, [r3, #24]
      break;
 8009e5e:	e111      	b.n	800a084 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009e60:	7b7b      	ldrb	r3, [r7, #13]
 8009e62:	2b80      	cmp	r3, #128	@ 0x80
 8009e64:	d103      	bne.n	8009e6e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2209      	movs	r2, #9
 8009e6a:	761a      	strb	r2, [r3, #24]
      break;
 8009e6c:	e10a      	b.n	800a084 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2207      	movs	r2, #7
 8009e72:	761a      	strb	r2, [r3, #24]
      break;
 8009e74:	e106      	b.n	800a084 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d003      	beq.n	8009e84 <USBH_HandleControl+0xcc>
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	f040 8100 	bne.w	800a084 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	220b      	movs	r2, #11
 8009e88:	761a      	strb	r2, [r3, #24]
      break;
 8009e8a:	e0fb      	b.n	800a084 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6899      	ldr	r1, [r3, #8]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	899a      	ldrh	r2, [r3, #12]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	791b      	ldrb	r3, [r3, #4]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f93a 	bl	800a11e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2204      	movs	r2, #4
 8009eae:	761a      	strb	r2, [r3, #24]
      break;
 8009eb0:	e0f1      	b.n	800a096 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	791b      	ldrb	r3, [r3, #4]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fc7d 	bl	800a7b8 <USBH_LL_GetURBState>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ec2:	7bbb      	ldrb	r3, [r7, #14]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d102      	bne.n	8009ece <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2209      	movs	r2, #9
 8009ecc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009ece:	7bbb      	ldrb	r3, [r7, #14]
 8009ed0:	2b05      	cmp	r3, #5
 8009ed2:	d102      	bne.n	8009eda <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ed8:	e0d6      	b.n	800a088 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009eda:	7bbb      	ldrb	r3, [r7, #14]
 8009edc:	2b04      	cmp	r3, #4
 8009ede:	f040 80d3 	bne.w	800a088 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	220b      	movs	r2, #11
 8009ee6:	761a      	strb	r2, [r3, #24]
      break;
 8009ee8:	e0ce      	b.n	800a088 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6899      	ldr	r1, [r3, #8]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	899a      	ldrh	r2, [r3, #12]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	795b      	ldrb	r3, [r3, #5]
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	9000      	str	r0, [sp, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f8ea 	bl	800a0d4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2206      	movs	r2, #6
 8009f10:	761a      	strb	r2, [r3, #24]
      break;
 8009f12:	e0c0      	b.n	800a096 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	795b      	ldrb	r3, [r3, #5]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fc4c 	bl	800a7b8 <USBH_LL_GetURBState>
 8009f20:	4603      	mov	r3, r0
 8009f22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d103      	bne.n	8009f32 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2207      	movs	r2, #7
 8009f2e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f30:	e0ac      	b.n	800a08c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	2b05      	cmp	r3, #5
 8009f36:	d105      	bne.n	8009f44 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	220c      	movs	r2, #12
 8009f3c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	73fb      	strb	r3, [r7, #15]
      break;
 8009f42:	e0a3      	b.n	800a08c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d103      	bne.n	8009f52 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2205      	movs	r2, #5
 8009f4e:	761a      	strb	r2, [r3, #24]
      break;
 8009f50:	e09c      	b.n	800a08c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
 8009f54:	2b04      	cmp	r3, #4
 8009f56:	f040 8099 	bne.w	800a08c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	220b      	movs	r2, #11
 8009f5e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009f60:	2302      	movs	r3, #2
 8009f62:	73fb      	strb	r3, [r7, #15]
      break;
 8009f64:	e092      	b.n	800a08c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	791b      	ldrb	r3, [r3, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f8d5 	bl	800a11e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2208      	movs	r2, #8
 8009f84:	761a      	strb	r2, [r3, #24]

      break;
 8009f86:	e086      	b.n	800a096 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	791b      	ldrb	r3, [r3, #4]
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fc12 	bl	800a7b8 <USBH_LL_GetURBState>
 8009f94:	4603      	mov	r3, r0
 8009f96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d105      	bne.n	8009faa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	220d      	movs	r2, #13
 8009fa2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009fa8:	e072      	b.n	800a090 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009faa:	7bbb      	ldrb	r3, [r7, #14]
 8009fac:	2b04      	cmp	r3, #4
 8009fae:	d103      	bne.n	8009fb8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	220b      	movs	r2, #11
 8009fb4:	761a      	strb	r2, [r3, #24]
      break;
 8009fb6:	e06b      	b.n	800a090 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	2b05      	cmp	r3, #5
 8009fbc:	d168      	bne.n	800a090 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8009fc2:	e065      	b.n	800a090 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	795b      	ldrb	r3, [r3, #5]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	9200      	str	r2, [sp, #0]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2100      	movs	r1, #0
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f87f 	bl	800a0d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	220a      	movs	r2, #10
 8009fe6:	761a      	strb	r2, [r3, #24]
      break;
 8009fe8:	e055      	b.n	800a096 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	795b      	ldrb	r3, [r3, #5]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fbe1 	bl	800a7b8 <USBH_LL_GetURBState>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009ffa:	7bbb      	ldrb	r3, [r7, #14]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d105      	bne.n	800a00c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	220d      	movs	r2, #13
 800a008:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a00a:	e043      	b.n	800a094 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a00c:	7bbb      	ldrb	r3, [r7, #14]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d103      	bne.n	800a01a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2209      	movs	r2, #9
 800a016:	761a      	strb	r2, [r3, #24]
      break;
 800a018:	e03c      	b.n	800a094 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a01a:	7bbb      	ldrb	r3, [r7, #14]
 800a01c:	2b04      	cmp	r3, #4
 800a01e:	d139      	bne.n	800a094 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	220b      	movs	r2, #11
 800a024:	761a      	strb	r2, [r3, #24]
      break;
 800a026:	e035      	b.n	800a094 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	7e5b      	ldrb	r3, [r3, #25]
 800a02c:	3301      	adds	r3, #1
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	765a      	strb	r2, [r3, #25]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	7e5b      	ldrb	r3, [r3, #25]
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d806      	bhi.n	800a04a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a048:	e025      	b.n	800a096 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a050:	2106      	movs	r1, #6
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	795b      	ldrb	r3, [r3, #5]
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f90c 	bl	800a280 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	791b      	ldrb	r3, [r3, #4]
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f906 	bl	800a280 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a07a:	2302      	movs	r3, #2
 800a07c:	73fb      	strb	r3, [r7, #15]
      break;
 800a07e:	e00a      	b.n	800a096 <USBH_HandleControl+0x2de>

    default:
      break;
 800a080:	bf00      	nop
 800a082:	e008      	b.n	800a096 <USBH_HandleControl+0x2de>
      break;
 800a084:	bf00      	nop
 800a086:	e006      	b.n	800a096 <USBH_HandleControl+0x2de>
      break;
 800a088:	bf00      	nop
 800a08a:	e004      	b.n	800a096 <USBH_HandleControl+0x2de>
      break;
 800a08c:	bf00      	nop
 800a08e:	e002      	b.n	800a096 <USBH_HandleControl+0x2de>
      break;
 800a090:	bf00      	nop
 800a092:	e000      	b.n	800a096 <USBH_HandleControl+0x2de>
      break;
 800a094:	bf00      	nop
  }

  return status;
 800a096:	7bfb      	ldrb	r3, [r7, #15]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b088      	sub	sp, #32
 800a0a4:	af04      	add	r7, sp, #16
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0ae:	79f9      	ldrb	r1, [r7, #7]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	9303      	str	r3, [sp, #12]
 800a0b4:	2308      	movs	r3, #8
 800a0b6:	9302      	str	r3, [sp, #8]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 fb46 	bl	800a756 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af04      	add	r7, sp, #16
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	4611      	mov	r1, r2
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	80fb      	strh	r3, [r7, #6]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0f8:	7979      	ldrb	r1, [r7, #5]
 800a0fa:	7e3b      	ldrb	r3, [r7, #24]
 800a0fc:	9303      	str	r3, [sp, #12]
 800a0fe:	88fb      	ldrh	r3, [r7, #6]
 800a100:	9302      	str	r3, [sp, #8]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	2301      	movs	r3, #1
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	2300      	movs	r3, #0
 800a10c:	2200      	movs	r2, #0
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f000 fb21 	bl	800a756 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b088      	sub	sp, #32
 800a122:	af04      	add	r7, sp, #16
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	4611      	mov	r1, r2
 800a12a:	461a      	mov	r2, r3
 800a12c:	460b      	mov	r3, r1
 800a12e:	80fb      	strh	r3, [r7, #6]
 800a130:	4613      	mov	r3, r2
 800a132:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a134:	7979      	ldrb	r1, [r7, #5]
 800a136:	2300      	movs	r3, #0
 800a138:	9303      	str	r3, [sp, #12]
 800a13a:	88fb      	ldrh	r3, [r7, #6]
 800a13c:	9302      	str	r3, [sp, #8]
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	9301      	str	r3, [sp, #4]
 800a142:	2301      	movs	r3, #1
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	2300      	movs	r3, #0
 800a148:	2201      	movs	r2, #1
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f000 fb03 	bl	800a756 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a150:	2300      	movs	r3, #0

}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b088      	sub	sp, #32
 800a15e:	af04      	add	r7, sp, #16
 800a160:	60f8      	str	r0, [r7, #12]
 800a162:	60b9      	str	r1, [r7, #8]
 800a164:	4611      	mov	r1, r2
 800a166:	461a      	mov	r2, r3
 800a168:	460b      	mov	r3, r1
 800a16a:	80fb      	strh	r3, [r7, #6]
 800a16c:	4613      	mov	r3, r2
 800a16e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a17a:	2300      	movs	r3, #0
 800a17c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a17e:	7979      	ldrb	r1, [r7, #5]
 800a180:	7e3b      	ldrb	r3, [r7, #24]
 800a182:	9303      	str	r3, [sp, #12]
 800a184:	88fb      	ldrh	r3, [r7, #6]
 800a186:	9302      	str	r3, [sp, #8]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	9301      	str	r3, [sp, #4]
 800a18c:	2301      	movs	r3, #1
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	2302      	movs	r3, #2
 800a192:	2200      	movs	r2, #0
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 fade 	bl	800a756 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af04      	add	r7, sp, #16
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	80fb      	strh	r3, [r7, #6]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1ba:	7979      	ldrb	r1, [r7, #5]
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9303      	str	r3, [sp, #12]
 800a1c0:	88fb      	ldrh	r3, [r7, #6]
 800a1c2:	9302      	str	r3, [sp, #8]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f000 fac0 	bl	800a756 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b086      	sub	sp, #24
 800a1e4:	af04      	add	r7, sp, #16
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	4608      	mov	r0, r1
 800a1ea:	4611      	mov	r1, r2
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	70fb      	strb	r3, [r7, #3]
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	70bb      	strb	r3, [r7, #2]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a1fa:	7878      	ldrb	r0, [r7, #1]
 800a1fc:	78ba      	ldrb	r2, [r7, #2]
 800a1fe:	78f9      	ldrb	r1, [r7, #3]
 800a200:	8b3b      	ldrh	r3, [r7, #24]
 800a202:	9302      	str	r3, [sp, #8]
 800a204:	7d3b      	ldrb	r3, [r7, #20]
 800a206:	9301      	str	r3, [sp, #4]
 800a208:	7c3b      	ldrb	r3, [r7, #16]
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	4603      	mov	r3, r0
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fa53 	bl	800a6ba <USBH_LL_OpenPipe>

  return USBH_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b082      	sub	sp, #8
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	460b      	mov	r3, r1
 800a228:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a22a:	78fb      	ldrb	r3, [r7, #3]
 800a22c:	4619      	mov	r1, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fa72 	bl	800a718 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	460b      	mov	r3, r1
 800a248:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f836 	bl	800a2bc <USBH_GetFreePipe>
 800a250:	4603      	mov	r3, r0
 800a252:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a254:	89fb      	ldrh	r3, [r7, #14]
 800a256:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d00a      	beq.n	800a274 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a25e:	78fa      	ldrb	r2, [r7, #3]
 800a260:	89fb      	ldrh	r3, [r7, #14]
 800a262:	f003 030f 	and.w	r3, r3, #15
 800a266:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a26a:	6879      	ldr	r1, [r7, #4]
 800a26c:	33e0      	adds	r3, #224	@ 0xe0
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	440b      	add	r3, r1
 800a272:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a274:	89fb      	ldrh	r3, [r7, #14]
 800a276:	b2db      	uxtb	r3, r3
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a28c:	78fb      	ldrb	r3, [r7, #3]
 800a28e:	2b0f      	cmp	r3, #15
 800a290:	d80d      	bhi.n	800a2ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a292:	78fb      	ldrb	r3, [r7, #3]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	33e0      	adds	r3, #224	@ 0xe0
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	78fb      	ldrb	r3, [r7, #3]
 800a2a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	33e0      	adds	r3, #224	@ 0xe0
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	440b      	add	r3, r1
 800a2ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73fb      	strb	r3, [r7, #15]
 800a2cc:	e00f      	b.n	800a2ee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	33e0      	adds	r3, #224	@ 0xe0
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d102      	bne.n	800a2e8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	e007      	b.n	800a2f8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	73fb      	strb	r3, [r7, #15]
 800a2ee:	7bfb      	ldrb	r3, [r7, #15]
 800a2f0:	2b0f      	cmp	r3, #15
 800a2f2:	d9ec      	bls.n	800a2ce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a2f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a308:	2201      	movs	r2, #1
 800a30a:	490e      	ldr	r1, [pc, #56]	@ (800a344 <MX_USB_HOST_Init+0x40>)
 800a30c:	480e      	ldr	r0, [pc, #56]	@ (800a348 <MX_USB_HOST_Init+0x44>)
 800a30e:	f7fe fb15 	bl	800893c <USBH_Init>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a318:	f7f7 f85c 	bl	80013d4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a31c:	490b      	ldr	r1, [pc, #44]	@ (800a34c <MX_USB_HOST_Init+0x48>)
 800a31e:	480a      	ldr	r0, [pc, #40]	@ (800a348 <MX_USB_HOST_Init+0x44>)
 800a320:	f7fe fbb9 	bl	8008a96 <USBH_RegisterClass>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a32a:	f7f7 f853 	bl	80013d4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a32e:	4806      	ldr	r0, [pc, #24]	@ (800a348 <MX_USB_HOST_Init+0x44>)
 800a330:	f7fe fc3d 	bl	8008bae <USBH_Start>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a33a:	f7f7 f84b 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a33e:	bf00      	nop
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	0800a365 	.word	0x0800a365
 800a348:	20000238 	.word	0x20000238
 800a34c:	2000000c 	.word	0x2000000c

0800a350 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a354:	4802      	ldr	r0, [pc, #8]	@ (800a360 <MX_USB_HOST_Process+0x10>)
 800a356:	f7fe fc3b 	bl	8008bd0 <USBH_Process>
}
 800a35a:	bf00      	nop
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	20000238 	.word	0x20000238

0800a364 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	460b      	mov	r3, r1
 800a36e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	3b01      	subs	r3, #1
 800a374:	2b04      	cmp	r3, #4
 800a376:	d819      	bhi.n	800a3ac <USBH_UserProcess+0x48>
 800a378:	a201      	add	r2, pc, #4	@ (adr r2, 800a380 <USBH_UserProcess+0x1c>)
 800a37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37e:	bf00      	nop
 800a380:	0800a3ad 	.word	0x0800a3ad
 800a384:	0800a39d 	.word	0x0800a39d
 800a388:	0800a3ad 	.word	0x0800a3ad
 800a38c:	0800a3a5 	.word	0x0800a3a5
 800a390:	0800a395 	.word	0x0800a395
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a394:	4b09      	ldr	r3, [pc, #36]	@ (800a3bc <USBH_UserProcess+0x58>)
 800a396:	2203      	movs	r2, #3
 800a398:	701a      	strb	r2, [r3, #0]
  break;
 800a39a:	e008      	b.n	800a3ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a39c:	4b07      	ldr	r3, [pc, #28]	@ (800a3bc <USBH_UserProcess+0x58>)
 800a39e:	2202      	movs	r2, #2
 800a3a0:	701a      	strb	r2, [r3, #0]
  break;
 800a3a2:	e004      	b.n	800a3ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a3a4:	4b05      	ldr	r3, [pc, #20]	@ (800a3bc <USBH_UserProcess+0x58>)
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	701a      	strb	r2, [r3, #0]
  break;
 800a3aa:	e000      	b.n	800a3ae <USBH_UserProcess+0x4a>

  default:
  break;
 800a3ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	20000610 	.word	0x20000610

0800a3c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08a      	sub	sp, #40	@ 0x28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3c8:	f107 0314 	add.w	r3, r7, #20
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	605a      	str	r2, [r3, #4]
 800a3d2:	609a      	str	r2, [r3, #8]
 800a3d4:	60da      	str	r2, [r3, #12]
 800a3d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3e0:	d147      	bne.n	800a472 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	613b      	str	r3, [r7, #16]
 800a3e6:	4b25      	ldr	r3, [pc, #148]	@ (800a47c <HAL_HCD_MspInit+0xbc>)
 800a3e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ea:	4a24      	ldr	r2, [pc, #144]	@ (800a47c <HAL_HCD_MspInit+0xbc>)
 800a3ec:	f043 0301 	orr.w	r3, r3, #1
 800a3f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3f2:	4b22      	ldr	r3, [pc, #136]	@ (800a47c <HAL_HCD_MspInit+0xbc>)
 800a3f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	613b      	str	r3, [r7, #16]
 800a3fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a3fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a404:	2300      	movs	r3, #0
 800a406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a408:	2300      	movs	r3, #0
 800a40a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a40c:	f107 0314 	add.w	r3, r7, #20
 800a410:	4619      	mov	r1, r3
 800a412:	481b      	ldr	r0, [pc, #108]	@ (800a480 <HAL_HCD_MspInit+0xc0>)
 800a414:	f7f7 fc70 	bl	8001cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a418:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a41c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a41e:	2302      	movs	r3, #2
 800a420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a422:	2300      	movs	r3, #0
 800a424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a426:	2300      	movs	r3, #0
 800a428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a42a:	230a      	movs	r3, #10
 800a42c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a42e:	f107 0314 	add.w	r3, r7, #20
 800a432:	4619      	mov	r1, r3
 800a434:	4812      	ldr	r0, [pc, #72]	@ (800a480 <HAL_HCD_MspInit+0xc0>)
 800a436:	f7f7 fc5f 	bl	8001cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a43a:	4b10      	ldr	r3, [pc, #64]	@ (800a47c <HAL_HCD_MspInit+0xbc>)
 800a43c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a43e:	4a0f      	ldr	r2, [pc, #60]	@ (800a47c <HAL_HCD_MspInit+0xbc>)
 800a440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a444:	6353      	str	r3, [r2, #52]	@ 0x34
 800a446:	2300      	movs	r3, #0
 800a448:	60fb      	str	r3, [r7, #12]
 800a44a:	4b0c      	ldr	r3, [pc, #48]	@ (800a47c <HAL_HCD_MspInit+0xbc>)
 800a44c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a44e:	4a0b      	ldr	r2, [pc, #44]	@ (800a47c <HAL_HCD_MspInit+0xbc>)
 800a450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a454:	6453      	str	r3, [r2, #68]	@ 0x44
 800a456:	4b09      	ldr	r3, [pc, #36]	@ (800a47c <HAL_HCD_MspInit+0xbc>)
 800a458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a45a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a462:	2200      	movs	r2, #0
 800a464:	2100      	movs	r1, #0
 800a466:	2043      	movs	r0, #67	@ 0x43
 800a468:	f7f7 fc0f 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a46c:	2043      	movs	r0, #67	@ 0x43
 800a46e:	f7f7 fc28 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a472:	bf00      	nop
 800a474:	3728      	adds	r7, #40	@ 0x28
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	40023800 	.word	0x40023800
 800a480:	40020000 	.word	0x40020000

0800a484 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a492:	4618      	mov	r0, r3
 800a494:	f7fe ff73 	bl	800937e <USBH_LL_IncTimer>
}
 800a498:	bf00      	nop
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe ffab 	bl	800940a <USBH_LL_Connect>
}
 800a4b4:	bf00      	nop
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fe ffb4 	bl	8009438 <USBH_LL_Disconnect>
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	70fb      	strb	r3, [r7, #3]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a502:	4618      	mov	r0, r3
 800a504:	f7fe ff65 	bl	80093d2 <USBH_LL_PortEnabled>
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe ff65 	bl	80093ee <USBH_LL_PortDisabled>
}
 800a524:	bf00      	nop
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d12a      	bne.n	800a594 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a53e:	4a18      	ldr	r2, [pc, #96]	@ (800a5a0 <USBH_LL_Init+0x74>)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a15      	ldr	r2, [pc, #84]	@ (800a5a0 <USBH_LL_Init+0x74>)
 800a54a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a54e:	4b14      	ldr	r3, [pc, #80]	@ (800a5a0 <USBH_LL_Init+0x74>)
 800a550:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a554:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a556:	4b12      	ldr	r3, [pc, #72]	@ (800a5a0 <USBH_LL_Init+0x74>)
 800a558:	2208      	movs	r2, #8
 800a55a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a55c:	4b10      	ldr	r3, [pc, #64]	@ (800a5a0 <USBH_LL_Init+0x74>)
 800a55e:	2201      	movs	r2, #1
 800a560:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a562:	4b0f      	ldr	r3, [pc, #60]	@ (800a5a0 <USBH_LL_Init+0x74>)
 800a564:	2200      	movs	r2, #0
 800a566:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a568:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a0 <USBH_LL_Init+0x74>)
 800a56a:	2202      	movs	r2, #2
 800a56c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a56e:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a0 <USBH_LL_Init+0x74>)
 800a570:	2200      	movs	r2, #0
 800a572:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a574:	480a      	ldr	r0, [pc, #40]	@ (800a5a0 <USBH_LL_Init+0x74>)
 800a576:	f7f7 fd98 	bl	80020aa <HAL_HCD_Init>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d001      	beq.n	800a584 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a580:	f7f6 ff28 	bl	80013d4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a584:	4806      	ldr	r0, [pc, #24]	@ (800a5a0 <USBH_LL_Init+0x74>)
 800a586:	f7f8 f9f9 	bl	800297c <HAL_HCD_GetCurrentFrame>
 800a58a:	4603      	mov	r3, r0
 800a58c:	4619      	mov	r1, r3
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7fe fee6 	bl	8009360 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20000614 	.word	0x20000614

0800a5a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7f8 f966 	bl	800288c <HAL_HCD_Start>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 f95e 	bl	800a888 <USBH_Get_USB_Status>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7f8 f96e 	bl	80028d2 <HAL_HCD_Stop>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 f943 	bl	800a888 <USBH_Get_USB_Status>
 800a602:	4603      	mov	r3, r0
 800a604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a606:	7bbb      	ldrb	r3, [r7, #14]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a618:	2301      	movs	r3, #1
 800a61a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a622:	4618      	mov	r0, r3
 800a624:	f7f8 f9b8 	bl	8002998 <HAL_HCD_GetCurrentSpeed>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d00c      	beq.n	800a648 <USBH_LL_GetSpeed+0x38>
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d80d      	bhi.n	800a64e <USBH_LL_GetSpeed+0x3e>
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <USBH_LL_GetSpeed+0x2c>
 800a636:	2b01      	cmp	r3, #1
 800a638:	d003      	beq.n	800a642 <USBH_LL_GetSpeed+0x32>
 800a63a:	e008      	b.n	800a64e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a63c:	2300      	movs	r3, #0
 800a63e:	73fb      	strb	r3, [r7, #15]
    break;
 800a640:	e008      	b.n	800a654 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a642:	2301      	movs	r3, #1
 800a644:	73fb      	strb	r3, [r7, #15]
    break;
 800a646:	e005      	b.n	800a654 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a648:	2302      	movs	r3, #2
 800a64a:	73fb      	strb	r3, [r7, #15]
    break;
 800a64c:	e002      	b.n	800a654 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a64e:	2301      	movs	r3, #1
 800a650:	73fb      	strb	r3, [r7, #15]
    break;
 800a652:	bf00      	nop
  }
  return  speed;
 800a654:	7bfb      	ldrb	r3, [r7, #15]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a674:	4618      	mov	r0, r3
 800a676:	f7f8 f949 	bl	800290c <HAL_HCD_ResetPort>
 800a67a:	4603      	mov	r3, r0
 800a67c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	4618      	mov	r0, r3
 800a682:	f000 f901 	bl	800a888 <USBH_Get_USB_Status>
 800a686:	4603      	mov	r3, r0
 800a688:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a68a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a6a6:	78fa      	ldrb	r2, [r7, #3]
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7f8 f951 	bl	8002952 <HAL_HCD_HC_GetXferCount>
 800a6b0:	4603      	mov	r3, r0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a6ba:	b590      	push	{r4, r7, lr}
 800a6bc:	b089      	sub	sp, #36	@ 0x24
 800a6be:	af04      	add	r7, sp, #16
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	4608      	mov	r0, r1
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	70fb      	strb	r3, [r7, #3]
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	70bb      	strb	r3, [r7, #2]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a6e2:	787c      	ldrb	r4, [r7, #1]
 800a6e4:	78ba      	ldrb	r2, [r7, #2]
 800a6e6:	78f9      	ldrb	r1, [r7, #3]
 800a6e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a6ea:	9302      	str	r3, [sp, #8]
 800a6ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a6f0:	9301      	str	r3, [sp, #4]
 800a6f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	4623      	mov	r3, r4
 800a6fa:	f7f7 fd3d 	bl	8002178 <HAL_HCD_HC_Init>
 800a6fe:	4603      	mov	r3, r0
 800a700:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a702:	7bfb      	ldrb	r3, [r7, #15]
 800a704:	4618      	mov	r0, r3
 800a706:	f000 f8bf 	bl	800a888 <USBH_Get_USB_Status>
 800a70a:	4603      	mov	r3, r0
 800a70c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	bd90      	pop	{r4, r7, pc}

0800a718 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a728:	2300      	movs	r3, #0
 800a72a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a732:	78fa      	ldrb	r2, [r7, #3]
 800a734:	4611      	mov	r1, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f7f7 fdd6 	bl	80022e8 <HAL_HCD_HC_Halt>
 800a73c:	4603      	mov	r3, r0
 800a73e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	4618      	mov	r0, r3
 800a744:	f000 f8a0 	bl	800a888 <USBH_Get_USB_Status>
 800a748:	4603      	mov	r3, r0
 800a74a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a74c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a756:	b590      	push	{r4, r7, lr}
 800a758:	b089      	sub	sp, #36	@ 0x24
 800a75a:	af04      	add	r7, sp, #16
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	4608      	mov	r0, r1
 800a760:	4611      	mov	r1, r2
 800a762:	461a      	mov	r2, r3
 800a764:	4603      	mov	r3, r0
 800a766:	70fb      	strb	r3, [r7, #3]
 800a768:	460b      	mov	r3, r1
 800a76a:	70bb      	strb	r3, [r7, #2]
 800a76c:	4613      	mov	r3, r2
 800a76e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a77e:	787c      	ldrb	r4, [r7, #1]
 800a780:	78ba      	ldrb	r2, [r7, #2]
 800a782:	78f9      	ldrb	r1, [r7, #3]
 800a784:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a788:	9303      	str	r3, [sp, #12]
 800a78a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a78c:	9302      	str	r3, [sp, #8]
 800a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a790:	9301      	str	r3, [sp, #4]
 800a792:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	4623      	mov	r3, r4
 800a79a:	f7f7 fdc9 	bl	8002330 <HAL_HCD_HC_SubmitRequest>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 f86f 	bl	800a888 <USBH_Get_USB_Status>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd90      	pop	{r4, r7, pc}

0800a7b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a7ca:	78fa      	ldrb	r2, [r7, #3]
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7f8 f8aa 	bl	8002928 <HAL_HCD_HC_GetURBState>
 800a7d4:	4603      	mov	r3, r0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d103      	bne.n	800a7fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 f872 	bl	800a8e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a7fc:	20c8      	movs	r0, #200	@ 0xc8
 800a7fe:	f7f7 f945 	bl	8001a8c <HAL_Delay>
  return USBH_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
 800a818:	4613      	mov	r3, r2
 800a81a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a822:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a824:	78fa      	ldrb	r2, [r7, #3]
 800a826:	68f9      	ldr	r1, [r7, #12]
 800a828:	4613      	mov	r3, r2
 800a82a:	011b      	lsls	r3, r3, #4
 800a82c:	1a9b      	subs	r3, r3, r2
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	440b      	add	r3, r1
 800a832:	3317      	adds	r3, #23
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00a      	beq.n	800a850 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a83a:	78fa      	ldrb	r2, [r7, #3]
 800a83c:	68f9      	ldr	r1, [r7, #12]
 800a83e:	4613      	mov	r3, r2
 800a840:	011b      	lsls	r3, r3, #4
 800a842:	1a9b      	subs	r3, r3, r2
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	440b      	add	r3, r1
 800a848:	333c      	adds	r3, #60	@ 0x3c
 800a84a:	78ba      	ldrb	r2, [r7, #2]
 800a84c:	701a      	strb	r2, [r3, #0]
 800a84e:	e009      	b.n	800a864 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a850:	78fa      	ldrb	r2, [r7, #3]
 800a852:	68f9      	ldr	r1, [r7, #12]
 800a854:	4613      	mov	r3, r2
 800a856:	011b      	lsls	r3, r3, #4
 800a858:	1a9b      	subs	r3, r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	440b      	add	r3, r1
 800a85e:	333d      	adds	r3, #61	@ 0x3d
 800a860:	78ba      	ldrb	r2, [r7, #2]
 800a862:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7f7 f906 	bl	8001a8c <HAL_Delay>
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	4603      	mov	r3, r0
 800a890:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d817      	bhi.n	800a8cc <USBH_Get_USB_Status+0x44>
 800a89c:	a201      	add	r2, pc, #4	@ (adr r2, 800a8a4 <USBH_Get_USB_Status+0x1c>)
 800a89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a2:	bf00      	nop
 800a8a4:	0800a8b5 	.word	0x0800a8b5
 800a8a8:	0800a8bb 	.word	0x0800a8bb
 800a8ac:	0800a8c1 	.word	0x0800a8c1
 800a8b0:	0800a8c7 	.word	0x0800a8c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b8:	e00b      	b.n	800a8d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8be:	e008      	b.n	800a8d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8c4:	e005      	b.n	800a8d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ca:	e002      	b.n	800a8d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d0:	bf00      	nop
  }
  return usb_status;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a8ea:	79fb      	ldrb	r3, [r7, #7]
 800a8ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d102      	bne.n	800a8fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]
 800a8f8:	e001      	b.n	800a8fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a8fe:	7bfb      	ldrb	r3, [r7, #15]
 800a900:	461a      	mov	r2, r3
 800a902:	2101      	movs	r1, #1
 800a904:	4803      	ldr	r0, [pc, #12]	@ (800a914 <MX_DriverVbusFS+0x34>)
 800a906:	f7f7 fb93 	bl	8002030 <HAL_GPIO_WritePin>
}
 800a90a:	bf00      	nop
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	40020800 	.word	0x40020800

0800a918 <malloc>:
 800a918:	4b02      	ldr	r3, [pc, #8]	@ (800a924 <malloc+0xc>)
 800a91a:	4601      	mov	r1, r0
 800a91c:	6818      	ldr	r0, [r3, #0]
 800a91e:	f000 b82d 	b.w	800a97c <_malloc_r>
 800a922:	bf00      	nop
 800a924:	2000002c 	.word	0x2000002c

0800a928 <free>:
 800a928:	4b02      	ldr	r3, [pc, #8]	@ (800a934 <free+0xc>)
 800a92a:	4601      	mov	r1, r0
 800a92c:	6818      	ldr	r0, [r3, #0]
 800a92e:	f000 b8f5 	b.w	800ab1c <_free_r>
 800a932:	bf00      	nop
 800a934:	2000002c 	.word	0x2000002c

0800a938 <sbrk_aligned>:
 800a938:	b570      	push	{r4, r5, r6, lr}
 800a93a:	4e0f      	ldr	r6, [pc, #60]	@ (800a978 <sbrk_aligned+0x40>)
 800a93c:	460c      	mov	r4, r1
 800a93e:	6831      	ldr	r1, [r6, #0]
 800a940:	4605      	mov	r5, r0
 800a942:	b911      	cbnz	r1, 800a94a <sbrk_aligned+0x12>
 800a944:	f000 f8ae 	bl	800aaa4 <_sbrk_r>
 800a948:	6030      	str	r0, [r6, #0]
 800a94a:	4621      	mov	r1, r4
 800a94c:	4628      	mov	r0, r5
 800a94e:	f000 f8a9 	bl	800aaa4 <_sbrk_r>
 800a952:	1c43      	adds	r3, r0, #1
 800a954:	d103      	bne.n	800a95e <sbrk_aligned+0x26>
 800a956:	f04f 34ff 	mov.w	r4, #4294967295
 800a95a:	4620      	mov	r0, r4
 800a95c:	bd70      	pop	{r4, r5, r6, pc}
 800a95e:	1cc4      	adds	r4, r0, #3
 800a960:	f024 0403 	bic.w	r4, r4, #3
 800a964:	42a0      	cmp	r0, r4
 800a966:	d0f8      	beq.n	800a95a <sbrk_aligned+0x22>
 800a968:	1a21      	subs	r1, r4, r0
 800a96a:	4628      	mov	r0, r5
 800a96c:	f000 f89a 	bl	800aaa4 <_sbrk_r>
 800a970:	3001      	adds	r0, #1
 800a972:	d1f2      	bne.n	800a95a <sbrk_aligned+0x22>
 800a974:	e7ef      	b.n	800a956 <sbrk_aligned+0x1e>
 800a976:	bf00      	nop
 800a978:	200009f4 	.word	0x200009f4

0800a97c <_malloc_r>:
 800a97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a980:	1ccd      	adds	r5, r1, #3
 800a982:	f025 0503 	bic.w	r5, r5, #3
 800a986:	3508      	adds	r5, #8
 800a988:	2d0c      	cmp	r5, #12
 800a98a:	bf38      	it	cc
 800a98c:	250c      	movcc	r5, #12
 800a98e:	2d00      	cmp	r5, #0
 800a990:	4606      	mov	r6, r0
 800a992:	db01      	blt.n	800a998 <_malloc_r+0x1c>
 800a994:	42a9      	cmp	r1, r5
 800a996:	d904      	bls.n	800a9a2 <_malloc_r+0x26>
 800a998:	230c      	movs	r3, #12
 800a99a:	6033      	str	r3, [r6, #0]
 800a99c:	2000      	movs	r0, #0
 800a99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa78 <_malloc_r+0xfc>
 800a9a6:	f000 f869 	bl	800aa7c <__malloc_lock>
 800a9aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ae:	461c      	mov	r4, r3
 800a9b0:	bb44      	cbnz	r4, 800aa04 <_malloc_r+0x88>
 800a9b2:	4629      	mov	r1, r5
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f7ff ffbf 	bl	800a938 <sbrk_aligned>
 800a9ba:	1c43      	adds	r3, r0, #1
 800a9bc:	4604      	mov	r4, r0
 800a9be:	d158      	bne.n	800aa72 <_malloc_r+0xf6>
 800a9c0:	f8d8 4000 	ldr.w	r4, [r8]
 800a9c4:	4627      	mov	r7, r4
 800a9c6:	2f00      	cmp	r7, #0
 800a9c8:	d143      	bne.n	800aa52 <_malloc_r+0xd6>
 800a9ca:	2c00      	cmp	r4, #0
 800a9cc:	d04b      	beq.n	800aa66 <_malloc_r+0xea>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	eb04 0903 	add.w	r9, r4, r3
 800a9d8:	f000 f864 	bl	800aaa4 <_sbrk_r>
 800a9dc:	4581      	cmp	r9, r0
 800a9de:	d142      	bne.n	800aa66 <_malloc_r+0xea>
 800a9e0:	6821      	ldr	r1, [r4, #0]
 800a9e2:	1a6d      	subs	r5, r5, r1
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f7ff ffa6 	bl	800a938 <sbrk_aligned>
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	d03a      	beq.n	800aa66 <_malloc_r+0xea>
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	442b      	add	r3, r5
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	bb62      	cbnz	r2, 800aa58 <_malloc_r+0xdc>
 800a9fe:	f8c8 7000 	str.w	r7, [r8]
 800aa02:	e00f      	b.n	800aa24 <_malloc_r+0xa8>
 800aa04:	6822      	ldr	r2, [r4, #0]
 800aa06:	1b52      	subs	r2, r2, r5
 800aa08:	d420      	bmi.n	800aa4c <_malloc_r+0xd0>
 800aa0a:	2a0b      	cmp	r2, #11
 800aa0c:	d917      	bls.n	800aa3e <_malloc_r+0xc2>
 800aa0e:	1961      	adds	r1, r4, r5
 800aa10:	42a3      	cmp	r3, r4
 800aa12:	6025      	str	r5, [r4, #0]
 800aa14:	bf18      	it	ne
 800aa16:	6059      	strne	r1, [r3, #4]
 800aa18:	6863      	ldr	r3, [r4, #4]
 800aa1a:	bf08      	it	eq
 800aa1c:	f8c8 1000 	streq.w	r1, [r8]
 800aa20:	5162      	str	r2, [r4, r5]
 800aa22:	604b      	str	r3, [r1, #4]
 800aa24:	4630      	mov	r0, r6
 800aa26:	f000 f82f 	bl	800aa88 <__malloc_unlock>
 800aa2a:	f104 000b 	add.w	r0, r4, #11
 800aa2e:	1d23      	adds	r3, r4, #4
 800aa30:	f020 0007 	bic.w	r0, r0, #7
 800aa34:	1ac2      	subs	r2, r0, r3
 800aa36:	bf1c      	itt	ne
 800aa38:	1a1b      	subne	r3, r3, r0
 800aa3a:	50a3      	strne	r3, [r4, r2]
 800aa3c:	e7af      	b.n	800a99e <_malloc_r+0x22>
 800aa3e:	6862      	ldr	r2, [r4, #4]
 800aa40:	42a3      	cmp	r3, r4
 800aa42:	bf0c      	ite	eq
 800aa44:	f8c8 2000 	streq.w	r2, [r8]
 800aa48:	605a      	strne	r2, [r3, #4]
 800aa4a:	e7eb      	b.n	800aa24 <_malloc_r+0xa8>
 800aa4c:	4623      	mov	r3, r4
 800aa4e:	6864      	ldr	r4, [r4, #4]
 800aa50:	e7ae      	b.n	800a9b0 <_malloc_r+0x34>
 800aa52:	463c      	mov	r4, r7
 800aa54:	687f      	ldr	r7, [r7, #4]
 800aa56:	e7b6      	b.n	800a9c6 <_malloc_r+0x4a>
 800aa58:	461a      	mov	r2, r3
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	d1fb      	bne.n	800aa58 <_malloc_r+0xdc>
 800aa60:	2300      	movs	r3, #0
 800aa62:	6053      	str	r3, [r2, #4]
 800aa64:	e7de      	b.n	800aa24 <_malloc_r+0xa8>
 800aa66:	230c      	movs	r3, #12
 800aa68:	6033      	str	r3, [r6, #0]
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f000 f80c 	bl	800aa88 <__malloc_unlock>
 800aa70:	e794      	b.n	800a99c <_malloc_r+0x20>
 800aa72:	6005      	str	r5, [r0, #0]
 800aa74:	e7d6      	b.n	800aa24 <_malloc_r+0xa8>
 800aa76:	bf00      	nop
 800aa78:	200009f8 	.word	0x200009f8

0800aa7c <__malloc_lock>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	@ (800aa84 <__malloc_lock+0x8>)
 800aa7e:	f000 b84b 	b.w	800ab18 <__retarget_lock_acquire_recursive>
 800aa82:	bf00      	nop
 800aa84:	20000b38 	.word	0x20000b38

0800aa88 <__malloc_unlock>:
 800aa88:	4801      	ldr	r0, [pc, #4]	@ (800aa90 <__malloc_unlock+0x8>)
 800aa8a:	f000 b846 	b.w	800ab1a <__retarget_lock_release_recursive>
 800aa8e:	bf00      	nop
 800aa90:	20000b38 	.word	0x20000b38

0800aa94 <memset>:
 800aa94:	4402      	add	r2, r0
 800aa96:	4603      	mov	r3, r0
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d100      	bne.n	800aa9e <memset+0xa>
 800aa9c:	4770      	bx	lr
 800aa9e:	f803 1b01 	strb.w	r1, [r3], #1
 800aaa2:	e7f9      	b.n	800aa98 <memset+0x4>

0800aaa4 <_sbrk_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4d06      	ldr	r5, [pc, #24]	@ (800aac0 <_sbrk_r+0x1c>)
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	602b      	str	r3, [r5, #0]
 800aab0:	f7f6 ff08 	bl	80018c4 <_sbrk>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d102      	bne.n	800aabe <_sbrk_r+0x1a>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	b103      	cbz	r3, 800aabe <_sbrk_r+0x1a>
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	20000b34 	.word	0x20000b34

0800aac4 <__errno>:
 800aac4:	4b01      	ldr	r3, [pc, #4]	@ (800aacc <__errno+0x8>)
 800aac6:	6818      	ldr	r0, [r3, #0]
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	2000002c 	.word	0x2000002c

0800aad0 <__libc_init_array>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	4d0d      	ldr	r5, [pc, #52]	@ (800ab08 <__libc_init_array+0x38>)
 800aad4:	4c0d      	ldr	r4, [pc, #52]	@ (800ab0c <__libc_init_array+0x3c>)
 800aad6:	1b64      	subs	r4, r4, r5
 800aad8:	10a4      	asrs	r4, r4, #2
 800aada:	2600      	movs	r6, #0
 800aadc:	42a6      	cmp	r6, r4
 800aade:	d109      	bne.n	800aaf4 <__libc_init_array+0x24>
 800aae0:	4d0b      	ldr	r5, [pc, #44]	@ (800ab10 <__libc_init_array+0x40>)
 800aae2:	4c0c      	ldr	r4, [pc, #48]	@ (800ab14 <__libc_init_array+0x44>)
 800aae4:	f000 f864 	bl	800abb0 <_init>
 800aae8:	1b64      	subs	r4, r4, r5
 800aaea:	10a4      	asrs	r4, r4, #2
 800aaec:	2600      	movs	r6, #0
 800aaee:	42a6      	cmp	r6, r4
 800aaf0:	d105      	bne.n	800aafe <__libc_init_array+0x2e>
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
 800aaf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaf8:	4798      	blx	r3
 800aafa:	3601      	adds	r6, #1
 800aafc:	e7ee      	b.n	800aadc <__libc_init_array+0xc>
 800aafe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab02:	4798      	blx	r3
 800ab04:	3601      	adds	r6, #1
 800ab06:	e7f2      	b.n	800aaee <__libc_init_array+0x1e>
 800ab08:	0800abec 	.word	0x0800abec
 800ab0c:	0800abec 	.word	0x0800abec
 800ab10:	0800abec 	.word	0x0800abec
 800ab14:	0800abf0 	.word	0x0800abf0

0800ab18 <__retarget_lock_acquire_recursive>:
 800ab18:	4770      	bx	lr

0800ab1a <__retarget_lock_release_recursive>:
 800ab1a:	4770      	bx	lr

0800ab1c <_free_r>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	4605      	mov	r5, r0
 800ab20:	2900      	cmp	r1, #0
 800ab22:	d041      	beq.n	800aba8 <_free_r+0x8c>
 800ab24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab28:	1f0c      	subs	r4, r1, #4
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	bfb8      	it	lt
 800ab2e:	18e4      	addlt	r4, r4, r3
 800ab30:	f7ff ffa4 	bl	800aa7c <__malloc_lock>
 800ab34:	4a1d      	ldr	r2, [pc, #116]	@ (800abac <_free_r+0x90>)
 800ab36:	6813      	ldr	r3, [r2, #0]
 800ab38:	b933      	cbnz	r3, 800ab48 <_free_r+0x2c>
 800ab3a:	6063      	str	r3, [r4, #4]
 800ab3c:	6014      	str	r4, [r2, #0]
 800ab3e:	4628      	mov	r0, r5
 800ab40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab44:	f7ff bfa0 	b.w	800aa88 <__malloc_unlock>
 800ab48:	42a3      	cmp	r3, r4
 800ab4a:	d908      	bls.n	800ab5e <_free_r+0x42>
 800ab4c:	6820      	ldr	r0, [r4, #0]
 800ab4e:	1821      	adds	r1, r4, r0
 800ab50:	428b      	cmp	r3, r1
 800ab52:	bf01      	itttt	eq
 800ab54:	6819      	ldreq	r1, [r3, #0]
 800ab56:	685b      	ldreq	r3, [r3, #4]
 800ab58:	1809      	addeq	r1, r1, r0
 800ab5a:	6021      	streq	r1, [r4, #0]
 800ab5c:	e7ed      	b.n	800ab3a <_free_r+0x1e>
 800ab5e:	461a      	mov	r2, r3
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	b10b      	cbz	r3, 800ab68 <_free_r+0x4c>
 800ab64:	42a3      	cmp	r3, r4
 800ab66:	d9fa      	bls.n	800ab5e <_free_r+0x42>
 800ab68:	6811      	ldr	r1, [r2, #0]
 800ab6a:	1850      	adds	r0, r2, r1
 800ab6c:	42a0      	cmp	r0, r4
 800ab6e:	d10b      	bne.n	800ab88 <_free_r+0x6c>
 800ab70:	6820      	ldr	r0, [r4, #0]
 800ab72:	4401      	add	r1, r0
 800ab74:	1850      	adds	r0, r2, r1
 800ab76:	4283      	cmp	r3, r0
 800ab78:	6011      	str	r1, [r2, #0]
 800ab7a:	d1e0      	bne.n	800ab3e <_free_r+0x22>
 800ab7c:	6818      	ldr	r0, [r3, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	6053      	str	r3, [r2, #4]
 800ab82:	4408      	add	r0, r1
 800ab84:	6010      	str	r0, [r2, #0]
 800ab86:	e7da      	b.n	800ab3e <_free_r+0x22>
 800ab88:	d902      	bls.n	800ab90 <_free_r+0x74>
 800ab8a:	230c      	movs	r3, #12
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	e7d6      	b.n	800ab3e <_free_r+0x22>
 800ab90:	6820      	ldr	r0, [r4, #0]
 800ab92:	1821      	adds	r1, r4, r0
 800ab94:	428b      	cmp	r3, r1
 800ab96:	bf04      	itt	eq
 800ab98:	6819      	ldreq	r1, [r3, #0]
 800ab9a:	685b      	ldreq	r3, [r3, #4]
 800ab9c:	6063      	str	r3, [r4, #4]
 800ab9e:	bf04      	itt	eq
 800aba0:	1809      	addeq	r1, r1, r0
 800aba2:	6021      	streq	r1, [r4, #0]
 800aba4:	6054      	str	r4, [r2, #4]
 800aba6:	e7ca      	b.n	800ab3e <_free_r+0x22>
 800aba8:	bd38      	pop	{r3, r4, r5, pc}
 800abaa:	bf00      	nop
 800abac:	200009f8 	.word	0x200009f8

0800abb0 <_init>:
 800abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb2:	bf00      	nop
 800abb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb6:	bc08      	pop	{r3}
 800abb8:	469e      	mov	lr, r3
 800abba:	4770      	bx	lr

0800abbc <_fini>:
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbe:	bf00      	nop
 800abc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abc2:	bc08      	pop	{r3}
 800abc4:	469e      	mov	lr, r3
 800abc6:	4770      	bx	lr
