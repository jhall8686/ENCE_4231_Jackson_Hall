
Ultrasonic_Sensor_Challenge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a230  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a3b8  0800a3b8  0000b3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3d4  0800a3d4  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a3d4  0800a3d4  0000b3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3dc  0800a3dc  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3dc  0800a3dc  0000b3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3e0  0800a3e0  0000b3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a3e4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000ac0  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b3c  20000b3c  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e5b  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e3c  00000000  00000000  00025f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  00029d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b7  00000000  00000000  0002b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243aa  00000000  00000000  0002c5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db10  00000000  00000000  00050991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41e0  00000000  00000000  0006e4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00142681  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006488  00000000  00000000  001426c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  00148b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a3a0 	.word	0x0800a3a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a3a0 	.word	0x0800a3a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fe4e 	bl	8001198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f82c 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fa00 	bl	8000904 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f892 	bl	800062c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8be 	bl	8000688 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8ec 	bl	80006e8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f009 faf0 	bl	8009af4 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000514:	f000 f91e 	bl	8000754 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000518:	f000 f9a0 	bl	800085c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800051c:	2100      	movs	r1, #0
 800051e:	4809      	ldr	r0, [pc, #36]	@ (8000544 <main+0x50>)
 8000520:	f004 ff72 	bl	8005408 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000524:	2100      	movs	r1, #0
 8000526:	4808      	ldr	r0, [pc, #32]	@ (8000548 <main+0x54>)
 8000528:	f005 f886 	bl	8005638 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	gDistance_cm = gPulseLength/58;
 800052c:	4b07      	ldr	r3, [pc, #28]	@ (800054c <main+0x58>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a07      	ldr	r2, [pc, #28]	@ (8000550 <main+0x5c>)
 8000532:	fba2 2303 	umull	r2, r3, r2, r3
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	4a06      	ldr	r2, [pc, #24]	@ (8000554 <main+0x60>)
 800053a:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800053c:	f009 fb00 	bl	8009b40 <MX_USB_HOST_Process>
	gDistance_cm = gPulseLength/58;
 8000540:	bf00      	nop
 8000542:	e7f3      	b.n	800052c <main+0x38>
 8000544:	2000018c 	.word	0x2000018c
 8000548:	200001d4 	.word	0x200001d4
 800054c:	20000224 	.word	0x20000224
 8000550:	8d3dcb09 	.word	0x8d3dcb09
 8000554:	2000022c 	.word	0x2000022c

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	@ 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f009 fe8c 	bl	800a284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	@ (8000624 <SystemClock_Config+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	@ 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a21      	ldr	r2, [pc, #132]	@ (8000628 <SystemClock_Config+0xd0>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 f874 	bl	80046cc <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ea:	f000 faeb 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2105      	movs	r1, #5
 800060c:	4618      	mov	r0, r3
 800060e:	f004 fad5 	bl	8004bbc <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000618:	f000 fad4 	bl	8000bc4 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	@ 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	@ (800067c <MX_I2C1_Init+0x50>)
 800066a:	f003 fa4b 	bl	8003b04 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 faa6 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000098 	.word	0x20000098
 8000680:	40005400 	.word	0x40005400
 8000684:	000186a0 	.word	0x000186a0

08000688 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800068c:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_I2S3_Init+0x54>)
 800068e:	4a14      	ldr	r2, [pc, #80]	@ (80006e0 <MX_I2S3_Init+0x58>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_I2S3_Init+0x54>)
 8000694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000698:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <MX_I2S3_Init+0x54>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006b0:	4a0c      	ldr	r2, [pc, #48]	@ (80006e4 <MX_I2S3_Init+0x5c>)
 80006b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006c8:	f003 fb60 	bl	8003d8c <HAL_I2S_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006d2:	f000 fa77 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000ec 	.word	0x200000ec
 80006e0:	40003c00 	.word	0x40003c00
 80006e4:	00017700 	.word	0x00017700

080006e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_SPI1_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	@ (8000750 <MX_SPI1_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f2:	4b16      	ldr	r3, [pc, #88]	@ (800074c <MX_SPI1_Init+0x64>)
 80006f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_SPI1_Init+0x64>)
 8000714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000718:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_SPI1_Init+0x64>)
 8000734:	220a      	movs	r2, #10
 8000736:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_SPI1_Init+0x64>)
 800073a:	f004 fd8d 	bl	8005258 <HAL_SPI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 fa3e 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000134 	.word	0x20000134
 8000750:	40013000 	.word	0x40013000

08000754 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b092      	sub	sp, #72	@ 0x48
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
 8000774:	615a      	str	r2, [r3, #20]
 8000776:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2220      	movs	r2, #32
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f009 fd80 	bl	800a284 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000784:	4b33      	ldr	r3, [pc, #204]	@ (8000854 <MX_TIM1_Init+0x100>)
 8000786:	4a34      	ldr	r2, [pc, #208]	@ (8000858 <MX_TIM1_Init+0x104>)
 8000788:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 800078a:	4b32      	ldr	r3, [pc, #200]	@ (8000854 <MX_TIM1_Init+0x100>)
 800078c:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000790:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <MX_TIM1_Init+0x100>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000798:	4b2e      	ldr	r3, [pc, #184]	@ (8000854 <MX_TIM1_Init+0x100>)
 800079a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800079e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000854 <MX_TIM1_Init+0x100>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000854 <MX_TIM1_Init+0x100>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ac:	4b29      	ldr	r3, [pc, #164]	@ (8000854 <MX_TIM1_Init+0x100>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007b2:	4828      	ldr	r0, [pc, #160]	@ (8000854 <MX_TIM1_Init+0x100>)
 80007b4:	f004 fdd9 	bl	800536a <HAL_TIM_PWM_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007be:	f000 fa01 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007ce:	4619      	mov	r1, r3
 80007d0:	4820      	ldr	r0, [pc, #128]	@ (8000854 <MX_TIM1_Init+0x100>)
 80007d2:	f005 febf 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80007dc:	f000 f9f2 	bl	8000bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e0:	2360      	movs	r3, #96	@ 0x60
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ec:	2300      	movs	r3, #0
 80007ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000800:	2200      	movs	r2, #0
 8000802:	4619      	mov	r1, r3
 8000804:	4813      	ldr	r0, [pc, #76]	@ (8000854 <MX_TIM1_Init+0x100>)
 8000806:	f005 f9cb 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000810:	f000 f9d8 	bl	8000bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4807      	ldr	r0, [pc, #28]	@ (8000854 <MX_TIM1_Init+0x100>)
 8000838:	f005 ff08 	bl	800664c <HAL_TIMEx_ConfigBreakDeadTime>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000842:	f000 f9bf 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000846:	4803      	ldr	r0, [pc, #12]	@ (8000854 <MX_TIM1_Init+0x100>)
 8000848:	f000 fb88 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 800084c:	bf00      	nop
 800084e:	3748      	adds	r7, #72	@ 0x48
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000018c 	.word	0x2000018c
 8000858:	40010000 	.word	0x40010000

0800085c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000878:	4b20      	ldr	r3, [pc, #128]	@ (80008fc <MX_TIM2_Init+0xa0>)
 800087a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800087e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000880:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <MX_TIM2_Init+0xa0>)
 8000882:	2253      	movs	r2, #83	@ 0x53
 8000884:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <MX_TIM2_Init+0xa0>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000-1;
 800088c:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <MX_TIM2_Init+0xa0>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	@ (8000900 <MX_TIM2_Init+0xa4>)
 8000890:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_TIM2_Init+0xa0>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MX_TIM2_Init+0xa0>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800089e:	4817      	ldr	r0, [pc, #92]	@ (80008fc <MX_TIM2_Init+0xa0>)
 80008a0:	f004 fe7a 	bl	8005598 <HAL_TIM_IC_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f98b 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4619      	mov	r1, r3
 80008bc:	480f      	ldr	r0, [pc, #60]	@ (80008fc <MX_TIM2_Init+0xa0>)
 80008be:	f005 fe49 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 f97c 	bl	8000bc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80008cc:	230a      	movs	r3, #10
 80008ce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008d0:	2301      	movs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	@ (80008fc <MX_TIM2_Init+0xa0>)
 80008e4:	f005 f8c0 	bl	8005a68 <HAL_TIM_IC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008ee:	f000 f969 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200001d4 	.word	0x200001d4
 8000900:	0001869f 	.word	0x0001869f

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	@ 0x30
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
 800091e:	4b7c      	ldr	r3, [pc, #496]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a7b      	ldr	r2, [pc, #492]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b79      	ldr	r3, [pc, #484]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	4b75      	ldr	r3, [pc, #468]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a74      	ldr	r2, [pc, #464]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b72      	ldr	r3, [pc, #456]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b6e      	ldr	r3, [pc, #440]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a6d      	ldr	r2, [pc, #436]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b6b      	ldr	r3, [pc, #428]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b67      	ldr	r3, [pc, #412]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a66      	ldr	r2, [pc, #408]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b64      	ldr	r3, [pc, #400]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b60      	ldr	r3, [pc, #384]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a5f      	ldr	r2, [pc, #380]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b5d      	ldr	r3, [pc, #372]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b59      	ldr	r3, [pc, #356]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a58      	ldr	r2, [pc, #352]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b56      	ldr	r3, [pc, #344]	@ (8000b10 <MX_GPIO_Init+0x20c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2108      	movs	r1, #8
 80009c6:	4853      	ldr	r0, [pc, #332]	@ (8000b14 <MX_GPIO_Init+0x210>)
 80009c8:	f000 ff2a 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2101      	movs	r1, #1
 80009d0:	4851      	ldr	r0, [pc, #324]	@ (8000b18 <MX_GPIO_Init+0x214>)
 80009d2:	f000 ff25 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009d6:	2200      	movs	r2, #0
 80009d8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80009dc:	484f      	ldr	r0, [pc, #316]	@ (8000b1c <MX_GPIO_Init+0x218>)
 80009de:	f000 ff1f 	bl	8001820 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009e2:	2308      	movs	r3, #8
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4846      	ldr	r0, [pc, #280]	@ (8000b14 <MX_GPIO_Init+0x210>)
 80009fa:	f000 fd75 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4840      	ldr	r0, [pc, #256]	@ (8000b18 <MX_GPIO_Init+0x214>)
 8000a16:	f000 fd67 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a1e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a24:	2302      	movs	r3, #2
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	483a      	ldr	r0, [pc, #232]	@ (8000b18 <MX_GPIO_Init+0x214>)
 8000a30:	f000 fd5a 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a34:	2308      	movs	r3, #8
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a44:	2305      	movs	r3, #5
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4832      	ldr	r0, [pc, #200]	@ (8000b18 <MX_GPIO_Init+0x214>)
 8000a50:	f000 fd4a 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a58:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	482d      	ldr	r0, [pc, #180]	@ (8000b20 <MX_GPIO_Init+0x21c>)
 8000a6a:	f000 fd3d 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4828      	ldr	r0, [pc, #160]	@ (8000b24 <MX_GPIO_Init+0x220>)
 8000a82:	f000 fd31 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a98:	2305      	movs	r3, #5
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4820      	ldr	r0, [pc, #128]	@ (8000b24 <MX_GPIO_Init+0x220>)
 8000aa4:	f000 fd20 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000aa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4817      	ldr	r0, [pc, #92]	@ (8000b1c <MX_GPIO_Init+0x218>)
 8000abe:	f000 fd13 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ac2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000ac6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4810      	ldr	r0, [pc, #64]	@ (8000b1c <MX_GPIO_Init+0x218>)
 8000adc:	f000 fd04 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ae0:	2320      	movs	r3, #32
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	480a      	ldr	r0, [pc, #40]	@ (8000b1c <MX_GPIO_Init+0x218>)
 8000af4:	f000 fcf8 	bl	80014e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2007      	movs	r0, #7
 8000afe:	f000 fcbc 	bl	800147a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b02:	2007      	movs	r0, #7
 8000b04:	f000 fcd5 	bl	80014b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b08:	bf00      	nop
 8000b0a:	3730      	adds	r7, #48	@ 0x30
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400

08000b28 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 4 */


//Triggers on both edges of the echo signal
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b38:	d137      	bne.n	8000baa <HAL_TIM_IC_CaptureCallback+0x82>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7f1b      	ldrb	r3, [r3, #28]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d133      	bne.n	8000baa <HAL_TIM_IC_CaptureCallback+0x82>
	{

		if(!gEchoRec) {
 8000b42:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10a      	bne.n	8000b60 <HAL_TIM_IC_CaptureCallback+0x38>
			gCount1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f005 f8e9 	bl	8005d24 <HAL_TIM_ReadCapturedValue>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000b56:	6013      	str	r3, [r2, #0]
			gEchoRec = 1;
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
				gPulseLength = (0xFFFF - gCount1) + gCount2 + 1;
			}
			gEchoRec = 0;
		}
	}
}
 8000b5e:	e024      	b.n	8000baa <HAL_TIM_IC_CaptureCallback+0x82>
		else if(gEchoRec) {
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d020      	beq.n	8000baa <HAL_TIM_IC_CaptureCallback+0x82>
			gCount2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f005 f8da 	bl	8005d24 <HAL_TIM_ReadCapturedValue>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4a12      	ldr	r2, [pc, #72]	@ (8000bbc <HAL_TIM_IC_CaptureCallback+0x94>)
 8000b74:	6013      	str	r3, [r2, #0]
			if(gCount2 > gCount1) {
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <HAL_TIM_IC_CaptureCallback+0x94>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d907      	bls.n	8000b92 <HAL_TIM_IC_CaptureCallback+0x6a>
				gPulseLength = gCount2-gCount1;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <HAL_TIM_IC_CaptureCallback+0x94>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	e008      	b.n	8000ba4 <HAL_TIM_IC_CaptureCallback+0x7c>
				gPulseLength = (0xFFFF - gCount1) + gCount2 + 1;
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <HAL_TIM_IC_CaptureCallback+0x94>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000ba0:	4a07      	ldr	r2, [pc, #28]	@ (8000bc0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ba2:	6013      	str	r3, [r2, #0]
			gEchoRec = 0;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000228 	.word	0x20000228
 8000bb8:	2000021c 	.word	0x2000021c
 8000bbc:	20000220 	.word	0x20000220
 8000bc0:	20000224 	.word	0x20000224

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <Error_Handler+0x8>

08000bd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f000 fc28 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ca4 <HAL_I2C_MspInit+0x84>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12c      	bne.n	8000c9c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c5e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c64:	2312      	movs	r3, #18
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c70:	2304      	movs	r3, #4
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480c      	ldr	r0, [pc, #48]	@ (8000cac <HAL_I2C_MspInit+0x8c>)
 8000c7c:	f000 fc34 	bl	80014e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	@ 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020400 	.word	0x40020400

08000cb0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	@ 0x38
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a31      	ldr	r2, [pc, #196]	@ (8000da0 <HAL_I2S_MspInit+0xf0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d15a      	bne.n	8000d96 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ce4:	23c0      	movs	r3, #192	@ 0xc0
 8000ce6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 f96f 	bl	8004fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cfc:	f7ff ff62 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <HAL_I2S_MspInit+0xf4>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	4a26      	ldr	r2, [pc, #152]	@ (8000da4 <HAL_I2S_MspInit+0xf4>)
 8000d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d10:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <HAL_I2S_MspInit+0xf4>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <HAL_I2S_MspInit+0xf4>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d24:	4a1f      	ldr	r2, [pc, #124]	@ (8000da4 <HAL_I2S_MspInit+0xf4>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <HAL_I2S_MspInit+0xf4>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <HAL_I2S_MspInit+0xf4>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	4a18      	ldr	r2, [pc, #96]	@ (8000da4 <HAL_I2S_MspInit+0xf4>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <HAL_I2S_MspInit+0xf4>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d54:	2310      	movs	r3, #16
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d64:	2306      	movs	r3, #6
 8000d66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480e      	ldr	r0, [pc, #56]	@ (8000da8 <HAL_I2S_MspInit+0xf8>)
 8000d70:	f000 fbba 	bl	80014e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d74:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d86:	2306      	movs	r3, #6
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4806      	ldr	r0, [pc, #24]	@ (8000dac <HAL_I2S_MspInit+0xfc>)
 8000d92:	f000 fba9 	bl	80014e8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000d96:	bf00      	nop
 8000d98:	3738      	adds	r7, #56	@ 0x38
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40003c00 	.word	0x40003c00
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40020800 	.word	0x40020800

08000db0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	@ 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	@ (8000e34 <HAL_SPI_MspInit+0x84>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12b      	bne.n	8000e2a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <HAL_SPI_MspInit+0x88>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	4a17      	ldr	r2, [pc, #92]	@ (8000e38 <HAL_SPI_MspInit+0x88>)
 8000ddc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <HAL_SPI_MspInit+0x88>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <HAL_SPI_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a10      	ldr	r2, [pc, #64]	@ (8000e38 <HAL_SPI_MspInit+0x88>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_SPI_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e0a:	23e0      	movs	r3, #224	@ 0xe0
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e1a:	2305      	movs	r3, #5
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <HAL_SPI_MspInit+0x8c>)
 8000e26:	f000 fb5f 	bl	80014e8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	@ 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40013000 	.word	0x40013000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb8 <HAL_TIM_PWM_MspInit+0x78>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12d      	bne.n	8000eae <HAL_TIM_PWM_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <HAL_TIM_PWM_MspInit+0x7c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	4a18      	ldr	r2, [pc, #96]	@ (8000ebc <HAL_TIM_PWM_MspInit+0x7c>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e62:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <HAL_TIM_PWM_MspInit+0x7c>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2018      	movs	r0, #24
 8000e74:	f000 fb01 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000e78:	2018      	movs	r0, #24
 8000e7a:	f000 fb1a 	bl	80014b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2019      	movs	r0, #25
 8000e84:	f000 faf9 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e88:	2019      	movs	r0, #25
 8000e8a:	f000 fb12 	bl	80014b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	201a      	movs	r0, #26
 8000e94:	f000 faf1 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e98:	201a      	movs	r0, #26
 8000e9a:	f000 fb0a 	bl	80014b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	201b      	movs	r0, #27
 8000ea4:	f000 fae9 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ea8:	201b      	movs	r0, #27
 8000eaa:	f000 fb02 	bl	80014b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ee0:	d134      	bne.n	8000f4c <HAL_TIM_IC_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <HAL_TIM_IC_MspInit+0x94>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	4a1a      	ldr	r2, [pc, #104]	@ (8000f54 <HAL_TIM_IC_MspInit+0x94>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef2:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <HAL_TIM_IC_MspInit+0x94>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <HAL_TIM_IC_MspInit+0x94>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a13      	ldr	r2, [pc, #76]	@ (8000f54 <HAL_TIM_IC_MspInit+0x94>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <HAL_TIM_IC_MspInit+0x94>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <HAL_TIM_IC_MspInit+0x98>)
 8000f38:	f000 fad6 	bl	80014e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	201c      	movs	r0, #28
 8000f42:	f000 fa9a 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f46:	201c      	movs	r0, #28
 8000f48:	f000 fab3 	bl	80014b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	@ 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020000 	.word	0x40020000

08000f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <HAL_TIM_MspPostInit+0x68>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d11e      	bne.n	8000fbc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <HAL_TIM_MspPostInit+0x6c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a10      	ldr	r2, [pc, #64]	@ (8000fc8 <HAL_TIM_MspPostInit+0x6c>)
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <HAL_TIM_MspPostInit+0x6c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <HAL_TIM_MspPostInit+0x70>)
 8000fb8:	f000 fa96 	bl	80014e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001026:	f000 f909 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}

0800102e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001032:	2002      	movs	r0, #2
 8001034:	f000 fc0e 	bl	8001854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001042:	f004 fc21 	bl	8005888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000018c 	.word	0x2000018c

08001050 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001056:	f004 fc17 	bl	8005888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000018c 	.word	0x2000018c

08001064 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800106a:	f004 fc0d 	bl	8005888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000018c 	.word	0x2000018c

08001078 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <TIM1_CC_IRQHandler+0x10>)
 800107e:	f004 fc03 	bl	8005888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000018c 	.word	0x2000018c

0800108c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <TIM2_IRQHandler+0x10>)
 8001092:	f004 fbf9 	bl	8005888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200001d4 	.word	0x200001d4

080010a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <OTG_FS_IRQHandler+0x10>)
 80010a6:	f000 fed9 	bl	8001e5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000614 	.word	0x20000614

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	@ (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f009 f8e6 	bl	800a2b4 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20020000 	.word	0x20020000
 8001114:	00000400 	.word	0x00000400
 8001118:	20000230 	.word	0x20000230
 800111c:	20000b40 	.word	0x20000b40

08001120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <SystemInit+0x20>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800112a:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <SystemInit+0x20>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800117c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001148:	f7ff ffea 	bl	8001120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	@ (8001180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	@ (8001184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	@ (8001190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001172:	f009 f8a5 	bl	800a2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff f9bd 	bl	80004f4 <main>
  bx  lr    
 800117a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800117c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001188:	0800a3e4 	.word	0x0800a3e4
  ldr r2, =_sbss
 800118c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001190:	20000b3c 	.word	0x20000b3c

08001194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC_IRQHandler>
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800119c:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <HAL_Init+0x40>)
 80011a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <HAL_Init+0x40>)
 80011ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	@ (80011d8 <HAL_Init+0x40>)
 80011ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f94f 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f808 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff fd00 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023c00 	.word	0x40023c00

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <HAL_InitTick+0x54>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_InitTick+0x58>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f967 	bl	80014ce <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e00e      	b.n	8001228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d80a      	bhi.n	8001226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f000 f92f 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4a06      	ldr	r2, [pc, #24]	@ (8001238 <HAL_InitTick+0x5c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	20000008 	.word	0x20000008
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008
 8001260:	20000234 	.word	0x20000234

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000234 	.word	0x20000234

0800127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff ffee 	bl	8001264 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001294:	d005      	beq.n	80012a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <HAL_Delay+0x44>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012a2:	bf00      	nop
 80012a4:	f7ff ffde 	bl	8001264 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8f7      	bhi.n	80012a4 <HAL_Delay+0x28>
  {
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	@ (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4907      	ldr	r1, [pc, #28]	@ (8001360 <__NVIC_EnableIRQ+0x38>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	@ (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	@ (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	@ 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff29 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff3e 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff8e 	bl	80013b8 <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5d 	bl	8001364 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff31 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa2 	bl	8001420 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	@ 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	e16b      	b.n	80017dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001504:	2201      	movs	r2, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	429a      	cmp	r2, r3
 800151e:	f040 815a 	bne.w	80017d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d005      	beq.n	800153a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	2b02      	cmp	r3, #2
 8001538:	d130      	bne.n	800159c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001570:	2201      	movs	r2, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 0201 	and.w	r2, r3, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d017      	beq.n	80015d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d123      	bne.n	800162c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	08da      	lsrs	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3208      	adds	r2, #8
 80015ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	69b9      	ldr	r1, [r7, #24]
 8001628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0203 	and.w	r2, r3, #3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80b4 	beq.w	80017d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b60      	ldr	r3, [pc, #384]	@ (80017f4 <HAL_GPIO_Init+0x30c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a5f      	ldr	r2, [pc, #380]	@ (80017f4 <HAL_GPIO_Init+0x30c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b5d      	ldr	r3, [pc, #372]	@ (80017f4 <HAL_GPIO_Init+0x30c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800168a:	4a5b      	ldr	r2, [pc, #364]	@ (80017f8 <HAL_GPIO_Init+0x310>)
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	220f      	movs	r2, #15
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a52      	ldr	r2, [pc, #328]	@ (80017fc <HAL_GPIO_Init+0x314>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d02b      	beq.n	800170e <HAL_GPIO_Init+0x226>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a51      	ldr	r2, [pc, #324]	@ (8001800 <HAL_GPIO_Init+0x318>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d025      	beq.n	800170a <HAL_GPIO_Init+0x222>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a50      	ldr	r2, [pc, #320]	@ (8001804 <HAL_GPIO_Init+0x31c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01f      	beq.n	8001706 <HAL_GPIO_Init+0x21e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001808 <HAL_GPIO_Init+0x320>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d019      	beq.n	8001702 <HAL_GPIO_Init+0x21a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4e      	ldr	r2, [pc, #312]	@ (800180c <HAL_GPIO_Init+0x324>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0x216>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001810 <HAL_GPIO_Init+0x328>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00d      	beq.n	80016fa <HAL_GPIO_Init+0x212>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001814 <HAL_GPIO_Init+0x32c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <HAL_GPIO_Init+0x20e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001818 <HAL_GPIO_Init+0x330>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_GPIO_Init+0x20a>
 80016ee:	2307      	movs	r3, #7
 80016f0:	e00e      	b.n	8001710 <HAL_GPIO_Init+0x228>
 80016f2:	2308      	movs	r3, #8
 80016f4:	e00c      	b.n	8001710 <HAL_GPIO_Init+0x228>
 80016f6:	2306      	movs	r3, #6
 80016f8:	e00a      	b.n	8001710 <HAL_GPIO_Init+0x228>
 80016fa:	2305      	movs	r3, #5
 80016fc:	e008      	b.n	8001710 <HAL_GPIO_Init+0x228>
 80016fe:	2304      	movs	r3, #4
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x228>
 8001702:	2303      	movs	r3, #3
 8001704:	e004      	b.n	8001710 <HAL_GPIO_Init+0x228>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <HAL_GPIO_Init+0x228>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x228>
 800170e:	2300      	movs	r3, #0
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	f002 0203 	and.w	r2, r2, #3
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	4093      	lsls	r3, r2
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001720:	4935      	ldr	r1, [pc, #212]	@ (80017f8 <HAL_GPIO_Init+0x310>)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172e:	4b3b      	ldr	r3, [pc, #236]	@ (800181c <HAL_GPIO_Init+0x334>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001752:	4a32      	ldr	r2, [pc, #200]	@ (800181c <HAL_GPIO_Init+0x334>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001758:	4b30      	ldr	r3, [pc, #192]	@ (800181c <HAL_GPIO_Init+0x334>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800177c:	4a27      	ldr	r2, [pc, #156]	@ (800181c <HAL_GPIO_Init+0x334>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001782:	4b26      	ldr	r3, [pc, #152]	@ (800181c <HAL_GPIO_Init+0x334>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a6:	4a1d      	ldr	r2, [pc, #116]	@ (800181c <HAL_GPIO_Init+0x334>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ac:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_GPIO_Init+0x334>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d0:	4a12      	ldr	r2, [pc, #72]	@ (800181c <HAL_GPIO_Init+0x334>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3301      	adds	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	f67f ae90 	bls.w	8001504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3724      	adds	r7, #36	@ 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	40020800 	.word	0x40020800
 8001808:	40020c00 	.word	0x40020c00
 800180c:	40021000 	.word	0x40021000
 8001810:	40021400 	.word	0x40021400
 8001814:	40021800 	.word	0x40021800
 8001818:	40021c00 	.word	0x40021c00
 800181c:	40013c00 	.word	0x40013c00

08001820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001830:	787b      	ldrb	r3, [r7, #1]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800183c:	e003      	b.n	8001846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	041a      	lsls	r2, r3, #16
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f806 	bl	8001884 <HAL_GPIO_EXTI_Callback>
  }
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40013c00 	.word	0x40013c00

08001884 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af02      	add	r7, sp, #8
 80018a0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e059      	b.n	8001960 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d106      	bne.n	80018cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f008 f972 	bl	8009bb0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2203      	movs	r2, #3
 80018d0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018da:	d102      	bne.n	80018e2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 ff8b 	bl	8006802 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7c1a      	ldrb	r2, [r3, #16]
 80018f4:	f88d 2000 	strb.w	r2, [sp]
 80018f8:	3304      	adds	r3, #4
 80018fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018fc:	f004 ff0c 	bl	8006718 <USB_CoreInit>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2202      	movs	r2, #2
 800190a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e026      	b.n	8001960 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2101      	movs	r1, #1
 8001918:	4618      	mov	r0, r3
 800191a:	f004 ff83 	bl	8006824 <USB_SetCurrentMode>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e017      	b.n	8001960 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7c1a      	ldrb	r2, [r3, #16]
 8001938:	f88d 2000 	strb.w	r2, [sp]
 800193c:	3304      	adds	r3, #4
 800193e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001940:	f005 f926 	bl	8006b90 <USB_HostInit>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2202      	movs	r2, #2
 800194e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e004      	b.n	8001960 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b08b      	sub	sp, #44	@ 0x2c
 800196c:	af04      	add	r7, sp, #16
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4603      	mov	r3, r0
 8001978:	70fb      	strb	r3, [r7, #3]
 800197a:	460b      	mov	r3, r1
 800197c:	70bb      	strb	r3, [r7, #2]
 800197e:	4613      	mov	r3, r2
 8001980:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001982:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001984:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_HCD_HC_Init+0x2c>
 8001990:	2302      	movs	r3, #2
 8001992:	e09d      	b.n	8001ad0 <HAL_HCD_HC_Init+0x168>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	3319      	adds	r3, #25
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	3314      	adds	r3, #20
 80019c0:	787a      	ldrb	r2, [r7, #1]
 80019c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3315      	adds	r3, #21
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	3326      	adds	r3, #38	@ 0x26
 80019e8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80019ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	78bb      	ldrb	r3, [r7, #2]
 80019f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019f6:	b2d8      	uxtb	r0, r3
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	3316      	adds	r3, #22
 8001a06:	4602      	mov	r2, r0
 8001a08:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fbc8 	bl	80021a4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001a14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da0a      	bge.n	8001a32 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3317      	adds	r3, #23
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e009      	b.n	8001a46 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	3317      	adds	r3, #23
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f005 fa04 	bl	8006e58 <USB_GetHostSpeed>
 8001a50:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001a52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d10b      	bne.n	8001a72 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001a5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d107      	bne.n	8001a72 <HAL_HCD_HC_Init+0x10a>
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d104      	bne.n	8001a72 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2bbc      	cmp	r3, #188	@ 0xbc
 8001a6c:	d901      	bls.n	8001a72 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001a6e:	23bc      	movs	r3, #188	@ 0xbc
 8001a70:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	3318      	adds	r3, #24
 8001a82:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	b298      	uxth	r0, r3
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	3328      	adds	r3, #40	@ 0x28
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	787c      	ldrb	r4, [r7, #1]
 8001aaa:	78ba      	ldrb	r2, [r7, #2]
 8001aac:	78f9      	ldrb	r1, [r7, #3]
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4623      	mov	r3, r4
 8001abe:	f005 f9f3 	bl	8006ea8 <USB_HC_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}

08001ad8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_HCD_HC_Halt+0x1e>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e00f      	b.n	8001b16 <HAL_HCD_HC_Halt+0x3e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	78fa      	ldrb	r2, [r7, #3]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f005 fd85 	bl	8007616 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	70fb      	strb	r3, [r7, #3]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70bb      	strb	r3, [r7, #2]
 8001b36:	4613      	mov	r3, r2
 8001b38:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b3a:	78fa      	ldrb	r2, [r7, #3]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	3317      	adds	r3, #23
 8001b4a:	78ba      	ldrb	r2, [r7, #2]
 8001b4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3326      	adds	r3, #38	@ 0x26
 8001b5e:	787a      	ldrb	r2, [r7, #1]
 8001b60:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b62:	7c3b      	ldrb	r3, [r7, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d114      	bne.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	332a      	adds	r3, #42	@ 0x2a
 8001b78:	2203      	movs	r2, #3
 8001b7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	3319      	adds	r3, #25
 8001b8c:	7f3a      	ldrb	r2, [r7, #28]
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e009      	b.n	8001ba6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b92:	78fa      	ldrb	r2, [r7, #3]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	332a      	adds	r3, #42	@ 0x2a
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ba6:	787b      	ldrb	r3, [r7, #1]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	f200 8102 	bhi.w	8001db2 <HAL_HCD_HC_SubmitRequest+0x292>
 8001bae:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb4:	08001bc5 	.word	0x08001bc5
 8001bb8:	08001d9d 	.word	0x08001d9d
 8001bbc:	08001c89 	.word	0x08001c89
 8001bc0:	08001d13 	.word	0x08001d13
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001bc4:	7c3b      	ldrb	r3, [r7, #16]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	f040 80f5 	bne.w	8001db6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001bcc:	78bb      	ldrb	r3, [r7, #2]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d12d      	bne.n	8001c2e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001bd2:	8b3b      	ldrh	r3, [r7, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	333d      	adds	r3, #61	@ 0x3d
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	333d      	adds	r3, #61	@ 0x3d
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10a      	bne.n	8001c18 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	332a      	adds	r3, #42	@ 0x2a
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001c16:	e0ce      	b.n	8001db6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	332a      	adds	r3, #42	@ 0x2a
 8001c28:	2202      	movs	r2, #2
 8001c2a:	701a      	strb	r2, [r3, #0]
      break;
 8001c2c:	e0c3      	b.n	8001db6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	331a      	adds	r3, #26
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	f040 80b8 	bne.w	8001db6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	333c      	adds	r3, #60	@ 0x3c
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10a      	bne.n	8001c72 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	332a      	adds	r3, #42	@ 0x2a
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
      break;
 8001c70:	e0a1      	b.n	8001db6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	332a      	adds	r3, #42	@ 0x2a
 8001c82:	2202      	movs	r2, #2
 8001c84:	701a      	strb	r2, [r3, #0]
      break;
 8001c86:	e096      	b.n	8001db6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c88:	78bb      	ldrb	r3, [r7, #2]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d120      	bne.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	333d      	adds	r3, #61	@ 0x3d
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10a      	bne.n	8001cba <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	332a      	adds	r3, #42	@ 0x2a
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cb8:	e07e      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	332a      	adds	r3, #42	@ 0x2a
 8001cca:	2202      	movs	r2, #2
 8001ccc:	701a      	strb	r2, [r3, #0]
      break;
 8001cce:	e073      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	333c      	adds	r3, #60	@ 0x3c
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10a      	bne.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	332a      	adds	r3, #42	@ 0x2a
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
      break;
 8001cfa:	e05d      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	332a      	adds	r3, #42	@ 0x2a
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	701a      	strb	r2, [r3, #0]
      break;
 8001d10:	e052      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d12:	78bb      	ldrb	r3, [r7, #2]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d120      	bne.n	8001d5a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	333d      	adds	r3, #61	@ 0x3d
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10a      	bne.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	332a      	adds	r3, #42	@ 0x2a
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d42:	e039      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	332a      	adds	r3, #42	@ 0x2a
 8001d54:	2202      	movs	r2, #2
 8001d56:	701a      	strb	r2, [r3, #0]
      break;
 8001d58:	e02e      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	333c      	adds	r3, #60	@ 0x3c
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	332a      	adds	r3, #42	@ 0x2a
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
      break;
 8001d84:	e018      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	332a      	adds	r3, #42	@ 0x2a
 8001d96:	2202      	movs	r2, #2
 8001d98:	701a      	strb	r2, [r3, #0]
      break;
 8001d9a:	e00d      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	332a      	adds	r3, #42	@ 0x2a
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
      break;
 8001db0:	e002      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001db2:	bf00      	nop
 8001db4:	e000      	b.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001db6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	332c      	adds	r3, #44	@ 0x2c
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	8b39      	ldrh	r1, [r7, #24]
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4403      	add	r3, r0
 8001ddc:	3334      	adds	r3, #52	@ 0x34
 8001dde:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001de0:	78fa      	ldrb	r2, [r7, #3]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	334c      	adds	r3, #76	@ 0x4c
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	3338      	adds	r3, #56	@ 0x38
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	3315      	adds	r3, #21
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	334d      	adds	r3, #77	@ 0x4d
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	4613      	mov	r3, r2
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	3310      	adds	r3, #16
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	1d19      	adds	r1, r3, #4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	799b      	ldrb	r3, [r3, #6]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f005 f958 	bl	8007100 <USB_HC_StartXfer>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop

08001e5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 fe4c 	bl	8006b10 <USB_GetMode>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	f040 80fb 	bne.w	8002076 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f004 fe0f 	bl	8006aa8 <USB_ReadInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80f1 	beq.w	8002074 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 fe06 	bl	8006aa8 <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ea6:	d104      	bne.n	8001eb2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001eb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 fdf6 	bl	8006aa8 <USB_ReadInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ec6:	d104      	bne.n	8001ed2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ed0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 fde6 	bl	8006aa8 <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ee2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ee6:	d104      	bne.n	8001ef2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ef0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f004 fdd6 	bl	8006aa8 <USB_ReadInterrupts>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d103      	bne.n	8001f0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f004 fdc8 	bl	8006aa8 <USB_ReadInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f22:	d120      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d113      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f3e:	2110      	movs	r1, #16
 8001f40:	6938      	ldr	r0, [r7, #16]
 8001f42:	f004 fcbb 	bl	80068bc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f46:	6938      	ldr	r0, [r7, #16]
 8001f48:	f004 fcea 	bl	8006920 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7a5b      	ldrb	r3, [r3, #9]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d105      	bne.n	8001f60 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f004 fedc 	bl	8006d18 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f007 fea3 	bl	8009cac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 fd9c 	bl	8006aa8 <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f7a:	d102      	bne.n	8001f82 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f001 fd4d 	bl	8003a1c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f004 fd8e 	bl	8006aa8 <USB_ReadInterrupts>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d106      	bne.n	8001fa4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f007 fe6c 	bl	8009c74 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f004 fd7d 	bl	8006aa8 <USB_ReadInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fb8:	d139      	bne.n	800202e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f005 fb18 	bl	80075f4 <USB_HC_ReadInterrupt>
 8001fc4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e025      	b.n	8002018 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d018      	beq.n	8002012 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ff6:	d106      	bne.n	8002006 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f905 	bl	800220e <HCD_HC_IN_IRQHandler>
 8002004:	e005      	b.n	8002012 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 ff67 	bl	8002ee0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	795b      	ldrb	r3, [r3, #5]
 800201c:	461a      	mov	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	4293      	cmp	r3, r2
 8002022:	d3d3      	bcc.n	8001fcc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800202c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f004 fd38 	bl	8006aa8 <USB_ReadInterrupts>
 8002038:	4603      	mov	r3, r0
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b10      	cmp	r3, #16
 8002040:	d101      	bne.n	8002046 <HAL_HCD_IRQHandler+0x1ea>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_HCD_IRQHandler+0x1ec>
 8002046:	2300      	movs	r3, #0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d014      	beq.n	8002076 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0210 	bic.w	r2, r2, #16
 800205a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f001 fbfe 	bl	800385e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0210 	orr.w	r2, r2, #16
 8002070:	619a      	str	r2, [r3, #24]
 8002072:	e000      	b.n	8002076 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002074:	bf00      	nop
    }
  }
}
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_HCD_Start+0x16>
 800208e:	2302      	movs	r3, #2
 8002090:	e013      	b.n	80020ba <HAL_HCD_Start+0x3e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f004 fea0 	bl	8006de6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 fb98 	bl	80067e0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_HCD_Stop+0x16>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e00d      	b.n	80020f4 <HAL_HCD_Stop+0x32>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f005 fbf3 	bl	80078d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f004 fe42 	bl	8006d92 <USB_ResetPort>
 800210e:	4603      	mov	r3, r0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	334c      	adds	r3, #76	@ 0x4c
 8002134:	781b      	ldrb	r3, [r3, #0]
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	3338      	adds	r3, #56	@ 0x38
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f004 fe84 	bl	8006e86 <USB_GetCurrentFrame>
 800217e:	4603      	mov	r3, r0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f004 fe5f 	bl	8006e58 <USB_GetHostSpeed>
 800219a:	4603      	mov	r3, r0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	331a      	adds	r3, #26
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	331b      	adds	r3, #27
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3325      	adds	r3, #37	@ 0x25
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	3324      	adds	r3, #36	@ 0x24
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f004 fc4e 	bl	8006ace <USB_ReadChInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b04      	cmp	r3, #4
 800223a:	d11a      	bne.n	8002272 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002248:	461a      	mov	r2, r3
 800224a:	2304      	movs	r3, #4
 800224c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	334d      	adds	r3, #77	@ 0x4d
 800225e:	2207      	movs	r2, #7
 8002260:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f005 f9d3 	bl	8007616 <USB_HC_Halt>
 8002270:	e09e      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f004 fc27 	bl	8006ace <USB_ReadChInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800228a:	d11b      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800229e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	334d      	adds	r3, #77	@ 0x4d
 80022b0:	2208      	movs	r2, #8
 80022b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f005 f9aa 	bl	8007616 <USB_HC_Halt>
 80022c2:	e075      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f004 fbfe 	bl	8006ace <USB_ReadChInterrupts>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d11a      	bne.n	8002312 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	2308      	movs	r3, #8
 80022ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	334d      	adds	r3, #77	@ 0x4d
 80022fe:	2206      	movs	r2, #6
 8002300:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f005 f983 	bl	8007616 <USB_HC_Halt>
 8002310:	e04e      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f004 fbd7 	bl	8006ace <USB_ReadChInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232a:	d11b      	bne.n	8002364 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002338:	461a      	mov	r2, r3
 800233a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800233e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	334d      	adds	r3, #77	@ 0x4d
 8002350:	2209      	movs	r2, #9
 8002352:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f005 f95a 	bl	8007616 <USB_HC_Halt>
 8002362:	e025      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f004 fbae 	bl	8006ace <USB_ReadChInterrupts>
 8002372:	4603      	mov	r3, r0
 8002374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002378:	2b80      	cmp	r3, #128	@ 0x80
 800237a:	d119      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002388:	461a      	mov	r2, r3
 800238a:	2380      	movs	r3, #128	@ 0x80
 800238c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	334d      	adds	r3, #77	@ 0x4d
 800239e:	2207      	movs	r2, #7
 80023a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f005 f933 	bl	8007616 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f004 fb88 	bl	8006ace <USB_ReadChInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023c8:	d112      	bne.n	80023f0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f005 f91f 	bl	8007616 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023e4:	461a      	mov	r2, r3
 80023e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023ea:	6093      	str	r3, [r2, #8]
 80023ec:	f000 bd75 	b.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f004 fb68 	bl	8006ace <USB_ReadChInterrupts>
 80023fe:	4603      	mov	r3, r0
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	f040 8128 	bne.w	800265a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002416:	461a      	mov	r2, r3
 8002418:	2320      	movs	r3, #32
 800241a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	331b      	adds	r3, #27
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d119      	bne.n	8002466 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	331b      	adds	r3, #27
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	0151      	lsls	r1, r2, #5
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	440a      	add	r2, r1
 800245c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002464:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	799b      	ldrb	r3, [r3, #6]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01b      	beq.n	80024a6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3330      	adds	r3, #48	@ 0x30
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	1ac9      	subs	r1, r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4403      	add	r3, r0
 80024a2:	3338      	adds	r3, #56	@ 0x38
 80024a4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	334d      	adds	r3, #77	@ 0x4d
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	3344      	adds	r3, #68	@ 0x44
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024da:	461a      	mov	r2, r3
 80024dc:	2301      	movs	r3, #1
 80024de:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	3326      	adds	r3, #38	@ 0x26
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3326      	adds	r3, #38	@ 0x26
 8002506:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002508:	2b02      	cmp	r3, #2
 800250a:	d110      	bne.n	800252e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f005 f87e 	bl	8007616 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002526:	461a      	mov	r2, r3
 8002528:	2310      	movs	r3, #16
 800252a:	6093      	str	r3, [r2, #8]
 800252c:	e03d      	b.n	80025aa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3326      	adds	r3, #38	@ 0x26
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d00a      	beq.n	800255a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	3326      	adds	r3, #38	@ 0x26
 8002554:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002556:	2b01      	cmp	r3, #1
 8002558:	d127      	bne.n	80025aa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	0151      	lsls	r1, r2, #5
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	440a      	add	r2, r1
 8002570:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002574:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002578:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	334c      	adds	r3, #76	@ 0x4c
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	334c      	adds	r3, #76	@ 0x4c
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	4619      	mov	r1, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f007 fb8f 	bl	8009cc8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	799b      	ldrb	r3, [r3, #6]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d13b      	bne.n	800262a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	3338      	adds	r3, #56	@ 0x38
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4403      	add	r3, r0
 80025d2:	3328      	adds	r3, #40	@ 0x28
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	440b      	add	r3, r1
 80025d8:	1e59      	subs	r1, r3, #1
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4403      	add	r3, r0
 80025e8:	3328      	adds	r3, #40	@ 0x28
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8470 	beq.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	333c      	adds	r3, #60	@ 0x3c
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2d8      	uxtb	r0, r3
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	333c      	adds	r3, #60	@ 0x3c
 8002622:	4602      	mov	r2, r0
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	f000 bc58 	b.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	333c      	adds	r3, #60	@ 0x3c
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	f083 0301 	eor.w	r3, r3, #1
 8002642:	b2d8      	uxtb	r0, r3
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	333c      	adds	r3, #60	@ 0x3c
 8002652:	4602      	mov	r2, r0
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	f000 bc40 	b.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f004 fa33 	bl	8006ace <USB_ReadChInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b20      	cmp	r3, #32
 8002670:	d131      	bne.n	80026d6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800267e:	461a      	mov	r2, r3
 8002680:	2320      	movs	r3, #32
 8002682:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	331a      	adds	r3, #26
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	f040 841f 	bne.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	331b      	adds	r3, #27
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	334d      	adds	r3, #77	@ 0x4d
 80026c0:	2203      	movs	r2, #3
 80026c2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 ffa2 	bl	8007616 <USB_HC_Halt>
 80026d2:	f000 bc02 	b.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f004 f9f5 	bl	8006ace <USB_ReadChInterrupts>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	f040 8305 	bne.w	8002cfa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026fc:	461a      	mov	r2, r3
 80026fe:	2302      	movs	r3, #2
 8002700:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	334d      	adds	r3, #77	@ 0x4d
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d114      	bne.n	8002742 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	334d      	adds	r3, #77	@ 0x4d
 8002728:	2202      	movs	r2, #2
 800272a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	334c      	adds	r3, #76	@ 0x4c
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e2cc      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	334d      	adds	r3, #77	@ 0x4d
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b06      	cmp	r3, #6
 8002756:	d114      	bne.n	8002782 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	334d      	adds	r3, #77	@ 0x4d
 8002768:	2202      	movs	r2, #2
 800276a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	334c      	adds	r3, #76	@ 0x4c
 800277c:	2205      	movs	r2, #5
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e2ac      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	334d      	adds	r3, #77	@ 0x4d
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b07      	cmp	r3, #7
 8002796:	d00b      	beq.n	80027b0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	334d      	adds	r3, #77	@ 0x4d
 80027a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80027aa:	2b09      	cmp	r3, #9
 80027ac:	f040 80a6 	bne.w	80028fc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	334d      	adds	r3, #77	@ 0x4d
 80027c0:	2202      	movs	r2, #2
 80027c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3344      	adds	r3, #68	@ 0x44
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	1c59      	adds	r1, r3, #1
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4403      	add	r3, r0
 80027e4:	3344      	adds	r3, #68	@ 0x44
 80027e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	3344      	adds	r3, #68	@ 0x44
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d943      	bls.n	8002886 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3344      	adds	r3, #68	@ 0x44
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	331a      	adds	r3, #26
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d123      	bne.n	8002870 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	331b      	adds	r3, #27
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	331c      	adds	r3, #28
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	0151      	lsls	r1, r2, #5
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	440a      	add	r2, r1
 8002866:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800286a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800286e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	334c      	adds	r3, #76	@ 0x4c
 8002880:	2204      	movs	r2, #4
 8002882:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002884:	e229      	b.n	8002cda <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	334c      	adds	r3, #76	@ 0x4c
 8002896:	2202      	movs	r2, #2
 8002898:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3326      	adds	r3, #38	@ 0x26
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00b      	beq.n	80028c8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	3326      	adds	r3, #38	@ 0x26
 80028c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	f040 8209 	bne.w	8002cda <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f4:	461a      	mov	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028fa:	e1ee      	b.n	8002cda <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	334d      	adds	r3, #77	@ 0x4d
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b05      	cmp	r3, #5
 8002910:	f040 80c8 	bne.w	8002aa4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	2202      	movs	r2, #2
 8002926:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	331b      	adds	r3, #27
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	f040 81ce 	bne.w	8002cdc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3326      	adds	r3, #38	@ 0x26
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d16b      	bne.n	8002a2e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3348      	adds	r3, #72	@ 0x48
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	1c59      	adds	r1, r3, #1
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4403      	add	r3, r0
 8002976:	3348      	adds	r3, #72	@ 0x48
 8002978:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	3348      	adds	r3, #72	@ 0x48
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d943      	bls.n	8002a18 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	3348      	adds	r3, #72	@ 0x48
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	331b      	adds	r3, #27
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3344      	adds	r3, #68	@ 0x44
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d809      	bhi.n	80029e2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	331c      	adds	r3, #28
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	0151      	lsls	r1, r2, #5
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	440a      	add	r2, r1
 80029f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a00:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	334c      	adds	r3, #76	@ 0x4c
 8002a12:	2204      	movs	r2, #4
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e014      	b.n	8002a42 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	334c      	adds	r3, #76	@ 0x4c
 8002a28:	2202      	movs	r2, #2
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e009      	b.n	8002a42 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	334c      	adds	r3, #76	@ 0x4c
 8002a3e:	2202      	movs	r2, #2
 8002a40:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3326      	adds	r3, #38	@ 0x26
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	3326      	adds	r3, #38	@ 0x26
 8002a68:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	f040 8136 	bne.w	8002cdc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a86:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a8e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e11b      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	334d      	adds	r3, #77	@ 0x4d
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	f040 8081 	bne.w	8002bbe <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	334d      	adds	r3, #77	@ 0x4d
 8002acc:	2202      	movs	r2, #2
 8002ace:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	331b      	adds	r3, #27
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	f040 80fa 	bne.w	8002cdc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	334c      	adds	r3, #76	@ 0x4c
 8002af8:	2202      	movs	r2, #2
 8002afa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	0151      	lsls	r1, r2, #5
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	440a      	add	r2, r1
 8002b12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	0151      	lsls	r1, r2, #5
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	440a      	add	r2, r1
 8002b32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b3a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	0151      	lsls	r1, r2, #5
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	440a      	add	r2, r1
 8002b52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b56:	f023 0320 	bic.w	r3, r3, #32
 8002b5a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3326      	adds	r3, #38	@ 0x26
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3326      	adds	r3, #38	@ 0x26
 8002b82:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	f040 80a9 	bne.w	8002cdc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ba0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ba8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	e08e      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	334d      	adds	r3, #77	@ 0x4d
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d143      	bne.n	8002c5c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	334d      	adds	r3, #77	@ 0x4d
 8002be4:	2202      	movs	r2, #2
 8002be6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	334c      	adds	r3, #76	@ 0x4c
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3326      	adds	r3, #38	@ 0x26
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	3326      	adds	r3, #38	@ 0x26
 8002c22:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d159      	bne.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c3e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c46:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c54:	461a      	mov	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e03f      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	334d      	adds	r3, #77	@ 0x4d
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d126      	bne.n	8002cc0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	334d      	adds	r3, #77	@ 0x4d
 8002c82:	2202      	movs	r2, #2
 8002c84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3344      	adds	r3, #68	@ 0x44
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	1c59      	adds	r1, r3, #1
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4403      	add	r3, r0
 8002ca6:	3344      	adds	r3, #68	@ 0x44
 8002ca8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	334c      	adds	r3, #76	@ 0x4c
 8002cba:	2204      	movs	r2, #4
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e00d      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	334d      	adds	r3, #77	@ 0x4d
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	f000 8100 	beq.w	8002ed8 <HCD_HC_IN_IRQHandler+0xcca>
 8002cd8:	e000      	b.n	8002cdc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cda:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	334c      	adds	r3, #76	@ 0x4c
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f006 ffe8 	bl	8009cc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cf8:	e0ef      	b.n	8002eda <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f003 fee3 	bl	8006ace <USB_ReadChInterrupts>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0e:	2b40      	cmp	r3, #64	@ 0x40
 8002d10:	d12f      	bne.n	8002d72 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2340      	movs	r3, #64	@ 0x40
 8002d22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	334d      	adds	r3, #77	@ 0x4d
 8002d34:	2205      	movs	r2, #5
 8002d36:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	331a      	adds	r3, #26
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3344      	adds	r3, #68	@ 0x44
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f004 fc53 	bl	8007616 <USB_HC_Halt>
 8002d70:	e0b3      	b.n	8002eda <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 fea7 	bl	8006ace <USB_ReadChInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b10      	cmp	r3, #16
 8002d88:	f040 80a7 	bne.w	8002eda <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3326      	adds	r3, #38	@ 0x26
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d11b      	bne.n	8002dda <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	3344      	adds	r3, #68	@ 0x44
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	334d      	adds	r3, #77	@ 0x4d
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 fc1f 	bl	8007616 <USB_HC_Halt>
 8002dd8:	e03f      	b.n	8002e5a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	3326      	adds	r3, #38	@ 0x26
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3326      	adds	r3, #38	@ 0x26
 8002e00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d129      	bne.n	8002e5a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3344      	adds	r3, #68	@ 0x44
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	799b      	ldrb	r3, [r3, #6]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HCD_HC_IN_IRQHandler+0xc2a>
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	331b      	adds	r3, #27
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d110      	bne.n	8002e5a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	334d      	adds	r3, #77	@ 0x4d
 8002e48:	2204      	movs	r2, #4
 8002e4a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f004 fbde 	bl	8007616 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	331b      	adds	r3, #27
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d129      	bne.n	8002ec4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	331b      	adds	r3, #27
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	0151      	lsls	r1, r2, #5
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	440a      	add	r2, r1
 8002e9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	0151      	lsls	r1, r2, #5
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	440a      	add	r2, r1
 8002eba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ebe:	f043 0320 	orr.w	r3, r3, #32
 8002ec2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	6093      	str	r3, [r2, #8]
 8002ed6:	e000      	b.n	8002eda <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002ed8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f003 fde5 	bl	8006ace <USB_ReadChInterrupts>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d11b      	bne.n	8002f46 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	334d      	adds	r3, #77	@ 0x4d
 8002f30:	2207      	movs	r2, #7
 8002f32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f004 fb6a 	bl	8007616 <USB_HC_Halt>
 8002f42:	f000 bc89 	b.w	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f003 fdbd 	bl	8006ace <USB_ReadChInterrupts>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	f040 8082 	bne.w	8003064 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2320      	movs	r3, #32
 8002f70:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	3319      	adds	r3, #25
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d124      	bne.n	8002fd2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	3319      	adds	r3, #25
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	334c      	adds	r3, #76	@ 0x4c
 8002fac:	2202      	movs	r2, #2
 8002fae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	334d      	adds	r3, #77	@ 0x4d
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 fb22 	bl	8007616 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	331a      	adds	r3, #26
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f040 8437 	bne.w	8003858 <HCD_HC_OUT_IRQHandler+0x978>
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	331b      	adds	r3, #27
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 842b 	bne.w	8003858 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3326      	adds	r3, #38	@ 0x26
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d009      	beq.n	800302c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	331b      	adds	r3, #27
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	334d      	adds	r3, #77	@ 0x4d
 800303c:	2203      	movs	r2, #3
 800303e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f004 fae4 	bl	8007616 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3344      	adds	r3, #68	@ 0x44
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e3f9      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f003 fd2e 	bl	8006ace <USB_ReadChInterrupts>
 8003072:	4603      	mov	r3, r0
 8003074:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800307c:	d111      	bne.n	80030a2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4413      	add	r3, r2
 8003086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800308a:	461a      	mov	r2, r3
 800308c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003090:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f004 fabb 	bl	8007616 <USB_HC_Halt>
 80030a0:	e3da      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fd0f 	bl	8006ace <USB_ReadChInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d168      	bne.n	800318c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3344      	adds	r3, #68	@ 0x44
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f003 fcf9 	bl	8006ace <USB_ReadChInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e2:	2b40      	cmp	r3, #64	@ 0x40
 80030e4:	d112      	bne.n	800310c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	3319      	adds	r3, #25
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003106:	461a      	mov	r2, r3
 8003108:	2340      	movs	r3, #64	@ 0x40
 800310a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	331b      	adds	r3, #27
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d019      	beq.n	8003156 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	331b      	adds	r3, #27
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	0151      	lsls	r1, r2, #5
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	440a      	add	r2, r1
 800314c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003154:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003162:	461a      	mov	r2, r3
 8003164:	2301      	movs	r3, #1
 8003166:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334d      	adds	r3, #77	@ 0x4d
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f004 fa46 	bl	8007616 <USB_HC_Halt>
 800318a:	e365      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fc9a 	bl	8006ace <USB_ReadChInterrupts>
 800319a:	4603      	mov	r3, r0
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d139      	bne.n	8003218 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	334d      	adds	r3, #77	@ 0x4d
 80031b4:	2205      	movs	r2, #5
 80031b6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	331a      	adds	r3, #26
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3319      	adds	r3, #25
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3344      	adds	r3, #68	@ 0x44
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f004 fa09 	bl	8007616 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003210:	461a      	mov	r2, r3
 8003212:	2340      	movs	r3, #64	@ 0x40
 8003214:	6093      	str	r3, [r2, #8]
 8003216:	e31f      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f003 fc54 	bl	8006ace <USB_ReadChInterrupts>
 8003226:	4603      	mov	r3, r0
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b08      	cmp	r3, #8
 800322e:	d11a      	bne.n	8003266 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323c:	461a      	mov	r2, r3
 800323e:	2308      	movs	r3, #8
 8003240:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334d      	adds	r3, #77	@ 0x4d
 8003252:	2206      	movs	r2, #6
 8003254:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f004 f9d9 	bl	8007616 <USB_HC_Halt>
 8003264:	e2f8      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f003 fc2d 	bl	8006ace <USB_ReadChInterrupts>
 8003274:	4603      	mov	r3, r0
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b10      	cmp	r3, #16
 800327c:	d144      	bne.n	8003308 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	3344      	adds	r3, #68	@ 0x44
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	334d      	adds	r3, #77	@ 0x4d
 80032a2:	2204      	movs	r2, #4
 80032a4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3319      	adds	r3, #25
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d114      	bne.n	80032e6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	3318      	adds	r3, #24
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3319      	adds	r3, #25
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f004 f991 	bl	8007616 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003300:	461a      	mov	r2, r3
 8003302:	2310      	movs	r3, #16
 8003304:	6093      	str	r3, [r2, #8]
 8003306:	e2a7      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f003 fbdc 	bl	8006ace <USB_ReadChInterrupts>
 8003316:	4603      	mov	r3, r0
 8003318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331c:	2b80      	cmp	r3, #128	@ 0x80
 800331e:	f040 8083 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	799b      	ldrb	r3, [r3, #6]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d111      	bne.n	800334e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	334d      	adds	r3, #77	@ 0x4d
 800333a:	2207      	movs	r2, #7
 800333c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f004 f965 	bl	8007616 <USB_HC_Halt>
 800334c:	e062      	b.n	8003414 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3344      	adds	r3, #68	@ 0x44
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	1c59      	adds	r1, r3, #1
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4403      	add	r3, r0
 800336e:	3344      	adds	r3, #68	@ 0x44
 8003370:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3344      	adds	r3, #68	@ 0x44
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d922      	bls.n	80033ce <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3344      	adds	r3, #68	@ 0x44
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	334c      	adds	r3, #76	@ 0x4c
 80033ac:	2204      	movs	r2, #4
 80033ae:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	334c      	adds	r3, #76	@ 0x4c
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f006 fc7e 	bl	8009cc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033cc:	e022      	b.n	8003414 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	334c      	adds	r3, #76	@ 0x4c
 80033de:	2202      	movs	r2, #2
 80033e0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033f8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003400:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	2380      	movs	r3, #128	@ 0x80
 8003424:	6093      	str	r3, [r2, #8]
 8003426:	e217      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f003 fb4c 	bl	8006ace <USB_ReadChInterrupts>
 8003436:	4603      	mov	r3, r0
 8003438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003440:	d11b      	bne.n	800347a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	334d      	adds	r3, #77	@ 0x4d
 8003452:	2209      	movs	r2, #9
 8003454:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f004 f8d9 	bl	8007616 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003470:	461a      	mov	r2, r3
 8003472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003476:	6093      	str	r3, [r2, #8]
 8003478:	e1ee      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f003 fb23 	bl	8006ace <USB_ReadChInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b02      	cmp	r3, #2
 8003490:	f040 81df 	bne.w	8003852 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4413      	add	r3, r2
 800349c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a0:	461a      	mov	r2, r3
 80034a2:	2302      	movs	r3, #2
 80034a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	334d      	adds	r3, #77	@ 0x4d
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	f040 8093 	bne.w	80035e4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	334d      	adds	r3, #77	@ 0x4d
 80034ce:	2202      	movs	r2, #2
 80034d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	334c      	adds	r3, #76	@ 0x4c
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3326      	adds	r3, #38	@ 0x26
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d00b      	beq.n	8003514 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3326      	adds	r3, #38	@ 0x26
 800350c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800350e:	2b03      	cmp	r3, #3
 8003510:	f040 8190 	bne.w	8003834 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	799b      	ldrb	r3, [r3, #6]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d115      	bne.n	8003548 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	333d      	adds	r3, #61	@ 0x3d
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	f083 0301 	eor.w	r3, r3, #1
 8003534:	b2d8      	uxtb	r0, r3
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	333d      	adds	r3, #61	@ 0x3d
 8003544:	4602      	mov	r2, r0
 8003546:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	799b      	ldrb	r3, [r3, #6]
 800354c:	2b01      	cmp	r3, #1
 800354e:	f040 8171 	bne.w	8003834 <HCD_HC_OUT_IRQHandler+0x954>
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3334      	adds	r3, #52	@ 0x34
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8165 	beq.w	8003834 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	3334      	adds	r3, #52	@ 0x34
 800357a:	6819      	ldr	r1, [r3, #0]
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4403      	add	r3, r0
 800358a:	3328      	adds	r3, #40	@ 0x28
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	440b      	add	r3, r1
 8003590:	1e59      	subs	r1, r3, #1
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4403      	add	r3, r0
 80035a0:	3328      	adds	r3, #40	@ 0x28
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 813f 	beq.w	8003834 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	333d      	adds	r3, #61	@ 0x3d
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	f083 0301 	eor.w	r3, r3, #1
 80035ce:	b2d8      	uxtb	r0, r3
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	333d      	adds	r3, #61	@ 0x3d
 80035de:	4602      	mov	r2, r0
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	e127      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	334d      	adds	r3, #77	@ 0x4d
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d120      	bne.n	800363c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	334d      	adds	r3, #77	@ 0x4d
 800360a:	2202      	movs	r2, #2
 800360c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	331b      	adds	r3, #27
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	f040 8107 	bne.w	8003834 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	334c      	adds	r3, #76	@ 0x4c
 8003636:	2202      	movs	r2, #2
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e0fb      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	334d      	adds	r3, #77	@ 0x4d
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b04      	cmp	r3, #4
 8003650:	d13a      	bne.n	80036c8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	334d      	adds	r3, #77	@ 0x4d
 8003662:	2202      	movs	r2, #2
 8003664:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	334c      	adds	r3, #76	@ 0x4c
 8003676:	2202      	movs	r2, #2
 8003678:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	331b      	adds	r3, #27
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	f040 80d1 	bne.w	8003834 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	331b      	adds	r3, #27
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	0151      	lsls	r1, r2, #5
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	440a      	add	r2, r1
 80036bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c4:	6053      	str	r3, [r2, #4]
 80036c6:	e0b5      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	334d      	adds	r3, #77	@ 0x4d
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b05      	cmp	r3, #5
 80036dc:	d114      	bne.n	8003708 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	334d      	adds	r3, #77	@ 0x4d
 80036ee:	2202      	movs	r2, #2
 80036f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334c      	adds	r3, #76	@ 0x4c
 8003702:	2202      	movs	r2, #2
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e095      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	334d      	adds	r3, #77	@ 0x4d
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b06      	cmp	r3, #6
 800371c:	d114      	bne.n	8003748 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	334d      	adds	r3, #77	@ 0x4d
 800372e:	2202      	movs	r2, #2
 8003730:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	334c      	adds	r3, #76	@ 0x4c
 8003742:	2205      	movs	r2, #5
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	e075      	b.n	8003834 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	334d      	adds	r3, #77	@ 0x4d
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b07      	cmp	r3, #7
 800375c:	d00a      	beq.n	8003774 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	334d      	adds	r3, #77	@ 0x4d
 800376e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003770:	2b09      	cmp	r3, #9
 8003772:	d170      	bne.n	8003856 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	334d      	adds	r3, #77	@ 0x4d
 8003784:	2202      	movs	r2, #2
 8003786:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	3344      	adds	r3, #68	@ 0x44
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4403      	add	r3, r0
 80037a8:	3344      	adds	r3, #68	@ 0x44
 80037aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037ac:	78fa      	ldrb	r2, [r7, #3]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	3344      	adds	r3, #68	@ 0x44
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d914      	bls.n	80037ec <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	3344      	adds	r3, #68	@ 0x44
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	334c      	adds	r3, #76	@ 0x4c
 80037e6:	2204      	movs	r2, #4
 80037e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037ea:	e022      	b.n	8003832 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	334c      	adds	r3, #76	@ 0x4c
 80037fc:	2202      	movs	r2, #2
 80037fe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003816:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800381e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382c:	461a      	mov	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003832:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	334c      	adds	r3, #76	@ 0x4c
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f006 fa3c 	bl	8009cc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003850:	e002      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003856:	bf00      	nop
  }
}
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b08a      	sub	sp, #40	@ 0x28
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	0c5b      	lsrs	r3, r3, #17
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003892:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d004      	beq.n	80038a4 <HCD_RXQLVL_IRQHandler+0x46>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b05      	cmp	r3, #5
 800389e:	f000 80b6 	beq.w	8003a0e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038a2:	e0b7      	b.n	8003a14 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80b3 	beq.w	8003a12 <HCD_RXQLVL_IRQHandler+0x1b4>
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	332c      	adds	r3, #44	@ 0x2c
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80a7 	beq.w	8003a12 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3338      	adds	r3, #56	@ 0x38
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	18d1      	adds	r1, r2, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4403      	add	r3, r0
 80038e8:	3334      	adds	r3, #52	@ 0x34
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4299      	cmp	r1, r3
 80038ee:	f200 8083 	bhi.w	80039f8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	332c      	adds	r3, #44	@ 0x2c
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	b292      	uxth	r2, r2
 800390c:	4619      	mov	r1, r3
 800390e:	f003 f873 	bl	80069f8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	332c      	adds	r3, #44	@ 0x2c
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	18d1      	adds	r1, r2, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4403      	add	r3, r0
 8003936:	332c      	adds	r3, #44	@ 0x2c
 8003938:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	3338      	adds	r3, #56	@ 0x38
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	18d1      	adds	r1, r2, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4403      	add	r3, r0
 800395e:	3338      	adds	r3, #56	@ 0x38
 8003960:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	4413      	add	r3, r2
 800396a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	0cdb      	lsrs	r3, r3, #19
 8003972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003976:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	3328      	adds	r3, #40	@ 0x28
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4293      	cmp	r3, r2
 8003990:	d13f      	bne.n	8003a12 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d03c      	beq.n	8003a12 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	333c      	adds	r3, #60	@ 0x3c
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	f083 0301 	eor.w	r3, r3, #1
 80039e0:	b2d8      	uxtb	r0, r3
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	333c      	adds	r3, #60	@ 0x3c
 80039f2:	4602      	mov	r2, r0
 80039f4:	701a      	strb	r2, [r3, #0]
      break;
 80039f6:	e00c      	b.n	8003a12 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4613      	mov	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	334c      	adds	r3, #76	@ 0x4c
 8003a08:	2204      	movs	r2, #4
 8003a0a:	701a      	strb	r2, [r3, #0]
      break;
 8003a0c:	e001      	b.n	8003a12 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e000      	b.n	8003a14 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003a12:	bf00      	nop
  }
}
 8003a14:	bf00      	nop
 8003a16:	3728      	adds	r7, #40	@ 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003a48:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d10b      	bne.n	8003a6c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d102      	bne.n	8003a64 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f006 f916 	bl	8009c90 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f043 0302 	orr.w	r3, r3, #2
 8003a6a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d132      	bne.n	8003adc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f043 0308 	orr.w	r3, r3, #8
 8003a7c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d126      	bne.n	8003ad6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7a5b      	ldrb	r3, [r3, #9]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d113      	bne.n	8003ab8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003a96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a9a:	d106      	bne.n	8003aaa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 f938 	bl	8006d18 <USB_InitFSLSPClkSel>
 8003aa8:	e011      	b.n	8003ace <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f003 f931 	bl	8006d18 <USB_InitFSLSPClkSel>
 8003ab6:	e00a      	b.n	8003ace <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	79db      	ldrb	r3, [r3, #7]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d106      	bne.n	8003ace <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003acc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f006 f908 	bl	8009ce4 <HAL_HCD_PortEnabled_Callback>
 8003ad4:	e002      	b.n	8003adc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f006 f912 	bl	8009d00 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d103      	bne.n	8003aee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f043 0320 	orr.w	r3, r3, #32
 8003aec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003af4:	461a      	mov	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6013      	str	r3, [r2, #0]
}
 8003afa:	bf00      	nop
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e12b      	b.n	8003d6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd f878 	bl	8000c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	@ 0x24
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b68:	f001 fa20 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 8003b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4a81      	ldr	r2, [pc, #516]	@ (8003d78 <HAL_I2C_Init+0x274>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d807      	bhi.n	8003b88 <HAL_I2C_Init+0x84>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a80      	ldr	r2, [pc, #512]	@ (8003d7c <HAL_I2C_Init+0x278>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	bf94      	ite	ls
 8003b80:	2301      	movls	r3, #1
 8003b82:	2300      	movhi	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	e006      	b.n	8003b96 <HAL_I2C_Init+0x92>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a7d      	ldr	r2, [pc, #500]	@ (8003d80 <HAL_I2C_Init+0x27c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	bf94      	ite	ls
 8003b90:	2301      	movls	r3, #1
 8003b92:	2300      	movhi	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e0e7      	b.n	8003d6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a78      	ldr	r2, [pc, #480]	@ (8003d84 <HAL_I2C_Init+0x280>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	0c9b      	lsrs	r3, r3, #18
 8003ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4a6a      	ldr	r2, [pc, #424]	@ (8003d78 <HAL_I2C_Init+0x274>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d802      	bhi.n	8003bd8 <HAL_I2C_Init+0xd4>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	e009      	b.n	8003bec <HAL_I2C_Init+0xe8>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	4a69      	ldr	r2, [pc, #420]	@ (8003d88 <HAL_I2C_Init+0x284>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	099b      	lsrs	r3, r3, #6
 8003bea:	3301      	adds	r3, #1
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	495c      	ldr	r1, [pc, #368]	@ (8003d78 <HAL_I2C_Init+0x274>)
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	d819      	bhi.n	8003c40 <HAL_I2C_Init+0x13c>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1e59      	subs	r1, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c1a:	1c59      	adds	r1, r3, #1
 8003c1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c20:	400b      	ands	r3, r1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_I2C_Init+0x138>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1e59      	subs	r1, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c34:	3301      	adds	r3, #1
 8003c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3a:	e051      	b.n	8003ce0 <HAL_I2C_Init+0x1dc>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	e04f      	b.n	8003ce0 <HAL_I2C_Init+0x1dc>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d111      	bne.n	8003c6c <HAL_I2C_Init+0x168>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e58      	subs	r0, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	440b      	add	r3, r1
 8003c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e012      	b.n	8003c92 <HAL_I2C_Init+0x18e>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1e58      	subs	r0, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	0099      	lsls	r1, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Init+0x196>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e022      	b.n	8003ce0 <HAL_I2C_Init+0x1dc>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_I2C_Init+0x1bc>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1e58      	subs	r0, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	460b      	mov	r3, r1
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	440b      	add	r3, r1
 8003cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cbe:	e00f      	b.n	8003ce0 <HAL_I2C_Init+0x1dc>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1e58      	subs	r0, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	0099      	lsls	r1, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	6809      	ldr	r1, [r1, #0]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6911      	ldr	r1, [r2, #16]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68d2      	ldr	r2, [r2, #12]
 8003d1a:	4311      	orrs	r1, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	000186a0 	.word	0x000186a0
 8003d7c:	001e847f 	.word	0x001e847f
 8003d80:	003d08ff 	.word	0x003d08ff
 8003d84:	431bde83 	.word	0x431bde83
 8003d88:	10624dd3 	.word	0x10624dd3

08003d8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e128      	b.n	8003ff0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a90      	ldr	r2, [pc, #576]	@ (8003ff8 <HAL_I2S_Init+0x26c>)
 8003db6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fc ff79 	bl	8000cb0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003dd4:	f023 030f 	bic.w	r3, r3, #15
 8003dd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2202      	movs	r2, #2
 8003de0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d060      	beq.n	8003eac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d102      	bne.n	8003df8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003df2:	2310      	movs	r3, #16
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e001      	b.n	8003dfc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003df8:	2320      	movs	r3, #32
 8003dfa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d802      	bhi.n	8003e0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f001 f9c4 	bl	8005198 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e10:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e1a:	d125      	bne.n	8003e68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d010      	beq.n	8003e46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	461a      	mov	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	3305      	adds	r3, #5
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	e01f      	b.n	8003e86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	461a      	mov	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e62:	3305      	adds	r3, #5
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	e00e      	b.n	8003e86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	461a      	mov	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	3305      	adds	r3, #5
 8003e84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4a5c      	ldr	r2, [pc, #368]	@ (8003ffc <HAL_I2S_Init+0x270>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	08db      	lsrs	r3, r3, #3
 8003e90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	e003      	b.n	8003eb4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003eac:	2302      	movs	r3, #2
 8003eae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d902      	bls.n	8003ec0 <HAL_I2S_Init+0x134>
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	2bff      	cmp	r3, #255	@ 0xff
 8003ebe:	d907      	bls.n	8003ed0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec4:	f043 0210 	orr.w	r2, r3, #16
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e08f      	b.n	8003ff0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	ea42 0103 	orr.w	r1, r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003eee:	f023 030f 	bic.w	r3, r3, #15
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6851      	ldr	r1, [r2, #4]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6892      	ldr	r2, [r2, #8]
 8003efa:	4311      	orrs	r1, r2
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68d2      	ldr	r2, [r2, #12]
 8003f00:	4311      	orrs	r1, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6992      	ldr	r2, [r2, #24]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d161      	bne.n	8003fe0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a38      	ldr	r2, [pc, #224]	@ (8004000 <HAL_I2S_Init+0x274>)
 8003f20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a37      	ldr	r2, [pc, #220]	@ (8004004 <HAL_I2S_Init+0x278>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d101      	bne.n	8003f30 <HAL_I2S_Init+0x1a4>
 8003f2c:	4b36      	ldr	r3, [pc, #216]	@ (8004008 <HAL_I2S_Init+0x27c>)
 8003f2e:	e001      	b.n	8003f34 <HAL_I2S_Init+0x1a8>
 8003f30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	4932      	ldr	r1, [pc, #200]	@ (8004004 <HAL_I2S_Init+0x278>)
 8003f3c:	428a      	cmp	r2, r1
 8003f3e:	d101      	bne.n	8003f44 <HAL_I2S_Init+0x1b8>
 8003f40:	4a31      	ldr	r2, [pc, #196]	@ (8004008 <HAL_I2S_Init+0x27c>)
 8003f42:	e001      	b.n	8003f48 <HAL_I2S_Init+0x1bc>
 8003f44:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003f48:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003f4c:	f023 030f 	bic.w	r3, r3, #15
 8003f50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2b      	ldr	r2, [pc, #172]	@ (8004004 <HAL_I2S_Init+0x278>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <HAL_I2S_Init+0x1d4>
 8003f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004008 <HAL_I2S_Init+0x27c>)
 8003f5e:	e001      	b.n	8003f64 <HAL_I2S_Init+0x1d8>
 8003f60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f64:	2202      	movs	r2, #2
 8003f66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a25      	ldr	r2, [pc, #148]	@ (8004004 <HAL_I2S_Init+0x278>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d101      	bne.n	8003f76 <HAL_I2S_Init+0x1ea>
 8003f72:	4b25      	ldr	r3, [pc, #148]	@ (8004008 <HAL_I2S_Init+0x27c>)
 8003f74:	e001      	b.n	8003f7a <HAL_I2S_Init+0x1ee>
 8003f76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f86:	d003      	beq.n	8003f90 <HAL_I2S_Init+0x204>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d103      	bne.n	8003f98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	e001      	b.n	8003f9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	897b      	ldrh	r3, [r7, #10]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003fc8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a0d      	ldr	r2, [pc, #52]	@ (8004004 <HAL_I2S_Init+0x278>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_I2S_Init+0x24c>
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <HAL_I2S_Init+0x27c>)
 8003fd6:	e001      	b.n	8003fdc <HAL_I2S_Init+0x250>
 8003fd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fdc:	897a      	ldrh	r2, [r7, #10]
 8003fde:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	08004103 	.word	0x08004103
 8003ffc:	cccccccd 	.word	0xcccccccd
 8004000:	08004219 	.word	0x08004219
 8004004:	40003800 	.word	0x40003800
 8004008:	40003400 	.word	0x40003400

0800400c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	1c9a      	adds	r2, r3, #2
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10e      	bne.n	800409c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800408c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ffb8 	bl	800400c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800409c:	bf00      	nop
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	b292      	uxth	r2, r2
 80040b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10e      	bne.n	80040fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff93 	bl	8004020 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b04      	cmp	r3, #4
 800411c:	d13a      	bne.n	8004194 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d109      	bne.n	800413c <I2S_IRQHandler+0x3a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004132:	2b40      	cmp	r3, #64	@ 0x40
 8004134:	d102      	bne.n	800413c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ffb4 	bl	80040a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004142:	2b40      	cmp	r3, #64	@ 0x40
 8004144:	d126      	bne.n	8004194 <I2S_IRQHandler+0x92>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b20      	cmp	r3, #32
 8004152:	d11f      	bne.n	8004194 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004162:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	f043 0202 	orr.w	r2, r3, #2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff ff50 	bl	8004034 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b03      	cmp	r3, #3
 800419e:	d136      	bne.n	800420e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d109      	bne.n	80041be <I2S_IRQHandler+0xbc>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b4:	2b80      	cmp	r3, #128	@ 0x80
 80041b6:	d102      	bne.n	80041be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff ff45 	bl	8004048 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d122      	bne.n	800420e <I2S_IRQHandler+0x10c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d11b      	bne.n	800420e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004200:	f043 0204 	orr.w	r2, r3, #4
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff13 	bl	8004034 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800420e:	bf00      	nop
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a92      	ldr	r2, [pc, #584]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d101      	bne.n	8004236 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004232:	4b92      	ldr	r3, [pc, #584]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004234:	e001      	b.n	800423a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004236:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a8b      	ldr	r2, [pc, #556]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d101      	bne.n	8004254 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004250:	4b8a      	ldr	r3, [pc, #552]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004252:	e001      	b.n	8004258 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004254:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004264:	d004      	beq.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 8099 	bne.w	80043a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b02      	cmp	r3, #2
 8004278:	d107      	bne.n	800428a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f925 	bl	80044d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d107      	bne.n	80042a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f9c8 	bl	8004634 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042aa:	2b40      	cmp	r3, #64	@ 0x40
 80042ac:	d13a      	bne.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d035      	beq.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80042c2:	4b6e      	ldr	r3, [pc, #440]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042c4:	e001      	b.n	80042ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80042c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4969      	ldr	r1, [pc, #420]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042d2:	428b      	cmp	r3, r1
 80042d4:	d101      	bne.n	80042da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042d6:	4b69      	ldr	r3, [pc, #420]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042d8:	e001      	b.n	80042de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004316:	f043 0202 	orr.w	r2, r3, #2
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff fe88 	bl	8004034 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b08      	cmp	r3, #8
 800432c:	f040 80c3 	bne.w	80044b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80bd 	beq.w	80044b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800434a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a49      	ldr	r2, [pc, #292]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004356:	4b49      	ldr	r3, [pc, #292]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004358:	e001      	b.n	800435e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800435a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4944      	ldr	r1, [pc, #272]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004366:	428b      	cmp	r3, r1
 8004368:	d101      	bne.n	800436e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800436a:	4b44      	ldr	r3, [pc, #272]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800436c:	e001      	b.n	8004372 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800436e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004372:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004376:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004378:	2300      	movs	r3, #0
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff fe4a 	bl	8004034 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043a0:	e089      	b.n	80044b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d107      	bne.n	80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f8be 	bl	8004538 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d107      	bne.n	80043d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f8fd 	bl	80045d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043dc:	2b40      	cmp	r3, #64	@ 0x40
 80043de:	d12f      	bne.n	8004440 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d02a      	beq.n	8004440 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d101      	bne.n	8004408 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004404:	4b1d      	ldr	r3, [pc, #116]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004406:	e001      	b.n	800440c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004408:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4919      	ldr	r1, [pc, #100]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004414:	428b      	cmp	r3, r1
 8004416:	d101      	bne.n	800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004418:	4b18      	ldr	r3, [pc, #96]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800441a:	e001      	b.n	8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800441c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004420:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004424:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004432:	f043 0202 	orr.w	r2, r3, #2
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff fdfa 	bl	8004034 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b08      	cmp	r3, #8
 8004448:	d136      	bne.n	80044b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d031      	beq.n	80044b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a07      	ldr	r2, [pc, #28]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800445e:	4b07      	ldr	r3, [pc, #28]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004460:	e001      	b.n	8004466 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004462:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4902      	ldr	r1, [pc, #8]	@ (8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800446e:	428b      	cmp	r3, r1
 8004470:	d106      	bne.n	8004480 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004472:	4b02      	ldr	r3, [pc, #8]	@ (800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004474:	e006      	b.n	8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004476:	bf00      	nop
 8004478:	40003800 	.word	0x40003800
 800447c:	40003400 	.word	0x40003400
 8004480:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004484:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004488:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004498:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fdc0 	bl	8004034 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044b4:	e000      	b.n	80044b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044b6:	bf00      	nop
}
 80044b8:	bf00      	nop
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	1c99      	adds	r1, r3, #2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80044e6:	881a      	ldrh	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d113      	bne.n	800452e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004514:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ffc9 	bl	80044c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	1c99      	adds	r1, r3, #2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6251      	str	r1, [r2, #36]	@ 0x24
 800454a:	8819      	ldrh	r1, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d101      	bne.n	800455a <I2SEx_TxISR_I2SExt+0x22>
 8004556:	4b1d      	ldr	r3, [pc, #116]	@ (80045cc <I2SEx_TxISR_I2SExt+0x94>)
 8004558:	e001      	b.n	800455e <I2SEx_TxISR_I2SExt+0x26>
 800455a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800455e:	460a      	mov	r2, r1
 8004560:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d121      	bne.n	80045be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a12      	ldr	r2, [pc, #72]	@ (80045c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <I2SEx_TxISR_I2SExt+0x50>
 8004584:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <I2SEx_TxISR_I2SExt+0x94>)
 8004586:	e001      	b.n	800458c <I2SEx_TxISR_I2SExt+0x54>
 8004588:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	490d      	ldr	r1, [pc, #52]	@ (80045c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004594:	428b      	cmp	r3, r1
 8004596:	d101      	bne.n	800459c <I2SEx_TxISR_I2SExt+0x64>
 8004598:	4b0c      	ldr	r3, [pc, #48]	@ (80045cc <I2SEx_TxISR_I2SExt+0x94>)
 800459a:	e001      	b.n	80045a0 <I2SEx_TxISR_I2SExt+0x68>
 800459c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff81 	bl	80044c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40003800 	.word	0x40003800
 80045cc:	40003400 	.word	0x40003400

080045d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68d8      	ldr	r0, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	1c99      	adds	r1, r3, #2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80045e8:	b282      	uxth	r2, r0
 80045ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d113      	bne.n	800462c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004612:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff ff4a 	bl	80044c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a20      	ldr	r2, [pc, #128]	@ (80046c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <I2SEx_RxISR_I2SExt+0x16>
 8004646:	4b20      	ldr	r3, [pc, #128]	@ (80046c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004648:	e001      	b.n	800464e <I2SEx_RxISR_I2SExt+0x1a>
 800464a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800464e:	68d8      	ldr	r0, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	1c99      	adds	r1, r3, #2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800465a:	b282      	uxth	r2, r0
 800465c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d121      	bne.n	80046ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a12      	ldr	r2, [pc, #72]	@ (80046c4 <I2SEx_RxISR_I2SExt+0x90>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d101      	bne.n	8004684 <I2SEx_RxISR_I2SExt+0x50>
 8004680:	4b11      	ldr	r3, [pc, #68]	@ (80046c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004682:	e001      	b.n	8004688 <I2SEx_RxISR_I2SExt+0x54>
 8004684:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	490d      	ldr	r1, [pc, #52]	@ (80046c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004690:	428b      	cmp	r3, r1
 8004692:	d101      	bne.n	8004698 <I2SEx_RxISR_I2SExt+0x64>
 8004694:	4b0c      	ldr	r3, [pc, #48]	@ (80046c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004696:	e001      	b.n	800469c <I2SEx_RxISR_I2SExt+0x68>
 8004698:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800469c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ff03 	bl	80044c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40003800 	.word	0x40003800
 80046c8:	40003400 	.word	0x40003400

080046cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e267      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d075      	beq.n	80047d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046ea:	4b88      	ldr	r3, [pc, #544]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d00c      	beq.n	8004710 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046f6:	4b85      	ldr	r3, [pc, #532]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d112      	bne.n	8004728 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004702:	4b82      	ldr	r3, [pc, #520]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800470e:	d10b      	bne.n	8004728 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004710:	4b7e      	ldr	r3, [pc, #504]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d05b      	beq.n	80047d4 <HAL_RCC_OscConfig+0x108>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d157      	bne.n	80047d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e242      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004730:	d106      	bne.n	8004740 <HAL_RCC_OscConfig+0x74>
 8004732:	4b76      	ldr	r3, [pc, #472]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a75      	ldr	r2, [pc, #468]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e01d      	b.n	800477c <HAL_RCC_OscConfig+0xb0>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0x98>
 800474a:	4b70      	ldr	r3, [pc, #448]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6f      	ldr	r2, [pc, #444]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b6d      	ldr	r3, [pc, #436]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6c      	ldr	r2, [pc, #432]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e00b      	b.n	800477c <HAL_RCC_OscConfig+0xb0>
 8004764:	4b69      	ldr	r3, [pc, #420]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a68      	ldr	r2, [pc, #416]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800476a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b66      	ldr	r3, [pc, #408]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a65      	ldr	r2, [pc, #404]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800477a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d013      	beq.n	80047ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fc fd6e 	bl	8001264 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fc fd6a 	bl	8001264 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	@ 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e207      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b5b      	ldr	r3, [pc, #364]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0xc0>
 80047aa:	e014      	b.n	80047d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fc fd5a 	bl	8001264 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fc fd56 	bl	8001264 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	@ 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e1f3      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c6:	4b51      	ldr	r3, [pc, #324]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0xe8>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d063      	beq.n	80048aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047e2:	4b4a      	ldr	r3, [pc, #296]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ee:	4b47      	ldr	r3, [pc, #284]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d11c      	bne.n	8004834 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fa:	4b44      	ldr	r3, [pc, #272]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d116      	bne.n	8004834 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	4b41      	ldr	r3, [pc, #260]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_RCC_OscConfig+0x152>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d001      	beq.n	800481e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e1c7      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481e:	4b3b      	ldr	r3, [pc, #236]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4937      	ldr	r1, [pc, #220]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	e03a      	b.n	80048aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d020      	beq.n	800487e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483c:	4b34      	ldr	r3, [pc, #208]	@ (8004910 <HAL_RCC_OscConfig+0x244>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004842:	f7fc fd0f 	bl	8001264 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484a:	f7fc fd0b 	bl	8001264 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e1a8      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485c:	4b2b      	ldr	r3, [pc, #172]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004868:	4b28      	ldr	r3, [pc, #160]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4925      	ldr	r1, [pc, #148]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]
 800487c:	e015      	b.n	80048aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487e:	4b24      	ldr	r3, [pc, #144]	@ (8004910 <HAL_RCC_OscConfig+0x244>)
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fc fcee 	bl	8001264 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488c:	f7fc fcea 	bl	8001264 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e187      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489e:	4b1b      	ldr	r3, [pc, #108]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d036      	beq.n	8004924 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d016      	beq.n	80048ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048be:	4b15      	ldr	r3, [pc, #84]	@ (8004914 <HAL_RCC_OscConfig+0x248>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fc fcce 	bl	8001264 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048cc:	f7fc fcca 	bl	8001264 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e167      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048de:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <HAL_RCC_OscConfig+0x240>)
 80048e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x200>
 80048ea:	e01b      	b.n	8004924 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ec:	4b09      	ldr	r3, [pc, #36]	@ (8004914 <HAL_RCC_OscConfig+0x248>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f2:	f7fc fcb7 	bl	8001264 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f8:	e00e      	b.n	8004918 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fa:	f7fc fcb3 	bl	8001264 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d907      	bls.n	8004918 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e150      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
 800490c:	40023800 	.word	0x40023800
 8004910:	42470000 	.word	0x42470000
 8004914:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004918:	4b88      	ldr	r3, [pc, #544]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 800491a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1ea      	bne.n	80048fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8097 	beq.w	8004a60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004936:	4b81      	ldr	r3, [pc, #516]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	4b7d      	ldr	r3, [pc, #500]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 800494c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004950:	6413      	str	r3, [r2, #64]	@ 0x40
 8004952:	4b7a      	ldr	r3, [pc, #488]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495e:	2301      	movs	r3, #1
 8004960:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004962:	4b77      	ldr	r3, [pc, #476]	@ (8004b40 <HAL_RCC_OscConfig+0x474>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d118      	bne.n	80049a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800496e:	4b74      	ldr	r3, [pc, #464]	@ (8004b40 <HAL_RCC_OscConfig+0x474>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a73      	ldr	r2, [pc, #460]	@ (8004b40 <HAL_RCC_OscConfig+0x474>)
 8004974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497a:	f7fc fc73 	bl	8001264 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004982:	f7fc fc6f 	bl	8001264 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e10c      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004994:	4b6a      	ldr	r3, [pc, #424]	@ (8004b40 <HAL_RCC_OscConfig+0x474>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d106      	bne.n	80049b6 <HAL_RCC_OscConfig+0x2ea>
 80049a8:	4b64      	ldr	r3, [pc, #400]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ac:	4a63      	ldr	r2, [pc, #396]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b4:	e01c      	b.n	80049f0 <HAL_RCC_OscConfig+0x324>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b05      	cmp	r3, #5
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x30c>
 80049be:	4b5f      	ldr	r3, [pc, #380]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049c4:	f043 0304 	orr.w	r3, r3, #4
 80049c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ca:	4b5c      	ldr	r3, [pc, #368]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ce:	4a5b      	ldr	r2, [pc, #364]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d6:	e00b      	b.n	80049f0 <HAL_RCC_OscConfig+0x324>
 80049d8:	4b58      	ldr	r3, [pc, #352]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049dc:	4a57      	ldr	r2, [pc, #348]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e4:	4b55      	ldr	r3, [pc, #340]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e8:	4a54      	ldr	r2, [pc, #336]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 80049ea:	f023 0304 	bic.w	r3, r3, #4
 80049ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d015      	beq.n	8004a24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fc fc34 	bl	8001264 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fc fc30 	bl	8001264 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e0cb      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a16:	4b49      	ldr	r3, [pc, #292]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0ee      	beq.n	8004a00 <HAL_RCC_OscConfig+0x334>
 8004a22:	e014      	b.n	8004a4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a24:	f7fc fc1e 	bl	8001264 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2c:	f7fc fc1a 	bl	8001264 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e0b5      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a42:	4b3e      	ldr	r3, [pc, #248]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1ee      	bne.n	8004a2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d105      	bne.n	8004a60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a54:	4b39      	ldr	r3, [pc, #228]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	4a38      	ldr	r2, [pc, #224]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 80a1 	beq.w	8004bac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a6a:	4b34      	ldr	r3, [pc, #208]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d05c      	beq.n	8004b30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d141      	bne.n	8004b02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7e:	4b31      	ldr	r3, [pc, #196]	@ (8004b44 <HAL_RCC_OscConfig+0x478>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a84:	f7fc fbee 	bl	8001264 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8c:	f7fc fbea 	bl	8001264 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e087      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9e:	4b27      	ldr	r3, [pc, #156]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69da      	ldr	r2, [r3, #28]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	019b      	lsls	r3, r3, #6
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	041b      	lsls	r3, r3, #16
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	491b      	ldr	r1, [pc, #108]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b44 <HAL_RCC_OscConfig+0x478>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fc fbc3 	bl	8001264 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fc fbbf 	bl	8001264 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e05c      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af4:	4b11      	ldr	r3, [pc, #68]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x416>
 8004b00:	e054      	b.n	8004bac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b02:	4b10      	ldr	r3, [pc, #64]	@ (8004b44 <HAL_RCC_OscConfig+0x478>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fc fbac 	bl	8001264 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fc fba8 	bl	8001264 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e045      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b22:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <HAL_RCC_OscConfig+0x470>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x444>
 8004b2e:	e03d      	b.n	8004bac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e038      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	40007000 	.word	0x40007000
 8004b44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b48:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb8 <HAL_RCC_OscConfig+0x4ec>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d028      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d121      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d11a      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b78:	4013      	ands	r3, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d111      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	3b01      	subs	r3, #1
 8004b92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800

08004bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0cc      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd0:	4b68      	ldr	r3, [pc, #416]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d90c      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bde:	4b65      	ldr	r3, [pc, #404]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b63      	ldr	r3, [pc, #396]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0b8      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d020      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c10:	4b59      	ldr	r3, [pc, #356]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4a58      	ldr	r2, [pc, #352]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c28:	4b53      	ldr	r3, [pc, #332]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4a52      	ldr	r2, [pc, #328]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c34:	4b50      	ldr	r3, [pc, #320]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	494d      	ldr	r1, [pc, #308]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d044      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d107      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b47      	ldr	r3, [pc, #284]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d119      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d003      	beq.n	8004c7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e06f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e067      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c9a:	4b37      	ldr	r3, [pc, #220]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f023 0203 	bic.w	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4934      	ldr	r1, [pc, #208]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cac:	f7fc fada 	bl	8001264 <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	e00a      	b.n	8004cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb4:	f7fc fad6 	bl	8001264 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e04f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	4b2b      	ldr	r3, [pc, #172]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 020c 	and.w	r2, r3, #12
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d1eb      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b25      	ldr	r3, [pc, #148]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d20c      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b22      	ldr	r3, [pc, #136]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b20      	ldr	r3, [pc, #128]	@ (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e032      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d10:	4b19      	ldr	r3, [pc, #100]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4916      	ldr	r1, [pc, #88]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d2e:	4b12      	ldr	r3, [pc, #72]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	490e      	ldr	r1, [pc, #56]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d42:	f000 f821 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d46:	4602      	mov	r2, r0
 8004d48:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	490a      	ldr	r1, [pc, #40]	@ (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004d54:	5ccb      	ldrb	r3, [r1, r3]
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	4a09      	ldr	r2, [pc, #36]	@ (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d5e:	4b09      	ldr	r3, [pc, #36]	@ (8004d84 <HAL_RCC_ClockConfig+0x1c8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fc fa3a 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023c00 	.word	0x40023c00
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	0800a3bc 	.word	0x0800a3bc
 8004d80:	20000000 	.word	0x20000000
 8004d84:	20000004 	.word	0x20000004

08004d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d8c:	b094      	sub	sp, #80	@ 0x50
 8004d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004da0:	4b79      	ldr	r3, [pc, #484]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 030c 	and.w	r3, r3, #12
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d00d      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	f200 80e1 	bhi.w	8004f74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x34>
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dba:	e0db      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b73      	ldr	r3, [pc, #460]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dc0:	e0db      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dc2:	4b73      	ldr	r3, [pc, #460]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0x208>)
 8004dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dc6:	e0d8      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d063      	beq.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dde:	4b6a      	ldr	r3, [pc, #424]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	099b      	lsrs	r3, r3, #6
 8004de4:	2200      	movs	r2, #0
 8004de6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004de8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004df2:	2300      	movs	r3, #0
 8004df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	f04f 0000 	mov.w	r0, #0
 8004e02:	f04f 0100 	mov.w	r1, #0
 8004e06:	0159      	lsls	r1, r3, #5
 8004e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e0c:	0150      	lsls	r0, r2, #5
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4621      	mov	r1, r4
 8004e14:	1a51      	subs	r1, r2, r1
 8004e16:	6139      	str	r1, [r7, #16]
 8004e18:	4629      	mov	r1, r5
 8004e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	018b      	lsls	r3, r1, #6
 8004e30:	4651      	mov	r1, sl
 8004e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e36:	4651      	mov	r1, sl
 8004e38:	018a      	lsls	r2, r1, #6
 8004e3a:	4651      	mov	r1, sl
 8004e3c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e40:	4659      	mov	r1, fp
 8004e42:	eb63 0901 	sbc.w	r9, r3, r1
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e5a:	4690      	mov	r8, r2
 8004e5c:	4699      	mov	r9, r3
 8004e5e:	4623      	mov	r3, r4
 8004e60:	eb18 0303 	adds.w	r3, r8, r3
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	462b      	mov	r3, r5
 8004e68:	eb49 0303 	adc.w	r3, r9, r3
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	024b      	lsls	r3, r1, #9
 8004e7e:	4621      	mov	r1, r4
 8004e80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e84:	4621      	mov	r1, r4
 8004e86:	024a      	lsls	r2, r1, #9
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e8e:	2200      	movs	r2, #0
 8004e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e98:	f7fb f996 	bl	80001c8 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea4:	e058      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea6:	4b38      	ldr	r3, [pc, #224]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	099b      	lsrs	r3, r3, #6
 8004eac:	2200      	movs	r2, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eb6:	623b      	str	r3, [r7, #32]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ebc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	464b      	mov	r3, r9
 8004ec4:	f04f 0000 	mov.w	r0, #0
 8004ec8:	f04f 0100 	mov.w	r1, #0
 8004ecc:	0159      	lsls	r1, r3, #5
 8004ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ed2:	0150      	lsls	r0, r2, #5
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4641      	mov	r1, r8
 8004eda:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ede:	4649      	mov	r1, r9
 8004ee0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ef0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ef4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ef8:	ebb2 040a 	subs.w	r4, r2, sl
 8004efc:	eb63 050b 	sbc.w	r5, r3, fp
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	00eb      	lsls	r3, r5, #3
 8004f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f0e:	00e2      	lsls	r2, r4, #3
 8004f10:	4614      	mov	r4, r2
 8004f12:	461d      	mov	r5, r3
 8004f14:	4643      	mov	r3, r8
 8004f16:	18e3      	adds	r3, r4, r3
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	eb45 0303 	adc.w	r3, r5, r3
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f2e:	4629      	mov	r1, r5
 8004f30:	028b      	lsls	r3, r1, #10
 8004f32:	4621      	mov	r1, r4
 8004f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f38:	4621      	mov	r1, r4
 8004f3a:	028a      	lsls	r2, r1, #10
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f42:	2200      	movs	r2, #0
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	61fa      	str	r2, [r7, #28]
 8004f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f4c:	f7fb f93c 	bl	80001c8 <__aeabi_uldivmod>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4613      	mov	r3, r2
 8004f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f58:	4b0b      	ldr	r3, [pc, #44]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	0c1b      	lsrs	r3, r3, #16
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	3301      	adds	r3, #1
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f72:	e002      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f74:	4b05      	ldr	r3, [pc, #20]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3750      	adds	r7, #80	@ 0x50
 8004f80:	46bd      	mov	sp, r7
 8004f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	00f42400 	.word	0x00f42400
 8004f90:	007a1200 	.word	0x007a1200

08004f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f98:	4b03      	ldr	r3, [pc, #12]	@ (8004fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000000 	.word	0x20000000

08004fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fb0:	f7ff fff0 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	0a9b      	lsrs	r3, r3, #10
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	4903      	ldr	r1, [pc, #12]	@ (8004fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fc2:	5ccb      	ldrb	r3, [r1, r3]
 8004fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	0800a3cc 	.word	0x0800a3cc

08004fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d105      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d035      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ffc:	4b62      	ldr	r3, [pc, #392]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005002:	f7fc f92f 	bl	8001264 <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005008:	e008      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800500a:	f7fc f92b 	bl	8001264 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e0b0      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800501c:	4b5b      	ldr	r3, [pc, #364]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f0      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	019a      	lsls	r2, r3, #6
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	071b      	lsls	r3, r3, #28
 8005034:	4955      	ldr	r1, [pc, #340]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800503c:	4b52      	ldr	r3, [pc, #328]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800503e:	2201      	movs	r2, #1
 8005040:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005042:	f7fc f90f 	bl	8001264 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005048:	e008      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800504a:	f7fc f90b 	bl	8001264 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e090      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800505c:	4b4b      	ldr	r3, [pc, #300]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 8083 	beq.w	800517c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	4b44      	ldr	r3, [pc, #272]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	4a43      	ldr	r2, [pc, #268]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005084:	6413      	str	r3, [r2, #64]	@ 0x40
 8005086:	4b41      	ldr	r3, [pc, #260]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005092:	4b3f      	ldr	r3, [pc, #252]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a3e      	ldr	r2, [pc, #248]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800509c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800509e:	f7fc f8e1 	bl	8001264 <HAL_GetTick>
 80050a2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80050a4:	e008      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a6:	f7fc f8dd 	bl	8001264 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e062      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80050b8:	4b35      	ldr	r3, [pc, #212]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050c4:	4b31      	ldr	r3, [pc, #196]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050cc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d02f      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d028      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e2:	4b2a      	ldr	r3, [pc, #168]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ec:	4b29      	ldr	r3, [pc, #164]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050f2:	4b28      	ldr	r3, [pc, #160]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050f8:	4a24      	ldr	r2, [pc, #144]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050fe:	4b23      	ldr	r3, [pc, #140]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b01      	cmp	r3, #1
 8005108:	d114      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800510a:	f7fc f8ab 	bl	8001264 <HAL_GetTick>
 800510e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005110:	e00a      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005112:	f7fc f8a7 	bl	8001264 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005120:	4293      	cmp	r3, r2
 8005122:	d901      	bls.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e02a      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005128:	4b18      	ldr	r3, [pc, #96]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0ee      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800513c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005140:	d10d      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005142:	4b12      	ldr	r3, [pc, #72]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005156:	490d      	ldr	r1, [pc, #52]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005158:	4313      	orrs	r3, r2
 800515a:	608b      	str	r3, [r1, #8]
 800515c:	e005      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800515e:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	4a0a      	ldr	r2, [pc, #40]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005164:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005168:	6093      	str	r3, [r2, #8]
 800516a:	4b08      	ldr	r3, [pc, #32]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800516c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005176:	4905      	ldr	r1, [pc, #20]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005178:	4313      	orrs	r3, r2
 800517a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	42470068 	.word	0x42470068
 800518c:	40023800 	.word	0x40023800
 8005190:	40007000 	.word	0x40007000
 8005194:	42470e40 	.word	0x42470e40

08005198 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d13f      	bne.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80051b6:	4b24      	ldr	r3, [pc, #144]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051be:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d006      	beq.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051cc:	d12f      	bne.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80051ce:	4b1f      	ldr	r3, [pc, #124]	@ (800524c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051d0:	617b      	str	r3, [r7, #20]
          break;
 80051d2:	e02f      	b.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051e0:	d108      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051e2:	4b19      	ldr	r3, [pc, #100]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051ea:	4a19      	ldr	r2, [pc, #100]	@ (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	e007      	b.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051f4:	4b14      	ldr	r3, [pc, #80]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051fc:	4a15      	ldr	r2, [pc, #84]	@ (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80051fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005202:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005204:	4b10      	ldr	r3, [pc, #64]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800520a:	099b      	lsrs	r3, r3, #6
 800520c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	fb02 f303 	mul.w	r3, r2, r3
 8005216:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800521a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800521e:	0f1b      	lsrs	r3, r3, #28
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	617b      	str	r3, [r7, #20]
          break;
 800522c:	e002      	b.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
          break;
 8005232:	bf00      	nop
        }
      }
      break;
 8005234:	e000      	b.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005236:	bf00      	nop
    }
  }
  return frequency;
 8005238:	697b      	ldr	r3, [r7, #20]
}
 800523a:	4618      	mov	r0, r3
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800
 800524c:	00bb8000 	.word	0x00bb8000
 8005250:	007a1200 	.word	0x007a1200
 8005254:	00f42400 	.word	0x00f42400

08005258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e07b      	b.n	8005362 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d108      	bne.n	8005284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800527a:	d009      	beq.n	8005290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	61da      	str	r2, [r3, #28]
 8005282:	e005      	b.n	8005290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fb fd80 	bl	8000db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005314:	ea42 0103 	orr.w	r1, r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	f003 0104 	and.w	r1, r3, #4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	f003 0210 	and.w	r2, r3, #16
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005350:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e041      	b.n	8005400 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d106      	bne.n	8005396 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7fb fd55 	bl	8000e40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2202      	movs	r2, #2
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3304      	adds	r3, #4
 80053a6:	4619      	mov	r1, r3
 80053a8:	4610      	mov	r0, r2
 80053aa:	f000 fd27 	bl	8005dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <HAL_TIM_PWM_Start+0x24>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	bf14      	ite	ne
 8005424:	2301      	movne	r3, #1
 8005426:	2300      	moveq	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	e022      	b.n	8005472 <HAL_TIM_PWM_Start+0x6a>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b04      	cmp	r3, #4
 8005430:	d109      	bne.n	8005446 <HAL_TIM_PWM_Start+0x3e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b01      	cmp	r3, #1
 800543c:	bf14      	ite	ne
 800543e:	2301      	movne	r3, #1
 8005440:	2300      	moveq	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	e015      	b.n	8005472 <HAL_TIM_PWM_Start+0x6a>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b08      	cmp	r3, #8
 800544a:	d109      	bne.n	8005460 <HAL_TIM_PWM_Start+0x58>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b01      	cmp	r3, #1
 8005456:	bf14      	ite	ne
 8005458:	2301      	movne	r3, #1
 800545a:	2300      	moveq	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	e008      	b.n	8005472 <HAL_TIM_PWM_Start+0x6a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	bf14      	ite	ne
 800546c:	2301      	movne	r3, #1
 800546e:	2300      	moveq	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e07c      	b.n	8005574 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d104      	bne.n	800548a <HAL_TIM_PWM_Start+0x82>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005488:	e013      	b.n	80054b2 <HAL_TIM_PWM_Start+0xaa>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b04      	cmp	r3, #4
 800548e:	d104      	bne.n	800549a <HAL_TIM_PWM_Start+0x92>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005498:	e00b      	b.n	80054b2 <HAL_TIM_PWM_Start+0xaa>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d104      	bne.n	80054aa <HAL_TIM_PWM_Start+0xa2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054a8:	e003      	b.n	80054b2 <HAL_TIM_PWM_Start+0xaa>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2201      	movs	r2, #1
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 f824 	bl	8006508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2d      	ldr	r2, [pc, #180]	@ (800557c <HAL_TIM_PWM_Start+0x174>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <HAL_TIM_PWM_Start+0xcc>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005580 <HAL_TIM_PWM_Start+0x178>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d101      	bne.n	80054d8 <HAL_TIM_PWM_Start+0xd0>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <HAL_TIM_PWM_Start+0xd2>
 80054d8:	2300      	movs	r3, #0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a22      	ldr	r2, [pc, #136]	@ (800557c <HAL_TIM_PWM_Start+0x174>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d022      	beq.n	800553e <HAL_TIM_PWM_Start+0x136>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005500:	d01d      	beq.n	800553e <HAL_TIM_PWM_Start+0x136>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1f      	ldr	r2, [pc, #124]	@ (8005584 <HAL_TIM_PWM_Start+0x17c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d018      	beq.n	800553e <HAL_TIM_PWM_Start+0x136>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1d      	ldr	r2, [pc, #116]	@ (8005588 <HAL_TIM_PWM_Start+0x180>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <HAL_TIM_PWM_Start+0x136>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1c      	ldr	r2, [pc, #112]	@ (800558c <HAL_TIM_PWM_Start+0x184>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00e      	beq.n	800553e <HAL_TIM_PWM_Start+0x136>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a16      	ldr	r2, [pc, #88]	@ (8005580 <HAL_TIM_PWM_Start+0x178>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d009      	beq.n	800553e <HAL_TIM_PWM_Start+0x136>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a18      	ldr	r2, [pc, #96]	@ (8005590 <HAL_TIM_PWM_Start+0x188>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d004      	beq.n	800553e <HAL_TIM_PWM_Start+0x136>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a16      	ldr	r2, [pc, #88]	@ (8005594 <HAL_TIM_PWM_Start+0x18c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d111      	bne.n	8005562 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b06      	cmp	r3, #6
 800554e:	d010      	beq.n	8005572 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005560:	e007      	b.n	8005572 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40010000 	.word	0x40010000
 8005580:	40010400 	.word	0x40010400
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40014000 	.word	0x40014000
 8005594:	40001800 	.word	0x40001800

08005598 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e041      	b.n	800562e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fb fc7e 	bl	8000ec0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4619      	mov	r1, r3
 80055d6:	4610      	mov	r0, r2
 80055d8:	f000 fc10 	bl	8005dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <HAL_TIM_IC_Start_IT+0x1e>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005652:	b2db      	uxtb	r3, r3
 8005654:	e013      	b.n	800567e <HAL_TIM_IC_Start_IT+0x46>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b04      	cmp	r3, #4
 800565a:	d104      	bne.n	8005666 <HAL_TIM_IC_Start_IT+0x2e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005662:	b2db      	uxtb	r3, r3
 8005664:	e00b      	b.n	800567e <HAL_TIM_IC_Start_IT+0x46>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d104      	bne.n	8005676 <HAL_TIM_IC_Start_IT+0x3e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005672:	b2db      	uxtb	r3, r3
 8005674:	e003      	b.n	800567e <HAL_TIM_IC_Start_IT+0x46>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800567c:	b2db      	uxtb	r3, r3
 800567e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d104      	bne.n	8005690 <HAL_TIM_IC_Start_IT+0x58>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800568c:	b2db      	uxtb	r3, r3
 800568e:	e013      	b.n	80056b8 <HAL_TIM_IC_Start_IT+0x80>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b04      	cmp	r3, #4
 8005694:	d104      	bne.n	80056a0 <HAL_TIM_IC_Start_IT+0x68>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800569c:	b2db      	uxtb	r3, r3
 800569e:	e00b      	b.n	80056b8 <HAL_TIM_IC_Start_IT+0x80>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d104      	bne.n	80056b0 <HAL_TIM_IC_Start_IT+0x78>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	e003      	b.n	80056b8 <HAL_TIM_IC_Start_IT+0x80>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80056ba:	7bbb      	ldrb	r3, [r7, #14]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d102      	bne.n	80056c6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80056c0:	7b7b      	ldrb	r3, [r7, #13]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d001      	beq.n	80056ca <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e0cc      	b.n	8005864 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <HAL_TIM_IC_Start_IT+0xa2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056d8:	e013      	b.n	8005702 <HAL_TIM_IC_Start_IT+0xca>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d104      	bne.n	80056ea <HAL_TIM_IC_Start_IT+0xb2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056e8:	e00b      	b.n	8005702 <HAL_TIM_IC_Start_IT+0xca>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d104      	bne.n	80056fa <HAL_TIM_IC_Start_IT+0xc2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056f8:	e003      	b.n	8005702 <HAL_TIM_IC_Start_IT+0xca>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2202      	movs	r2, #2
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d104      	bne.n	8005712 <HAL_TIM_IC_Start_IT+0xda>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005710:	e013      	b.n	800573a <HAL_TIM_IC_Start_IT+0x102>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b04      	cmp	r3, #4
 8005716:	d104      	bne.n	8005722 <HAL_TIM_IC_Start_IT+0xea>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005720:	e00b      	b.n	800573a <HAL_TIM_IC_Start_IT+0x102>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d104      	bne.n	8005732 <HAL_TIM_IC_Start_IT+0xfa>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005730:	e003      	b.n	800573a <HAL_TIM_IC_Start_IT+0x102>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b0c      	cmp	r3, #12
 800573e:	d841      	bhi.n	80057c4 <HAL_TIM_IC_Start_IT+0x18c>
 8005740:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <HAL_TIM_IC_Start_IT+0x110>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	0800577d 	.word	0x0800577d
 800574c:	080057c5 	.word	0x080057c5
 8005750:	080057c5 	.word	0x080057c5
 8005754:	080057c5 	.word	0x080057c5
 8005758:	0800578f 	.word	0x0800578f
 800575c:	080057c5 	.word	0x080057c5
 8005760:	080057c5 	.word	0x080057c5
 8005764:	080057c5 	.word	0x080057c5
 8005768:	080057a1 	.word	0x080057a1
 800576c:	080057c5 	.word	0x080057c5
 8005770:	080057c5 	.word	0x080057c5
 8005774:	080057c5 	.word	0x080057c5
 8005778:	080057b3 	.word	0x080057b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0202 	orr.w	r2, r2, #2
 800578a:	60da      	str	r2, [r3, #12]
      break;
 800578c:	e01d      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0204 	orr.w	r2, r2, #4
 800579c:	60da      	str	r2, [r3, #12]
      break;
 800579e:	e014      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0208 	orr.w	r2, r2, #8
 80057ae:	60da      	str	r2, [r3, #12]
      break;
 80057b0:	e00b      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0210 	orr.w	r2, r2, #16
 80057c0:	60da      	str	r2, [r3, #12]
      break;
 80057c2:	e002      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	73fb      	strb	r3, [r7, #15]
      break;
 80057c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d148      	bne.n	8005862 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2201      	movs	r2, #1
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fe95 	bl	8006508 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a22      	ldr	r2, [pc, #136]	@ (800586c <HAL_TIM_IC_Start_IT+0x234>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d022      	beq.n	800582e <HAL_TIM_IC_Start_IT+0x1f6>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f0:	d01d      	beq.n	800582e <HAL_TIM_IC_Start_IT+0x1f6>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005870 <HAL_TIM_IC_Start_IT+0x238>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d018      	beq.n	800582e <HAL_TIM_IC_Start_IT+0x1f6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1c      	ldr	r2, [pc, #112]	@ (8005874 <HAL_TIM_IC_Start_IT+0x23c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d013      	beq.n	800582e <HAL_TIM_IC_Start_IT+0x1f6>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1b      	ldr	r2, [pc, #108]	@ (8005878 <HAL_TIM_IC_Start_IT+0x240>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00e      	beq.n	800582e <HAL_TIM_IC_Start_IT+0x1f6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a19      	ldr	r2, [pc, #100]	@ (800587c <HAL_TIM_IC_Start_IT+0x244>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d009      	beq.n	800582e <HAL_TIM_IC_Start_IT+0x1f6>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a18      	ldr	r2, [pc, #96]	@ (8005880 <HAL_TIM_IC_Start_IT+0x248>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d004      	beq.n	800582e <HAL_TIM_IC_Start_IT+0x1f6>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a16      	ldr	r2, [pc, #88]	@ (8005884 <HAL_TIM_IC_Start_IT+0x24c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d111      	bne.n	8005852 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b06      	cmp	r3, #6
 800583e:	d010      	beq.n	8005862 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005850:	e007      	b.n	8005862 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0201 	orr.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005862:	7bfb      	ldrb	r3, [r7, #15]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40010000 	.word	0x40010000
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40000c00 	.word	0x40000c00
 800587c:	40010400 	.word	0x40010400
 8005880:	40014000 	.word	0x40014000
 8005884:	40001800 	.word	0x40001800

08005888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d020      	beq.n	80058ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01b      	beq.n	80058ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0202 	mvn.w	r2, #2
 80058bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fb f928 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fa70 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fa77 	bl	8005dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d020      	beq.n	8005938 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01b      	beq.n	8005938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0204 	mvn.w	r2, #4
 8005908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2202      	movs	r2, #2
 800590e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fb f902 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 8005924:	e005      	b.n	8005932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fa4a 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fa51 	bl	8005dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d020      	beq.n	8005984 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01b      	beq.n	8005984 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0208 	mvn.w	r2, #8
 8005954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2204      	movs	r2, #4
 800595a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fb f8dc 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 8005970:	e005      	b.n	800597e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fa24 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fa2b 	bl	8005dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b00      	cmp	r3, #0
 800598c:	d020      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01b      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0210 	mvn.w	r2, #16
 80059a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2208      	movs	r2, #8
 80059a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fb f8b6 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f9fe 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fa05 	bl	8005dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00c      	beq.n	80059f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d007      	beq.n	80059f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0201 	mvn.w	r2, #1
 80059ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f9dc 	bl	8005dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00c      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fe76 	bl	8006704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00c      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f9d6 	bl	8005de8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0220 	mvn.w	r2, #32
 8005a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fe48 	bl	80066f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e088      	b.n	8005b98 <HAL_TIM_IC_ConfigChannel+0x130>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11b      	bne.n	8005acc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005aa4:	f000 fc06 	bl	80062b4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 020c 	bic.w	r2, r2, #12
 8005ab6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6999      	ldr	r1, [r3, #24]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	619a      	str	r2, [r3, #24]
 8005aca:	e060      	b.n	8005b8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d11c      	bne.n	8005b0c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005ae2:	f000 fc5b 	bl	800639c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005af4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6999      	ldr	r1, [r3, #24]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	021a      	lsls	r2, r3, #8
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	619a      	str	r2, [r3, #24]
 8005b0a:	e040      	b.n	8005b8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d11b      	bne.n	8005b4a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005b22:	f000 fc78 	bl	8006416 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 020c 	bic.w	r2, r2, #12
 8005b34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69d9      	ldr	r1, [r3, #28]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	61da      	str	r2, [r3, #28]
 8005b48:	e021      	b.n	8005b8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b0c      	cmp	r3, #12
 8005b4e:	d11c      	bne.n	8005b8a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005b60:	f000 fc95 	bl	800648e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69da      	ldr	r2, [r3, #28]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005b72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69d9      	ldr	r1, [r3, #28]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	021a      	lsls	r2, r3, #8
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	61da      	str	r2, [r3, #28]
 8005b88:	e001      	b.n	8005b8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e0ae      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b0c      	cmp	r3, #12
 8005bca:	f200 809f 	bhi.w	8005d0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bce:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005c09 	.word	0x08005c09
 8005bd8:	08005d0d 	.word	0x08005d0d
 8005bdc:	08005d0d 	.word	0x08005d0d
 8005be0:	08005d0d 	.word	0x08005d0d
 8005be4:	08005c49 	.word	0x08005c49
 8005be8:	08005d0d 	.word	0x08005d0d
 8005bec:	08005d0d 	.word	0x08005d0d
 8005bf0:	08005d0d 	.word	0x08005d0d
 8005bf4:	08005c8b 	.word	0x08005c8b
 8005bf8:	08005d0d 	.word	0x08005d0d
 8005bfc:	08005d0d 	.word	0x08005d0d
 8005c00:	08005d0d 	.word	0x08005d0d
 8005c04:	08005ccb 	.word	0x08005ccb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f9a0 	bl	8005f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0208 	orr.w	r2, r2, #8
 8005c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0204 	bic.w	r2, r2, #4
 8005c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6999      	ldr	r1, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	619a      	str	r2, [r3, #24]
      break;
 8005c46:	e064      	b.n	8005d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f9f0 	bl	8006034 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6999      	ldr	r1, [r3, #24]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	619a      	str	r2, [r3, #24]
      break;
 8005c88:	e043      	b.n	8005d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fa45 	bl	8006120 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0208 	orr.w	r2, r2, #8
 8005ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0204 	bic.w	r2, r2, #4
 8005cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69d9      	ldr	r1, [r3, #28]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	61da      	str	r2, [r3, #28]
      break;
 8005cc8:	e023      	b.n	8005d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 fa99 	bl	8006208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69d9      	ldr	r1, [r3, #28]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	021a      	lsls	r2, r3, #8
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	61da      	str	r2, [r3, #28]
      break;
 8005d0a:	e002      	b.n	8005d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b0c      	cmp	r3, #12
 8005d36:	d831      	bhi.n	8005d9c <HAL_TIM_ReadCapturedValue+0x78>
 8005d38:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005d75 	.word	0x08005d75
 8005d44:	08005d9d 	.word	0x08005d9d
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005d9d 	.word	0x08005d9d
 8005d50:	08005d7f 	.word	0x08005d7f
 8005d54:	08005d9d 	.word	0x08005d9d
 8005d58:	08005d9d 	.word	0x08005d9d
 8005d5c:	08005d9d 	.word	0x08005d9d
 8005d60:	08005d89 	.word	0x08005d89
 8005d64:	08005d9d 	.word	0x08005d9d
 8005d68:	08005d9d 	.word	0x08005d9d
 8005d6c:	08005d9d 	.word	0x08005d9d
 8005d70:	08005d93 	.word	0x08005d93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d7a:	60fb      	str	r3, [r7, #12]

      break;
 8005d7c:	e00f      	b.n	8005d9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d84:	60fb      	str	r3, [r7, #12]

      break;
 8005d86:	e00a      	b.n	8005d9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8e:	60fb      	str	r3, [r7, #12]

      break;
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d98:	60fb      	str	r3, [r7, #12]

      break;
 8005d9a:	e000      	b.n	8005d9e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005d9c:	bf00      	nop
  }

  return tmpreg;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a46      	ldr	r2, [pc, #280]	@ (8005f28 <TIM_Base_SetConfig+0x12c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d013      	beq.n	8005e3c <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e1a:	d00f      	beq.n	8005e3c <TIM_Base_SetConfig+0x40>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a43      	ldr	r2, [pc, #268]	@ (8005f2c <TIM_Base_SetConfig+0x130>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00b      	beq.n	8005e3c <TIM_Base_SetConfig+0x40>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a42      	ldr	r2, [pc, #264]	@ (8005f30 <TIM_Base_SetConfig+0x134>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d007      	beq.n	8005e3c <TIM_Base_SetConfig+0x40>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a41      	ldr	r2, [pc, #260]	@ (8005f34 <TIM_Base_SetConfig+0x138>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d003      	beq.n	8005e3c <TIM_Base_SetConfig+0x40>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a40      	ldr	r2, [pc, #256]	@ (8005f38 <TIM_Base_SetConfig+0x13c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d108      	bne.n	8005e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a35      	ldr	r2, [pc, #212]	@ (8005f28 <TIM_Base_SetConfig+0x12c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d02b      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e5c:	d027      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a32      	ldr	r2, [pc, #200]	@ (8005f2c <TIM_Base_SetConfig+0x130>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d023      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a31      	ldr	r2, [pc, #196]	@ (8005f30 <TIM_Base_SetConfig+0x134>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d01f      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a30      	ldr	r2, [pc, #192]	@ (8005f34 <TIM_Base_SetConfig+0x138>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d01b      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2f      	ldr	r2, [pc, #188]	@ (8005f38 <TIM_Base_SetConfig+0x13c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d017      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a2e      	ldr	r2, [pc, #184]	@ (8005f3c <TIM_Base_SetConfig+0x140>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a2d      	ldr	r2, [pc, #180]	@ (8005f40 <TIM_Base_SetConfig+0x144>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00f      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a2c      	ldr	r2, [pc, #176]	@ (8005f44 <TIM_Base_SetConfig+0x148>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00b      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a2b      	ldr	r2, [pc, #172]	@ (8005f48 <TIM_Base_SetConfig+0x14c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d007      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8005f4c <TIM_Base_SetConfig+0x150>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a29      	ldr	r2, [pc, #164]	@ (8005f50 <TIM_Base_SetConfig+0x154>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d108      	bne.n	8005ec0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a10      	ldr	r2, [pc, #64]	@ (8005f28 <TIM_Base_SetConfig+0x12c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d003      	beq.n	8005ef4 <TIM_Base_SetConfig+0xf8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a12      	ldr	r2, [pc, #72]	@ (8005f38 <TIM_Base_SetConfig+0x13c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d103      	bne.n	8005efc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	691a      	ldr	r2, [r3, #16]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d105      	bne.n	8005f1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f023 0201 	bic.w	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	611a      	str	r2, [r3, #16]
  }
}
 8005f1a:	bf00      	nop
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40000c00 	.word	0x40000c00
 8005f38:	40010400 	.word	0x40010400
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40014400 	.word	0x40014400
 8005f44:	40014800 	.word	0x40014800
 8005f48:	40001800 	.word	0x40001800
 8005f4c:	40001c00 	.word	0x40001c00
 8005f50:	40002000 	.word	0x40002000

08005f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f023 0201 	bic.w	r2, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f023 0302 	bic.w	r3, r3, #2
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a20      	ldr	r2, [pc, #128]	@ (800602c <TIM_OC1_SetConfig+0xd8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d003      	beq.n	8005fb8 <TIM_OC1_SetConfig+0x64>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8006030 <TIM_OC1_SetConfig+0xdc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d10c      	bne.n	8005fd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 0308 	bic.w	r3, r3, #8
 8005fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f023 0304 	bic.w	r3, r3, #4
 8005fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a15      	ldr	r2, [pc, #84]	@ (800602c <TIM_OC1_SetConfig+0xd8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d003      	beq.n	8005fe2 <TIM_OC1_SetConfig+0x8e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a14      	ldr	r2, [pc, #80]	@ (8006030 <TIM_OC1_SetConfig+0xdc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d111      	bne.n	8006006 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	621a      	str	r2, [r3, #32]
}
 8006020:	bf00      	nop
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	40010000 	.word	0x40010000
 8006030:	40010400 	.word	0x40010400

08006034 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	f023 0210 	bic.w	r2, r3, #16
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800606a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f023 0320 	bic.w	r3, r3, #32
 800607e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a22      	ldr	r2, [pc, #136]	@ (8006118 <TIM_OC2_SetConfig+0xe4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_OC2_SetConfig+0x68>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a21      	ldr	r2, [pc, #132]	@ (800611c <TIM_OC2_SetConfig+0xe8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d10d      	bne.n	80060b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a17      	ldr	r2, [pc, #92]	@ (8006118 <TIM_OC2_SetConfig+0xe4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_OC2_SetConfig+0x94>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a16      	ldr	r2, [pc, #88]	@ (800611c <TIM_OC2_SetConfig+0xe8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d113      	bne.n	80060f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	621a      	str	r2, [r3, #32]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40010000 	.word	0x40010000
 800611c:	40010400 	.word	0x40010400

08006120 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800614e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0303 	bic.w	r3, r3, #3
 8006156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a21      	ldr	r2, [pc, #132]	@ (8006200 <TIM_OC3_SetConfig+0xe0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_OC3_SetConfig+0x66>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a20      	ldr	r2, [pc, #128]	@ (8006204 <TIM_OC3_SetConfig+0xe4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d10d      	bne.n	80061a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800618c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a16      	ldr	r2, [pc, #88]	@ (8006200 <TIM_OC3_SetConfig+0xe0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d003      	beq.n	80061b2 <TIM_OC3_SetConfig+0x92>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a15      	ldr	r2, [pc, #84]	@ (8006204 <TIM_OC3_SetConfig+0xe4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d113      	bne.n	80061da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	621a      	str	r2, [r3, #32]
}
 80061f4:	bf00      	nop
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	40010000 	.word	0x40010000
 8006204:	40010400 	.word	0x40010400

08006208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800623e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	031b      	lsls	r3, r3, #12
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a12      	ldr	r2, [pc, #72]	@ (80062ac <TIM_OC4_SetConfig+0xa4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_OC4_SetConfig+0x68>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a11      	ldr	r2, [pc, #68]	@ (80062b0 <TIM_OC4_SetConfig+0xa8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d109      	bne.n	8006284 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006276:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	019b      	lsls	r3, r3, #6
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40010400 	.word	0x40010400

080062b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f023 0201 	bic.w	r2, r3, #1
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4a28      	ldr	r2, [pc, #160]	@ (8006380 <TIM_TI1_SetConfig+0xcc>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d01b      	beq.n	800631a <TIM_TI1_SetConfig+0x66>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e8:	d017      	beq.n	800631a <TIM_TI1_SetConfig+0x66>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4a25      	ldr	r2, [pc, #148]	@ (8006384 <TIM_TI1_SetConfig+0xd0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <TIM_TI1_SetConfig+0x66>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4a24      	ldr	r2, [pc, #144]	@ (8006388 <TIM_TI1_SetConfig+0xd4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00f      	beq.n	800631a <TIM_TI1_SetConfig+0x66>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4a23      	ldr	r2, [pc, #140]	@ (800638c <TIM_TI1_SetConfig+0xd8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00b      	beq.n	800631a <TIM_TI1_SetConfig+0x66>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4a22      	ldr	r2, [pc, #136]	@ (8006390 <TIM_TI1_SetConfig+0xdc>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d007      	beq.n	800631a <TIM_TI1_SetConfig+0x66>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4a21      	ldr	r2, [pc, #132]	@ (8006394 <TIM_TI1_SetConfig+0xe0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_TI1_SetConfig+0x66>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4a20      	ldr	r2, [pc, #128]	@ (8006398 <TIM_TI1_SetConfig+0xe4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d101      	bne.n	800631e <TIM_TI1_SetConfig+0x6a>
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <TIM_TI1_SetConfig+0x6c>
 800631e:	2300      	movs	r3, #0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d008      	beq.n	8006336 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f023 0303 	bic.w	r3, r3, #3
 800632a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	e003      	b.n	800633e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006344:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	b2db      	uxtb	r3, r3
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f023 030a 	bic.w	r3, r3, #10
 8006358:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f003 030a 	and.w	r3, r3, #10
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40010400 	.word	0x40010400
 8006394:	40014000 	.word	0x40014000
 8006398:	40001800 	.word	0x40001800

0800639c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	f023 0210 	bic.w	r2, r3, #16
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	031b      	lsls	r3, r3, #12
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006416:	b480      	push	{r7}
 8006418:	b087      	sub	sp, #28
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006452:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	b2db      	uxtb	r3, r3
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006466:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800648e:	b480      	push	{r7}
 8006490:	b087      	sub	sp, #28
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
 800649a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	031b      	lsls	r3, r3, #12
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80064e0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	031b      	lsls	r3, r3, #12
 80064e6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	621a      	str	r2, [r3, #32]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	2201      	movs	r2, #1
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	43db      	mvns	r3, r3
 800652a:	401a      	ands	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 031f 	and.w	r3, r3, #31
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	fa01 f303 	lsl.w	r3, r1, r3
 8006540:	431a      	orrs	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
	...

08006554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006568:	2302      	movs	r3, #2
 800656a:	e05a      	b.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a21      	ldr	r2, [pc, #132]	@ (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d022      	beq.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b8:	d01d      	beq.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1d      	ldr	r2, [pc, #116]	@ (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d018      	beq.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d013      	beq.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1a      	ldr	r2, [pc, #104]	@ (800663c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00e      	beq.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a18      	ldr	r2, [pc, #96]	@ (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d009      	beq.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a17      	ldr	r2, [pc, #92]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d004      	beq.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a15      	ldr	r2, [pc, #84]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d10c      	bne.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	4313      	orrs	r3, r2
 8006606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40010000 	.word	0x40010000
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40000c00 	.word	0x40000c00
 8006640:	40010400 	.word	0x40010400
 8006644:	40014000 	.word	0x40014000
 8006648:	40001800 	.word	0x40001800

0800664c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006664:	2302      	movs	r3, #2
 8006666:	e03d      	b.n	80066e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006718:	b084      	sub	sp, #16
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	f107 001c 	add.w	r0, r7, #28
 8006726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800672a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800672e:	2b01      	cmp	r3, #1
 8006730:	d123      	bne.n	800677a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006736:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006746:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800675a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800675e:	2b01      	cmp	r3, #1
 8006760:	d105      	bne.n	800676e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f9dc 	bl	8006b2c <USB_CoreReset>
 8006774:	4603      	mov	r3, r0
 8006776:	73fb      	strb	r3, [r7, #15]
 8006778:	e01b      	b.n	80067b2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f9d0 	bl	8006b2c <USB_CoreReset>
 800678c:	4603      	mov	r3, r0
 800678e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006790:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80067a4:	e005      	b.n	80067b2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067b2:	7fbb      	ldrb	r3, [r7, #30]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d10b      	bne.n	80067d0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f043 0206 	orr.w	r2, r3, #6
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f043 0220 	orr.w	r2, r3, #32
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067dc:	b004      	add	sp, #16
 80067de:	4770      	bx	lr

080067e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f043 0201 	orr.w	r2, r3, #1
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f023 0201 	bic.w	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d115      	bne.n	8006872 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006852:	200a      	movs	r0, #10
 8006854:	f7fa fd12 	bl	800127c <HAL_Delay>
      ms += 10U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	330a      	adds	r3, #10
 800685c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f956 	bl	8006b10 <USB_GetMode>
 8006864:	4603      	mov	r3, r0
 8006866:	2b01      	cmp	r3, #1
 8006868:	d01e      	beq.n	80068a8 <USB_SetCurrentMode+0x84>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2bc7      	cmp	r3, #199	@ 0xc7
 800686e:	d9f0      	bls.n	8006852 <USB_SetCurrentMode+0x2e>
 8006870:	e01a      	b.n	80068a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006872:	78fb      	ldrb	r3, [r7, #3]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d115      	bne.n	80068a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006884:	200a      	movs	r0, #10
 8006886:	f7fa fcf9 	bl	800127c <HAL_Delay>
      ms += 10U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	330a      	adds	r3, #10
 800688e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f93d 	bl	8006b10 <USB_GetMode>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <USB_SetCurrentMode+0x84>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2bc7      	cmp	r3, #199	@ 0xc7
 80068a0:	d9f0      	bls.n	8006884 <USB_SetCurrentMode+0x60>
 80068a2:	e001      	b.n	80068a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e005      	b.n	80068b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80068ac:	d101      	bne.n	80068b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3301      	adds	r3, #1
 80068ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068d6:	d901      	bls.n	80068dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e01b      	b.n	8006914 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	daf2      	bge.n	80068ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	019b      	lsls	r3, r3, #6
 80068ec:	f043 0220 	orr.w	r2, r3, #32
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3301      	adds	r3, #1
 80068f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006900:	d901      	bls.n	8006906 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e006      	b.n	8006914 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b20      	cmp	r3, #32
 8006910:	d0f0      	beq.n	80068f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3301      	adds	r3, #1
 8006930:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006938:	d901      	bls.n	800693e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e018      	b.n	8006970 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	daf2      	bge.n	800692c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2210      	movs	r2, #16
 800694e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3301      	adds	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800695c:	d901      	bls.n	8006962 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e006      	b.n	8006970 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0310 	and.w	r3, r3, #16
 800696a:	2b10      	cmp	r3, #16
 800696c:	d0f0      	beq.n	8006950 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800697c:	b480      	push	{r7}
 800697e:	b089      	sub	sp, #36	@ 0x24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	4611      	mov	r1, r2
 8006988:	461a      	mov	r2, r3
 800698a:	460b      	mov	r3, r1
 800698c:	71fb      	strb	r3, [r7, #7]
 800698e:	4613      	mov	r3, r2
 8006990:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800699a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d123      	bne.n	80069ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069a2:	88bb      	ldrh	r3, [r7, #4]
 80069a4:	3303      	adds	r3, #3
 80069a6:	089b      	lsrs	r3, r3, #2
 80069a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80069aa:	2300      	movs	r3, #0
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	e018      	b.n	80069e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	031a      	lsls	r2, r3, #12
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069bc:	461a      	mov	r2, r3
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	3301      	adds	r3, #1
 80069c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	3301      	adds	r3, #1
 80069ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	3301      	adds	r3, #1
 80069d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	3301      	adds	r3, #1
 80069da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	3301      	adds	r3, #1
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d3e2      	bcc.n	80069b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3724      	adds	r7, #36	@ 0x24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b08b      	sub	sp, #44	@ 0x2c
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	4613      	mov	r3, r2
 8006a04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	089b      	lsrs	r3, r3, #2
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a1e:	2300      	movs	r3, #0
 8006a20:	623b      	str	r3, [r7, #32]
 8006a22:	e014      	b.n	8006a4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	3301      	adds	r3, #1
 8006a34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	3301      	adds	r3, #1
 8006a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3e:	3301      	adds	r3, #1
 8006a40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	3301      	adds	r3, #1
 8006a46:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	623b      	str	r3, [r7, #32]
 8006a4e:	6a3a      	ldr	r2, [r7, #32]
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d3e6      	bcc.n	8006a24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a56:	8bfb      	ldrh	r3, [r7, #30]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01e      	beq.n	8006a9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a66:	461a      	mov	r2, r3
 8006a68:	f107 0310 	add.w	r3, r7, #16
 8006a6c:	6812      	ldr	r2, [r2, #0]
 8006a6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	701a      	strb	r2, [r3, #0]
      i++;
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	3301      	adds	r3, #1
 8006a86:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006a8e:	8bfb      	ldrh	r3, [r7, #30]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a94:	8bfb      	ldrh	r3, [r7, #30]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1ea      	bne.n	8006a70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	372c      	adds	r7, #44	@ 0x2c
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4013      	ands	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	4013      	ands	r3, r2
 8006b00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b02:	68bb      	ldr	r3, [r7, #8]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b44:	d901      	bls.n	8006b4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e01b      	b.n	8006b82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	daf2      	bge.n	8006b38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f043 0201 	orr.w	r2, r3, #1
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b6e:	d901      	bls.n	8006b74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e006      	b.n	8006b82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d0f0      	beq.n	8006b62 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
	...

08006b90 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b90:	b084      	sub	sp, #16
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b086      	sub	sp, #24
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d119      	bne.n	8006c1a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006be6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d10a      	bne.n	8006c04 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006bfc:	f043 0304 	orr.w	r3, r3, #4
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	e014      	b.n	8006c2e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c12:	f023 0304 	bic.w	r3, r3, #4
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	e009      	b.n	8006c2e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c28:	f023 0304 	bic.w	r3, r3, #4
 8006c2c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c2e:	2110      	movs	r1, #16
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff fe43 	bl	80068bc <USB_FlushTxFifo>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff fe6d 	bl	8006920 <USB_FlushRxFifo>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c50:	2300      	movs	r3, #0
 8006c52:	613b      	str	r3, [r7, #16]
 8006c54:	e015      	b.n	8006c82 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c62:	461a      	mov	r2, r3
 8006c64:	f04f 33ff 	mov.w	r3, #4294967295
 8006c68:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c76:	461a      	mov	r2, r3
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c86:	461a      	mov	r2, r3
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d3e3      	bcc.n	8006c56 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a18      	ldr	r2, [pc, #96]	@ (8006d00 <USB_HostInit+0x170>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d10b      	bne.n	8006cbc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006caa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a15      	ldr	r2, [pc, #84]	@ (8006d04 <USB_HostInit+0x174>)
 8006cb0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a14      	ldr	r2, [pc, #80]	@ (8006d08 <USB_HostInit+0x178>)
 8006cb6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006cba:	e009      	b.n	8006cd0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2280      	movs	r2, #128	@ 0x80
 8006cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a11      	ldr	r2, [pc, #68]	@ (8006d0c <USB_HostInit+0x17c>)
 8006cc6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a11      	ldr	r2, [pc, #68]	@ (8006d10 <USB_HostInit+0x180>)
 8006ccc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	f043 0210 	orr.w	r2, r3, #16
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8006d14 <USB_HostInit+0x184>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cfc:	b004      	add	sp, #16
 8006cfe:	4770      	bx	lr
 8006d00:	40040000 	.word	0x40040000
 8006d04:	01000200 	.word	0x01000200
 8006d08:	00e00300 	.word	0x00e00300
 8006d0c:	00600080 	.word	0x00600080
 8006d10:	004000e0 	.word	0x004000e0
 8006d14:	a3200008 	.word	0xa3200008

08006d18 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d36:	f023 0303 	bic.w	r3, r3, #3
 8006d3a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	68f9      	ldr	r1, [r7, #12]
 8006d4c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006d50:	4313      	orrs	r3, r2
 8006d52:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d107      	bne.n	8006d6a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d60:	461a      	mov	r2, r3
 8006d62:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006d66:	6053      	str	r3, [r2, #4]
 8006d68:	e00c      	b.n	8006d84 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006d6a:	78fb      	ldrb	r3, [r7, #3]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d107      	bne.n	8006d80 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d76:	461a      	mov	r2, r3
 8006d78:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006d7c:	6053      	str	r3, [r2, #4]
 8006d7e:	e001      	b.n	8006d84 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006db2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dc0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006dc2:	2064      	movs	r0, #100	@ 0x64
 8006dc4:	f7fa fa5a 	bl	800127c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dd4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006dd6:	200a      	movs	r0, #10
 8006dd8:	f7fa fa50 	bl	800127c <HAL_Delay>

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006e0a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d109      	bne.n	8006e2a <USB_DriveVbus+0x44>
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d106      	bne.n	8006e2a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006e24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006e28:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e34:	d109      	bne.n	8006e4a <USB_DriveVbus+0x64>
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006e44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e48:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	0c5b      	lsrs	r3, r3, #17
 8006e76:	f003 0303 	and.w	r3, r3, #3
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	b29b      	uxth	r3, r3
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	4608      	mov	r0, r1
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	70fb      	strb	r3, [r7, #3]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	70bb      	strb	r3, [r7, #2]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8006edc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006ede:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d87c      	bhi.n	8006fe0 <USB_HC_Init+0x138>
 8006ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8006eec <USB_HC_Init+0x44>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006efd 	.word	0x08006efd
 8006ef0:	08006fa3 	.word	0x08006fa3
 8006ef4:	08006efd 	.word	0x08006efd
 8006ef8:	08006f65 	.word	0x08006f65
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006f0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006f10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	da10      	bge.n	8006f3a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	0151      	lsls	r1, r2, #5
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	440a      	add	r2, r1
 8006f2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f36:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006f38:	e055      	b.n	8006fe6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a6f      	ldr	r2, [pc, #444]	@ (80070fc <USB_HC_Init+0x254>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d151      	bne.n	8006fe6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	78fa      	ldrb	r2, [r7, #3]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f5c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006f60:	60d3      	str	r3, [r2, #12]
      break;
 8006f62:	e040      	b.n	8006fe6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f70:	461a      	mov	r2, r3
 8006f72:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006f76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006f78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	da34      	bge.n	8006fea <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	78fa      	ldrb	r2, [r7, #3]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f9e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006fa0:	e023      	b.n	8006fea <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f240 2325 	movw	r3, #549	@ 0x225
 8006fb4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006fb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	da17      	bge.n	8006fee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006fbe:	78fb      	ldrb	r3, [r7, #3]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	78fa      	ldrb	r2, [r7, #3]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fd8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006fdc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006fde:	e006      	b.n	8006fee <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	77fb      	strb	r3, [r7, #31]
      break;
 8006fe4:	e004      	b.n	8006ff0 <USB_HC_Init+0x148>
      break;
 8006fe6:	bf00      	nop
 8006fe8:	e002      	b.n	8006ff0 <USB_HC_Init+0x148>
      break;
 8006fea:	bf00      	nop
 8006fec:	e000      	b.n	8006ff0 <USB_HC_Init+0x148>
      break;
 8006fee:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	2300      	movs	r3, #0
 8007000:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	4413      	add	r3, r2
 800700a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	78fa      	ldrb	r2, [r7, #3]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	440a      	add	r2, r1
 8007018:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800701c:	f043 0302 	orr.w	r3, r3, #2
 8007020:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007028:	699a      	ldr	r2, [r3, #24]
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	2101      	movs	r1, #1
 8007032:	fa01 f303 	lsl.w	r3, r1, r3
 8007036:	6939      	ldr	r1, [r7, #16]
 8007038:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800703c:	4313      	orrs	r3, r2
 800703e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800704c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007050:	2b00      	cmp	r3, #0
 8007052:	da03      	bge.n	800705c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007054:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	e001      	b.n	8007060 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7ff fef9 	bl	8006e58 <USB_GetHostSpeed>
 8007066:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007068:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800706c:	2b02      	cmp	r3, #2
 800706e:	d106      	bne.n	800707e <USB_HC_Init+0x1d6>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d003      	beq.n	800707e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007076:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e001      	b.n	8007082 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007082:	787b      	ldrb	r3, [r7, #1]
 8007084:	059b      	lsls	r3, r3, #22
 8007086:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800708a:	78bb      	ldrb	r3, [r7, #2]
 800708c:	02db      	lsls	r3, r3, #11
 800708e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007092:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007094:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007098:	049b      	lsls	r3, r3, #18
 800709a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800709e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80070a0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80070a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80070a6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	431a      	orrs	r2, r3
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070b0:	78fa      	ldrb	r2, [r7, #3]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80070bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070c0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80070c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d003      	beq.n	80070d2 <USB_HC_Init+0x22a>
 80070ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d10f      	bne.n	80070f2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80070d2:	78fb      	ldrb	r3, [r7, #3]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	78fa      	ldrb	r2, [r7, #3]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80070f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	40040000 	.word	0x40040000

08007100 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08c      	sub	sp, #48	@ 0x30
 8007104:	af02      	add	r7, sp, #8
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	785b      	ldrb	r3, [r3, #1]
 8007116:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007118:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800711c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4a5d      	ldr	r2, [pc, #372]	@ (8007298 <USB_HC_StartXfer+0x198>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d12f      	bne.n	8007186 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007126:	79fb      	ldrb	r3, [r7, #7]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d11c      	bne.n	8007166 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	7c9b      	ldrb	r3, [r3, #18]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <USB_HC_StartXfer+0x3c>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	7c9b      	ldrb	r3, [r3, #18]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d124      	bne.n	8007186 <USB_HC_StartXfer+0x86>
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	799b      	ldrb	r3, [r3, #6]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d120      	bne.n	8007186 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	4413      	add	r3, r2
 800714c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	6a3a      	ldr	r2, [r7, #32]
 8007158:	440a      	add	r2, r1
 800715a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800715e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007162:	60d3      	str	r3, [r2, #12]
 8007164:	e00f      	b.n	8007186 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	791b      	ldrb	r3, [r3, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10b      	bne.n	8007186 <USB_HC_StartXfer+0x86>
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	795b      	ldrb	r3, [r3, #5]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d107      	bne.n	8007186 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	4619      	mov	r1, r3
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 fb6b 	bl	8007858 <USB_DoPing>
        return HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	e232      	b.n	80075ec <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	799b      	ldrb	r3, [r3, #6]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d158      	bne.n	8007240 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800718e:	2301      	movs	r3, #1
 8007190:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	78db      	ldrb	r3, [r3, #3]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800719a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	8a92      	ldrh	r2, [r2, #20]
 80071a0:	fb03 f202 	mul.w	r2, r3, r2
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	61da      	str	r2, [r3, #28]
 80071a8:	e07c      	b.n	80072a4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	7c9b      	ldrb	r3, [r3, #18]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d130      	bne.n	8007214 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	2bbc      	cmp	r3, #188	@ 0xbc
 80071b8:	d918      	bls.n	80071ec <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	8a9b      	ldrh	r3, [r3, #20]
 80071be:	461a      	mov	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	69da      	ldr	r2, [r3, #28]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d003      	beq.n	80071dc <USB_HC_StartXfer+0xdc>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d103      	bne.n	80071e4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2202      	movs	r2, #2
 80071e0:	60da      	str	r2, [r3, #12]
 80071e2:	e05f      	b.n	80072a4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2201      	movs	r2, #1
 80071e8:	60da      	str	r2, [r3, #12]
 80071ea:	e05b      	b.n	80072a4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	6a1a      	ldr	r2, [r3, #32]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d007      	beq.n	800720c <USB_HC_StartXfer+0x10c>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d003      	beq.n	800720c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2204      	movs	r2, #4
 8007208:	60da      	str	r2, [r3, #12]
 800720a:	e04b      	b.n	80072a4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2203      	movs	r2, #3
 8007210:	60da      	str	r2, [r3, #12]
 8007212:	e047      	b.n	80072a4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d10d      	bne.n	8007236 <USB_HC_StartXfer+0x136>
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	8a92      	ldrh	r2, [r2, #20]
 8007222:	4293      	cmp	r3, r2
 8007224:	d907      	bls.n	8007236 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007226:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	8a92      	ldrh	r2, [r2, #20]
 800722c:	fb03 f202 	mul.w	r2, r3, r2
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	61da      	str	r2, [r3, #28]
 8007234:	e036      	b.n	80072a4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6a1a      	ldr	r2, [r3, #32]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	61da      	str	r2, [r3, #28]
 800723e:	e031      	b.n	80072a4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d018      	beq.n	800727a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	8a92      	ldrh	r2, [r2, #20]
 8007250:	4413      	add	r3, r2
 8007252:	3b01      	subs	r3, #1
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	8a92      	ldrh	r2, [r2, #20]
 8007258:	fbb3 f3f2 	udiv	r3, r3, r2
 800725c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800725e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007260:	8b7b      	ldrh	r3, [r7, #26]
 8007262:	429a      	cmp	r2, r3
 8007264:	d90b      	bls.n	800727e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007266:	8b7b      	ldrh	r3, [r7, #26]
 8007268:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800726a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	8a92      	ldrh	r2, [r2, #20]
 8007270:	fb03 f202 	mul.w	r2, r3, r2
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	61da      	str	r2, [r3, #28]
 8007278:	e001      	b.n	800727e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800727a:	2301      	movs	r3, #1
 800727c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	78db      	ldrb	r3, [r3, #3]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007286:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	8a92      	ldrh	r2, [r2, #20]
 800728c:	fb03 f202 	mul.w	r2, r3, r2
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	61da      	str	r2, [r3, #28]
 8007294:	e006      	b.n	80072a4 <USB_HC_StartXfer+0x1a4>
 8007296:	bf00      	nop
 8007298:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	6a1a      	ldr	r2, [r3, #32]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80072ae:	04d9      	lsls	r1, r3, #19
 80072b0:	4ba3      	ldr	r3, [pc, #652]	@ (8007540 <USB_HC_StartXfer+0x440>)
 80072b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	7d9b      	ldrb	r3, [r3, #22]
 80072ba:	075b      	lsls	r3, r3, #29
 80072bc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072c0:	69f9      	ldr	r1, [r7, #28]
 80072c2:	0148      	lsls	r0, r1, #5
 80072c4:	6a39      	ldr	r1, [r7, #32]
 80072c6:	4401      	add	r1, r0
 80072c8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d009      	beq.n	80072ea <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	6999      	ldr	r1, [r3, #24]
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072e6:	460a      	mov	r2, r1
 80072e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bf0c      	ite	eq
 80072fa:	2301      	moveq	r3, #1
 80072fc:	2300      	movne	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	4413      	add	r3, r2
 800730a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	0151      	lsls	r1, r2, #5
 8007314:	6a3a      	ldr	r2, [r7, #32]
 8007316:	440a      	add	r2, r1
 8007318:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800731c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007320:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	4413      	add	r3, r2
 800732a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	7e7b      	ldrb	r3, [r7, #25]
 8007332:	075b      	lsls	r3, r3, #29
 8007334:	69f9      	ldr	r1, [r7, #28]
 8007336:	0148      	lsls	r0, r1, #5
 8007338:	6a39      	ldr	r1, [r7, #32]
 800733a:	4401      	add	r1, r0
 800733c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007340:	4313      	orrs	r3, r2
 8007342:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	799b      	ldrb	r3, [r3, #6]
 8007348:	2b01      	cmp	r3, #1
 800734a:	f040 80c3 	bne.w	80074d4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	7c5b      	ldrb	r3, [r3, #17]
 8007352:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007358:	4313      	orrs	r3, r2
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	6a3a      	ldr	r2, [r7, #32]
 8007360:	440a      	add	r2, r1
 8007362:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007366:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800736a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	4413      	add	r3, r2
 8007374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	69fa      	ldr	r2, [r7, #28]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	6a3a      	ldr	r2, [r7, #32]
 8007380:	440a      	add	r2, r1
 8007382:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007386:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800738a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	79db      	ldrb	r3, [r3, #7]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d123      	bne.n	80073dc <USB_HC_StartXfer+0x2dc>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	78db      	ldrb	r3, [r3, #3]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d11f      	bne.n	80073dc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	0151      	lsls	r1, r2, #5
 80073ae:	6a3a      	ldr	r2, [r7, #32]
 80073b0:	440a      	add	r2, r1
 80073b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ba:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	0151      	lsls	r1, r2, #5
 80073ce:	6a3a      	ldr	r2, [r7, #32]
 80073d0:	440a      	add	r2, r1
 80073d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073da:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	7c9b      	ldrb	r3, [r3, #18]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d003      	beq.n	80073ec <USB_HC_StartXfer+0x2ec>
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	7c9b      	ldrb	r3, [r3, #18]
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d117      	bne.n	800741c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d113      	bne.n	800741c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	78db      	ldrb	r3, [r3, #3]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d10f      	bne.n	800741c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	4413      	add	r3, r2
 8007404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	0151      	lsls	r1, r2, #5
 800740e:	6a3a      	ldr	r2, [r7, #32]
 8007410:	440a      	add	r2, r1
 8007412:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800741a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	7c9b      	ldrb	r3, [r3, #18]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d162      	bne.n	80074ea <USB_HC_StartXfer+0x3ea>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	78db      	ldrb	r3, [r3, #3]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d15e      	bne.n	80074ea <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	3b01      	subs	r3, #1
 8007432:	2b03      	cmp	r3, #3
 8007434:	d858      	bhi.n	80074e8 <USB_HC_StartXfer+0x3e8>
 8007436:	a201      	add	r2, pc, #4	@ (adr r2, 800743c <USB_HC_StartXfer+0x33c>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	0800744d 	.word	0x0800744d
 8007440:	0800746f 	.word	0x0800746f
 8007444:	08007491 	.word	0x08007491
 8007448:	080074b3 	.word	0x080074b3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	4413      	add	r3, r2
 8007454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	69fa      	ldr	r2, [r7, #28]
 800745c:	0151      	lsls	r1, r2, #5
 800745e:	6a3a      	ldr	r2, [r7, #32]
 8007460:	440a      	add	r2, r1
 8007462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800746a:	6053      	str	r3, [r2, #4]
          break;
 800746c:	e03d      	b.n	80074ea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	4413      	add	r3, r2
 8007476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	0151      	lsls	r1, r2, #5
 8007480:	6a3a      	ldr	r2, [r7, #32]
 8007482:	440a      	add	r2, r1
 8007484:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007488:	f043 030e 	orr.w	r3, r3, #14
 800748c:	6053      	str	r3, [r2, #4]
          break;
 800748e:	e02c      	b.n	80074ea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	4413      	add	r3, r2
 8007498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	6a3a      	ldr	r2, [r7, #32]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80074ae:	6053      	str	r3, [r2, #4]
          break;
 80074b0:	e01b      	b.n	80074ea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	0151      	lsls	r1, r2, #5
 80074c4:	6a3a      	ldr	r2, [r7, #32]
 80074c6:	440a      	add	r2, r1
 80074c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074d0:	6053      	str	r3, [r2, #4]
          break;
 80074d2:	e00a      	b.n	80074ea <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074e0:	461a      	mov	r2, r3
 80074e2:	2300      	movs	r3, #0
 80074e4:	6053      	str	r3, [r2, #4]
 80074e6:	e000      	b.n	80074ea <USB_HC_StartXfer+0x3ea>
          break;
 80074e8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007500:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	78db      	ldrb	r3, [r3, #3]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d004      	beq.n	8007514 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	e003      	b.n	800751c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800751a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007522:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	4413      	add	r3, r2
 800752c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007530:	461a      	mov	r2, r3
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e055      	b.n	80075ec <USB_HC_StartXfer+0x4ec>
 8007540:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	78db      	ldrb	r3, [r3, #3]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d14e      	bne.n	80075ea <USB_HC_StartXfer+0x4ea>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d04a      	beq.n	80075ea <USB_HC_StartXfer+0x4ea>
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	79db      	ldrb	r3, [r3, #7]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d146      	bne.n	80075ea <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	7c9b      	ldrb	r3, [r3, #18]
 8007560:	2b03      	cmp	r3, #3
 8007562:	d831      	bhi.n	80075c8 <USB_HC_StartXfer+0x4c8>
 8007564:	a201      	add	r2, pc, #4	@ (adr r2, 800756c <USB_HC_StartXfer+0x46c>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	0800757d 	.word	0x0800757d
 8007570:	080075a1 	.word	0x080075a1
 8007574:	0800757d 	.word	0x0800757d
 8007578:	080075a1 	.word	0x080075a1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	3303      	adds	r3, #3
 8007582:	089b      	lsrs	r3, r3, #2
 8007584:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007586:	8afa      	ldrh	r2, [r7, #22]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758c:	b29b      	uxth	r3, r3
 800758e:	429a      	cmp	r2, r3
 8007590:	d91c      	bls.n	80075cc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f043 0220 	orr.w	r2, r3, #32
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	619a      	str	r2, [r3, #24]
        }
        break;
 800759e:	e015      	b.n	80075cc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	3303      	adds	r3, #3
 80075a6:	089b      	lsrs	r3, r3, #2
 80075a8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80075aa:	8afa      	ldrh	r2, [r7, #22]
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d90a      	bls.n	80075d0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80075c6:	e003      	b.n	80075d0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80075c8:	bf00      	nop
 80075ca:	e002      	b.n	80075d2 <USB_HC_StartXfer+0x4d2>
        break;
 80075cc:	bf00      	nop
 80075ce:	e000      	b.n	80075d2 <USB_HC_StartXfer+0x4d2>
        break;
 80075d0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	6999      	ldr	r1, [r3, #24]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	785a      	ldrb	r2, [r3, #1]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2000      	movs	r0, #0
 80075e2:	9000      	str	r0, [sp, #0]
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f7ff f9c9 	bl	800697c <USB_WritePacket>
  }

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3728      	adds	r7, #40	@ 0x28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	b29b      	uxth	r3, r3
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007616:	b480      	push	{r7}
 8007618:	b089      	sub	sp, #36	@ 0x24
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	460b      	mov	r3, r1
 8007620:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	0c9b      	lsrs	r3, r3, #18
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	0fdb      	lsrs	r3, r3, #31
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	0fdb      	lsrs	r3, r3, #31
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b20      	cmp	r3, #32
 800767a:	d10d      	bne.n	8007698 <USB_HC_Halt+0x82>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <USB_HC_Halt+0x82>
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d002      	beq.n	8007694 <USB_HC_Halt+0x7e>
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b03      	cmp	r3, #3
 8007692:	d101      	bne.n	8007698 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	e0d8      	b.n	800784a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <USB_HC_Halt+0x8e>
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d173      	bne.n	800778c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076c2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d14a      	bne.n	8007766 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d133      	bne.n	8007744 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	0151      	lsls	r1, r2, #5
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	440a      	add	r2, r1
 80076f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076fa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	4413      	add	r3, r2
 8007704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	0151      	lsls	r1, r2, #5
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	440a      	add	r2, r1
 8007712:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007716:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800771a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	3301      	adds	r3, #1
 8007720:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007728:	d82e      	bhi.n	8007788 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	4413      	add	r3, r2
 8007732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800773c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007740:	d0ec      	beq.n	800771c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007742:	e081      	b.n	8007848 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	4413      	add	r3, r2
 800774c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	0151      	lsls	r1, r2, #5
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	440a      	add	r2, r1
 800775a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800775e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007762:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007764:	e070      	b.n	8007848 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	4413      	add	r3, r2
 800776e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	0151      	lsls	r1, r2, #5
 8007778:	69fa      	ldr	r2, [r7, #28]
 800777a:	440a      	add	r2, r1
 800777c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007780:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007784:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007786:	e05f      	b.n	8007848 <USB_HC_Halt+0x232>
            break;
 8007788:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800778a:	e05d      	b.n	8007848 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	4413      	add	r3, r2
 8007794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077aa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d133      	bne.n	8007824 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	0151      	lsls	r1, r2, #5
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	440a      	add	r2, r1
 80077d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	0151      	lsls	r1, r2, #5
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	440a      	add	r2, r1
 80077f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077fa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	3301      	adds	r3, #1
 8007800:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007808:	d81d      	bhi.n	8007846 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	4413      	add	r3, r2
 8007812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800781c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007820:	d0ec      	beq.n	80077fc <USB_HC_Halt+0x1e6>
 8007822:	e011      	b.n	8007848 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	4413      	add	r3, r2
 800782c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	0151      	lsls	r1, r2, #5
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	440a      	add	r2, r1
 800783a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800783e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	e000      	b.n	8007848 <USB_HC_Halt+0x232>
          break;
 8007846:	bf00      	nop
    }
  }

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3724      	adds	r7, #36	@ 0x24
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
	...

08007858 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800786c:	2301      	movs	r3, #1
 800786e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	04da      	lsls	r2, r3, #19
 8007874:	4b15      	ldr	r3, [pc, #84]	@ (80078cc <USB_DoPing+0x74>)
 8007876:	4013      	ands	r3, r2
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	440a      	add	r2, r1
 8007880:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007884:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007888:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80078a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b6:	461a      	mov	r2, r3
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	1ff80000 	.word	0x1ff80000

080078d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b088      	sub	sp, #32
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fe ff8c 	bl	8006802 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078ea:	2110      	movs	r1, #16
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7fe ffe5 	bl	80068bc <USB_FlushTxFifo>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff f80f 	bl	8006920 <USB_FlushRxFifo>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800790c:	2300      	movs	r3, #0
 800790e:	61bb      	str	r3, [r7, #24]
 8007910:	e01f      	b.n	8007952 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	4413      	add	r3, r2
 800791a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007928:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007930:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007938:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	4413      	add	r3, r2
 8007942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007946:	461a      	mov	r2, r3
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	3301      	adds	r3, #1
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	2b0f      	cmp	r3, #15
 8007956:	d9dc      	bls.n	8007912 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007958:	2300      	movs	r3, #0
 800795a:	61bb      	str	r3, [r7, #24]
 800795c:	e034      	b.n	80079c8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	4413      	add	r3, r2
 8007966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007974:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800797c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007984:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	4413      	add	r3, r2
 800798e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007992:	461a      	mov	r2, r3
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3301      	adds	r3, #1
 800799c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079a4:	d80c      	bhi.n	80079c0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079bc:	d0ec      	beq.n	8007998 <USB_StopHost+0xc8>
 80079be:	e000      	b.n	80079c2 <USB_StopHost+0xf2>
        break;
 80079c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	3301      	adds	r3, #1
 80079c6:	61bb      	str	r3, [r7, #24]
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b0f      	cmp	r3, #15
 80079cc:	d9c7      	bls.n	800795e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079d4:	461a      	mov	r2, r3
 80079d6:	f04f 33ff 	mov.w	r3, #4294967295
 80079da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f04f 32ff 	mov.w	r2, #4294967295
 80079e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7fe fefb 	bl	80067e0 <USB_EnableGlobalInt>

  return ret;
 80079ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3720      	adds	r7, #32
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80079f4:	b590      	push	{r4, r7, lr}
 80079f6:	b089      	sub	sp, #36	@ 0x24
 80079f8:	af04      	add	r7, sp, #16
 80079fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80079fc:	2301      	movs	r3, #1
 80079fe:	2202      	movs	r2, #2
 8007a00:	2102      	movs	r1, #2
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fc85 	bl	8008312 <USBH_FindInterface>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	2bff      	cmp	r3, #255	@ 0xff
 8007a10:	d002      	beq.n	8007a18 <USBH_CDC_InterfaceInit+0x24>
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d901      	bls.n	8007a1c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e13d      	b.n	8007c98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fc5a 	bl	80082da <USBH_SelectInterface>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007a30:	2302      	movs	r3, #2
 8007a32:	e131      	b.n	8007c98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007a3a:	2050      	movs	r0, #80	@ 0x50
 8007a3c:	f002 fb64 	bl	800a108 <malloc>
 8007a40:	4603      	mov	r3, r0
 8007a42:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007a54:	2302      	movs	r3, #2
 8007a56:	e11f      	b.n	8007c98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007a58:	2250      	movs	r2, #80	@ 0x50
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	68b8      	ldr	r0, [r7, #8]
 8007a5e:	f002 fc11 	bl	800a284 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	211a      	movs	r1, #26
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	b25b      	sxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	da15      	bge.n	8007aa6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	211a      	movs	r1, #26
 8007a80:	fb01 f303 	mul.w	r3, r1, r3
 8007a84:	4413      	add	r3, r2
 8007a86:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007a8a:	781a      	ldrb	r2, [r3, #0]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	211a      	movs	r1, #26
 8007a96:	fb01 f303 	mul.w	r3, r1, r3
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007aa0:	881a      	ldrh	r2, [r3, #0]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 ffbe 	bl	8009a2e <USBH_AllocPipe>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	7819      	ldrb	r1, [r3, #0]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	7858      	ldrb	r0, [r3, #1]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	8952      	ldrh	r2, [r2, #10]
 8007ad2:	9202      	str	r2, [sp, #8]
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	9201      	str	r2, [sp, #4]
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	4623      	mov	r3, r4
 8007adc:	4602      	mov	r2, r0
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f001 ff76 	bl	80099d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f002 fa85 	bl	8009ffc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007af2:	2300      	movs	r3, #0
 8007af4:	2200      	movs	r2, #0
 8007af6:	210a      	movs	r1, #10
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fc0a 	bl	8008312 <USBH_FindInterface>
 8007afe:	4603      	mov	r3, r0
 8007b00:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	2bff      	cmp	r3, #255	@ 0xff
 8007b06:	d002      	beq.n	8007b0e <USBH_CDC_InterfaceInit+0x11a>
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d901      	bls.n	8007b12 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e0c2      	b.n	8007c98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	211a      	movs	r1, #26
 8007b18:	fb01 f303 	mul.w	r3, r1, r3
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	b25b      	sxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	da16      	bge.n	8007b58 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	211a      	movs	r1, #26
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	4413      	add	r3, r2
 8007b36:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	211a      	movs	r1, #26
 8007b46:	fb01 f303 	mul.w	r3, r1, r3
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007b50:	881a      	ldrh	r2, [r3, #0]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	835a      	strh	r2, [r3, #26]
 8007b56:	e015      	b.n	8007b84 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	211a      	movs	r1, #26
 8007b5e:	fb01 f303 	mul.w	r3, r1, r3
 8007b62:	4413      	add	r3, r2
 8007b64:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b68:	781a      	ldrb	r2, [r3, #0]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	211a      	movs	r1, #26
 8007b74:	fb01 f303 	mul.w	r3, r1, r3
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007b7e:	881a      	ldrh	r2, [r3, #0]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	211a      	movs	r1, #26
 8007b8a:	fb01 f303 	mul.w	r3, r1, r3
 8007b8e:	4413      	add	r3, r2
 8007b90:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b25b      	sxtb	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	da16      	bge.n	8007bca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	211a      	movs	r1, #26
 8007ba2:	fb01 f303 	mul.w	r3, r1, r3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007bac:	781a      	ldrb	r2, [r3, #0]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	211a      	movs	r1, #26
 8007bb8:	fb01 f303 	mul.w	r3, r1, r3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007bc2:	881a      	ldrh	r2, [r3, #0]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	835a      	strh	r2, [r3, #26]
 8007bc8:	e015      	b.n	8007bf6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	211a      	movs	r1, #26
 8007bd0:	fb01 f303 	mul.w	r3, r1, r3
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007bda:	781a      	ldrb	r2, [r3, #0]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	211a      	movs	r1, #26
 8007be6:	fb01 f303 	mul.w	r3, r1, r3
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007bf0:	881a      	ldrh	r2, [r3, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	7b9b      	ldrb	r3, [r3, #14]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 ff16 	bl	8009a2e <USBH_AllocPipe>
 8007c02:	4603      	mov	r3, r0
 8007c04:	461a      	mov	r2, r3
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	7bdb      	ldrb	r3, [r3, #15]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 ff0c 	bl	8009a2e <USBH_AllocPipe>
 8007c16:	4603      	mov	r3, r0
 8007c18:	461a      	mov	r2, r3
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	7b59      	ldrb	r1, [r3, #13]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	7b98      	ldrb	r0, [r3, #14]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	8b12      	ldrh	r2, [r2, #24]
 8007c36:	9202      	str	r2, [sp, #8]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	9201      	str	r2, [sp, #4]
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	4623      	mov	r3, r4
 8007c40:	4602      	mov	r2, r0
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f001 fec4 	bl	80099d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	7b19      	ldrb	r1, [r3, #12]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	7bd8      	ldrb	r0, [r3, #15]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	8b52      	ldrh	r2, [r2, #26]
 8007c60:	9202      	str	r2, [sp, #8]
 8007c62:	2202      	movs	r2, #2
 8007c64:	9201      	str	r2, [sp, #4]
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	4623      	mov	r3, r4
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 feaf 	bl	80099d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	7b5b      	ldrb	r3, [r3, #13]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f002 f9ba 	bl	8009ffc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	7b1b      	ldrb	r3, [r3, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f002 f9b3 	bl	8009ffc <USBH_LL_SetToggle>

  return USBH_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd90      	pop	{r4, r7, pc}

08007ca0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00e      	beq.n	8007cd8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 fea4 	bl	8009a0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fecf 	bl	8009a70 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	7b1b      	ldrb	r3, [r3, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00e      	beq.n	8007cfe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	7b1b      	ldrb	r3, [r3, #12]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 fe91 	bl	8009a0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	7b1b      	ldrb	r3, [r3, #12]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 febc 	bl	8009a70 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	7b5b      	ldrb	r3, [r3, #13]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00e      	beq.n	8007d24 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	7b5b      	ldrb	r3, [r3, #13]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f001 fe7e 	bl	8009a0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	7b5b      	ldrb	r3, [r3, #13]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 fea9 	bl	8009a70 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00b      	beq.n	8007d48 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f002 f9ed 	bl	800a118 <free>
    phost->pActiveClass->pData = 0U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d44:	2200      	movs	r2, #0
 8007d46:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3340      	adds	r3, #64	@ 0x40
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f8b1 	bl	8007ed2 <GetLineCoding>
 8007d70:	4603      	mov	r3, r0
 8007d72:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d105      	bne.n	8007d86 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d80:	2102      	movs	r1, #2
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007d86:	7afb      	ldrb	r3, [r7, #11]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	d877      	bhi.n	8007ea4 <USBH_CDC_Process+0x114>
 8007db4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <USBH_CDC_Process+0x2c>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007dd1 	.word	0x08007dd1
 8007dc0:	08007dd7 	.word	0x08007dd7
 8007dc4:	08007e07 	.word	0x08007e07
 8007dc8:	08007e7b 	.word	0x08007e7b
 8007dcc:	08007e89 	.word	0x08007e89
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd4:	e06d      	b.n	8007eb2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f897 	bl	8007f10 <SetLineCoding>
 8007de2:	4603      	mov	r3, r0
 8007de4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d104      	bne.n	8007df6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007df4:	e058      	b.n	8007ea8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d055      	beq.n	8007ea8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2204      	movs	r2, #4
 8007e00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007e04:	e050      	b.n	8007ea8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	3340      	adds	r3, #64	@ 0x40
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f860 	bl	8007ed2 <GetLineCoding>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d126      	bne.n	8007e6a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e2e:	791b      	ldrb	r3, [r3, #4]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d13b      	bne.n	8007eac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e3e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d133      	bne.n	8007eac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e4e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d12b      	bne.n	8007eac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e5c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d124      	bne.n	8007eac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f958 	bl	8008118 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e68:	e020      	b.n	8007eac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d01d      	beq.n	8007eac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2204      	movs	r2, #4
 8007e74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007e78:	e018      	b.n	8007eac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f867 	bl	8007f4e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f8da 	bl	800803a <CDC_ProcessReception>
      break;
 8007e86:	e014      	b.n	8007eb2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007e88:	2100      	movs	r1, #0
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 f81a 	bl	8008ec4 <USBH_ClrFeature>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007ea2:	e005      	b.n	8007eb0 <USBH_CDC_Process+0x120>

    default:
      break;
 8007ea4:	bf00      	nop
 8007ea6:	e004      	b.n	8007eb2 <USBH_CDC_Process+0x122>
      break;
 8007ea8:	bf00      	nop
 8007eaa:	e002      	b.n	8007eb2 <USBH_CDC_Process+0x122>
      break;
 8007eac:	bf00      	nop
 8007eae:	e000      	b.n	8007eb2 <USBH_CDC_Process+0x122>
      break;
 8007eb0:	bf00      	nop

  }

  return status;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	22a1      	movs	r2, #161	@ 0xa1
 8007ee0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2221      	movs	r2, #33	@ 0x21
 8007ee6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2207      	movs	r2, #7
 8007ef8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2207      	movs	r2, #7
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f001 fb14 	bl	800952e <USBH_CtlReq>
 8007f06:	4603      	mov	r3, r0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2221      	movs	r2, #33	@ 0x21
 8007f1e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2207      	movs	r2, #7
 8007f36:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2207      	movs	r2, #7
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f001 faf5 	bl	800952e <USBH_CtlReq>
 8007f44:	4603      	mov	r3, r0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b086      	sub	sp, #24
 8007f52:	af02      	add	r7, sp, #8
 8007f54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d002      	beq.n	8007f74 <CDC_ProcessTransmission+0x26>
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d023      	beq.n	8007fba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007f72:	e05e      	b.n	8008032 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	8b12      	ldrh	r2, [r2, #24]
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d90b      	bls.n	8007f98 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	69d9      	ldr	r1, [r3, #28]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8b1a      	ldrh	r2, [r3, #24]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	7b5b      	ldrb	r3, [r3, #13]
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	9000      	str	r0, [sp, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 fcda 	bl	800994a <USBH_BulkSendData>
 8007f96:	e00b      	b.n	8007fb0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	7b5b      	ldrb	r3, [r3, #13]
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	9000      	str	r0, [sp, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 fccd 	bl	800994a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007fb8:	e03b      	b.n	8008032 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	7b5b      	ldrb	r3, [r3, #13]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 fff1 	bl	8009fa8 <USBH_LL_GetURBState>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007fca:	7afb      	ldrb	r3, [r7, #11]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d128      	bne.n	8008022 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	8b12      	ldrh	r2, [r2, #24]
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d90e      	bls.n	8007ffa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	8b12      	ldrh	r2, [r2, #24]
 8007fe4:	1a9a      	subs	r2, r3, r2
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	8b12      	ldrh	r2, [r2, #24]
 8007ff2:	441a      	add	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	61da      	str	r2, [r3, #28]
 8007ff8:	e002      	b.n	8008000 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008004:	2b00      	cmp	r3, #0
 8008006:	d004      	beq.n	8008012 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008010:	e00e      	b.n	8008030 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f868 	bl	80080f0 <USBH_CDC_TransmitCallback>
      break;
 8008020:	e006      	b.n	8008030 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008022:	7afb      	ldrb	r3, [r7, #11]
 8008024:	2b02      	cmp	r3, #2
 8008026:	d103      	bne.n	8008030 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008030:	bf00      	nop
  }
}
 8008032:	bf00      	nop
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b086      	sub	sp, #24
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800804c:	2300      	movs	r3, #0
 800804e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008056:	2b03      	cmp	r3, #3
 8008058:	d002      	beq.n	8008060 <CDC_ProcessReception+0x26>
 800805a:	2b04      	cmp	r3, #4
 800805c:	d00e      	beq.n	800807c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800805e:	e043      	b.n	80080e8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	6a19      	ldr	r1, [r3, #32]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	8b5a      	ldrh	r2, [r3, #26]
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	7b1b      	ldrb	r3, [r3, #12]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 fc91 	bl	8009994 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2204      	movs	r2, #4
 8008076:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800807a:	e035      	b.n	80080e8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	7b1b      	ldrb	r3, [r3, #12]
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 ff90 	bl	8009fa8 <USBH_LL_GetURBState>
 8008088:	4603      	mov	r3, r0
 800808a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800808c:	7cfb      	ldrb	r3, [r7, #19]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d129      	bne.n	80080e6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	7b1b      	ldrb	r3, [r3, #12]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 fef3 	bl	8009e84 <USBH_LL_GetLastXferSize>
 800809e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d016      	beq.n	80080d8 <CDC_ProcessReception+0x9e>
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	8b5b      	ldrh	r3, [r3, #26]
 80080ae:	461a      	mov	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d110      	bne.n	80080d8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	1ad2      	subs	r2, r2, r3
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	6a1a      	ldr	r2, [r3, #32]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	441a      	add	r2, r3
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2203      	movs	r2, #3
 80080d2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80080d6:	e006      	b.n	80080e6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f80f 	bl	8008104 <USBH_CDC_ReceiveCallback>
      break;
 80080e6:	bf00      	nop
  }
}
 80080e8:	bf00      	nop
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4613      	mov	r3, r2
 8008138:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008140:	2302      	movs	r3, #2
 8008142:	e029      	b.n	8008198 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	79fa      	ldrb	r2, [r7, #7]
 8008148:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f81f 	bl	80081a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f001 fdc3 	bl	8009d1c <USBH_LL_Init>

  return USBH_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]
 80081b0:	e009      	b.n	80081c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	33e0      	adds	r3, #224	@ 0xe0
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	2200      	movs	r2, #0
 80081be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	3301      	adds	r3, #1
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b0f      	cmp	r3, #15
 80081ca:	d9f2      	bls.n	80081b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80081cc:	2300      	movs	r3, #0
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	e009      	b.n	80081e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80081dc:	2200      	movs	r2, #0
 80081de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3301      	adds	r3, #1
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ec:	d3f1      	bcc.n	80081d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2240      	movs	r2, #64	@ 0x40
 8008212:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	331c      	adds	r3, #28
 800823e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008242:	2100      	movs	r1, #0
 8008244:	4618      	mov	r0, r3
 8008246:	f002 f81d 	bl	800a284 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f002 f814 	bl	800a284 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008262:	2212      	movs	r2, #18
 8008264:	2100      	movs	r1, #0
 8008266:	4618      	mov	r0, r3
 8008268:	f002 f80c 	bl	800a284 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008272:	223e      	movs	r2, #62	@ 0x3e
 8008274:	2100      	movs	r1, #0
 8008276:	4618      	mov	r0, r3
 8008278:	f002 f804 	bl	800a284 <memset>

  return USBH_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d016      	beq.n	80082c8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10e      	bne.n	80082c2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80082aa:	1c59      	adds	r1, r3, #1
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	33de      	adds	r3, #222	@ 0xde
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
 80082c0:	e004      	b.n	80082cc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80082c2:	2302      	movs	r3, #2
 80082c4:	73fb      	strb	r3, [r7, #15]
 80082c6:	e001      	b.n	80082cc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80082c8:	2302      	movs	r3, #2
 80082ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80082da:	b480      	push	{r7}
 80082dc:	b085      	sub	sp, #20
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	460b      	mov	r3, r1
 80082e4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80082f0:	78fa      	ldrb	r2, [r7, #3]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d204      	bcs.n	8008300 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	78fa      	ldrb	r2, [r7, #3]
 80082fa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80082fe:	e001      	b.n	8008304 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008300:	2302      	movs	r3, #2
 8008302:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008312:	b480      	push	{r7}
 8008314:	b087      	sub	sp, #28
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	4608      	mov	r0, r1
 800831c:	4611      	mov	r1, r2
 800831e:	461a      	mov	r2, r3
 8008320:	4603      	mov	r3, r0
 8008322:	70fb      	strb	r3, [r7, #3]
 8008324:	460b      	mov	r3, r1
 8008326:	70bb      	strb	r3, [r7, #2]
 8008328:	4613      	mov	r3, r2
 800832a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008330:	2300      	movs	r3, #0
 8008332:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800833a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800833c:	e025      	b.n	800838a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	221a      	movs	r2, #26
 8008342:	fb02 f303 	mul.w	r3, r2, r3
 8008346:	3308      	adds	r3, #8
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	4413      	add	r3, r2
 800834c:	3302      	adds	r3, #2
 800834e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	795b      	ldrb	r3, [r3, #5]
 8008354:	78fa      	ldrb	r2, [r7, #3]
 8008356:	429a      	cmp	r2, r3
 8008358:	d002      	beq.n	8008360 <USBH_FindInterface+0x4e>
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	2bff      	cmp	r3, #255	@ 0xff
 800835e:	d111      	bne.n	8008384 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008364:	78ba      	ldrb	r2, [r7, #2]
 8008366:	429a      	cmp	r2, r3
 8008368:	d002      	beq.n	8008370 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800836a:	78bb      	ldrb	r3, [r7, #2]
 800836c:	2bff      	cmp	r3, #255	@ 0xff
 800836e:	d109      	bne.n	8008384 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008374:	787a      	ldrb	r2, [r7, #1]
 8008376:	429a      	cmp	r2, r3
 8008378:	d002      	beq.n	8008380 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800837a:	787b      	ldrb	r3, [r7, #1]
 800837c:	2bff      	cmp	r3, #255	@ 0xff
 800837e:	d101      	bne.n	8008384 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	e006      	b.n	8008392 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008384:	7dfb      	ldrb	r3, [r7, #23]
 8008386:	3301      	adds	r3, #1
 8008388:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800838a:	7dfb      	ldrb	r3, [r7, #23]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d9d6      	bls.n	800833e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008390:	23ff      	movs	r3, #255	@ 0xff
}
 8008392:	4618      	mov	r0, r3
 8008394:	371c      	adds	r7, #28
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fcf4 	bl	8009d94 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80083ac:	2101      	movs	r1, #1
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 fe0d 	bl	8009fce <USBH_LL_DriverVBUS>

  return USBH_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af04      	add	r7, sp, #16
 80083c6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80083c8:	2302      	movs	r3, #2
 80083ca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d102      	bne.n	80083e2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2203      	movs	r2, #3
 80083e0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b0b      	cmp	r3, #11
 80083ea:	f200 81bb 	bhi.w	8008764 <USBH_Process+0x3a4>
 80083ee:	a201      	add	r2, pc, #4	@ (adr r2, 80083f4 <USBH_Process+0x34>)
 80083f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f4:	08008425 	.word	0x08008425
 80083f8:	08008457 	.word	0x08008457
 80083fc:	080084bf 	.word	0x080084bf
 8008400:	080086ff 	.word	0x080086ff
 8008404:	08008765 	.word	0x08008765
 8008408:	0800855f 	.word	0x0800855f
 800840c:	080086a5 	.word	0x080086a5
 8008410:	08008595 	.word	0x08008595
 8008414:	080085b5 	.word	0x080085b5
 8008418:	080085d3 	.word	0x080085d3
 800841c:	08008617 	.word	0x08008617
 8008420:	080086e7 	.word	0x080086e7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 819b 	beq.w	8008768 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008438:	20c8      	movs	r0, #200	@ 0xc8
 800843a:	f001 fe12 	bl	800a062 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f001 fd05 	bl	8009e4e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008454:	e188      	b.n	8008768 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800845c:	2b01      	cmp	r3, #1
 800845e:	d107      	bne.n	8008470 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800846e:	e18a      	b.n	8008786 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008476:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800847a:	d914      	bls.n	80084a6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008482:	3301      	adds	r3, #1
 8008484:	b2da      	uxtb	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008492:	2b03      	cmp	r3, #3
 8008494:	d903      	bls.n	800849e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	220d      	movs	r2, #13
 800849a:	701a      	strb	r2, [r3, #0]
      break;
 800849c:	e173      	b.n	8008786 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	701a      	strb	r2, [r3, #0]
      break;
 80084a4:	e16f      	b.n	8008786 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80084ac:	f103 020a 	add.w	r2, r3, #10
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80084b6:	200a      	movs	r0, #10
 80084b8:	f001 fdd3 	bl	800a062 <USBH_Delay>
      break;
 80084bc:	e163      	b.n	8008786 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084ce:	2104      	movs	r1, #4
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80084d4:	2064      	movs	r0, #100	@ 0x64
 80084d6:	f001 fdc4 	bl	800a062 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f001 fc90 	bl	8009e00 <USBH_LL_GetSpeed>
 80084e0:	4603      	mov	r3, r0
 80084e2:	461a      	mov	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2205      	movs	r2, #5
 80084ee:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80084f0:	2100      	movs	r1, #0
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 fa9b 	bl	8009a2e <USBH_AllocPipe>
 80084f8:	4603      	mov	r3, r0
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008500:	2180      	movs	r1, #128	@ 0x80
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 fa93 	bl	8009a2e <USBH_AllocPipe>
 8008508:	4603      	mov	r3, r0
 800850a:	461a      	mov	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	7919      	ldrb	r1, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008524:	9202      	str	r2, [sp, #8]
 8008526:	2200      	movs	r2, #0
 8008528:	9201      	str	r2, [sp, #4]
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	4603      	mov	r3, r0
 800852e:	2280      	movs	r2, #128	@ 0x80
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 fa4d 	bl	80099d0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	7959      	ldrb	r1, [r3, #5]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800854a:	9202      	str	r2, [sp, #8]
 800854c:	2200      	movs	r2, #0
 800854e:	9201      	str	r2, [sp, #4]
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	4603      	mov	r3, r0
 8008554:	2200      	movs	r2, #0
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f001 fa3a 	bl	80099d0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800855c:	e113      	b.n	8008786 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f916 	bl	8008790 <USBH_HandleEnum>
 8008564:	4603      	mov	r3, r0
 8008566:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	f040 80fd 	bne.w	800876c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008580:	2b01      	cmp	r3, #1
 8008582:	d103      	bne.n	800858c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2208      	movs	r2, #8
 8008588:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800858a:	e0ef      	b.n	800876c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2207      	movs	r2, #7
 8008590:	701a      	strb	r2, [r3, #0]
      break;
 8008592:	e0eb      	b.n	800876c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 80e8 	beq.w	8008770 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80085a6:	2101      	movs	r1, #1
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2208      	movs	r2, #8
 80085b0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80085b2:	e0dd      	b.n	8008770 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fc3a 	bl	8008e36 <USBH_SetCfg>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f040 80d5 	bne.w	8008774 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2209      	movs	r2, #9
 80085ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085d0:	e0d0      	b.n	8008774 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80085d8:	f003 0320 	and.w	r3, r3, #32
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d016      	beq.n	800860e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80085e0:	2101      	movs	r1, #1
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fc4a 	bl	8008e7c <USBH_SetFeature>
 80085e8:	4603      	mov	r3, r0
 80085ea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d103      	bne.n	80085fc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	220a      	movs	r2, #10
 80085f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085fa:	e0bd      	b.n	8008778 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b03      	cmp	r3, #3
 8008602:	f040 80b9 	bne.w	8008778 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	220a      	movs	r2, #10
 800860a:	701a      	strb	r2, [r3, #0]
      break;
 800860c:	e0b4      	b.n	8008778 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	220a      	movs	r2, #10
 8008612:	701a      	strb	r2, [r3, #0]
      break;
 8008614:	e0b0      	b.n	8008778 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 80ad 	beq.w	800877c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]
 800862e:	e016      	b.n	800865e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008630:	7bfa      	ldrb	r2, [r7, #15]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	32de      	adds	r2, #222	@ 0xde
 8008636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863a:	791a      	ldrb	r2, [r3, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008642:	429a      	cmp	r2, r3
 8008644:	d108      	bne.n	8008658 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008646:	7bfa      	ldrb	r2, [r7, #15]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	32de      	adds	r2, #222	@ 0xde
 800864c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008656:	e005      	b.n	8008664 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	3301      	adds	r3, #1
 800865c:	73fb      	strb	r3, [r7, #15]
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d0e5      	beq.n	8008630 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800866a:	2b00      	cmp	r3, #0
 800866c:	d016      	beq.n	800869c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	4798      	blx	r3
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2206      	movs	r2, #6
 8008684:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800868c:	2103      	movs	r1, #3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008692:	e073      	b.n	800877c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	220d      	movs	r2, #13
 8008698:	701a      	strb	r2, [r3, #0]
      break;
 800869a:	e06f      	b.n	800877c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	220d      	movs	r2, #13
 80086a0:	701a      	strb	r2, [r3, #0]
      break;
 80086a2:	e06b      	b.n	800877c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d017      	beq.n	80086de <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	4798      	blx	r3
 80086ba:	4603      	mov	r3, r0
 80086bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80086be:	7bbb      	ldrb	r3, [r7, #14]
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d103      	bne.n	80086ce <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	220b      	movs	r2, #11
 80086ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80086cc:	e058      	b.n	8008780 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d154      	bne.n	8008780 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	220d      	movs	r2, #13
 80086da:	701a      	strb	r2, [r3, #0]
      break;
 80086dc:	e050      	b.n	8008780 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	220d      	movs	r2, #13
 80086e2:	701a      	strb	r2, [r3, #0]
      break;
 80086e4:	e04c      	b.n	8008780 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d049      	beq.n	8008784 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	4798      	blx	r3
      }
      break;
 80086fc:	e042      	b.n	8008784 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff fd4a 	bl	80081a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d009      	beq.n	800872a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800873a:	2105      	movs	r1, #5
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b01      	cmp	r3, #1
 800874a:	d107      	bne.n	800875c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7ff fe22 	bl	800839e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800875a:	e014      	b.n	8008786 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 fb19 	bl	8009d94 <USBH_LL_Start>
      break;
 8008762:	e010      	b.n	8008786 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008764:	bf00      	nop
 8008766:	e00e      	b.n	8008786 <USBH_Process+0x3c6>
      break;
 8008768:	bf00      	nop
 800876a:	e00c      	b.n	8008786 <USBH_Process+0x3c6>
      break;
 800876c:	bf00      	nop
 800876e:	e00a      	b.n	8008786 <USBH_Process+0x3c6>
    break;
 8008770:	bf00      	nop
 8008772:	e008      	b.n	8008786 <USBH_Process+0x3c6>
      break;
 8008774:	bf00      	nop
 8008776:	e006      	b.n	8008786 <USBH_Process+0x3c6>
      break;
 8008778:	bf00      	nop
 800877a:	e004      	b.n	8008786 <USBH_Process+0x3c6>
      break;
 800877c:	bf00      	nop
 800877e:	e002      	b.n	8008786 <USBH_Process+0x3c6>
      break;
 8008780:	bf00      	nop
 8008782:	e000      	b.n	8008786 <USBH_Process+0x3c6>
      break;
 8008784:	bf00      	nop
  }
  return USBH_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af04      	add	r7, sp, #16
 8008796:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008798:	2301      	movs	r3, #1
 800879a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800879c:	2301      	movs	r3, #1
 800879e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	785b      	ldrb	r3, [r3, #1]
 80087a4:	2b07      	cmp	r3, #7
 80087a6:	f200 81bd 	bhi.w	8008b24 <USBH_HandleEnum+0x394>
 80087aa:	a201      	add	r2, pc, #4	@ (adr r2, 80087b0 <USBH_HandleEnum+0x20>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	080087d1 	.word	0x080087d1
 80087b4:	0800888b 	.word	0x0800888b
 80087b8:	080088f5 	.word	0x080088f5
 80087bc:	0800897f 	.word	0x0800897f
 80087c0:	080089e9 	.word	0x080089e9
 80087c4:	08008a59 	.word	0x08008a59
 80087c8:	08008a9f 	.word	0x08008a9f
 80087cc:	08008ae5 	.word	0x08008ae5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80087d0:	2108      	movs	r1, #8
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa4c 	bl	8008c70 <USBH_Get_DevDesc>
 80087d8:	4603      	mov	r3, r0
 80087da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087dc:	7bbb      	ldrb	r3, [r7, #14]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d12e      	bne.n	8008840 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	7919      	ldrb	r1, [r3, #4]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008806:	9202      	str	r2, [sp, #8]
 8008808:	2200      	movs	r2, #0
 800880a:	9201      	str	r2, [sp, #4]
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	4603      	mov	r3, r0
 8008810:	2280      	movs	r2, #128	@ 0x80
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f001 f8dc 	bl	80099d0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	7959      	ldrb	r1, [r3, #5]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800882c:	9202      	str	r2, [sp, #8]
 800882e:	2200      	movs	r2, #0
 8008830:	9201      	str	r2, [sp, #4]
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	4603      	mov	r3, r0
 8008836:	2200      	movs	r2, #0
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f001 f8c9 	bl	80099d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800883e:	e173      	b.n	8008b28 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	2b03      	cmp	r3, #3
 8008844:	f040 8170 	bne.w	8008b28 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800884e:	3301      	adds	r3, #1
 8008850:	b2da      	uxtb	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800885e:	2b03      	cmp	r3, #3
 8008860:	d903      	bls.n	800886a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	220d      	movs	r2, #13
 8008866:	701a      	strb	r2, [r3, #0]
      break;
 8008868:	e15e      	b.n	8008b28 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	795b      	ldrb	r3, [r3, #5]
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 f8fd 	bl	8009a70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	791b      	ldrb	r3, [r3, #4]
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 f8f7 	bl	8009a70 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	701a      	strb	r2, [r3, #0]
      break;
 8008888:	e14e      	b.n	8008b28 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800888a:	2112      	movs	r1, #18
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f9ef 	bl	8008c70 <USBH_Get_DevDesc>
 8008892:	4603      	mov	r3, r0
 8008894:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d103      	bne.n	80088a4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2202      	movs	r2, #2
 80088a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80088a2:	e143      	b.n	8008b2c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	f040 8140 	bne.w	8008b2c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088b2:	3301      	adds	r3, #1
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d903      	bls.n	80088ce <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	220d      	movs	r2, #13
 80088ca:	701a      	strb	r2, [r3, #0]
      break;
 80088cc:	e12e      	b.n	8008b2c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	795b      	ldrb	r3, [r3, #5]
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f001 f8cb 	bl	8009a70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	791b      	ldrb	r3, [r3, #4]
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f001 f8c5 	bl	8009a70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	701a      	strb	r2, [r3, #0]
      break;
 80088f2:	e11b      	b.n	8008b2c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80088f4:	2101      	movs	r1, #1
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa79 	bl	8008dee <USBH_SetAddress>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d130      	bne.n	8008968 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008906:	2002      	movs	r0, #2
 8008908:	f001 fbab 	bl	800a062 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2203      	movs	r2, #3
 8008918:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	7919      	ldrb	r1, [r3, #4]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800892e:	9202      	str	r2, [sp, #8]
 8008930:	2200      	movs	r2, #0
 8008932:	9201      	str	r2, [sp, #4]
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	4603      	mov	r3, r0
 8008938:	2280      	movs	r2, #128	@ 0x80
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 f848 	bl	80099d0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	7959      	ldrb	r1, [r3, #5]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008954:	9202      	str	r2, [sp, #8]
 8008956:	2200      	movs	r2, #0
 8008958:	9201      	str	r2, [sp, #4]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	4603      	mov	r3, r0
 800895e:	2200      	movs	r2, #0
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 f835 	bl	80099d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008966:	e0e3      	b.n	8008b30 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	2b03      	cmp	r3, #3
 800896c:	f040 80e0 	bne.w	8008b30 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	220d      	movs	r2, #13
 8008974:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	705a      	strb	r2, [r3, #1]
      break;
 800897c:	e0d8      	b.n	8008b30 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800897e:	2109      	movs	r1, #9
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f9a1 	bl	8008cc8 <USBH_Get_CfgDesc>
 8008986:	4603      	mov	r3, r0
 8008988:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d103      	bne.n	8008998 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2204      	movs	r2, #4
 8008994:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008996:	e0cd      	b.n	8008b34 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	2b03      	cmp	r3, #3
 800899c:	f040 80ca 	bne.w	8008b34 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089a6:	3301      	adds	r3, #1
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d903      	bls.n	80089c2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	220d      	movs	r2, #13
 80089be:	701a      	strb	r2, [r3, #0]
      break;
 80089c0:	e0b8      	b.n	8008b34 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	795b      	ldrb	r3, [r3, #5]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 f851 	bl	8009a70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	791b      	ldrb	r3, [r3, #4]
 80089d2:	4619      	mov	r1, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f001 f84b 	bl	8009a70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	701a      	strb	r2, [r3, #0]
      break;
 80089e6:	e0a5      	b.n	8008b34 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f969 	bl	8008cc8 <USBH_Get_CfgDesc>
 80089f6:	4603      	mov	r3, r0
 80089f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d103      	bne.n	8008a08 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2205      	movs	r2, #5
 8008a04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a06:	e097      	b.n	8008b38 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	f040 8094 	bne.w	8008b38 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a16:	3301      	adds	r3, #1
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d903      	bls.n	8008a32 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	220d      	movs	r2, #13
 8008a2e:	701a      	strb	r2, [r3, #0]
      break;
 8008a30:	e082      	b.n	8008b38 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	795b      	ldrb	r3, [r3, #5]
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 f819 	bl	8009a70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	791b      	ldrb	r3, [r3, #4]
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 f813 	bl	8009a70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	701a      	strb	r2, [r3, #0]
      break;
 8008a56:	e06f      	b.n	8008b38 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d019      	beq.n	8008a96 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008a6e:	23ff      	movs	r3, #255	@ 0xff
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f953 	bl	8008d1c <USBH_Get_StringDesc>
 8008a76:	4603      	mov	r3, r0
 8008a78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d103      	bne.n	8008a88 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2206      	movs	r2, #6
 8008a84:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a86:	e059      	b.n	8008b3c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d156      	bne.n	8008b3c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2206      	movs	r2, #6
 8008a92:	705a      	strb	r2, [r3, #1]
      break;
 8008a94:	e052      	b.n	8008b3c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2206      	movs	r2, #6
 8008a9a:	705a      	strb	r2, [r3, #1]
      break;
 8008a9c:	e04e      	b.n	8008b3c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d019      	beq.n	8008adc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ab4:	23ff      	movs	r3, #255	@ 0xff
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f930 	bl	8008d1c <USBH_Get_StringDesc>
 8008abc:	4603      	mov	r3, r0
 8008abe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d103      	bne.n	8008ace <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2207      	movs	r2, #7
 8008aca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008acc:	e038      	b.n	8008b40 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d135      	bne.n	8008b40 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2207      	movs	r2, #7
 8008ad8:	705a      	strb	r2, [r3, #1]
      break;
 8008ada:	e031      	b.n	8008b40 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2207      	movs	r2, #7
 8008ae0:	705a      	strb	r2, [r3, #1]
      break;
 8008ae2:	e02d      	b.n	8008b40 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d017      	beq.n	8008b1e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008afa:	23ff      	movs	r3, #255	@ 0xff
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f90d 	bl	8008d1c <USBH_Get_StringDesc>
 8008b02:	4603      	mov	r3, r0
 8008b04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d102      	bne.n	8008b12 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008b10:	e018      	b.n	8008b44 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d115      	bne.n	8008b44 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b1c:	e012      	b.n	8008b44 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]
      break;
 8008b22:	e00f      	b.n	8008b44 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008b24:	bf00      	nop
 8008b26:	e00e      	b.n	8008b46 <USBH_HandleEnum+0x3b6>
      break;
 8008b28:	bf00      	nop
 8008b2a:	e00c      	b.n	8008b46 <USBH_HandleEnum+0x3b6>
      break;
 8008b2c:	bf00      	nop
 8008b2e:	e00a      	b.n	8008b46 <USBH_HandleEnum+0x3b6>
      break;
 8008b30:	bf00      	nop
 8008b32:	e008      	b.n	8008b46 <USBH_HandleEnum+0x3b6>
      break;
 8008b34:	bf00      	nop
 8008b36:	e006      	b.n	8008b46 <USBH_HandleEnum+0x3b6>
      break;
 8008b38:	bf00      	nop
 8008b3a:	e004      	b.n	8008b46 <USBH_HandleEnum+0x3b6>
      break;
 8008b3c:	bf00      	nop
 8008b3e:	e002      	b.n	8008b46 <USBH_HandleEnum+0x3b6>
      break;
 8008b40:	bf00      	nop
 8008b42:	e000      	b.n	8008b46 <USBH_HandleEnum+0x3b6>
      break;
 8008b44:	bf00      	nop
  }
  return Status;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008b62:	bf00      	nop
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b7c:	1c5a      	adds	r2, r3, #1
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f804 	bl	8008b92 <USBH_HandleSof>
}
 8008b8a:	bf00      	nop
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b0b      	cmp	r3, #11
 8008ba2:	d10a      	bne.n	8008bba <USBH_HandleSof+0x28>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d005      	beq.n	8008bba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	4798      	blx	r3
  }
}
 8008bba:	bf00      	nop
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008bd2:	bf00      	nop
}
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008bee:	bf00      	nop
}
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b083      	sub	sp, #12
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 f8be 	bl	8009dca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	791b      	ldrb	r3, [r3, #4]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 ff0b 	bl	8009a70 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	795b      	ldrb	r3, [r3, #5]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 ff05 	bl	8009a70 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af02      	add	r7, sp, #8
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008c7c:	887b      	ldrh	r3, [r7, #2]
 8008c7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c82:	d901      	bls.n	8008c88 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e01b      	b.n	8008cc0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008c8e:	887b      	ldrh	r3, [r7, #2]
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	4613      	mov	r3, r2
 8008c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c98:	2100      	movs	r1, #0
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f872 	bl	8008d84 <USBH_GetDescriptor>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d109      	bne.n	8008cbe <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008cb0:	887a      	ldrh	r2, [r7, #2]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f929 	bl	8008f0c <USBH_ParseDevDesc>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af02      	add	r7, sp, #8
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	331c      	adds	r3, #28
 8008cd8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008cda:	887b      	ldrh	r3, [r7, #2]
 8008cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ce0:	d901      	bls.n	8008ce6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e016      	b.n	8008d14 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008ce6:	887b      	ldrh	r3, [r7, #2]
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f846 	bl	8008d84 <USBH_GetDescriptor>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d107      	bne.n	8008d12 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008d02:	887b      	ldrh	r3, [r7, #2]
 8008d04:	461a      	mov	r2, r3
 8008d06:	68b9      	ldr	r1, [r7, #8]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f9af 	bl	800906c <USBH_ParseCfgDesc>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b088      	sub	sp, #32
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	607a      	str	r2, [r7, #4]
 8008d26:	461a      	mov	r2, r3
 8008d28:	460b      	mov	r3, r1
 8008d2a:	72fb      	strb	r3, [r7, #11]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008d30:	893b      	ldrh	r3, [r7, #8]
 8008d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d36:	d802      	bhi.n	8008d3e <USBH_Get_StringDesc+0x22>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e01c      	b.n	8008d7c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008d42:	7afb      	ldrb	r3, [r7, #11]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008d4a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008d52:	893b      	ldrh	r3, [r7, #8]
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	460b      	mov	r3, r1
 8008d58:	2100      	movs	r1, #0
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 f812 	bl	8008d84 <USBH_GetDescriptor>
 8008d60:	4603      	mov	r3, r0
 8008d62:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d107      	bne.n	8008d7a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008d70:	893a      	ldrh	r2, [r7, #8]
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fb8d 	bl	8009494 <USBH_ParseStringDesc>
  }

  return status;
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	607b      	str	r3, [r7, #4]
 8008d8e:	460b      	mov	r3, r1
 8008d90:	72fb      	strb	r3, [r7, #11]
 8008d92:	4613      	mov	r3, r2
 8008d94:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	789b      	ldrb	r3, [r3, #2]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d11c      	bne.n	8008dd8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008d9e:	7afb      	ldrb	r3, [r7, #11]
 8008da0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2206      	movs	r2, #6
 8008dae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	893a      	ldrh	r2, [r7, #8]
 8008db4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008db6:	893b      	ldrh	r3, [r7, #8]
 8008db8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008dbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dc0:	d104      	bne.n	8008dcc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f240 4209 	movw	r2, #1033	@ 0x409
 8008dc8:	829a      	strh	r2, [r3, #20]
 8008dca:	e002      	b.n	8008dd2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	8b3a      	ldrh	r2, [r7, #24]
 8008dd6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008dd8:	8b3b      	ldrh	r3, [r7, #24]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 fba5 	bl	800952e <USBH_CtlReq>
 8008de4:	4603      	mov	r3, r0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	460b      	mov	r3, r1
 8008df8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	789b      	ldrb	r3, [r3, #2]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d10f      	bne.n	8008e22 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2205      	movs	r2, #5
 8008e0c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e22:	2200      	movs	r2, #0
 8008e24:	2100      	movs	r1, #0
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fb81 	bl	800952e <USBH_CtlReq>
 8008e2c:	4603      	mov	r3, r0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	789b      	ldrb	r3, [r3, #2]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d10e      	bne.n	8008e68 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2209      	movs	r2, #9
 8008e54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	887a      	ldrh	r2, [r7, #2]
 8008e5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fb5e 	bl	800952e <USBH_CtlReq>
 8008e72:	4603      	mov	r3, r0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	789b      	ldrb	r3, [r3, #2]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d10f      	bne.n	8008eb0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2203      	movs	r2, #3
 8008e9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008e9c:	78fb      	ldrb	r3, [r7, #3]
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fb3a 	bl	800952e <USBH_CtlReq>
 8008eba:	4603      	mov	r3, r0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	789b      	ldrb	r3, [r3, #2]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d10f      	bne.n	8008ef8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008eea:	78fb      	ldrb	r3, [r7, #3]
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2100      	movs	r1, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fb16 	bl	800952e <USBH_CtlReq>
 8008f02:	4603      	mov	r3, r0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	4613      	mov	r3, r2
 8008f18:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008f20:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e094      	b.n	800905a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	781a      	ldrb	r2, [r3, #0]
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	785a      	ldrb	r2, [r3, #1]
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	3302      	adds	r3, #2
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	461a      	mov	r2, r3
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	3303      	adds	r3, #3
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	021b      	lsls	r3, r3, #8
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	4313      	orrs	r3, r2
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	791a      	ldrb	r2, [r3, #4]
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	795a      	ldrb	r2, [r3, #5]
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	799a      	ldrb	r2, [r3, #6]
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	79da      	ldrb	r2, [r3, #7]
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d11b      	bne.n	8008fc6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	79db      	ldrb	r3, [r3, #7]
 8008f92:	2b20      	cmp	r3, #32
 8008f94:	dc0f      	bgt.n	8008fb6 <USBH_ParseDevDesc+0xaa>
 8008f96:	2b08      	cmp	r3, #8
 8008f98:	db0f      	blt.n	8008fba <USBH_ParseDevDesc+0xae>
 8008f9a:	3b08      	subs	r3, #8
 8008f9c:	4a32      	ldr	r2, [pc, #200]	@ (8009068 <USBH_ParseDevDesc+0x15c>)
 8008f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	bf14      	ite	ne
 8008faa:	2301      	movne	r3, #1
 8008fac:	2300      	moveq	r3, #0
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d106      	bne.n	8008fc2 <USBH_ParseDevDesc+0xb6>
 8008fb4:	e001      	b.n	8008fba <USBH_ParseDevDesc+0xae>
 8008fb6:	2b40      	cmp	r3, #64	@ 0x40
 8008fb8:	d003      	beq.n	8008fc2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	71da      	strb	r2, [r3, #7]
        break;
 8008fc0:	e000      	b.n	8008fc4 <USBH_ParseDevDesc+0xb8>
        break;
 8008fc2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008fc4:	e00e      	b.n	8008fe4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d107      	bne.n	8008fe0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	79db      	ldrb	r3, [r3, #7]
 8008fd4:	2b08      	cmp	r3, #8
 8008fd6:	d005      	beq.n	8008fe4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	2208      	movs	r2, #8
 8008fdc:	71da      	strb	r2, [r3, #7]
 8008fde:	e001      	b.n	8008fe4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008fe4:	88fb      	ldrh	r3, [r7, #6]
 8008fe6:	2b08      	cmp	r3, #8
 8008fe8:	d936      	bls.n	8009058 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	3308      	adds	r3, #8
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	3309      	adds	r3, #9
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	021b      	lsls	r3, r3, #8
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	330a      	adds	r3, #10
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	330b      	adds	r3, #11
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	021b      	lsls	r3, r3, #8
 8009014:	b29b      	uxth	r3, r3
 8009016:	4313      	orrs	r3, r2
 8009018:	b29a      	uxth	r2, r3
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	330c      	adds	r3, #12
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	330d      	adds	r3, #13
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	021b      	lsls	r3, r3, #8
 800902e:	b29b      	uxth	r3, r3
 8009030:	4313      	orrs	r3, r2
 8009032:	b29a      	uxth	r2, r3
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	7b9a      	ldrb	r2, [r3, #14]
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	7bda      	ldrb	r2, [r3, #15]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	7c1a      	ldrb	r2, [r3, #16]
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	7c5a      	ldrb	r2, [r3, #17]
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009058:	7dfb      	ldrb	r3, [r7, #23]
}
 800905a:	4618      	mov	r0, r3
 800905c:	371c      	adds	r7, #28
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	01000101 	.word	0x01000101

0800906c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b08c      	sub	sp, #48	@ 0x30
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	4613      	mov	r3, r2
 8009078:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009080:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800908e:	2300      	movs	r3, #0
 8009090:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800909a:	2302      	movs	r3, #2
 800909c:	e0da      	b.n	8009254 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80090a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	2b09      	cmp	r3, #9
 80090a8:	d002      	beq.n	80090b0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80090aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ac:	2209      	movs	r2, #9
 80090ae:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	781a      	ldrb	r2, [r3, #0]
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	785a      	ldrb	r2, [r3, #1]
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	3302      	adds	r3, #2
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	3303      	adds	r3, #3
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	021b      	lsls	r3, r3, #8
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	4313      	orrs	r3, r2
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090da:	bf28      	it	cs
 80090dc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	791a      	ldrb	r2, [r3, #4]
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	795a      	ldrb	r2, [r3, #5]
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	799a      	ldrb	r2, [r3, #6]
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	79da      	ldrb	r2, [r3, #7]
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	7a1a      	ldrb	r2, [r3, #8]
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	2b09      	cmp	r3, #9
 8009112:	f240 809d 	bls.w	8009250 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009116:	2309      	movs	r3, #9
 8009118:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800911e:	e081      	b.n	8009224 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009120:	f107 0316 	add.w	r3, r7, #22
 8009124:	4619      	mov	r1, r3
 8009126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009128:	f000 f9e7 	bl	80094fa <USBH_GetNextDesc>
 800912c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800912e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	2b04      	cmp	r3, #4
 8009134:	d176      	bne.n	8009224 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b09      	cmp	r3, #9
 800913c:	d002      	beq.n	8009144 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800913e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009140:	2209      	movs	r2, #9
 8009142:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009148:	221a      	movs	r2, #26
 800914a:	fb02 f303 	mul.w	r3, r2, r3
 800914e:	3308      	adds	r3, #8
 8009150:	6a3a      	ldr	r2, [r7, #32]
 8009152:	4413      	add	r3, r2
 8009154:	3302      	adds	r3, #2
 8009156:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800915a:	69f8      	ldr	r0, [r7, #28]
 800915c:	f000 f87e 	bl	800925c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009160:	2300      	movs	r3, #0
 8009162:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009166:	2300      	movs	r3, #0
 8009168:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800916a:	e043      	b.n	80091f4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800916c:	f107 0316 	add.w	r3, r7, #22
 8009170:	4619      	mov	r1, r3
 8009172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009174:	f000 f9c1 	bl	80094fa <USBH_GetNextDesc>
 8009178:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	785b      	ldrb	r3, [r3, #1]
 800917e:	2b05      	cmp	r3, #5
 8009180:	d138      	bne.n	80091f4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	795b      	ldrb	r3, [r3, #5]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d113      	bne.n	80091b2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800918e:	2b02      	cmp	r3, #2
 8009190:	d003      	beq.n	800919a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	799b      	ldrb	r3, [r3, #6]
 8009196:	2b03      	cmp	r3, #3
 8009198:	d10b      	bne.n	80091b2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	79db      	ldrb	r3, [r3, #7]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10b      	bne.n	80091ba <USBH_ParseCfgDesc+0x14e>
 80091a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	2b09      	cmp	r3, #9
 80091a8:	d007      	beq.n	80091ba <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80091aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ac:	2209      	movs	r2, #9
 80091ae:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80091b0:	e003      	b.n	80091ba <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80091b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b4:	2207      	movs	r2, #7
 80091b6:	701a      	strb	r2, [r3, #0]
 80091b8:	e000      	b.n	80091bc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80091ba:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80091bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80091c4:	3201      	adds	r2, #1
 80091c6:	00d2      	lsls	r2, r2, #3
 80091c8:	211a      	movs	r1, #26
 80091ca:	fb01 f303 	mul.w	r3, r1, r3
 80091ce:	4413      	add	r3, r2
 80091d0:	3308      	adds	r3, #8
 80091d2:	6a3a      	ldr	r2, [r7, #32]
 80091d4:	4413      	add	r3, r2
 80091d6:	3304      	adds	r3, #4
 80091d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80091da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091dc:	69b9      	ldr	r1, [r7, #24]
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f000 f870 	bl	80092c4 <USBH_ParseEPDesc>
 80091e4:	4603      	mov	r3, r0
 80091e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80091ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80091ee:	3301      	adds	r3, #1
 80091f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	791b      	ldrb	r3, [r3, #4]
 80091f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d204      	bcs.n	800920a <USBH_ParseCfgDesc+0x19e>
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	885a      	ldrh	r2, [r3, #2]
 8009204:	8afb      	ldrh	r3, [r7, #22]
 8009206:	429a      	cmp	r2, r3
 8009208:	d8b0      	bhi.n	800916c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	791b      	ldrb	r3, [r3, #4]
 800920e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009212:	429a      	cmp	r2, r3
 8009214:	d201      	bcs.n	800921a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009216:	2303      	movs	r3, #3
 8009218:	e01c      	b.n	8009254 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800921a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800921e:	3301      	adds	r3, #1
 8009220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009228:	2b01      	cmp	r3, #1
 800922a:	d805      	bhi.n	8009238 <USBH_ParseCfgDesc+0x1cc>
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	885a      	ldrh	r2, [r3, #2]
 8009230:	8afb      	ldrh	r3, [r7, #22]
 8009232:	429a      	cmp	r2, r3
 8009234:	f63f af74 	bhi.w	8009120 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	791b      	ldrb	r3, [r3, #4]
 800923c:	2b02      	cmp	r3, #2
 800923e:	bf28      	it	cs
 8009240:	2302      	movcs	r3, #2
 8009242:	b2db      	uxtb	r3, r3
 8009244:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009248:	429a      	cmp	r2, r3
 800924a:	d201      	bcs.n	8009250 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800924c:	2303      	movs	r3, #3
 800924e:	e001      	b.n	8009254 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009250:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009254:	4618      	mov	r0, r3
 8009256:	3730      	adds	r7, #48	@ 0x30
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	781a      	ldrb	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	785a      	ldrb	r2, [r3, #1]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	789a      	ldrb	r2, [r3, #2]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	78da      	ldrb	r2, [r3, #3]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	3304      	adds	r3, #4
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	2b02      	cmp	r3, #2
 800928e:	bf28      	it	cs
 8009290:	2302      	movcs	r3, #2
 8009292:	b2da      	uxtb	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	795a      	ldrb	r2, [r3, #5]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	799a      	ldrb	r2, [r3, #6]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	79da      	ldrb	r2, [r3, #7]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	7a1a      	ldrb	r2, [r3, #8]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	721a      	strb	r2, [r3, #8]
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	781a      	ldrb	r2, [r3, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	785a      	ldrb	r2, [r3, #1]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	789a      	ldrb	r2, [r3, #2]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	78da      	ldrb	r2, [r3, #3]
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	3304      	adds	r3, #4
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	3305      	adds	r3, #5
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	021b      	lsls	r3, r3, #8
 8009304:	b29b      	uxth	r3, r3
 8009306:	4313      	orrs	r3, r2
 8009308:	b29a      	uxth	r2, r3
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	799a      	ldrb	r2, [r3, #6]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	889b      	ldrh	r3, [r3, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d009      	beq.n	8009332 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009326:	d804      	bhi.n	8009332 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800932c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009330:	d901      	bls.n	8009336 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009332:	2303      	movs	r3, #3
 8009334:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800933c:	2b00      	cmp	r3, #0
 800933e:	d136      	bne.n	80093ae <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	78db      	ldrb	r3, [r3, #3]
 8009344:	f003 0303 	and.w	r3, r3, #3
 8009348:	2b02      	cmp	r3, #2
 800934a:	d108      	bne.n	800935e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	889b      	ldrh	r3, [r3, #4]
 8009350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009354:	f240 8097 	bls.w	8009486 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009358:	2303      	movs	r3, #3
 800935a:	75fb      	strb	r3, [r7, #23]
 800935c:	e093      	b.n	8009486 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	78db      	ldrb	r3, [r3, #3]
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d107      	bne.n	800937a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	889b      	ldrh	r3, [r3, #4]
 800936e:	2b40      	cmp	r3, #64	@ 0x40
 8009370:	f240 8089 	bls.w	8009486 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009374:	2303      	movs	r3, #3
 8009376:	75fb      	strb	r3, [r7, #23]
 8009378:	e085      	b.n	8009486 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	78db      	ldrb	r3, [r3, #3]
 800937e:	f003 0303 	and.w	r3, r3, #3
 8009382:	2b01      	cmp	r3, #1
 8009384:	d005      	beq.n	8009392 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	78db      	ldrb	r3, [r3, #3]
 800938a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800938e:	2b03      	cmp	r3, #3
 8009390:	d10a      	bne.n	80093a8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	799b      	ldrb	r3, [r3, #6]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d003      	beq.n	80093a2 <USBH_ParseEPDesc+0xde>
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	799b      	ldrb	r3, [r3, #6]
 800939e:	2b10      	cmp	r3, #16
 80093a0:	d970      	bls.n	8009484 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80093a2:	2303      	movs	r3, #3
 80093a4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80093a6:	e06d      	b.n	8009484 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80093a8:	2303      	movs	r3, #3
 80093aa:	75fb      	strb	r3, [r7, #23]
 80093ac:	e06b      	b.n	8009486 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d13c      	bne.n	8009432 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	78db      	ldrb	r3, [r3, #3]
 80093bc:	f003 0303 	and.w	r3, r3, #3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d005      	beq.n	80093d0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	78db      	ldrb	r3, [r3, #3]
 80093c8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d106      	bne.n	80093de <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	889b      	ldrh	r3, [r3, #4]
 80093d4:	2b40      	cmp	r3, #64	@ 0x40
 80093d6:	d956      	bls.n	8009486 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80093d8:	2303      	movs	r3, #3
 80093da:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80093dc:	e053      	b.n	8009486 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	78db      	ldrb	r3, [r3, #3]
 80093e2:	f003 0303 	and.w	r3, r3, #3
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d10e      	bne.n	8009408 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	799b      	ldrb	r3, [r3, #6]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d007      	beq.n	8009402 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80093f6:	2b10      	cmp	r3, #16
 80093f8:	d803      	bhi.n	8009402 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80093fe:	2b40      	cmp	r3, #64	@ 0x40
 8009400:	d941      	bls.n	8009486 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009402:	2303      	movs	r3, #3
 8009404:	75fb      	strb	r3, [r7, #23]
 8009406:	e03e      	b.n	8009486 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	78db      	ldrb	r3, [r3, #3]
 800940c:	f003 0303 	and.w	r3, r3, #3
 8009410:	2b03      	cmp	r3, #3
 8009412:	d10b      	bne.n	800942c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	799b      	ldrb	r3, [r3, #6]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d004      	beq.n	8009426 <USBH_ParseEPDesc+0x162>
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	889b      	ldrh	r3, [r3, #4]
 8009420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009424:	d32f      	bcc.n	8009486 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009426:	2303      	movs	r3, #3
 8009428:	75fb      	strb	r3, [r7, #23]
 800942a:	e02c      	b.n	8009486 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800942c:	2303      	movs	r3, #3
 800942e:	75fb      	strb	r3, [r7, #23]
 8009430:	e029      	b.n	8009486 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009438:	2b02      	cmp	r3, #2
 800943a:	d120      	bne.n	800947e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	78db      	ldrb	r3, [r3, #3]
 8009440:	f003 0303 	and.w	r3, r3, #3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d106      	bne.n	8009456 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	889b      	ldrh	r3, [r3, #4]
 800944c:	2b08      	cmp	r3, #8
 800944e:	d01a      	beq.n	8009486 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009450:	2303      	movs	r3, #3
 8009452:	75fb      	strb	r3, [r7, #23]
 8009454:	e017      	b.n	8009486 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	78db      	ldrb	r3, [r3, #3]
 800945a:	f003 0303 	and.w	r3, r3, #3
 800945e:	2b03      	cmp	r3, #3
 8009460:	d10a      	bne.n	8009478 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	799b      	ldrb	r3, [r3, #6]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d003      	beq.n	8009472 <USBH_ParseEPDesc+0x1ae>
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	889b      	ldrh	r3, [r3, #4]
 800946e:	2b08      	cmp	r3, #8
 8009470:	d909      	bls.n	8009486 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009472:	2303      	movs	r3, #3
 8009474:	75fb      	strb	r3, [r7, #23]
 8009476:	e006      	b.n	8009486 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009478:	2303      	movs	r3, #3
 800947a:	75fb      	strb	r3, [r7, #23]
 800947c:	e003      	b.n	8009486 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800947e:	2303      	movs	r3, #3
 8009480:	75fb      	strb	r3, [r7, #23]
 8009482:	e000      	b.n	8009486 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009484:	bf00      	nop
  }

  return status;
 8009486:	7dfb      	ldrb	r3, [r7, #23]
}
 8009488:	4618      	mov	r0, r3
 800948a:	371c      	adds	r7, #28
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009494:	b480      	push	{r7}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	4613      	mov	r3, r2
 80094a0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	3301      	adds	r3, #1
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d120      	bne.n	80094ee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	1e9a      	subs	r2, r3, #2
 80094b2:	88fb      	ldrh	r3, [r7, #6]
 80094b4:	4293      	cmp	r3, r2
 80094b6:	bf28      	it	cs
 80094b8:	4613      	movcs	r3, r2
 80094ba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	3302      	adds	r3, #2
 80094c0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80094c2:	2300      	movs	r3, #0
 80094c4:	82fb      	strh	r3, [r7, #22]
 80094c6:	e00b      	b.n	80094e0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80094c8:	8afb      	ldrh	r3, [r7, #22]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	4413      	add	r3, r2
 80094ce:	781a      	ldrb	r2, [r3, #0]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	3301      	adds	r3, #1
 80094d8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80094da:	8afb      	ldrh	r3, [r7, #22]
 80094dc:	3302      	adds	r3, #2
 80094de:	82fb      	strh	r3, [r7, #22]
 80094e0:	8afa      	ldrh	r2, [r7, #22]
 80094e2:	8abb      	ldrh	r3, [r7, #20]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d3ef      	bcc.n	80094c8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2200      	movs	r2, #0
 80094ec:	701a      	strb	r2, [r3, #0]
  }
}
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b085      	sub	sp, #20
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	7812      	ldrb	r2, [r2, #0]
 800950c:	4413      	add	r3, r2
 800950e:	b29a      	uxth	r2, r3
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4413      	add	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009520:	68fb      	ldr	r3, [r7, #12]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b086      	sub	sp, #24
 8009532:	af00      	add	r7, sp, #0
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	60b9      	str	r1, [r7, #8]
 8009538:	4613      	mov	r3, r2
 800953a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800953c:	2301      	movs	r3, #1
 800953e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	789b      	ldrb	r3, [r3, #2]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d002      	beq.n	800954e <USBH_CtlReq+0x20>
 8009548:	2b02      	cmp	r3, #2
 800954a:	d00f      	beq.n	800956c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800954c:	e027      	b.n	800959e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	88fa      	ldrh	r2, [r7, #6]
 8009558:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2201      	movs	r2, #1
 800955e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2202      	movs	r2, #2
 8009564:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]
      break;
 800956a:	e018      	b.n	800959e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 f81b 	bl	80095a8 <USBH_HandleControl>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <USBH_CtlReq+0x54>
 800957c:	7dfb      	ldrb	r3, [r7, #23]
 800957e:	2b03      	cmp	r3, #3
 8009580:	d106      	bne.n	8009590 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2201      	movs	r2, #1
 8009586:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	761a      	strb	r2, [r3, #24]
      break;
 800958e:	e005      	b.n	800959c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	2b02      	cmp	r3, #2
 8009594:	d102      	bne.n	800959c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2201      	movs	r2, #1
 800959a:	709a      	strb	r2, [r3, #2]
      break;
 800959c:	bf00      	nop
  }
  return status;
 800959e:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af02      	add	r7, sp, #8
 80095ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80095b0:	2301      	movs	r3, #1
 80095b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7e1b      	ldrb	r3, [r3, #24]
 80095bc:	3b01      	subs	r3, #1
 80095be:	2b0a      	cmp	r3, #10
 80095c0:	f200 8156 	bhi.w	8009870 <USBH_HandleControl+0x2c8>
 80095c4:	a201      	add	r2, pc, #4	@ (adr r2, 80095cc <USBH_HandleControl+0x24>)
 80095c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ca:	bf00      	nop
 80095cc:	080095f9 	.word	0x080095f9
 80095d0:	08009613 	.word	0x08009613
 80095d4:	0800967d 	.word	0x0800967d
 80095d8:	080096a3 	.word	0x080096a3
 80095dc:	080096db 	.word	0x080096db
 80095e0:	08009705 	.word	0x08009705
 80095e4:	08009757 	.word	0x08009757
 80095e8:	08009779 	.word	0x08009779
 80095ec:	080097b5 	.word	0x080097b5
 80095f0:	080097db 	.word	0x080097db
 80095f4:	08009819 	.word	0x08009819
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f103 0110 	add.w	r1, r3, #16
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	795b      	ldrb	r3, [r3, #5]
 8009602:	461a      	mov	r2, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f943 	bl	8009890 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2202      	movs	r2, #2
 800960e:	761a      	strb	r2, [r3, #24]
      break;
 8009610:	e139      	b.n	8009886 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	795b      	ldrb	r3, [r3, #5]
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fcc5 	bl	8009fa8 <USBH_LL_GetURBState>
 800961e:	4603      	mov	r3, r0
 8009620:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009622:	7bbb      	ldrb	r3, [r7, #14]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d11e      	bne.n	8009666 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	7c1b      	ldrb	r3, [r3, #16]
 800962c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009630:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	8adb      	ldrh	r3, [r3, #22]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800963a:	7b7b      	ldrb	r3, [r7, #13]
 800963c:	2b80      	cmp	r3, #128	@ 0x80
 800963e:	d103      	bne.n	8009648 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2203      	movs	r2, #3
 8009644:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009646:	e115      	b.n	8009874 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2205      	movs	r2, #5
 800964c:	761a      	strb	r2, [r3, #24]
      break;
 800964e:	e111      	b.n	8009874 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009650:	7b7b      	ldrb	r3, [r7, #13]
 8009652:	2b80      	cmp	r3, #128	@ 0x80
 8009654:	d103      	bne.n	800965e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2209      	movs	r2, #9
 800965a:	761a      	strb	r2, [r3, #24]
      break;
 800965c:	e10a      	b.n	8009874 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2207      	movs	r2, #7
 8009662:	761a      	strb	r2, [r3, #24]
      break;
 8009664:	e106      	b.n	8009874 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b04      	cmp	r3, #4
 800966a:	d003      	beq.n	8009674 <USBH_HandleControl+0xcc>
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	2b02      	cmp	r3, #2
 8009670:	f040 8100 	bne.w	8009874 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	220b      	movs	r2, #11
 8009678:	761a      	strb	r2, [r3, #24]
      break;
 800967a:	e0fb      	b.n	8009874 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009682:	b29a      	uxth	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6899      	ldr	r1, [r3, #8]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	899a      	ldrh	r2, [r3, #12]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	791b      	ldrb	r3, [r3, #4]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f93a 	bl	800990e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2204      	movs	r2, #4
 800969e:	761a      	strb	r2, [r3, #24]
      break;
 80096a0:	e0f1      	b.n	8009886 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	791b      	ldrb	r3, [r3, #4]
 80096a6:	4619      	mov	r1, r3
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fc7d 	bl	8009fa8 <USBH_LL_GetURBState>
 80096ae:	4603      	mov	r3, r0
 80096b0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80096b2:	7bbb      	ldrb	r3, [r7, #14]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d102      	bne.n	80096be <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2209      	movs	r2, #9
 80096bc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80096be:	7bbb      	ldrb	r3, [r7, #14]
 80096c0:	2b05      	cmp	r3, #5
 80096c2:	d102      	bne.n	80096ca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80096c4:	2303      	movs	r3, #3
 80096c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096c8:	e0d6      	b.n	8009878 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	f040 80d3 	bne.w	8009878 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	220b      	movs	r2, #11
 80096d6:	761a      	strb	r2, [r3, #24]
      break;
 80096d8:	e0ce      	b.n	8009878 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6899      	ldr	r1, [r3, #8]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	899a      	ldrh	r2, [r3, #12]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	795b      	ldrb	r3, [r3, #5]
 80096e6:	2001      	movs	r0, #1
 80096e8:	9000      	str	r0, [sp, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f8ea 	bl	80098c4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2206      	movs	r2, #6
 8009700:	761a      	strb	r2, [r3, #24]
      break;
 8009702:	e0c0      	b.n	8009886 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	795b      	ldrb	r3, [r3, #5]
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fc4c 	bl	8009fa8 <USBH_LL_GetURBState>
 8009710:	4603      	mov	r3, r0
 8009712:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d103      	bne.n	8009722 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2207      	movs	r2, #7
 800971e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009720:	e0ac      	b.n	800987c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009722:	7bbb      	ldrb	r3, [r7, #14]
 8009724:	2b05      	cmp	r3, #5
 8009726:	d105      	bne.n	8009734 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	220c      	movs	r2, #12
 800972c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800972e:	2303      	movs	r3, #3
 8009730:	73fb      	strb	r3, [r7, #15]
      break;
 8009732:	e0a3      	b.n	800987c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009734:	7bbb      	ldrb	r3, [r7, #14]
 8009736:	2b02      	cmp	r3, #2
 8009738:	d103      	bne.n	8009742 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2205      	movs	r2, #5
 800973e:	761a      	strb	r2, [r3, #24]
      break;
 8009740:	e09c      	b.n	800987c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	2b04      	cmp	r3, #4
 8009746:	f040 8099 	bne.w	800987c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	220b      	movs	r2, #11
 800974e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009750:	2302      	movs	r3, #2
 8009752:	73fb      	strb	r3, [r7, #15]
      break;
 8009754:	e092      	b.n	800987c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	791b      	ldrb	r3, [r3, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	2100      	movs	r1, #0
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f8d5 	bl	800990e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800976a:	b29a      	uxth	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2208      	movs	r2, #8
 8009774:	761a      	strb	r2, [r3, #24]

      break;
 8009776:	e086      	b.n	8009886 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	791b      	ldrb	r3, [r3, #4]
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fc12 	bl	8009fa8 <USBH_LL_GetURBState>
 8009784:	4603      	mov	r3, r0
 8009786:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d105      	bne.n	800979a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	220d      	movs	r2, #13
 8009792:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009798:	e072      	b.n	8009880 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800979a:	7bbb      	ldrb	r3, [r7, #14]
 800979c:	2b04      	cmp	r3, #4
 800979e:	d103      	bne.n	80097a8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	220b      	movs	r2, #11
 80097a4:	761a      	strb	r2, [r3, #24]
      break;
 80097a6:	e06b      	b.n	8009880 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	2b05      	cmp	r3, #5
 80097ac:	d168      	bne.n	8009880 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80097ae:	2303      	movs	r3, #3
 80097b0:	73fb      	strb	r3, [r7, #15]
      break;
 80097b2:	e065      	b.n	8009880 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	795b      	ldrb	r3, [r3, #5]
 80097b8:	2201      	movs	r2, #1
 80097ba:	9200      	str	r2, [sp, #0]
 80097bc:	2200      	movs	r2, #0
 80097be:	2100      	movs	r1, #0
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f87f 	bl	80098c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	220a      	movs	r2, #10
 80097d6:	761a      	strb	r2, [r3, #24]
      break;
 80097d8:	e055      	b.n	8009886 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	795b      	ldrb	r3, [r3, #5]
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fbe1 	bl	8009fa8 <USBH_LL_GetURBState>
 80097e6:	4603      	mov	r3, r0
 80097e8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d105      	bne.n	80097fc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	220d      	movs	r2, #13
 80097f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80097fa:	e043      	b.n	8009884 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d103      	bne.n	800980a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2209      	movs	r2, #9
 8009806:	761a      	strb	r2, [r3, #24]
      break;
 8009808:	e03c      	b.n	8009884 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	2b04      	cmp	r3, #4
 800980e:	d139      	bne.n	8009884 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	220b      	movs	r2, #11
 8009814:	761a      	strb	r2, [r3, #24]
      break;
 8009816:	e035      	b.n	8009884 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	7e5b      	ldrb	r3, [r3, #25]
 800981c:	3301      	adds	r3, #1
 800981e:	b2da      	uxtb	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	765a      	strb	r2, [r3, #25]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	7e5b      	ldrb	r3, [r3, #25]
 8009828:	2b02      	cmp	r3, #2
 800982a:	d806      	bhi.n	800983a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009838:	e025      	b.n	8009886 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009840:	2106      	movs	r1, #6
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	795b      	ldrb	r3, [r3, #5]
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f90c 	bl	8009a70 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	791b      	ldrb	r3, [r3, #4]
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f906 	bl	8009a70 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800986a:	2302      	movs	r3, #2
 800986c:	73fb      	strb	r3, [r7, #15]
      break;
 800986e:	e00a      	b.n	8009886 <USBH_HandleControl+0x2de>

    default:
      break;
 8009870:	bf00      	nop
 8009872:	e008      	b.n	8009886 <USBH_HandleControl+0x2de>
      break;
 8009874:	bf00      	nop
 8009876:	e006      	b.n	8009886 <USBH_HandleControl+0x2de>
      break;
 8009878:	bf00      	nop
 800987a:	e004      	b.n	8009886 <USBH_HandleControl+0x2de>
      break;
 800987c:	bf00      	nop
 800987e:	e002      	b.n	8009886 <USBH_HandleControl+0x2de>
      break;
 8009880:	bf00      	nop
 8009882:	e000      	b.n	8009886 <USBH_HandleControl+0x2de>
      break;
 8009884:	bf00      	nop
  }

  return status;
 8009886:	7bfb      	ldrb	r3, [r7, #15]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af04      	add	r7, sp, #16
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	4613      	mov	r3, r2
 800989c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800989e:	79f9      	ldrb	r1, [r7, #7]
 80098a0:	2300      	movs	r3, #0
 80098a2:	9303      	str	r3, [sp, #12]
 80098a4:	2308      	movs	r3, #8
 80098a6:	9302      	str	r3, [sp, #8]
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	9301      	str	r3, [sp, #4]
 80098ac:	2300      	movs	r3, #0
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	2300      	movs	r3, #0
 80098b2:	2200      	movs	r2, #0
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f000 fb46 	bl	8009f46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af04      	add	r7, sp, #16
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	4611      	mov	r1, r2
 80098d0:	461a      	mov	r2, r3
 80098d2:	460b      	mov	r3, r1
 80098d4:	80fb      	strh	r3, [r7, #6]
 80098d6:	4613      	mov	r3, r2
 80098d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80098e4:	2300      	movs	r3, #0
 80098e6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80098e8:	7979      	ldrb	r1, [r7, #5]
 80098ea:	7e3b      	ldrb	r3, [r7, #24]
 80098ec:	9303      	str	r3, [sp, #12]
 80098ee:	88fb      	ldrh	r3, [r7, #6]
 80098f0:	9302      	str	r3, [sp, #8]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	9301      	str	r3, [sp, #4]
 80098f6:	2301      	movs	r3, #1
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	2300      	movs	r3, #0
 80098fc:	2200      	movs	r2, #0
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 fb21 	bl	8009f46 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b088      	sub	sp, #32
 8009912:	af04      	add	r7, sp, #16
 8009914:	60f8      	str	r0, [r7, #12]
 8009916:	60b9      	str	r1, [r7, #8]
 8009918:	4611      	mov	r1, r2
 800991a:	461a      	mov	r2, r3
 800991c:	460b      	mov	r3, r1
 800991e:	80fb      	strh	r3, [r7, #6]
 8009920:	4613      	mov	r3, r2
 8009922:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009924:	7979      	ldrb	r1, [r7, #5]
 8009926:	2300      	movs	r3, #0
 8009928:	9303      	str	r3, [sp, #12]
 800992a:	88fb      	ldrh	r3, [r7, #6]
 800992c:	9302      	str	r3, [sp, #8]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	2301      	movs	r3, #1
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	2300      	movs	r3, #0
 8009938:	2201      	movs	r2, #1
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f000 fb03 	bl	8009f46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009940:	2300      	movs	r3, #0

}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b088      	sub	sp, #32
 800994e:	af04      	add	r7, sp, #16
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	60b9      	str	r1, [r7, #8]
 8009954:	4611      	mov	r1, r2
 8009956:	461a      	mov	r2, r3
 8009958:	460b      	mov	r3, r1
 800995a:	80fb      	strh	r3, [r7, #6]
 800995c:	4613      	mov	r3, r2
 800995e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800996a:	2300      	movs	r3, #0
 800996c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800996e:	7979      	ldrb	r1, [r7, #5]
 8009970:	7e3b      	ldrb	r3, [r7, #24]
 8009972:	9303      	str	r3, [sp, #12]
 8009974:	88fb      	ldrh	r3, [r7, #6]
 8009976:	9302      	str	r3, [sp, #8]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	9301      	str	r3, [sp, #4]
 800997c:	2301      	movs	r3, #1
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	2302      	movs	r3, #2
 8009982:	2200      	movs	r2, #0
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 fade 	bl	8009f46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b088      	sub	sp, #32
 8009998:	af04      	add	r7, sp, #16
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	4611      	mov	r1, r2
 80099a0:	461a      	mov	r2, r3
 80099a2:	460b      	mov	r3, r1
 80099a4:	80fb      	strh	r3, [r7, #6]
 80099a6:	4613      	mov	r3, r2
 80099a8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80099aa:	7979      	ldrb	r1, [r7, #5]
 80099ac:	2300      	movs	r3, #0
 80099ae:	9303      	str	r3, [sp, #12]
 80099b0:	88fb      	ldrh	r3, [r7, #6]
 80099b2:	9302      	str	r3, [sp, #8]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	9301      	str	r3, [sp, #4]
 80099b8:	2301      	movs	r3, #1
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	2302      	movs	r3, #2
 80099be:	2201      	movs	r2, #1
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 fac0 	bl	8009f46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af04      	add	r7, sp, #16
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	4608      	mov	r0, r1
 80099da:	4611      	mov	r1, r2
 80099dc:	461a      	mov	r2, r3
 80099de:	4603      	mov	r3, r0
 80099e0:	70fb      	strb	r3, [r7, #3]
 80099e2:	460b      	mov	r3, r1
 80099e4:	70bb      	strb	r3, [r7, #2]
 80099e6:	4613      	mov	r3, r2
 80099e8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80099ea:	7878      	ldrb	r0, [r7, #1]
 80099ec:	78ba      	ldrb	r2, [r7, #2]
 80099ee:	78f9      	ldrb	r1, [r7, #3]
 80099f0:	8b3b      	ldrh	r3, [r7, #24]
 80099f2:	9302      	str	r3, [sp, #8]
 80099f4:	7d3b      	ldrb	r3, [r7, #20]
 80099f6:	9301      	str	r3, [sp, #4]
 80099f8:	7c3b      	ldrb	r3, [r7, #16]
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	4603      	mov	r3, r0
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fa53 	bl	8009eaa <USBH_LL_OpenPipe>

  return USBH_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b082      	sub	sp, #8
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	460b      	mov	r3, r1
 8009a18:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009a1a:	78fb      	ldrb	r3, [r7, #3]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fa72 	bl	8009f08 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b084      	sub	sp, #16
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f836 	bl	8009aac <USBH_GetFreePipe>
 8009a40:	4603      	mov	r3, r0
 8009a42:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009a44:	89fb      	ldrh	r3, [r7, #14]
 8009a46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d00a      	beq.n	8009a64 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009a4e:	78fa      	ldrb	r2, [r7, #3]
 8009a50:	89fb      	ldrh	r3, [r7, #14]
 8009a52:	f003 030f 	and.w	r3, r3, #15
 8009a56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	33e0      	adds	r3, #224	@ 0xe0
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	440b      	add	r3, r1
 8009a62:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009a64:	89fb      	ldrh	r3, [r7, #14]
 8009a66:	b2db      	uxtb	r3, r3
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	2b0f      	cmp	r3, #15
 8009a80:	d80d      	bhi.n	8009a9e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009a82:	78fb      	ldrb	r3, [r7, #3]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	33e0      	adds	r3, #224	@ 0xe0
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009a94:	6879      	ldr	r1, [r7, #4]
 8009a96:	33e0      	adds	r3, #224	@ 0xe0
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	440b      	add	r3, r1
 8009a9c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009ab8:	2300      	movs	r3, #0
 8009aba:	73fb      	strb	r3, [r7, #15]
 8009abc:	e00f      	b.n	8009ade <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	33e0      	adds	r3, #224	@ 0xe0
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d102      	bne.n	8009ad8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	e007      	b.n	8009ae8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
 8009ada:	3301      	adds	r3, #1
 8009adc:	73fb      	strb	r3, [r7, #15]
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
 8009ae0:	2b0f      	cmp	r3, #15
 8009ae2:	d9ec      	bls.n	8009abe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009ae4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009af8:	2201      	movs	r2, #1
 8009afa:	490e      	ldr	r1, [pc, #56]	@ (8009b34 <MX_USB_HOST_Init+0x40>)
 8009afc:	480e      	ldr	r0, [pc, #56]	@ (8009b38 <MX_USB_HOST_Init+0x44>)
 8009afe:	f7fe fb15 	bl	800812c <USBH_Init>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009b08:	f7f7 f85c 	bl	8000bc4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009b0c:	490b      	ldr	r1, [pc, #44]	@ (8009b3c <MX_USB_HOST_Init+0x48>)
 8009b0e:	480a      	ldr	r0, [pc, #40]	@ (8009b38 <MX_USB_HOST_Init+0x44>)
 8009b10:	f7fe fbb9 	bl	8008286 <USBH_RegisterClass>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009b1a:	f7f7 f853 	bl	8000bc4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009b1e:	4806      	ldr	r0, [pc, #24]	@ (8009b38 <MX_USB_HOST_Init+0x44>)
 8009b20:	f7fe fc3d 	bl	800839e <USBH_Start>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009b2a:	f7f7 f84b 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009b2e:	bf00      	nop
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	08009b55 	.word	0x08009b55
 8009b38:	20000238 	.word	0x20000238
 8009b3c:	2000000c 	.word	0x2000000c

08009b40 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009b44:	4802      	ldr	r0, [pc, #8]	@ (8009b50 <MX_USB_HOST_Process+0x10>)
 8009b46:	f7fe fc3b 	bl	80083c0 <USBH_Process>
}
 8009b4a:	bf00      	nop
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20000238 	.word	0x20000238

08009b54 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	3b01      	subs	r3, #1
 8009b64:	2b04      	cmp	r3, #4
 8009b66:	d819      	bhi.n	8009b9c <USBH_UserProcess+0x48>
 8009b68:	a201      	add	r2, pc, #4	@ (adr r2, 8009b70 <USBH_UserProcess+0x1c>)
 8009b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6e:	bf00      	nop
 8009b70:	08009b9d 	.word	0x08009b9d
 8009b74:	08009b8d 	.word	0x08009b8d
 8009b78:	08009b9d 	.word	0x08009b9d
 8009b7c:	08009b95 	.word	0x08009b95
 8009b80:	08009b85 	.word	0x08009b85
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009b84:	4b09      	ldr	r3, [pc, #36]	@ (8009bac <USBH_UserProcess+0x58>)
 8009b86:	2203      	movs	r2, #3
 8009b88:	701a      	strb	r2, [r3, #0]
  break;
 8009b8a:	e008      	b.n	8009b9e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009b8c:	4b07      	ldr	r3, [pc, #28]	@ (8009bac <USBH_UserProcess+0x58>)
 8009b8e:	2202      	movs	r2, #2
 8009b90:	701a      	strb	r2, [r3, #0]
  break;
 8009b92:	e004      	b.n	8009b9e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009b94:	4b05      	ldr	r3, [pc, #20]	@ (8009bac <USBH_UserProcess+0x58>)
 8009b96:	2201      	movs	r2, #1
 8009b98:	701a      	strb	r2, [r3, #0]
  break;
 8009b9a:	e000      	b.n	8009b9e <USBH_UserProcess+0x4a>

  default:
  break;
 8009b9c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009b9e:	bf00      	nop
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	20000610 	.word	0x20000610

08009bb0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08a      	sub	sp, #40	@ 0x28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bb8:	f107 0314 	add.w	r3, r7, #20
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	601a      	str	r2, [r3, #0]
 8009bc0:	605a      	str	r2, [r3, #4]
 8009bc2:	609a      	str	r2, [r3, #8]
 8009bc4:	60da      	str	r2, [r3, #12]
 8009bc6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009bd0:	d147      	bne.n	8009c62 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	613b      	str	r3, [r7, #16]
 8009bd6:	4b25      	ldr	r3, [pc, #148]	@ (8009c6c <HAL_HCD_MspInit+0xbc>)
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bda:	4a24      	ldr	r2, [pc, #144]	@ (8009c6c <HAL_HCD_MspInit+0xbc>)
 8009bdc:	f043 0301 	orr.w	r3, r3, #1
 8009be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8009be2:	4b22      	ldr	r3, [pc, #136]	@ (8009c6c <HAL_HCD_MspInit+0xbc>)
 8009be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	613b      	str	r3, [r7, #16]
 8009bec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009bee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009bfc:	f107 0314 	add.w	r3, r7, #20
 8009c00:	4619      	mov	r1, r3
 8009c02:	481b      	ldr	r0, [pc, #108]	@ (8009c70 <HAL_HCD_MspInit+0xc0>)
 8009c04:	f7f7 fc70 	bl	80014e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009c08:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c12:	2300      	movs	r3, #0
 8009c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c16:	2300      	movs	r3, #0
 8009c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c1a:	230a      	movs	r3, #10
 8009c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c1e:	f107 0314 	add.w	r3, r7, #20
 8009c22:	4619      	mov	r1, r3
 8009c24:	4812      	ldr	r0, [pc, #72]	@ (8009c70 <HAL_HCD_MspInit+0xc0>)
 8009c26:	f7f7 fc5f 	bl	80014e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c2a:	4b10      	ldr	r3, [pc, #64]	@ (8009c6c <HAL_HCD_MspInit+0xbc>)
 8009c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8009c6c <HAL_HCD_MspInit+0xbc>)
 8009c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c34:	6353      	str	r3, [r2, #52]	@ 0x34
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c6c <HAL_HCD_MspInit+0xbc>)
 8009c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8009c6c <HAL_HCD_MspInit+0xbc>)
 8009c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c46:	4b09      	ldr	r3, [pc, #36]	@ (8009c6c <HAL_HCD_MspInit+0xbc>)
 8009c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c52:	2200      	movs	r2, #0
 8009c54:	2100      	movs	r1, #0
 8009c56:	2043      	movs	r0, #67	@ 0x43
 8009c58:	f7f7 fc0f 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c5c:	2043      	movs	r0, #67	@ 0x43
 8009c5e:	f7f7 fc28 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c62:	bf00      	nop
 8009c64:	3728      	adds	r7, #40	@ 0x28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	40023800 	.word	0x40023800
 8009c70:	40020000 	.word	0x40020000

08009c74 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fe ff73 	bl	8008b6e <USBH_LL_IncTimer>
}
 8009c88:	bf00      	nop
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fe ffab 	bl	8008bfa <USBH_LL_Connect>
}
 8009ca4:	bf00      	nop
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fe ffb4 	bl	8008c28 <USBH_LL_Disconnect>
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe ff65 	bl	8008bc2 <USBH_LL_PortEnabled>
}
 8009cf8:	bf00      	nop
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe ff65 	bl	8008bde <USBH_LL_PortDisabled>
}
 8009d14:	bf00      	nop
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d12a      	bne.n	8009d84 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009d2e:	4a18      	ldr	r2, [pc, #96]	@ (8009d90 <USBH_LL_Init+0x74>)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a15      	ldr	r2, [pc, #84]	@ (8009d90 <USBH_LL_Init+0x74>)
 8009d3a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d3e:	4b14      	ldr	r3, [pc, #80]	@ (8009d90 <USBH_LL_Init+0x74>)
 8009d40:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009d44:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009d46:	4b12      	ldr	r3, [pc, #72]	@ (8009d90 <USBH_LL_Init+0x74>)
 8009d48:	2208      	movs	r2, #8
 8009d4a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009d4c:	4b10      	ldr	r3, [pc, #64]	@ (8009d90 <USBH_LL_Init+0x74>)
 8009d4e:	2201      	movs	r2, #1
 8009d50:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d52:	4b0f      	ldr	r3, [pc, #60]	@ (8009d90 <USBH_LL_Init+0x74>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009d58:	4b0d      	ldr	r3, [pc, #52]	@ (8009d90 <USBH_LL_Init+0x74>)
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d90 <USBH_LL_Init+0x74>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009d64:	480a      	ldr	r0, [pc, #40]	@ (8009d90 <USBH_LL_Init+0x74>)
 8009d66:	f7f7 fd98 	bl	800189a <HAL_HCD_Init>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009d70:	f7f6 ff28 	bl	8000bc4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009d74:	4806      	ldr	r0, [pc, #24]	@ (8009d90 <USBH_LL_Init+0x74>)
 8009d76:	f7f8 f9f9 	bl	800216c <HAL_HCD_GetCurrentFrame>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7fe fee6 	bl	8008b50 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	20000614 	.word	0x20000614

08009d94 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7f8 f966 	bl	800207c <HAL_HCD_Start>
 8009db0:	4603      	mov	r3, r0
 8009db2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 f95e 	bl	800a078 <USBH_Get_USB_Status>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7f8 f96e 	bl	80020c2 <HAL_HCD_Stop>
 8009de6:	4603      	mov	r3, r0
 8009de8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 f943 	bl	800a078 <USBH_Get_USB_Status>
 8009df2:	4603      	mov	r3, r0
 8009df4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009df6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7f8 f9b8 	bl	8002188 <HAL_HCD_GetCurrentSpeed>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d00c      	beq.n	8009e38 <USBH_LL_GetSpeed+0x38>
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d80d      	bhi.n	8009e3e <USBH_LL_GetSpeed+0x3e>
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <USBH_LL_GetSpeed+0x2c>
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d003      	beq.n	8009e32 <USBH_LL_GetSpeed+0x32>
 8009e2a:	e008      	b.n	8009e3e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e30:	e008      	b.n	8009e44 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009e32:	2301      	movs	r3, #1
 8009e34:	73fb      	strb	r3, [r7, #15]
    break;
 8009e36:	e005      	b.n	8009e44 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009e38:	2302      	movs	r3, #2
 8009e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e3c:	e002      	b.n	8009e44 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	73fb      	strb	r3, [r7, #15]
    break;
 8009e42:	bf00      	nop
  }
  return  speed;
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7f8 f949 	bl	80020fc <HAL_HCD_ResetPort>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f000 f901 	bl	800a078 <USBH_Get_USB_Status>
 8009e76:	4603      	mov	r3, r0
 8009e78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e96:	78fa      	ldrb	r2, [r7, #3]
 8009e98:	4611      	mov	r1, r2
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7f8 f951 	bl	8002142 <HAL_HCD_HC_GetXferCount>
 8009ea0:	4603      	mov	r3, r0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009eaa:	b590      	push	{r4, r7, lr}
 8009eac:	b089      	sub	sp, #36	@ 0x24
 8009eae:	af04      	add	r7, sp, #16
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	4608      	mov	r0, r1
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	4603      	mov	r3, r0
 8009eba:	70fb      	strb	r3, [r7, #3]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	70bb      	strb	r3, [r7, #2]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009ed2:	787c      	ldrb	r4, [r7, #1]
 8009ed4:	78ba      	ldrb	r2, [r7, #2]
 8009ed6:	78f9      	ldrb	r1, [r7, #3]
 8009ed8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009eda:	9302      	str	r3, [sp, #8]
 8009edc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009ee0:	9301      	str	r3, [sp, #4]
 8009ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	4623      	mov	r3, r4
 8009eea:	f7f7 fd3d 	bl	8001968 <HAL_HCD_HC_Init>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f000 f8bf 	bl	800a078 <USBH_Get_USB_Status>
 8009efa:	4603      	mov	r3, r0
 8009efc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd90      	pop	{r4, r7, pc}

08009f08 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009f22:	78fa      	ldrb	r2, [r7, #3]
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7f7 fdd6 	bl	8001ad8 <HAL_HCD_HC_Halt>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 f8a0 	bl	800a078 <USBH_Get_USB_Status>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009f46:	b590      	push	{r4, r7, lr}
 8009f48:	b089      	sub	sp, #36	@ 0x24
 8009f4a:	af04      	add	r7, sp, #16
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	4608      	mov	r0, r1
 8009f50:	4611      	mov	r1, r2
 8009f52:	461a      	mov	r2, r3
 8009f54:	4603      	mov	r3, r0
 8009f56:	70fb      	strb	r3, [r7, #3]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70bb      	strb	r3, [r7, #2]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009f6e:	787c      	ldrb	r4, [r7, #1]
 8009f70:	78ba      	ldrb	r2, [r7, #2]
 8009f72:	78f9      	ldrb	r1, [r7, #3]
 8009f74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009f78:	9303      	str	r3, [sp, #12]
 8009f7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009f7c:	9302      	str	r3, [sp, #8]
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f80:	9301      	str	r3, [sp, #4]
 8009f82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	4623      	mov	r3, r4
 8009f8a:	f7f7 fdc9 	bl	8001b20 <HAL_HCD_HC_SubmitRequest>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 f86f 	bl	800a078 <USBH_Get_USB_Status>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd90      	pop	{r4, r7, pc}

08009fa8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009fba:	78fa      	ldrb	r2, [r7, #3]
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7f8 f8aa 	bl	8002118 <HAL_HCD_HC_GetURBState>
 8009fc4:	4603      	mov	r3, r0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d103      	bne.n	8009fec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 f872 	bl	800a0d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009fec:	20c8      	movs	r0, #200	@ 0xc8
 8009fee:	f7f7 f945 	bl	800127c <HAL_Delay>
  return USBH_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
 800a008:	4613      	mov	r3, r2
 800a00a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a012:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a014:	78fa      	ldrb	r2, [r7, #3]
 800a016:	68f9      	ldr	r1, [r7, #12]
 800a018:	4613      	mov	r3, r2
 800a01a:	011b      	lsls	r3, r3, #4
 800a01c:	1a9b      	subs	r3, r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	440b      	add	r3, r1
 800a022:	3317      	adds	r3, #23
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00a      	beq.n	800a040 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a02a:	78fa      	ldrb	r2, [r7, #3]
 800a02c:	68f9      	ldr	r1, [r7, #12]
 800a02e:	4613      	mov	r3, r2
 800a030:	011b      	lsls	r3, r3, #4
 800a032:	1a9b      	subs	r3, r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	440b      	add	r3, r1
 800a038:	333c      	adds	r3, #60	@ 0x3c
 800a03a:	78ba      	ldrb	r2, [r7, #2]
 800a03c:	701a      	strb	r2, [r3, #0]
 800a03e:	e009      	b.n	800a054 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a040:	78fa      	ldrb	r2, [r7, #3]
 800a042:	68f9      	ldr	r1, [r7, #12]
 800a044:	4613      	mov	r3, r2
 800a046:	011b      	lsls	r3, r3, #4
 800a048:	1a9b      	subs	r3, r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	440b      	add	r3, r1
 800a04e:	333d      	adds	r3, #61	@ 0x3d
 800a050:	78ba      	ldrb	r2, [r7, #2]
 800a052:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7f7 f906 	bl	800127c <HAL_Delay>
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	2b03      	cmp	r3, #3
 800a08a:	d817      	bhi.n	800a0bc <USBH_Get_USB_Status+0x44>
 800a08c:	a201      	add	r2, pc, #4	@ (adr r2, 800a094 <USBH_Get_USB_Status+0x1c>)
 800a08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a092:	bf00      	nop
 800a094:	0800a0a5 	.word	0x0800a0a5
 800a098:	0800a0ab 	.word	0x0800a0ab
 800a09c:	0800a0b1 	.word	0x0800a0b1
 800a0a0:	0800a0b7 	.word	0x0800a0b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0a8:	e00b      	b.n	800a0c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ae:	e008      	b.n	800a0c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0b4:	e005      	b.n	800a0c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ba:	e002      	b.n	800a0c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a0bc:	2302      	movs	r3, #2
 800a0be:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c0:	bf00      	nop
  }
  return usb_status;
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a0da:	79fb      	ldrb	r3, [r7, #7]
 800a0dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a0de:	79fb      	ldrb	r3, [r7, #7]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d102      	bne.n	800a0ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	73fb      	strb	r3, [r7, #15]
 800a0e8:	e001      	b.n	800a0ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	4803      	ldr	r0, [pc, #12]	@ (800a104 <MX_DriverVbusFS+0x34>)
 800a0f6:	f7f7 fb93 	bl	8001820 <HAL_GPIO_WritePin>
}
 800a0fa:	bf00      	nop
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	40020800 	.word	0x40020800

0800a108 <malloc>:
 800a108:	4b02      	ldr	r3, [pc, #8]	@ (800a114 <malloc+0xc>)
 800a10a:	4601      	mov	r1, r0
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	f000 b82d 	b.w	800a16c <_malloc_r>
 800a112:	bf00      	nop
 800a114:	2000002c 	.word	0x2000002c

0800a118 <free>:
 800a118:	4b02      	ldr	r3, [pc, #8]	@ (800a124 <free+0xc>)
 800a11a:	4601      	mov	r1, r0
 800a11c:	6818      	ldr	r0, [r3, #0]
 800a11e:	f000 b8f5 	b.w	800a30c <_free_r>
 800a122:	bf00      	nop
 800a124:	2000002c 	.word	0x2000002c

0800a128 <sbrk_aligned>:
 800a128:	b570      	push	{r4, r5, r6, lr}
 800a12a:	4e0f      	ldr	r6, [pc, #60]	@ (800a168 <sbrk_aligned+0x40>)
 800a12c:	460c      	mov	r4, r1
 800a12e:	6831      	ldr	r1, [r6, #0]
 800a130:	4605      	mov	r5, r0
 800a132:	b911      	cbnz	r1, 800a13a <sbrk_aligned+0x12>
 800a134:	f000 f8ae 	bl	800a294 <_sbrk_r>
 800a138:	6030      	str	r0, [r6, #0]
 800a13a:	4621      	mov	r1, r4
 800a13c:	4628      	mov	r0, r5
 800a13e:	f000 f8a9 	bl	800a294 <_sbrk_r>
 800a142:	1c43      	adds	r3, r0, #1
 800a144:	d103      	bne.n	800a14e <sbrk_aligned+0x26>
 800a146:	f04f 34ff 	mov.w	r4, #4294967295
 800a14a:	4620      	mov	r0, r4
 800a14c:	bd70      	pop	{r4, r5, r6, pc}
 800a14e:	1cc4      	adds	r4, r0, #3
 800a150:	f024 0403 	bic.w	r4, r4, #3
 800a154:	42a0      	cmp	r0, r4
 800a156:	d0f8      	beq.n	800a14a <sbrk_aligned+0x22>
 800a158:	1a21      	subs	r1, r4, r0
 800a15a:	4628      	mov	r0, r5
 800a15c:	f000 f89a 	bl	800a294 <_sbrk_r>
 800a160:	3001      	adds	r0, #1
 800a162:	d1f2      	bne.n	800a14a <sbrk_aligned+0x22>
 800a164:	e7ef      	b.n	800a146 <sbrk_aligned+0x1e>
 800a166:	bf00      	nop
 800a168:	200009f4 	.word	0x200009f4

0800a16c <_malloc_r>:
 800a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a170:	1ccd      	adds	r5, r1, #3
 800a172:	f025 0503 	bic.w	r5, r5, #3
 800a176:	3508      	adds	r5, #8
 800a178:	2d0c      	cmp	r5, #12
 800a17a:	bf38      	it	cc
 800a17c:	250c      	movcc	r5, #12
 800a17e:	2d00      	cmp	r5, #0
 800a180:	4606      	mov	r6, r0
 800a182:	db01      	blt.n	800a188 <_malloc_r+0x1c>
 800a184:	42a9      	cmp	r1, r5
 800a186:	d904      	bls.n	800a192 <_malloc_r+0x26>
 800a188:	230c      	movs	r3, #12
 800a18a:	6033      	str	r3, [r6, #0]
 800a18c:	2000      	movs	r0, #0
 800a18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a268 <_malloc_r+0xfc>
 800a196:	f000 f869 	bl	800a26c <__malloc_lock>
 800a19a:	f8d8 3000 	ldr.w	r3, [r8]
 800a19e:	461c      	mov	r4, r3
 800a1a0:	bb44      	cbnz	r4, 800a1f4 <_malloc_r+0x88>
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7ff ffbf 	bl	800a128 <sbrk_aligned>
 800a1aa:	1c43      	adds	r3, r0, #1
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	d158      	bne.n	800a262 <_malloc_r+0xf6>
 800a1b0:	f8d8 4000 	ldr.w	r4, [r8]
 800a1b4:	4627      	mov	r7, r4
 800a1b6:	2f00      	cmp	r7, #0
 800a1b8:	d143      	bne.n	800a242 <_malloc_r+0xd6>
 800a1ba:	2c00      	cmp	r4, #0
 800a1bc:	d04b      	beq.n	800a256 <_malloc_r+0xea>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	eb04 0903 	add.w	r9, r4, r3
 800a1c8:	f000 f864 	bl	800a294 <_sbrk_r>
 800a1cc:	4581      	cmp	r9, r0
 800a1ce:	d142      	bne.n	800a256 <_malloc_r+0xea>
 800a1d0:	6821      	ldr	r1, [r4, #0]
 800a1d2:	1a6d      	subs	r5, r5, r1
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f7ff ffa6 	bl	800a128 <sbrk_aligned>
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d03a      	beq.n	800a256 <_malloc_r+0xea>
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	442b      	add	r3, r5
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	bb62      	cbnz	r2, 800a248 <_malloc_r+0xdc>
 800a1ee:	f8c8 7000 	str.w	r7, [r8]
 800a1f2:	e00f      	b.n	800a214 <_malloc_r+0xa8>
 800a1f4:	6822      	ldr	r2, [r4, #0]
 800a1f6:	1b52      	subs	r2, r2, r5
 800a1f8:	d420      	bmi.n	800a23c <_malloc_r+0xd0>
 800a1fa:	2a0b      	cmp	r2, #11
 800a1fc:	d917      	bls.n	800a22e <_malloc_r+0xc2>
 800a1fe:	1961      	adds	r1, r4, r5
 800a200:	42a3      	cmp	r3, r4
 800a202:	6025      	str	r5, [r4, #0]
 800a204:	bf18      	it	ne
 800a206:	6059      	strne	r1, [r3, #4]
 800a208:	6863      	ldr	r3, [r4, #4]
 800a20a:	bf08      	it	eq
 800a20c:	f8c8 1000 	streq.w	r1, [r8]
 800a210:	5162      	str	r2, [r4, r5]
 800a212:	604b      	str	r3, [r1, #4]
 800a214:	4630      	mov	r0, r6
 800a216:	f000 f82f 	bl	800a278 <__malloc_unlock>
 800a21a:	f104 000b 	add.w	r0, r4, #11
 800a21e:	1d23      	adds	r3, r4, #4
 800a220:	f020 0007 	bic.w	r0, r0, #7
 800a224:	1ac2      	subs	r2, r0, r3
 800a226:	bf1c      	itt	ne
 800a228:	1a1b      	subne	r3, r3, r0
 800a22a:	50a3      	strne	r3, [r4, r2]
 800a22c:	e7af      	b.n	800a18e <_malloc_r+0x22>
 800a22e:	6862      	ldr	r2, [r4, #4]
 800a230:	42a3      	cmp	r3, r4
 800a232:	bf0c      	ite	eq
 800a234:	f8c8 2000 	streq.w	r2, [r8]
 800a238:	605a      	strne	r2, [r3, #4]
 800a23a:	e7eb      	b.n	800a214 <_malloc_r+0xa8>
 800a23c:	4623      	mov	r3, r4
 800a23e:	6864      	ldr	r4, [r4, #4]
 800a240:	e7ae      	b.n	800a1a0 <_malloc_r+0x34>
 800a242:	463c      	mov	r4, r7
 800a244:	687f      	ldr	r7, [r7, #4]
 800a246:	e7b6      	b.n	800a1b6 <_malloc_r+0x4a>
 800a248:	461a      	mov	r2, r3
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	42a3      	cmp	r3, r4
 800a24e:	d1fb      	bne.n	800a248 <_malloc_r+0xdc>
 800a250:	2300      	movs	r3, #0
 800a252:	6053      	str	r3, [r2, #4]
 800a254:	e7de      	b.n	800a214 <_malloc_r+0xa8>
 800a256:	230c      	movs	r3, #12
 800a258:	6033      	str	r3, [r6, #0]
 800a25a:	4630      	mov	r0, r6
 800a25c:	f000 f80c 	bl	800a278 <__malloc_unlock>
 800a260:	e794      	b.n	800a18c <_malloc_r+0x20>
 800a262:	6005      	str	r5, [r0, #0]
 800a264:	e7d6      	b.n	800a214 <_malloc_r+0xa8>
 800a266:	bf00      	nop
 800a268:	200009f8 	.word	0x200009f8

0800a26c <__malloc_lock>:
 800a26c:	4801      	ldr	r0, [pc, #4]	@ (800a274 <__malloc_lock+0x8>)
 800a26e:	f000 b84b 	b.w	800a308 <__retarget_lock_acquire_recursive>
 800a272:	bf00      	nop
 800a274:	20000b38 	.word	0x20000b38

0800a278 <__malloc_unlock>:
 800a278:	4801      	ldr	r0, [pc, #4]	@ (800a280 <__malloc_unlock+0x8>)
 800a27a:	f000 b846 	b.w	800a30a <__retarget_lock_release_recursive>
 800a27e:	bf00      	nop
 800a280:	20000b38 	.word	0x20000b38

0800a284 <memset>:
 800a284:	4402      	add	r2, r0
 800a286:	4603      	mov	r3, r0
 800a288:	4293      	cmp	r3, r2
 800a28a:	d100      	bne.n	800a28e <memset+0xa>
 800a28c:	4770      	bx	lr
 800a28e:	f803 1b01 	strb.w	r1, [r3], #1
 800a292:	e7f9      	b.n	800a288 <memset+0x4>

0800a294 <_sbrk_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d06      	ldr	r5, [pc, #24]	@ (800a2b0 <_sbrk_r+0x1c>)
 800a298:	2300      	movs	r3, #0
 800a29a:	4604      	mov	r4, r0
 800a29c:	4608      	mov	r0, r1
 800a29e:	602b      	str	r3, [r5, #0]
 800a2a0:	f7f6 ff08 	bl	80010b4 <_sbrk>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d102      	bne.n	800a2ae <_sbrk_r+0x1a>
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	b103      	cbz	r3, 800a2ae <_sbrk_r+0x1a>
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	20000b34 	.word	0x20000b34

0800a2b4 <__errno>:
 800a2b4:	4b01      	ldr	r3, [pc, #4]	@ (800a2bc <__errno+0x8>)
 800a2b6:	6818      	ldr	r0, [r3, #0]
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	2000002c 	.word	0x2000002c

0800a2c0 <__libc_init_array>:
 800a2c0:	b570      	push	{r4, r5, r6, lr}
 800a2c2:	4d0d      	ldr	r5, [pc, #52]	@ (800a2f8 <__libc_init_array+0x38>)
 800a2c4:	4c0d      	ldr	r4, [pc, #52]	@ (800a2fc <__libc_init_array+0x3c>)
 800a2c6:	1b64      	subs	r4, r4, r5
 800a2c8:	10a4      	asrs	r4, r4, #2
 800a2ca:	2600      	movs	r6, #0
 800a2cc:	42a6      	cmp	r6, r4
 800a2ce:	d109      	bne.n	800a2e4 <__libc_init_array+0x24>
 800a2d0:	4d0b      	ldr	r5, [pc, #44]	@ (800a300 <__libc_init_array+0x40>)
 800a2d2:	4c0c      	ldr	r4, [pc, #48]	@ (800a304 <__libc_init_array+0x44>)
 800a2d4:	f000 f864 	bl	800a3a0 <_init>
 800a2d8:	1b64      	subs	r4, r4, r5
 800a2da:	10a4      	asrs	r4, r4, #2
 800a2dc:	2600      	movs	r6, #0
 800a2de:	42a6      	cmp	r6, r4
 800a2e0:	d105      	bne.n	800a2ee <__libc_init_array+0x2e>
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}
 800a2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2e8:	4798      	blx	r3
 800a2ea:	3601      	adds	r6, #1
 800a2ec:	e7ee      	b.n	800a2cc <__libc_init_array+0xc>
 800a2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2f2:	4798      	blx	r3
 800a2f4:	3601      	adds	r6, #1
 800a2f6:	e7f2      	b.n	800a2de <__libc_init_array+0x1e>
 800a2f8:	0800a3dc 	.word	0x0800a3dc
 800a2fc:	0800a3dc 	.word	0x0800a3dc
 800a300:	0800a3dc 	.word	0x0800a3dc
 800a304:	0800a3e0 	.word	0x0800a3e0

0800a308 <__retarget_lock_acquire_recursive>:
 800a308:	4770      	bx	lr

0800a30a <__retarget_lock_release_recursive>:
 800a30a:	4770      	bx	lr

0800a30c <_free_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4605      	mov	r5, r0
 800a310:	2900      	cmp	r1, #0
 800a312:	d041      	beq.n	800a398 <_free_r+0x8c>
 800a314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a318:	1f0c      	subs	r4, r1, #4
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	bfb8      	it	lt
 800a31e:	18e4      	addlt	r4, r4, r3
 800a320:	f7ff ffa4 	bl	800a26c <__malloc_lock>
 800a324:	4a1d      	ldr	r2, [pc, #116]	@ (800a39c <_free_r+0x90>)
 800a326:	6813      	ldr	r3, [r2, #0]
 800a328:	b933      	cbnz	r3, 800a338 <_free_r+0x2c>
 800a32a:	6063      	str	r3, [r4, #4]
 800a32c:	6014      	str	r4, [r2, #0]
 800a32e:	4628      	mov	r0, r5
 800a330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a334:	f7ff bfa0 	b.w	800a278 <__malloc_unlock>
 800a338:	42a3      	cmp	r3, r4
 800a33a:	d908      	bls.n	800a34e <_free_r+0x42>
 800a33c:	6820      	ldr	r0, [r4, #0]
 800a33e:	1821      	adds	r1, r4, r0
 800a340:	428b      	cmp	r3, r1
 800a342:	bf01      	itttt	eq
 800a344:	6819      	ldreq	r1, [r3, #0]
 800a346:	685b      	ldreq	r3, [r3, #4]
 800a348:	1809      	addeq	r1, r1, r0
 800a34a:	6021      	streq	r1, [r4, #0]
 800a34c:	e7ed      	b.n	800a32a <_free_r+0x1e>
 800a34e:	461a      	mov	r2, r3
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	b10b      	cbz	r3, 800a358 <_free_r+0x4c>
 800a354:	42a3      	cmp	r3, r4
 800a356:	d9fa      	bls.n	800a34e <_free_r+0x42>
 800a358:	6811      	ldr	r1, [r2, #0]
 800a35a:	1850      	adds	r0, r2, r1
 800a35c:	42a0      	cmp	r0, r4
 800a35e:	d10b      	bne.n	800a378 <_free_r+0x6c>
 800a360:	6820      	ldr	r0, [r4, #0]
 800a362:	4401      	add	r1, r0
 800a364:	1850      	adds	r0, r2, r1
 800a366:	4283      	cmp	r3, r0
 800a368:	6011      	str	r1, [r2, #0]
 800a36a:	d1e0      	bne.n	800a32e <_free_r+0x22>
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	6053      	str	r3, [r2, #4]
 800a372:	4408      	add	r0, r1
 800a374:	6010      	str	r0, [r2, #0]
 800a376:	e7da      	b.n	800a32e <_free_r+0x22>
 800a378:	d902      	bls.n	800a380 <_free_r+0x74>
 800a37a:	230c      	movs	r3, #12
 800a37c:	602b      	str	r3, [r5, #0]
 800a37e:	e7d6      	b.n	800a32e <_free_r+0x22>
 800a380:	6820      	ldr	r0, [r4, #0]
 800a382:	1821      	adds	r1, r4, r0
 800a384:	428b      	cmp	r3, r1
 800a386:	bf04      	itt	eq
 800a388:	6819      	ldreq	r1, [r3, #0]
 800a38a:	685b      	ldreq	r3, [r3, #4]
 800a38c:	6063      	str	r3, [r4, #4]
 800a38e:	bf04      	itt	eq
 800a390:	1809      	addeq	r1, r1, r0
 800a392:	6021      	streq	r1, [r4, #0]
 800a394:	6054      	str	r4, [r2, #4]
 800a396:	e7ca      	b.n	800a32e <_free_r+0x22>
 800a398:	bd38      	pop	{r3, r4, r5, pc}
 800a39a:	bf00      	nop
 800a39c:	200009f8 	.word	0x200009f8

0800a3a0 <_init>:
 800a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a2:	bf00      	nop
 800a3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3a6:	bc08      	pop	{r3}
 800a3a8:	469e      	mov	lr, r3
 800a3aa:	4770      	bx	lr

0800a3ac <_fini>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	bf00      	nop
 800a3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b2:	bc08      	pop	{r3}
 800a3b4:	469e      	mov	lr, r3
 800a3b6:	4770      	bx	lr
