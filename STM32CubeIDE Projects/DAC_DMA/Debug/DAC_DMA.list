
DAC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b010  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800b198  0800b198  0000c198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b398  0800b398  0000d07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b398  0800b398  0000c398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3a0  0800b3a0  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3a0  0800b3a0  0000c3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3a4  0800b3a4  0000c3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800b3a8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d07c  2**0
                  CONTENTS
 10 .bss          00000c68  2000007c  2000007c  0000d07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ce4  20000ce4  0000d07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000192fd  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e33  00000000  00000000  000263a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0002a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001189  00000000  00000000  0002b898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c4b  00000000  00000000  0002ca21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cecc  00000000  00000000  0005166c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d46f7  00000000  00000000  0006e538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00142c2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067dc  00000000  00000000  00142c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00149450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b180 	.word	0x0800b180

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800b180 	.word	0x0800b180

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b988 	b.w	8000e2c <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	468e      	mov	lr, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	4688      	mov	r8, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14a      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d962      	bls.n	8000c10 <__udivmoddi4+0xdc>
 8000b4a:	fab2 f682 	clz	r6, r2
 8000b4e:	b14e      	cbz	r6, 8000b64 <__udivmoddi4+0x30>
 8000b50:	f1c6 0320 	rsb	r3, r6, #32
 8000b54:	fa01 f806 	lsl.w	r8, r1, r6
 8000b58:	fa20 f303 	lsr.w	r3, r0, r3
 8000b5c:	40b7      	lsls	r7, r6
 8000b5e:	ea43 0808 	orr.w	r8, r3, r8
 8000b62:	40b4      	lsls	r4, r6
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	fa1f fc87 	uxth.w	ip, r7
 8000b6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b70:	0c23      	lsrs	r3, r4, #16
 8000b72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d909      	bls.n	8000b96 <__udivmoddi4+0x62>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b88:	f080 80ea 	bcs.w	8000d60 <__udivmoddi4+0x22c>
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f240 80e7 	bls.w	8000d60 <__udivmoddi4+0x22c>
 8000b92:	3902      	subs	r1, #2
 8000b94:	443b      	add	r3, r7
 8000b96:	1a9a      	subs	r2, r3, r2
 8000b98:	b2a3      	uxth	r3, r4
 8000b9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000baa:	459c      	cmp	ip, r3
 8000bac:	d909      	bls.n	8000bc2 <__udivmoddi4+0x8e>
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb4:	f080 80d6 	bcs.w	8000d64 <__udivmoddi4+0x230>
 8000bb8:	459c      	cmp	ip, r3
 8000bba:	f240 80d3 	bls.w	8000d64 <__udivmoddi4+0x230>
 8000bbe:	443b      	add	r3, r7
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc6:	eba3 030c 	sub.w	r3, r3, ip
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11d      	cbz	r5, 8000bd6 <__udivmoddi4+0xa2>
 8000bce:	40f3      	lsrs	r3, r6
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d905      	bls.n	8000bea <__udivmoddi4+0xb6>
 8000bde:	b10d      	cbz	r5, 8000be4 <__udivmoddi4+0xb0>
 8000be0:	e9c5 0100 	strd	r0, r1, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4608      	mov	r0, r1
 8000be8:	e7f5      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000bea:	fab3 f183 	clz	r1, r3
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d146      	bne.n	8000c80 <__udivmoddi4+0x14c>
 8000bf2:	4573      	cmp	r3, lr
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xc8>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 8105 	bhi.w	8000e06 <__udivmoddi4+0x2d2>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4690      	mov	r8, r2
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d0e5      	beq.n	8000bd6 <__udivmoddi4+0xa2>
 8000c0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c0e:	e7e2      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	f000 8090 	beq.w	8000d36 <__udivmoddi4+0x202>
 8000c16:	fab2 f682 	clz	r6, r2
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f040 80a4 	bne.w	8000d68 <__udivmoddi4+0x234>
 8000c20:	1a8a      	subs	r2, r1, r2
 8000c22:	0c03      	lsrs	r3, r0, #16
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	b2bc      	uxth	r4, r7
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x11e>
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x11c>
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	f200 80e0 	bhi.w	8000e10 <__udivmoddi4+0x2dc>
 8000c50:	46c4      	mov	ip, r8
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c60:	fb02 f404 	mul.w	r4, r2, r4
 8000c64:	429c      	cmp	r4, r3
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x144>
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x142>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f200 80ca 	bhi.w	8000e0a <__udivmoddi4+0x2d6>
 8000c76:	4602      	mov	r2, r0
 8000c78:	1b1b      	subs	r3, r3, r4
 8000c7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0x98>
 8000c80:	f1c1 0620 	rsb	r6, r1, #32
 8000c84:	408b      	lsls	r3, r1
 8000c86:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8a:	431f      	orrs	r7, r3
 8000c8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c90:	fa20 f306 	lsr.w	r3, r0, r6
 8000c94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c9c:	4323      	orrs	r3, r4
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	fa1f fc87 	uxth.w	ip, r7
 8000ca6:	fbbe f0f9 	udiv	r0, lr, r9
 8000caa:	0c1c      	lsrs	r4, r3, #16
 8000cac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x1a0>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cc6:	f080 809c 	bcs.w	8000e02 <__udivmoddi4+0x2ce>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f240 8099 	bls.w	8000e02 <__udivmoddi4+0x2ce>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	eba4 040e 	sub.w	r4, r4, lr
 8000cd8:	fa1f fe83 	uxth.w	lr, r3
 8000cdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x1ce>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cf6:	f080 8082 	bcs.w	8000dfe <__udivmoddi4+0x2ca>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d97f      	bls.n	8000dfe <__udivmoddi4+0x2ca>
 8000cfe:	3b02      	subs	r3, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d0e:	4564      	cmp	r4, ip
 8000d10:	4673      	mov	r3, lr
 8000d12:	46e1      	mov	r9, ip
 8000d14:	d362      	bcc.n	8000ddc <__udivmoddi4+0x2a8>
 8000d16:	d05f      	beq.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d18:	b15d      	cbz	r5, 8000d32 <__udivmoddi4+0x1fe>
 8000d1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d22:	fa04 f606 	lsl.w	r6, r4, r6
 8000d26:	fa22 f301 	lsr.w	r3, r2, r1
 8000d2a:	431e      	orrs	r6, r3
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d32:	2100      	movs	r1, #0
 8000d34:	e74f      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000d36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d3a:	0c01      	lsrs	r1, r0, #16
 8000d3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d40:	b280      	uxth	r0, r0
 8000d42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d46:	463b      	mov	r3, r7
 8000d48:	4638      	mov	r0, r7
 8000d4a:	463c      	mov	r4, r7
 8000d4c:	46b8      	mov	r8, r7
 8000d4e:	46be      	mov	lr, r7
 8000d50:	2620      	movs	r6, #32
 8000d52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d56:	eba2 0208 	sub.w	r2, r2, r8
 8000d5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d5e:	e766      	b.n	8000c2e <__udivmoddi4+0xfa>
 8000d60:	4601      	mov	r1, r0
 8000d62:	e718      	b.n	8000b96 <__udivmoddi4+0x62>
 8000d64:	4610      	mov	r0, r2
 8000d66:	e72c      	b.n	8000bc2 <__udivmoddi4+0x8e>
 8000d68:	f1c6 0220 	rsb	r2, r6, #32
 8000d6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d70:	40b7      	lsls	r7, r6
 8000d72:	40b1      	lsls	r1, r6
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d82:	b2bc      	uxth	r4, r7
 8000d84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d88:	0c11      	lsrs	r1, r2, #16
 8000d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8e:	fb08 f904 	mul.w	r9, r8, r4
 8000d92:	40b0      	lsls	r0, r6
 8000d94:	4589      	cmp	r9, r1
 8000d96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d9a:	b280      	uxth	r0, r0
 8000d9c:	d93e      	bls.n	8000e1c <__udivmoddi4+0x2e8>
 8000d9e:	1879      	adds	r1, r7, r1
 8000da0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000da4:	d201      	bcs.n	8000daa <__udivmoddi4+0x276>
 8000da6:	4589      	cmp	r9, r1
 8000da8:	d81f      	bhi.n	8000dea <__udivmoddi4+0x2b6>
 8000daa:	eba1 0109 	sub.w	r1, r1, r9
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fb09 f804 	mul.w	r8, r9, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	b292      	uxth	r2, r2
 8000dbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc0:	4542      	cmp	r2, r8
 8000dc2:	d229      	bcs.n	8000e18 <__udivmoddi4+0x2e4>
 8000dc4:	18ba      	adds	r2, r7, r2
 8000dc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dca:	d2c4      	bcs.n	8000d56 <__udivmoddi4+0x222>
 8000dcc:	4542      	cmp	r2, r8
 8000dce:	d2c2      	bcs.n	8000d56 <__udivmoddi4+0x222>
 8000dd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000dd4:	443a      	add	r2, r7
 8000dd6:	e7be      	b.n	8000d56 <__udivmoddi4+0x222>
 8000dd8:	45f0      	cmp	r8, lr
 8000dda:	d29d      	bcs.n	8000d18 <__udivmoddi4+0x1e4>
 8000ddc:	ebbe 0302 	subs.w	r3, lr, r2
 8000de0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000de4:	3801      	subs	r0, #1
 8000de6:	46e1      	mov	r9, ip
 8000de8:	e796      	b.n	8000d18 <__udivmoddi4+0x1e4>
 8000dea:	eba7 0909 	sub.w	r9, r7, r9
 8000dee:	4449      	add	r1, r9
 8000df0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000df4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df8:	fb09 f804 	mul.w	r8, r9, r4
 8000dfc:	e7db      	b.n	8000db6 <__udivmoddi4+0x282>
 8000dfe:	4673      	mov	r3, lr
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1ce>
 8000e02:	4650      	mov	r0, sl
 8000e04:	e766      	b.n	8000cd4 <__udivmoddi4+0x1a0>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e6fd      	b.n	8000c06 <__udivmoddi4+0xd2>
 8000e0a:	443b      	add	r3, r7
 8000e0c:	3a02      	subs	r2, #2
 8000e0e:	e733      	b.n	8000c78 <__udivmoddi4+0x144>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	443b      	add	r3, r7
 8000e16:	e71c      	b.n	8000c52 <__udivmoddi4+0x11e>
 8000e18:	4649      	mov	r1, r9
 8000e1a:	e79c      	b.n	8000d56 <__udivmoddi4+0x222>
 8000e1c:	eba1 0109 	sub.w	r1, r1, r9
 8000e20:	46c4      	mov	ip, r8
 8000e22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e26:	fb09 f804 	mul.w	r8, r9, r4
 8000e2a:	e7c4      	b.n	8000db6 <__udivmoddi4+0x282>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <get_SineVal>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_SineVal() {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_POINTS; i++) {
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e03a      	b.n	8000eb2 <get_SineVal+0x82>
		gSine_Values[i] = ((sin(i*2*PI/NUM_POINTS) + 1) *(4096/3.3));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fb13 	bl	800046c <__aeabi_i2d>
 8000e46:	a325      	add	r3, pc, #148	@ (adr r3, 8000edc <get_SineVal+0xac>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fb78 	bl	8000540 <__aeabi_dmul>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4610      	mov	r0, r2
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <get_SineVal+0xa0>)
 8000e5e:	f7ff fc99 	bl	8000794 <__aeabi_ddiv>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	ec43 2b17 	vmov	d7, r2, r3
 8000e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e6e:	eef0 0a67 	vmov.f32	s1, s15
 8000e72:	f009 f961 	bl	800a138 <sin>
 8000e76:	ec51 0b10 	vmov	r0, r1, d0
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <get_SineVal+0xa4>)
 8000e80:	f7ff f9a8 	bl	80001d4 <__adddf3>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	a30e      	add	r3, pc, #56	@ (adr r3, 8000ec8 <get_SineVal+0x98>)
 8000e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e92:	f7ff fb55 	bl	8000540 <__aeabi_dmul>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fe11 	bl	8000ac4 <__aeabi_d2uiz>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	490c      	ldr	r1, [pc, #48]	@ (8000ed8 <get_SineVal+0xa8>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_POINTS; i++) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b63      	cmp	r3, #99	@ 0x63
 8000eb6:	ddc1      	ble.n	8000e3c <get_SineVal+0xc>
	}
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	364d9365 	.word	0x364d9365
 8000ecc:	409364d9 	.word	0x409364d9
 8000ed0:	40590000 	.word	0x40590000
 8000ed4:	3ff00000 	.word	0x3ff00000
 8000ed8:	20000248 	.word	0x20000248
 8000edc:	54411744 	.word	0x54411744
 8000ee0:	400921fb 	.word	0x400921fb

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 fd53 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f827 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 f9df 	bl	80012b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef6:	f000 f9bd 	bl	8001274 <MX_DMA_Init>
  MX_I2C1_Init();
 8000efa:	f000 f8b5 	bl	8001068 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000efe:	f000 f8e1 	bl	80010c4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f02:	f008 fcc3 	bl	800988c <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000f06:	f000 f913 	bl	8001130 <MX_TIM1_Init>
  MX_DAC_Init();
 8000f0a:	f000 f883 	bl	8001014 <MX_DAC_Init>
  MX_TIM2_Init();
 8000f0e:	f000 f965 	bl	80011dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000f12:	4808      	ldr	r0, [pc, #32]	@ (8000f34 <main+0x50>)
 8000f14:	f004 fdc6 	bl	8005aa4 <HAL_TIM_Base_Start>

  get_SineVal();
 8000f18:	f7ff ff8a 	bl	8000e30 <get_SineVal>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, gSine_Values, NUM_POINTS, DAC_ALIGN_12B_R);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2364      	movs	r3, #100	@ 0x64
 8000f22:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <main+0x54>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <main+0x58>)
 8000f28:	f000 fefe 	bl	8001d28 <HAL_DAC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f2c:	f008 fcd4 	bl	80098d8 <MX_USB_HOST_Process>
 8000f30:	e7fc      	b.n	8000f2c <main+0x48>
 8000f32:	bf00      	nop
 8000f34:	20000200 	.word	0x20000200
 8000f38:	20000248 	.word	0x20000248
 8000f3c:	20000098 	.word	0x20000098

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	@ 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2230      	movs	r2, #48	@ 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f009 f864 	bl	800a01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	4b28      	ldr	r3, [pc, #160]	@ (800100c <SystemClock_Config+0xcc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	4a27      	ldr	r2, [pc, #156]	@ (800100c <SystemClock_Config+0xcc>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f74:	4b25      	ldr	r3, [pc, #148]	@ (800100c <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <SystemClock_Config+0xd0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a21      	ldr	r2, [pc, #132]	@ (8001010 <SystemClock_Config+0xd0>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000faa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fb4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fb8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f004 f810 	bl	8004fec <HAL_RCC_OscConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fd2:	f000 fa8b 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fe6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2105      	movs	r1, #5
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 fa71 	bl	80054dc <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001000:	f000 fa74 	bl	80014ec <Error_Handler>
  }
}
 8001004:	bf00      	nop
 8001006:	3750      	adds	r7, #80	@ 0x50
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <MX_DAC_Init+0x4c>)
 8001024:	4a0f      	ldr	r2, [pc, #60]	@ (8001064 <MX_DAC_Init+0x50>)
 8001026:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001028:	480d      	ldr	r0, [pc, #52]	@ (8001060 <MX_DAC_Init+0x4c>)
 800102a:	f000 fe5a 	bl	8001ce2 <HAL_DAC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001034:	f000 fa5a 	bl	80014ec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001038:	2324      	movs	r3, #36	@ 0x24
 800103a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001040:	463b      	mov	r3, r7
 8001042:	2200      	movs	r2, #0
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	@ (8001060 <MX_DAC_Init+0x4c>)
 8001048:	f000 ff4e 	bl	8001ee8 <HAL_DAC_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001052:	f000 fa4b 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000098 	.word	0x20000098
 8001064:	40007400 	.word	0x40007400

08001068 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <MX_I2C1_Init+0x50>)
 800106e:	4a13      	ldr	r2, [pc, #76]	@ (80010bc <MX_I2C1_Init+0x54>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_I2C1_Init+0x50>)
 8001074:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <MX_I2C1_Init+0x58>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <MX_I2C1_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <MX_I2C1_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_I2C1_Init+0x50>)
 8001086:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800108a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <MX_I2C1_Init+0x50>)
 80010a6:	f003 fe5d 	bl	8004d64 <HAL_I2C_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b0:	f000 fa1c 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000010c 	.word	0x2000010c
 80010bc:	40005400 	.word	0x40005400
 80010c0:	000186a0 	.word	0x000186a0

080010c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <MX_SPI1_Init+0x64>)
 80010ca:	4a18      	ldr	r2, [pc, #96]	@ (800112c <MX_SPI1_Init+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <MX_SPI1_Init+0x64>)
 80010d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <MX_SPI1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <MX_SPI1_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <MX_SPI1_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <MX_SPI1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <MX_SPI1_Init+0x64>)
 80010f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <MX_SPI1_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <MX_SPI1_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <MX_SPI1_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <MX_SPI1_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <MX_SPI1_Init+0x64>)
 8001110:	220a      	movs	r2, #10
 8001112:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <MX_SPI1_Init+0x64>)
 8001116:	f004 fbed 	bl	80058f4 <HAL_SPI_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001120:	f000 f9e4 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000160 	.word	0x20000160
 800112c:	40013000 	.word	0x40013000

08001130 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800114c:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <MX_TIM1_Init+0xa4>)
 800114e:	4a22      	ldr	r2, [pc, #136]	@ (80011d8 <MX_TIM1_Init+0xa8>)
 8001150:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001152:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <MX_TIM1_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_TIM1_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_TIM1_Init+0xa4>)
 8001160:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001164:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001166:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_TIM1_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <MX_TIM1_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001172:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_TIM1_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001178:	4816      	ldr	r0, [pc, #88]	@ (80011d4 <MX_TIM1_Init+0xa4>)
 800117a:	f004 fcfb 	bl	8005b74 <HAL_TIM_IC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001184:	f000 f9b2 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	480f      	ldr	r0, [pc, #60]	@ (80011d4 <MX_TIM1_Init+0xa4>)
 8001198:	f005 f90e 	bl	80063b8 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011a2:	f000 f9a3 	bl	80014ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011aa:	2301      	movs	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_TIM1_Init+0xa4>)
 80011be:	f004 fd28 	bl	8005c12 <HAL_TIM_IC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80011c8:	f000 f990 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200001b8 	.word	0x200001b8
 80011d8:	40010000 	.word	0x40010000

080011dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <MX_TIM2_Init+0x94>)
 80011fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001200:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <MX_TIM2_Init+0x94>)
 8001202:	2253      	movs	r2, #83	@ 0x53
 8001204:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <MX_TIM2_Init+0x94>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <MX_TIM2_Init+0x94>)
 800120e:	2263      	movs	r2, #99	@ 0x63
 8001210:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <MX_TIM2_Init+0x94>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <MX_TIM2_Init+0x94>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800121e:	4814      	ldr	r0, [pc, #80]	@ (8001270 <MX_TIM2_Init+0x94>)
 8001220:	f004 fbf1 	bl	8005a06 <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800122a:	f000 f95f 	bl	80014ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001232:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4619      	mov	r1, r3
 800123a:	480d      	ldr	r0, [pc, #52]	@ (8001270 <MX_TIM2_Init+0x94>)
 800123c:	f004 fd85 	bl	8005d4a <HAL_TIM_ConfigClockSource>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001246:	f000 f951 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800124a:	2320      	movs	r3, #32
 800124c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	@ (8001270 <MX_TIM2_Init+0x94>)
 8001258:	f005 f8ae 	bl	80063b8 <HAL_TIMEx_MasterConfigSynchronization>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001262:	f000 f943 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000200 	.word	0x20000200

08001274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <MX_DMA_Init+0x3c>)
 8001284:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_DMA_Init+0x3c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2010      	movs	r0, #16
 800129c:	f000 fceb 	bl	8001c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012a0:	2010      	movs	r0, #16
 80012a2:	f000 fd04 	bl	8001cae <HAL_NVIC_EnableIRQ>

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	@ 0x30
 80012b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	4b81      	ldr	r3, [pc, #516]	@ (80014d4 <MX_GPIO_Init+0x220>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a80      	ldr	r2, [pc, #512]	@ (80014d4 <MX_GPIO_Init+0x220>)
 80012d4:	f043 0310 	orr.w	r3, r3, #16
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b7e      	ldr	r3, [pc, #504]	@ (80014d4 <MX_GPIO_Init+0x220>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	4b7a      	ldr	r3, [pc, #488]	@ (80014d4 <MX_GPIO_Init+0x220>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a79      	ldr	r2, [pc, #484]	@ (80014d4 <MX_GPIO_Init+0x220>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b77      	ldr	r3, [pc, #476]	@ (80014d4 <MX_GPIO_Init+0x220>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b73      	ldr	r3, [pc, #460]	@ (80014d4 <MX_GPIO_Init+0x220>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a72      	ldr	r2, [pc, #456]	@ (80014d4 <MX_GPIO_Init+0x220>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b70      	ldr	r3, [pc, #448]	@ (80014d4 <MX_GPIO_Init+0x220>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b6c      	ldr	r3, [pc, #432]	@ (80014d4 <MX_GPIO_Init+0x220>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a6b      	ldr	r2, [pc, #428]	@ (80014d4 <MX_GPIO_Init+0x220>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b69      	ldr	r3, [pc, #420]	@ (80014d4 <MX_GPIO_Init+0x220>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	4b65      	ldr	r3, [pc, #404]	@ (80014d4 <MX_GPIO_Init+0x220>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a64      	ldr	r2, [pc, #400]	@ (80014d4 <MX_GPIO_Init+0x220>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b62      	ldr	r3, [pc, #392]	@ (80014d4 <MX_GPIO_Init+0x220>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b5e      	ldr	r3, [pc, #376]	@ (80014d4 <MX_GPIO_Init+0x220>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a5d      	ldr	r2, [pc, #372]	@ (80014d4 <MX_GPIO_Init+0x220>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b5b      	ldr	r3, [pc, #364]	@ (80014d4 <MX_GPIO_Init+0x220>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2108      	movs	r1, #8
 8001376:	4858      	ldr	r0, [pc, #352]	@ (80014d8 <MX_GPIO_Init+0x224>)
 8001378:	f001 fba6 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2101      	movs	r1, #1
 8001380:	4856      	ldr	r0, [pc, #344]	@ (80014dc <MX_GPIO_Init+0x228>)
 8001382:	f001 fba1 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001386:	2200      	movs	r2, #0
 8001388:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800138c:	4854      	ldr	r0, [pc, #336]	@ (80014e0 <MX_GPIO_Init+0x22c>)
 800138e:	f001 fb9b 	bl	8002ac8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001392:	2308      	movs	r3, #8
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	484b      	ldr	r0, [pc, #300]	@ (80014d8 <MX_GPIO_Init+0x224>)
 80013aa:	f001 f9f1 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4845      	ldr	r0, [pc, #276]	@ (80014dc <MX_GPIO_Init+0x228>)
 80013c6:	f001 f9e3 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013ca:	2308      	movs	r3, #8
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013da:	2305      	movs	r3, #5
 80013dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	483d      	ldr	r0, [pc, #244]	@ (80014dc <MX_GPIO_Init+0x228>)
 80013e6:	f001 f9d3 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013ee:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4839      	ldr	r0, [pc, #228]	@ (80014e4 <MX_GPIO_Init+0x230>)
 8001400:	f001 f9c6 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001404:	2304      	movs	r3, #4
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4834      	ldr	r0, [pc, #208]	@ (80014e8 <MX_GPIO_Init+0x234>)
 8001418:	f001 f9ba 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800141c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800142e:	2305      	movs	r3, #5
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	482b      	ldr	r0, [pc, #172]	@ (80014e8 <MX_GPIO_Init+0x234>)
 800143a:	f001 f9a9 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800143e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001448:	2302      	movs	r3, #2
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	4823      	ldr	r0, [pc, #140]	@ (80014e0 <MX_GPIO_Init+0x22c>)
 8001454:	f001 f99c 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001458:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800145c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	481b      	ldr	r0, [pc, #108]	@ (80014e0 <MX_GPIO_Init+0x22c>)
 8001472:	f001 f98d 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001476:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001488:	2306      	movs	r3, #6
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4812      	ldr	r0, [pc, #72]	@ (80014dc <MX_GPIO_Init+0x228>)
 8001494:	f001 f97c 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001498:	2320      	movs	r3, #32
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	480d      	ldr	r0, [pc, #52]	@ (80014e0 <MX_GPIO_Init+0x22c>)
 80014ac:	f001 f970 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014b4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4619      	mov	r1, r3
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MX_GPIO_Init+0x224>)
 80014c6:	f001 f963 	bl	8002790 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014ca:	bf00      	nop
 80014cc:	3730      	adds	r7, #48	@ 0x30
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40020800 	.word	0x40020800
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <Error_Handler+0x8>

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	4a0f      	ldr	r2, [pc, #60]	@ (8001544 <HAL_MspInit+0x4c>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150c:	6453      	str	r3, [r2, #68]	@ 0x44
 800150e:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <HAL_MspInit+0x4c>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001536:	2007      	movs	r0, #7
 8001538:	f000 fb92 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2f      	ldr	r2, [pc, #188]	@ (8001624 <HAL_DAC_MspInit+0xdc>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d158      	bne.n	800161c <HAL_DAC_MspInit+0xd4>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b2e      	ldr	r3, [pc, #184]	@ (8001628 <HAL_DAC_MspInit+0xe0>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	4a2d      	ldr	r2, [pc, #180]	@ (8001628 <HAL_DAC_MspInit+0xe0>)
 8001574:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001578:	6413      	str	r3, [r2, #64]	@ 0x40
 800157a:	4b2b      	ldr	r3, [pc, #172]	@ (8001628 <HAL_DAC_MspInit+0xe0>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b27      	ldr	r3, [pc, #156]	@ (8001628 <HAL_DAC_MspInit+0xe0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a26      	ldr	r2, [pc, #152]	@ (8001628 <HAL_DAC_MspInit+0xe0>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b24      	ldr	r3, [pc, #144]	@ (8001628 <HAL_DAC_MspInit+0xe0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015a2:	2310      	movs	r3, #16
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a6:	2303      	movs	r3, #3
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	481d      	ldr	r0, [pc, #116]	@ (800162c <HAL_DAC_MspInit+0xe4>)
 80015b6:	f001 f8eb 	bl	8002790 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80015ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 80015bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001634 <HAL_DAC_MspInit+0xec>)
 80015be:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 80015c2:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80015c6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c8:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 80015ca:	2240      	movs	r2, #64	@ 0x40
 80015cc:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ce:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80015d4:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 80015d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015da:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015dc:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 80015de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015e2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 80015e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ea:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80015ec:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 80015ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015f2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80015f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001600:	480b      	ldr	r0, [pc, #44]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 8001602:	f000 fd55 	bl	80020b0 <HAL_DMA_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 800160c:	f7ff ff6e 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	4a06      	ldr	r2, [pc, #24]	@ (8001630 <HAL_DAC_MspInit+0xe8>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	@ 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40007400 	.word	0x40007400
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000
 8001630:	200000ac 	.word	0x200000ac
 8001634:	40026088 	.word	0x40026088

08001638 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a19      	ldr	r2, [pc, #100]	@ (80016bc <HAL_I2C_MspInit+0x84>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12c      	bne.n	80016b4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <HAL_I2C_MspInit+0x88>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <HAL_I2C_MspInit+0x88>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_I2C_MspInit+0x88>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001676:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167c:	2312      	movs	r3, #18
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001680:	2301      	movs	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001688:	2304      	movs	r3, #4
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <HAL_I2C_MspInit+0x8c>)
 8001694:	f001 f87c 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_I2C_MspInit+0x88>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	4a07      	ldr	r2, [pc, #28]	@ (80016c0 <HAL_I2C_MspInit+0x88>)
 80016a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_I2C_MspInit+0x88>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	@ 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40005400 	.word	0x40005400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020400 	.word	0x40020400

080016c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	@ (800174c <HAL_SPI_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12b      	bne.n	8001742 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_SPI_MspInit+0x88>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <HAL_SPI_MspInit+0x88>)
 80016f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_SPI_MspInit+0x88>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_SPI_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a10      	ldr	r2, [pc, #64]	@ (8001750 <HAL_SPI_MspInit+0x88>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <HAL_SPI_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001722:	23e0      	movs	r3, #224	@ 0xe0
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001732:	2305      	movs	r3, #5
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <HAL_SPI_MspInit+0x8c>)
 800173e:	f001 f827 	bl	8002790 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40013000 	.word	0x40013000
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a19      	ldr	r2, [pc, #100]	@ (80017dc <HAL_TIM_IC_MspInit+0x84>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d12c      	bne.n	80017d4 <HAL_TIM_IC_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_TIM_IC_MspInit+0x88>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <HAL_TIM_IC_MspInit+0x88>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6453      	str	r3, [r2, #68]	@ 0x44
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_TIM_IC_MspInit+0x88>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <HAL_TIM_IC_MspInit+0x88>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <HAL_TIM_IC_MspInit+0x88>)
 80017a0:	f043 0310 	orr.w	r3, r3, #16
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <HAL_TIM_IC_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <HAL_TIM_IC_MspInit+0x8c>)
 80017d0:	f000 ffde 	bl	8002790 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	@ 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017f8:	d10d      	bne.n	8001816 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_TIM_Base_MspInit+0x3c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <HAL_TIM_Base_MspInit+0x3c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_TIM_Base_MspInit+0x3c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <NMI_Handler+0x4>

08001830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <MemManage_Handler+0x4>

08001840 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <UsageFault_Handler+0x4>

08001850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187e:	f000 f8db 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <DMA1_Stream5_IRQHandler+0x10>)
 800188e:	f000 fd15 	bl	80022bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200000ac 	.word	0x200000ac

0800189c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <OTG_FS_IRQHandler+0x10>)
 80018a2:	f001 fc0b 	bl	80030bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200007bc 	.word	0x200007bc

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	@ (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f008 fbb4 	bl	800a04c <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20020000 	.word	0x20020000
 8001910:	00000400 	.word	0x00000400
 8001914:	200003d8 	.word	0x200003d8
 8001918:	20000ce8 	.word	0x20000ce8

0800191c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001978 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001944:	f7ff ffea 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194a:	490d      	ldr	r1, [pc, #52]	@ (8001980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800194c:	4a0d      	ldr	r2, [pc, #52]	@ (8001984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001960:	4c0a      	ldr	r4, [pc, #40]	@ (800198c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196e:	f008 fb73 	bl	800a058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7ff fab7 	bl	8000ee4 <main>
  bx  lr    
 8001976:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001984:	0800b3a8 	.word	0x0800b3a8
  ldr r2, =_sbss
 8001988:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800198c:	20000ce4 	.word	0x20000ce4

08001990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0d      	ldr	r2, [pc, #52]	@ (80019d4 <HAL_Init+0x40>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <HAL_Init+0x40>)
 80019aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	@ (80019d4 <HAL_Init+0x40>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 f94f 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f808 	bl	80019d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fd96 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_InitTick+0x54>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_InitTick+0x58>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f967 	bl	8001cca <HAL_SYSTICK_Config>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00e      	b.n	8001a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d80a      	bhi.n	8001a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f000 f92f 	bl	8001c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a18:	4a06      	ldr	r2, [pc, #24]	@ (8001a34 <HAL_InitTick+0x5c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_IncTick+0x20>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_IncTick+0x24>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <HAL_IncTick+0x24>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	200003dc 	.word	0x200003dc

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	200003dc 	.word	0x200003dc

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff ffee 	bl	8001a60 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_Delay+0x44>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a9e:	bf00      	nop
 8001aa0:	f7ff ffde 	bl	8001a60 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000008 	.word	0x20000008

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	@ (8001b5c <__NVIC_EnableIRQ+0x38>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	@ (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	@ (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	@ 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f7ff ff8e 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff29 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c88:	f7ff ff3e 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	6978      	ldr	r0, [r7, #20]
 8001c94:	f7ff ff8e 	bl	8001bb4 <NVIC_EncodePriority>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff5d 	bl	8001b60 <__NVIC_SetPriority>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff31 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffa2 	bl	8001c1c <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e014      	b.n	8001d1e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d105      	bne.n	8001d0a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fc1f 	bl	8001548 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0a2      	b.n	8001e8a <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	795b      	ldrb	r3, [r3, #5]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_DAC_Start_DMA+0x28>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e09c      	b.n	8001e8a <HAL_DAC_Start_DMA+0x162>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d129      	bne.n	8001db6 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4a4b      	ldr	r2, [pc, #300]	@ (8001e94 <HAL_DAC_Start_DMA+0x16c>)
 8001d68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8001e98 <HAL_DAC_Start_DMA+0x170>)
 8001d70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	4a49      	ldr	r2, [pc, #292]	@ (8001e9c <HAL_DAC_Start_DMA+0x174>)
 8001d78:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001d88:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_DAC_Start_DMA+0x70>
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d005      	beq.n	8001da2 <HAL_DAC_Start_DMA+0x7a>
 8001d96:	e009      	b.n	8001dac <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3308      	adds	r3, #8
 8001d9e:	613b      	str	r3, [r7, #16]
        break;
 8001da0:	e033      	b.n	8001e0a <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	330c      	adds	r3, #12
 8001da8:	613b      	str	r3, [r7, #16]
        break;
 8001daa:	e02e      	b.n	8001e0a <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3310      	adds	r3, #16
 8001db2:	613b      	str	r3, [r7, #16]
        break;
 8001db4:	e029      	b.n	8001e0a <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4a39      	ldr	r2, [pc, #228]	@ (8001ea0 <HAL_DAC_Start_DMA+0x178>)
 8001dbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	4a38      	ldr	r2, [pc, #224]	@ (8001ea4 <HAL_DAC_Start_DMA+0x17c>)
 8001dc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4a37      	ldr	r2, [pc, #220]	@ (8001ea8 <HAL_DAC_Start_DMA+0x180>)
 8001dcc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ddc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_DAC_Start_DMA+0xc4>
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d005      	beq.n	8001df6 <HAL_DAC_Start_DMA+0xce>
 8001dea:	e009      	b.n	8001e00 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	3314      	adds	r3, #20
 8001df2:	613b      	str	r3, [r7, #16]
        break;
 8001df4:	e009      	b.n	8001e0a <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	3318      	adds	r3, #24
 8001dfc:	613b      	str	r3, [r7, #16]
        break;
 8001dfe:	e004      	b.n	8001e0a <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	331c      	adds	r3, #28
 8001e06:	613b      	str	r3, [r7, #16]
        break;
 8001e08:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d111      	bne.n	8001e34 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6898      	ldr	r0, [r3, #8]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	f000 f9ef 	bl	800220c <HAL_DMA_Start_IT>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	75fb      	strb	r3, [r7, #23]
 8001e32:	e010      	b.n	8001e56 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001e42:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	68d8      	ldr	r0, [r3, #12]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	f000 f9dd 	bl	800220c <HAL_DMA_Start_IT>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10c      	bne.n	8001e7c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2201      	movs	r2, #1
 8001e70:	409a      	lsls	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e005      	b.n	8001e88 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	f043 0204 	orr.w	r2, r3, #4
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	08001f9b 	.word	0x08001f9b
 8001e98:	08001fbd 	.word	0x08001fbd
 8001e9c:	08001fd9 	.word	0x08001fd9
 8001ea0:	08002043 	.word	0x08002043
 8001ea4:	08002065 	.word	0x08002065
 8001ea8:	08002081 	.word	0x08002081

08001eac <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	@ 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_DAC_ConfigChannel+0x1c>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e042      	b.n	8001f8e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	795b      	ldrb	r3, [r3, #5]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_DAC_ConfigChannel+0x2c>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e03c      	b.n	8001f8e <HAL_DAC_ConfigChannel+0xa6>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2201      	movs	r2, #1
 8001f18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	22c0      	movs	r2, #192	@ 0xc0
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001f8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	@ 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff ff7f 	bl	8001eac <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	711a      	strb	r2, [r3, #4]
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff ff78 	bl	8001ec0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f043 0204 	orr.w	r2, r3, #4
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff ff6e 	bl	8001ed4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	711a      	strb	r2, [r3, #4]
}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800204e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff ffd8 	bl	8002006 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	711a      	strb	r2, [r3, #4]
}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002070:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f7ff ffd1 	bl	800201a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f043 0204 	orr.w	r2, r3, #4
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7ff ffc7 	bl	800202e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	711a      	strb	r2, [r3, #4]
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff fcd0 	bl	8001a60 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e099      	b.n	8002200 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ec:	e00f      	b.n	800210e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ee:	f7ff fcb7 	bl	8001a60 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	d908      	bls.n	800210e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2203      	movs	r2, #3
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e078      	b.n	8002200 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1e8      	bne.n	80020ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	4b38      	ldr	r3, [pc, #224]	@ (8002208 <HAL_DMA_Init+0x158>)
 8002128:	4013      	ands	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800213a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	2b04      	cmp	r3, #4
 8002166:	d107      	bne.n	8002178 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	4313      	orrs	r3, r2
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f023 0307 	bic.w	r3, r3, #7
 800218e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d117      	bne.n	80021d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00e      	beq.n	80021d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fa6f 	bl	8002698 <DMA_CheckFifoParam>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2240      	movs	r2, #64	@ 0x40
 80021c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021ce:	2301      	movs	r3, #1
 80021d0:	e016      	b.n	8002200 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fa26 	bl	800262c <DMA_CalcBaseAndBitshift>
 80021e0:	4603      	mov	r3, r0
 80021e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e8:	223f      	movs	r2, #63	@ 0x3f
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	f010803f 	.word	0xf010803f

0800220c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_DMA_Start_IT+0x26>
 800222e:	2302      	movs	r3, #2
 8002230:	e040      	b.n	80022b4 <HAL_DMA_Start_IT+0xa8>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d12f      	bne.n	80022a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2202      	movs	r2, #2
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f9b8 	bl	80025d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	223f      	movs	r2, #63	@ 0x3f
 8002266:	409a      	lsls	r2, r3
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0216 	orr.w	r2, r2, #22
 800227a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d007      	beq.n	8002294 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0208 	orr.w	r2, r2, #8
 8002292:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e005      	b.n	80022b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022ae:	2302      	movs	r3, #2
 80022b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022c8:	4b8e      	ldr	r3, [pc, #568]	@ (8002504 <HAL_DMA_IRQHandler+0x248>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a8e      	ldr	r2, [pc, #568]	@ (8002508 <HAL_DMA_IRQHandler+0x24c>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a9b      	lsrs	r3, r3, #10
 80022d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e6:	2208      	movs	r2, #8
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01a      	beq.n	8002328 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0204 	bic.w	r2, r2, #4
 800230e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002314:	2208      	movs	r2, #8
 8002316:	409a      	lsls	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	2201      	movs	r2, #1
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d012      	beq.n	800235e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234a:	2201      	movs	r2, #1
 800234c:	409a      	lsls	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002356:	f043 0202 	orr.w	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	2204      	movs	r2, #4
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d012      	beq.n	8002394 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002380:	2204      	movs	r2, #4
 8002382:	409a      	lsls	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238c:	f043 0204 	orr.w	r2, r3, #4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002398:	2210      	movs	r2, #16
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d043      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03c      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b6:	2210      	movs	r2, #16
 80023b8:	409a      	lsls	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d018      	beq.n	80023fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d108      	bne.n	80023ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d024      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
 80023ea:	e01f      	b.n	800242c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
 80023fc:	e016      	b.n	800242c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0208 	bic.w	r2, r2, #8
 800241a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002430:	2220      	movs	r2, #32
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 808f 	beq.w	800255c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8087 	beq.w	800255c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002452:	2220      	movs	r2, #32
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b05      	cmp	r3, #5
 8002464:	d136      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0216 	bic.w	r2, r2, #22
 8002474:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002484:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <HAL_DMA_IRQHandler+0x1da>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0208 	bic.w	r2, r2, #8
 80024a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024aa:	223f      	movs	r2, #63	@ 0x3f
 80024ac:	409a      	lsls	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d07e      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
        }
        return;
 80024d2:	e079      	b.n	80025c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01d      	beq.n	800251e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10d      	bne.n	800250c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d031      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
 8002500:	e02c      	b.n	800255c <HAL_DMA_IRQHandler+0x2a0>
 8002502:	bf00      	nop
 8002504:	20000000 	.word	0x20000000
 8002508:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002510:	2b00      	cmp	r3, #0
 8002512:	d023      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
 800251c:	e01e      	b.n	800255c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10f      	bne.n	800254c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0210 	bic.w	r2, r2, #16
 800253a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002560:	2b00      	cmp	r3, #0
 8002562:	d032      	beq.n	80025ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d022      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2205      	movs	r2, #5
 8002574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	3301      	adds	r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	d307      	bcc.n	80025a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f2      	bne.n	8002588 <HAL_DMA_IRQHandler+0x2cc>
 80025a2:	e000      	b.n	80025a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
 80025c6:	e000      	b.n	80025ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80025c8:	bf00      	nop
    }
  }
}
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b40      	cmp	r3, #64	@ 0x40
 80025fc:	d108      	bne.n	8002610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800260e:	e007      	b.n	8002620 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	3b10      	subs	r3, #16
 800263c:	4a14      	ldr	r2, [pc, #80]	@ (8002690 <DMA_CalcBaseAndBitshift+0x64>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002646:	4a13      	ldr	r2, [pc, #76]	@ (8002694 <DMA_CalcBaseAndBitshift+0x68>)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b03      	cmp	r3, #3
 8002658:	d909      	bls.n	800266e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	1d1a      	adds	r2, r3, #4
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	@ 0x58
 800266c:	e007      	b.n	800267e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002676:	f023 0303 	bic.w	r3, r3, #3
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	aaaaaaab 	.word	0xaaaaaaab
 8002694:	0800b1b4 	.word	0x0800b1b4

08002698 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d11f      	bne.n	80026f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d856      	bhi.n	8002766 <DMA_CheckFifoParam+0xce>
 80026b8:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <DMA_CheckFifoParam+0x28>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026e3 	.word	0x080026e3
 80026c8:	080026d1 	.word	0x080026d1
 80026cc:	08002767 	.word	0x08002767
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d046      	beq.n	800276a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e0:	e043      	b.n	800276a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026ea:	d140      	bne.n	800276e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f0:	e03d      	b.n	800276e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026fa:	d121      	bne.n	8002740 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d837      	bhi.n	8002772 <DMA_CheckFifoParam+0xda>
 8002702:	a201      	add	r2, pc, #4	@ (adr r2, 8002708 <DMA_CheckFifoParam+0x70>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	08002719 	.word	0x08002719
 800270c:	0800271f 	.word	0x0800271f
 8002710:	08002719 	.word	0x08002719
 8002714:	08002731 	.word	0x08002731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      break;
 800271c:	e030      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d025      	beq.n	8002776 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272e:	e022      	b.n	8002776 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002738:	d11f      	bne.n	800277a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800273e:	e01c      	b.n	800277a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d903      	bls.n	800274e <DMA_CheckFifoParam+0xb6>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d003      	beq.n	8002754 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800274c:	e018      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
      break;
 8002752:	e015      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00e      	beq.n	800277e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      break;
 8002764:	e00b      	b.n	800277e <DMA_CheckFifoParam+0xe6>
      break;
 8002766:	bf00      	nop
 8002768:	e00a      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
 800276c:	e008      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800276e:	bf00      	nop
 8002770:	e006      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 8002772:	bf00      	nop
 8002774:	e004      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;   
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800277e:	bf00      	nop
    }
  } 
  
  return status; 
 8002780:	7bfb      	ldrb	r3, [r7, #15]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	@ 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e16b      	b.n	8002a84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 815a 	bne.w	8002a7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80b4 	beq.w	8002a7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b60      	ldr	r3, [pc, #384]	@ (8002a9c <HAL_GPIO_Init+0x30c>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	4a5f      	ldr	r2, [pc, #380]	@ (8002a9c <HAL_GPIO_Init+0x30c>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002924:	6453      	str	r3, [r2, #68]	@ 0x44
 8002926:	4b5d      	ldr	r3, [pc, #372]	@ (8002a9c <HAL_GPIO_Init+0x30c>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002932:	4a5b      	ldr	r2, [pc, #364]	@ (8002aa0 <HAL_GPIO_Init+0x310>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a52      	ldr	r2, [pc, #328]	@ (8002aa4 <HAL_GPIO_Init+0x314>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d02b      	beq.n	80029b6 <HAL_GPIO_Init+0x226>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a51      	ldr	r2, [pc, #324]	@ (8002aa8 <HAL_GPIO_Init+0x318>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d025      	beq.n	80029b2 <HAL_GPIO_Init+0x222>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a50      	ldr	r2, [pc, #320]	@ (8002aac <HAL_GPIO_Init+0x31c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01f      	beq.n	80029ae <HAL_GPIO_Init+0x21e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4f      	ldr	r2, [pc, #316]	@ (8002ab0 <HAL_GPIO_Init+0x320>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d019      	beq.n	80029aa <HAL_GPIO_Init+0x21a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4e      	ldr	r2, [pc, #312]	@ (8002ab4 <HAL_GPIO_Init+0x324>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_Init+0x216>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4d      	ldr	r2, [pc, #308]	@ (8002ab8 <HAL_GPIO_Init+0x328>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00d      	beq.n	80029a2 <HAL_GPIO_Init+0x212>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4c      	ldr	r2, [pc, #304]	@ (8002abc <HAL_GPIO_Init+0x32c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <HAL_GPIO_Init+0x20e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4b      	ldr	r2, [pc, #300]	@ (8002ac0 <HAL_GPIO_Init+0x330>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_GPIO_Init+0x20a>
 8002996:	2307      	movs	r3, #7
 8002998:	e00e      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 800299a:	2308      	movs	r3, #8
 800299c:	e00c      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 800299e:	2306      	movs	r3, #6
 80029a0:	e00a      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029a2:	2305      	movs	r3, #5
 80029a4:	e008      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029a6:	2304      	movs	r3, #4
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029aa:	2303      	movs	r3, #3
 80029ac:	e004      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029b6:	2300      	movs	r3, #0
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f002 0203 	and.w	r2, r2, #3
 80029be:	0092      	lsls	r2, r2, #2
 80029c0:	4093      	lsls	r3, r2
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c8:	4935      	ldr	r1, [pc, #212]	@ (8002aa0 <HAL_GPIO_Init+0x310>)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fa:	4a32      	ldr	r2, [pc, #200]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a00:	4b30      	ldr	r3, [pc, #192]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a24:	4a27      	ldr	r2, [pc, #156]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2a:	4b26      	ldr	r3, [pc, #152]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a78:	4a12      	ldr	r2, [pc, #72]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3301      	adds	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	f67f ae90 	bls.w	80027ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3724      	adds	r7, #36	@ 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020c00 	.word	0x40020c00
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40021400 	.word	0x40021400
 8002abc:	40021800 	.word	0x40021800
 8002ac0:	40021c00 	.word	0x40021c00
 8002ac4:	40013c00 	.word	0x40013c00

08002ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad8:	787b      	ldrb	r3, [r7, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae4:	e003      	b.n	8002aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	041a      	lsls	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	619a      	str	r2, [r3, #24]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e059      	b.n	8002bc0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f006 ff0e 	bl	8009948 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b3a:	d102      	bne.n	8002b42 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fd27 	bl	800659a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7c1a      	ldrb	r2, [r3, #16]
 8002b54:	f88d 2000 	strb.w	r2, [sp]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b5c:	f003 fca8 	bl	80064b0 <USB_CoreInit>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e026      	b.n	8002bc0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f003 fd1f 	bl	80065bc <USB_SetCurrentMode>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e017      	b.n	8002bc0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7c1a      	ldrb	r2, [r3, #16]
 8002b98:	f88d 2000 	strb.w	r2, [sp]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ba0:	f003 fec2 	bl	8006928 <USB_HostInit>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e004      	b.n	8002bc0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b08b      	sub	sp, #44	@ 0x2c
 8002bcc:	af04      	add	r7, sp, #16
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	70fb      	strb	r3, [r7, #3]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	70bb      	strb	r3, [r7, #2]
 8002bde:	4613      	mov	r3, r2
 8002be0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002be2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002be4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_HCD_HC_Init+0x2c>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e09d      	b.n	8002d30 <HAL_HCD_HC_Init+0x168>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3319      	adds	r3, #25
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3314      	adds	r3, #20
 8002c20:	787a      	ldrb	r2, [r7, #1]
 8002c22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3315      	adds	r3, #21
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	3326      	adds	r3, #38	@ 0x26
 8002c48:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002c4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	78bb      	ldrb	r3, [r7, #2]
 8002c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c56:	b2d8      	uxtb	r0, r3
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3316      	adds	r3, #22
 8002c66:	4602      	mov	r2, r0
 8002c68:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fbc8 	bl	8003404 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002c74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da0a      	bge.n	8002c92 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	3317      	adds	r3, #23
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e009      	b.n	8002ca6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3317      	adds	r3, #23
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 ffa0 	bl	8006bf0 <USB_GetHostSpeed>
 8002cb0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002cb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d10b      	bne.n	8002cd2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002cba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_HCD_HC_Init+0x10a>
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d104      	bne.n	8002cd2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2bbc      	cmp	r3, #188	@ 0xbc
 8002ccc:	d901      	bls.n	8002cd2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002cce:	23bc      	movs	r3, #188	@ 0xbc
 8002cd0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3318      	adds	r3, #24
 8002ce2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002ce6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	b298      	uxth	r0, r3
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3328      	adds	r3, #40	@ 0x28
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	787c      	ldrb	r4, [r7, #1]
 8002d0a:	78ba      	ldrb	r2, [r7, #2]
 8002d0c:	78f9      	ldrb	r1, [r7, #3]
 8002d0e:	9302      	str	r3, [sp, #8]
 8002d10:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4623      	mov	r3, r4
 8002d1e:	f003 ff8f 	bl	8006c40 <USB_HC_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd90      	pop	{r4, r7, pc}

08002d38 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_HCD_HC_Halt+0x1e>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e00f      	b.n	8002d76 <HAL_HCD_HC_Halt+0x3e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f004 fb21 	bl	80073ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	4608      	mov	r0, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4603      	mov	r3, r0
 8002d90:	70fb      	strb	r3, [r7, #3]
 8002d92:	460b      	mov	r3, r1
 8002d94:	70bb      	strb	r3, [r7, #2]
 8002d96:	4613      	mov	r3, r2
 8002d98:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	3317      	adds	r3, #23
 8002daa:	78ba      	ldrb	r2, [r7, #2]
 8002dac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	3326      	adds	r3, #38	@ 0x26
 8002dbe:	787a      	ldrb	r2, [r7, #1]
 8002dc0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002dc2:	7c3b      	ldrb	r3, [r7, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d114      	bne.n	8002df2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	332a      	adds	r3, #42	@ 0x2a
 8002dd8:	2203      	movs	r2, #3
 8002dda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3319      	adds	r3, #25
 8002dec:	7f3a      	ldrb	r2, [r7, #28]
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e009      	b.n	8002e06 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	332a      	adds	r3, #42	@ 0x2a
 8002e02:	2202      	movs	r2, #2
 8002e04:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002e06:	787b      	ldrb	r3, [r7, #1]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	f200 8102 	bhi.w	8003012 <HAL_HCD_HC_SubmitRequest+0x292>
 8002e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002ffd 	.word	0x08002ffd
 8002e1c:	08002ee9 	.word	0x08002ee9
 8002e20:	08002f73 	.word	0x08002f73
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002e24:	7c3b      	ldrb	r3, [r7, #16]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	f040 80f5 	bne.w	8003016 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002e2c:	78bb      	ldrb	r3, [r7, #2]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d12d      	bne.n	8002e8e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002e32:	8b3b      	ldrh	r3, [r7, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	333d      	adds	r3, #61	@ 0x3d
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	333d      	adds	r3, #61	@ 0x3d
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	332a      	adds	r3, #42	@ 0x2a
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002e76:	e0ce      	b.n	8003016 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	332a      	adds	r3, #42	@ 0x2a
 8002e88:	2202      	movs	r2, #2
 8002e8a:	701a      	strb	r2, [r3, #0]
      break;
 8002e8c:	e0c3      	b.n	8003016 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	331a      	adds	r3, #26
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	f040 80b8 	bne.w	8003016 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	333c      	adds	r3, #60	@ 0x3c
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	332a      	adds	r3, #42	@ 0x2a
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
      break;
 8002ed0:	e0a1      	b.n	8003016 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	332a      	adds	r3, #42	@ 0x2a
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	701a      	strb	r2, [r3, #0]
      break;
 8002ee6:	e096      	b.n	8003016 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ee8:	78bb      	ldrb	r3, [r7, #2]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d120      	bne.n	8002f30 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	333d      	adds	r3, #61	@ 0x3d
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	332a      	adds	r3, #42	@ 0x2a
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002f18:	e07e      	b.n	8003018 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	332a      	adds	r3, #42	@ 0x2a
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	701a      	strb	r2, [r3, #0]
      break;
 8002f2e:	e073      	b.n	8003018 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	333c      	adds	r3, #60	@ 0x3c
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	332a      	adds	r3, #42	@ 0x2a
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
      break;
 8002f5a:	e05d      	b.n	8003018 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	332a      	adds	r3, #42	@ 0x2a
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	701a      	strb	r2, [r3, #0]
      break;
 8002f70:	e052      	b.n	8003018 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002f72:	78bb      	ldrb	r3, [r7, #2]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d120      	bne.n	8002fba <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	333d      	adds	r3, #61	@ 0x3d
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	332a      	adds	r3, #42	@ 0x2a
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002fa2:	e039      	b.n	8003018 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	332a      	adds	r3, #42	@ 0x2a
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	701a      	strb	r2, [r3, #0]
      break;
 8002fb8:	e02e      	b.n	8003018 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	333c      	adds	r3, #60	@ 0x3c
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	332a      	adds	r3, #42	@ 0x2a
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
      break;
 8002fe4:	e018      	b.n	8003018 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	332a      	adds	r3, #42	@ 0x2a
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	701a      	strb	r2, [r3, #0]
      break;
 8002ffa:	e00d      	b.n	8003018 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	332a      	adds	r3, #42	@ 0x2a
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
      break;
 8003010:	e002      	b.n	8003018 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003016:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	332c      	adds	r3, #44	@ 0x2c
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	8b39      	ldrh	r1, [r7, #24]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4403      	add	r3, r0
 800303c:	3334      	adds	r3, #52	@ 0x34
 800303e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	334c      	adds	r3, #76	@ 0x4c
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	3338      	adds	r3, #56	@ 0x38
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	3315      	adds	r3, #21
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	334d      	adds	r3, #77	@ 0x4d
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	3310      	adds	r3, #16
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	1d19      	adds	r1, r3, #4
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	799b      	ldrb	r3, [r3, #6]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f003 fef4 	bl	8006e98 <USB_HC_StartXfer>
 80030b0:	4603      	mov	r3, r0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop

080030bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 fbe8 	bl	80068a8 <USB_GetMode>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b01      	cmp	r3, #1
 80030dc:	f040 80fb 	bne.w	80032d6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f003 fbab 	bl	8006840 <USB_ReadInterrupts>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80f1 	beq.w	80032d4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f003 fba2 	bl	8006840 <USB_ReadInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003102:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003106:	d104      	bne.n	8003112 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003110:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fb92 	bl	8006840 <USB_ReadInterrupts>
 800311c:	4603      	mov	r3, r0
 800311e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003126:	d104      	bne.n	8003132 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003130:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f003 fb82 	bl	8006840 <USB_ReadInterrupts>
 800313c:	4603      	mov	r3, r0
 800313e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003142:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003146:	d104      	bne.n	8003152 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003150:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f003 fb72 	bl	8006840 <USB_ReadInterrupts>
 800315c:	4603      	mov	r3, r0
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b02      	cmp	r3, #2
 8003164:	d103      	bne.n	800316e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2202      	movs	r2, #2
 800316c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f003 fb64 	bl	8006840 <USB_ReadInterrupts>
 8003178:	4603      	mov	r3, r0
 800317a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800317e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003182:	d120      	bne.n	80031c6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800318c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d113      	bne.n	80031c6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800319e:	2110      	movs	r1, #16
 80031a0:	6938      	ldr	r0, [r7, #16]
 80031a2:	f003 fa57 	bl	8006654 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80031a6:	6938      	ldr	r0, [r7, #16]
 80031a8:	f003 fa86 	bl	80066b8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7a5b      	ldrb	r3, [r3, #9]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d105      	bne.n	80031c0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2101      	movs	r1, #1
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 fc78 	bl	8006ab0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f006 fc3f 	bl	8009a44 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 fb38 	bl	8006840 <USB_ReadInterrupts>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031da:	d102      	bne.n	80031e2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f001 fd4d 	bl	8004c7c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 fb2a 	bl	8006840 <USB_ReadInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d106      	bne.n	8003204 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f006 fc08 	bl	8009a0c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2208      	movs	r2, #8
 8003202:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f003 fb19 	bl	8006840 <USB_ReadInterrupts>
 800320e:	4603      	mov	r3, r0
 8003210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003218:	d139      	bne.n	800328e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f004 f8b4 	bl	800738c <USB_HC_ReadInterrupt>
 8003224:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e025      	b.n	8003278 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d018      	beq.n	8003272 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003256:	d106      	bne.n	8003266 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	4619      	mov	r1, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f905 	bl	800346e <HCD_HC_IN_IRQHandler>
 8003264:	e005      	b.n	8003272 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	4619      	mov	r1, r3
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 ff67 	bl	8004140 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	3301      	adds	r3, #1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	795b      	ldrb	r3, [r3, #5]
 800327c:	461a      	mov	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	4293      	cmp	r3, r2
 8003282:	d3d3      	bcc.n	800322c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800328c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f003 fad4 	bl	8006840 <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d101      	bne.n	80032a6 <HAL_HCD_IRQHandler+0x1ea>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <HAL_HCD_IRQHandler+0x1ec>
 80032a6:	2300      	movs	r3, #0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d014      	beq.n	80032d6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0210 	bic.w	r2, r2, #16
 80032ba:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f001 fbfe 	bl	8004abe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0210 	orr.w	r2, r2, #16
 80032d0:	619a      	str	r2, [r3, #24]
 80032d2:	e000      	b.n	80032d6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80032d4:	bf00      	nop
    }
  }
}
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_HCD_Start+0x16>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e013      	b.n	800331a <HAL_HCD_Start+0x3e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f003 fc3c 	bl	8006b7e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 f934 	bl	8006578 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_HCD_Stop+0x16>
 8003334:	2302      	movs	r3, #2
 8003336:	e00d      	b.n	8003354 <HAL_HCD_Stop+0x32>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f004 f98f 	bl	8007668 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f003 fbde 	bl	8006b2a <USB_ResetPort>
 800336e:	4603      	mov	r3, r0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	334c      	adds	r3, #76	@ 0x4c
 8003394:	781b      	ldrb	r3, [r3, #0]
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	3338      	adds	r3, #56	@ 0x38
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f003 fc20 	bl	8006c1e <USB_GetCurrentFrame>
 80033de:	4603      	mov	r3, r0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f003 fbfb 	bl	8006bf0 <USB_GetHostSpeed>
 80033fa:	4603      	mov	r3, r0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	331a      	adds	r3, #26
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	331b      	adds	r3, #27
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	3325      	adds	r3, #37	@ 0x25
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	3324      	adds	r3, #36	@ 0x24
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f003 f9ea 	bl	8006866 <USB_ReadChInterrupts>
 8003492:	4603      	mov	r3, r0
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b04      	cmp	r3, #4
 800349a:	d11a      	bne.n	80034d2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a8:	461a      	mov	r2, r3
 80034aa:	2304      	movs	r3, #4
 80034ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	334d      	adds	r3, #77	@ 0x4d
 80034be:	2207      	movs	r2, #7
 80034c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f003 ff6f 	bl	80073ae <USB_HC_Halt>
 80034d0:	e09e      	b.n	8003610 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 f9c3 	bl	8006866 <USB_ReadChInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ea:	d11b      	bne.n	8003524 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f8:	461a      	mov	r2, r3
 80034fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	334d      	adds	r3, #77	@ 0x4d
 8003510:	2208      	movs	r2, #8
 8003512:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f003 ff46 	bl	80073ae <USB_HC_Halt>
 8003522:	e075      	b.n	8003610 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f003 f99a 	bl	8006866 <USB_ReadChInterrupts>
 8003532:	4603      	mov	r3, r0
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b08      	cmp	r3, #8
 800353a:	d11a      	bne.n	8003572 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003548:	461a      	mov	r2, r3
 800354a:	2308      	movs	r3, #8
 800354c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	334d      	adds	r3, #77	@ 0x4d
 800355e:	2206      	movs	r2, #6
 8003560:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f003 ff1f 	bl	80073ae <USB_HC_Halt>
 8003570:	e04e      	b.n	8003610 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f003 f973 	bl	8006866 <USB_ReadChInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800358a:	d11b      	bne.n	80035c4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003598:	461a      	mov	r2, r3
 800359a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800359e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	334d      	adds	r3, #77	@ 0x4d
 80035b0:	2209      	movs	r2, #9
 80035b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f003 fef6 	bl	80073ae <USB_HC_Halt>
 80035c2:	e025      	b.n	8003610 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f003 f94a 	bl	8006866 <USB_ReadChInterrupts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d8:	2b80      	cmp	r3, #128	@ 0x80
 80035da:	d119      	bne.n	8003610 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e8:	461a      	mov	r2, r3
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	334d      	adds	r3, #77	@ 0x4d
 80035fe:	2207      	movs	r2, #7
 8003600:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fecf 	bl	80073ae <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f003 f924 	bl	8006866 <USB_ReadChInterrupts>
 800361e:	4603      	mov	r3, r0
 8003620:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003628:	d112      	bne.n	8003650 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f003 febb 	bl	80073ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003644:	461a      	mov	r2, r3
 8003646:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800364a:	6093      	str	r3, [r2, #8]
 800364c:	f000 bd75 	b.w	800413a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f003 f904 	bl	8006866 <USB_ReadChInterrupts>
 800365e:	4603      	mov	r3, r0
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	f040 8128 	bne.w	80038ba <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003676:	461a      	mov	r2, r3
 8003678:	2320      	movs	r3, #32
 800367a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	331b      	adds	r3, #27
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d119      	bne.n	80036c6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	331b      	adds	r3, #27
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	0151      	lsls	r1, r2, #5
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	440a      	add	r2, r1
 80036bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	799b      	ldrb	r3, [r3, #6]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01b      	beq.n	8003706 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3330      	adds	r3, #48	@ 0x30
 80036de:	6819      	ldr	r1, [r3, #0]
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	1ac9      	subs	r1, r1, r3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4403      	add	r3, r0
 8003702:	3338      	adds	r3, #56	@ 0x38
 8003704:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334d      	adds	r3, #77	@ 0x4d
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3344      	adds	r3, #68	@ 0x44
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800373a:	461a      	mov	r2, r3
 800373c:	2301      	movs	r3, #1
 800373e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	3326      	adds	r3, #38	@ 0x26
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	3326      	adds	r3, #38	@ 0x26
 8003766:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003768:	2b02      	cmp	r3, #2
 800376a:	d110      	bne.n	800378e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f003 fe1a 	bl	80073ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4413      	add	r3, r2
 8003782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003786:	461a      	mov	r2, r3
 8003788:	2310      	movs	r3, #16
 800378a:	6093      	str	r3, [r2, #8]
 800378c:	e03d      	b.n	800380a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3326      	adds	r3, #38	@ 0x26
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d00a      	beq.n	80037ba <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	3326      	adds	r3, #38	@ 0x26
 80037b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d127      	bne.n	800380a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	0151      	lsls	r1, r2, #5
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	440a      	add	r2, r1
 80037d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037d8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	334c      	adds	r3, #76	@ 0x4c
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	334c      	adds	r3, #76	@ 0x4c
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f006 f92b 	bl	8009a60 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	799b      	ldrb	r3, [r3, #6]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d13b      	bne.n	800388a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	3338      	adds	r3, #56	@ 0x38
 8003822:	6819      	ldr	r1, [r3, #0]
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4403      	add	r3, r0
 8003832:	3328      	adds	r3, #40	@ 0x28
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	440b      	add	r3, r1
 8003838:	1e59      	subs	r1, r3, #1
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4403      	add	r3, r0
 8003848:	3328      	adds	r3, #40	@ 0x28
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8470 	beq.w	800413a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	333c      	adds	r3, #60	@ 0x3c
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	f083 0301 	eor.w	r3, r3, #1
 8003872:	b2d8      	uxtb	r0, r3
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	333c      	adds	r3, #60	@ 0x3c
 8003882:	4602      	mov	r2, r0
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	f000 bc58 	b.w	800413a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	333c      	adds	r3, #60	@ 0x3c
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	f083 0301 	eor.w	r3, r3, #1
 80038a2:	b2d8      	uxtb	r0, r3
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	333c      	adds	r3, #60	@ 0x3c
 80038b2:	4602      	mov	r2, r0
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	f000 bc40 	b.w	800413a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f002 ffcf 	bl	8006866 <USB_ReadChInterrupts>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d131      	bne.n	8003936 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038de:	461a      	mov	r2, r3
 80038e0:	2320      	movs	r3, #32
 80038e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	331a      	adds	r3, #26
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	f040 841f 	bne.w	800413a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	331b      	adds	r3, #27
 800390c:	2201      	movs	r2, #1
 800390e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	334d      	adds	r3, #77	@ 0x4d
 8003920:	2203      	movs	r2, #3
 8003922:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f003 fd3e 	bl	80073ae <USB_HC_Halt>
 8003932:	f000 bc02 	b.w	800413a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f002 ff91 	bl	8006866 <USB_ReadChInterrupts>
 8003944:	4603      	mov	r3, r0
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	f040 8305 	bne.w	8003f5a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800395c:	461a      	mov	r2, r3
 800395e:	2302      	movs	r3, #2
 8003960:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	334d      	adds	r3, #77	@ 0x4d
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d114      	bne.n	80039a2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	334d      	adds	r3, #77	@ 0x4d
 8003988:	2202      	movs	r2, #2
 800398a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	334c      	adds	r3, #76	@ 0x4c
 800399c:	2201      	movs	r2, #1
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e2cc      	b.n	8003f3c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	334d      	adds	r3, #77	@ 0x4d
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b06      	cmp	r3, #6
 80039b6:	d114      	bne.n	80039e2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	334d      	adds	r3, #77	@ 0x4d
 80039c8:	2202      	movs	r2, #2
 80039ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	334c      	adds	r3, #76	@ 0x4c
 80039dc:	2205      	movs	r2, #5
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e2ac      	b.n	8003f3c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	334d      	adds	r3, #77	@ 0x4d
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b07      	cmp	r3, #7
 80039f6:	d00b      	beq.n	8003a10 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	334d      	adds	r3, #77	@ 0x4d
 8003a08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a0a:	2b09      	cmp	r3, #9
 8003a0c:	f040 80a6 	bne.w	8003b5c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	334d      	adds	r3, #77	@ 0x4d
 8003a20:	2202      	movs	r2, #2
 8003a22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	3344      	adds	r3, #68	@ 0x44
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	1c59      	adds	r1, r3, #1
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4403      	add	r3, r0
 8003a44:	3344      	adds	r3, #68	@ 0x44
 8003a46:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3344      	adds	r3, #68	@ 0x44
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d943      	bls.n	8003ae6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3344      	adds	r3, #68	@ 0x44
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	331a      	adds	r3, #26
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d123      	bne.n	8003ad0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	331b      	adds	r3, #27
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	331c      	adds	r3, #28
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	0151      	lsls	r1, r2, #5
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	440a      	add	r2, r1
 8003ac6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ace:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	334c      	adds	r3, #76	@ 0x4c
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ae4:	e229      	b.n	8003f3a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	334c      	adds	r3, #76	@ 0x4c
 8003af6:	2202      	movs	r2, #2
 8003af8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3326      	adds	r3, #38	@ 0x26
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00b      	beq.n	8003b28 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3326      	adds	r3, #38	@ 0x26
 8003b20:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	f040 8209 	bne.w	8003f3a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b3e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b46:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b54:	461a      	mov	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b5a:	e1ee      	b.n	8003f3a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b5c:	78fa      	ldrb	r2, [r7, #3]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	334d      	adds	r3, #77	@ 0x4d
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	f040 80c8 	bne.w	8003d04 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	334d      	adds	r3, #77	@ 0x4d
 8003b84:	2202      	movs	r2, #2
 8003b86:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	331b      	adds	r3, #27
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	f040 81ce 	bne.w	8003f3c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	3326      	adds	r3, #38	@ 0x26
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d16b      	bne.n	8003c8e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003bb6:	78fa      	ldrb	r2, [r7, #3]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	3348      	adds	r3, #72	@ 0x48
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	1c59      	adds	r1, r3, #1
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4403      	add	r3, r0
 8003bd6:	3348      	adds	r3, #72	@ 0x48
 8003bd8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	3348      	adds	r3, #72	@ 0x48
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d943      	bls.n	8003c78 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	3348      	adds	r3, #72	@ 0x48
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	331b      	adds	r3, #27
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	3344      	adds	r3, #68	@ 0x44
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d809      	bhi.n	8003c42 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	331c      	adds	r3, #28
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	0151      	lsls	r1, r2, #5
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	440a      	add	r2, r1
 8003c58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c60:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	334c      	adds	r3, #76	@ 0x4c
 8003c72:	2204      	movs	r2, #4
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e014      	b.n	8003ca2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	334c      	adds	r3, #76	@ 0x4c
 8003c88:	2202      	movs	r2, #2
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	e009      	b.n	8003ca2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	334c      	adds	r3, #76	@ 0x4c
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	3326      	adds	r3, #38	@ 0x26
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cb8:	78fa      	ldrb	r2, [r7, #3]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3326      	adds	r3, #38	@ 0x26
 8003cc8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	f040 8136 	bne.w	8003f3c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ce6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cee:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	e11b      	b.n	8003f3c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	334d      	adds	r3, #77	@ 0x4d
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	f040 8081 	bne.w	8003e1e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	334d      	adds	r3, #77	@ 0x4d
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	331b      	adds	r3, #27
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	f040 80fa 	bne.w	8003f3c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	334c      	adds	r3, #76	@ 0x4c
 8003d58:	2202      	movs	r2, #2
 8003d5a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	0151      	lsls	r1, r2, #5
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	440a      	add	r2, r1
 8003d92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d9a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	0151      	lsls	r1, r2, #5
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	440a      	add	r2, r1
 8003db2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003db6:	f023 0320 	bic.w	r3, r3, #32
 8003dba:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3326      	adds	r3, #38	@ 0x26
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	3326      	adds	r3, #38	@ 0x26
 8003de2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	f040 80a9 	bne.w	8003f3c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e00:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e08:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	e08e      	b.n	8003f3c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	334d      	adds	r3, #77	@ 0x4d
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d143      	bne.n	8003ebc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	334d      	adds	r3, #77	@ 0x4d
 8003e44:	2202      	movs	r2, #2
 8003e46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	334c      	adds	r3, #76	@ 0x4c
 8003e58:	2202      	movs	r2, #2
 8003e5a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3326      	adds	r3, #38	@ 0x26
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	3326      	adds	r3, #38	@ 0x26
 8003e82:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d159      	bne.n	8003f3c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e9e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ea6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e03f      	b.n	8003f3c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003ebc:	78fa      	ldrb	r2, [r7, #3]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	334d      	adds	r3, #77	@ 0x4d
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d126      	bne.n	8003f20 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	334d      	adds	r3, #77	@ 0x4d
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3344      	adds	r3, #68	@ 0x44
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	1c59      	adds	r1, r3, #1
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4403      	add	r3, r0
 8003f06:	3344      	adds	r3, #68	@ 0x44
 8003f08:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	334c      	adds	r3, #76	@ 0x4c
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e00d      	b.n	8003f3c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	334d      	adds	r3, #77	@ 0x4d
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	f000 8100 	beq.w	8004138 <HCD_HC_IN_IRQHandler+0xcca>
 8003f38:	e000      	b.n	8003f3c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f3a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	334c      	adds	r3, #76	@ 0x4c
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	4619      	mov	r1, r3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f005 fd84 	bl	8009a60 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f58:	e0ef      	b.n	800413a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	4611      	mov	r1, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f002 fc7f 	bl	8006866 <USB_ReadChInterrupts>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6e:	2b40      	cmp	r3, #64	@ 0x40
 8003f70:	d12f      	bne.n	8003fd2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003f72:	78fb      	ldrb	r3, [r7, #3]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f7e:	461a      	mov	r2, r3
 8003f80:	2340      	movs	r3, #64	@ 0x40
 8003f82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003f84:	78fa      	ldrb	r2, [r7, #3]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	334d      	adds	r3, #77	@ 0x4d
 8003f94:	2205      	movs	r2, #5
 8003f96:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	331a      	adds	r3, #26
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	3344      	adds	r3, #68	@ 0x44
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	4611      	mov	r1, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f003 f9ef 	bl	80073ae <USB_HC_Halt>
 8003fd0:	e0b3      	b.n	800413a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	78fa      	ldrb	r2, [r7, #3]
 8003fd8:	4611      	mov	r1, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f002 fc43 	bl	8006866 <USB_ReadChInterrupts>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	f040 80a7 	bne.w	800413a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	3326      	adds	r3, #38	@ 0x26
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d11b      	bne.n	800403a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	3344      	adds	r3, #68	@ 0x44
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	334d      	adds	r3, #77	@ 0x4d
 8004026:	2204      	movs	r2, #4
 8004028:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	4611      	mov	r1, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f003 f9bb 	bl	80073ae <USB_HC_Halt>
 8004038:	e03f      	b.n	80040ba <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	3326      	adds	r3, #38	@ 0x26
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3326      	adds	r3, #38	@ 0x26
 8004060:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004062:	2b02      	cmp	r3, #2
 8004064:	d129      	bne.n	80040ba <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004066:	78fa      	ldrb	r2, [r7, #3]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3344      	adds	r3, #68	@ 0x44
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	799b      	ldrb	r3, [r3, #6]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HCD_HC_IN_IRQHandler+0xc2a>
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	331b      	adds	r3, #27
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d110      	bne.n	80040ba <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	334d      	adds	r3, #77	@ 0x4d
 80040a8:	2204      	movs	r2, #4
 80040aa:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	4611      	mov	r1, r2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f003 f97a 	bl	80073ae <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	331b      	adds	r3, #27
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d129      	bne.n	8004124 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	331b      	adds	r3, #27
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	0151      	lsls	r1, r2, #5
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	440a      	add	r2, r1
 80040fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004102:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	440a      	add	r2, r1
 800411a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800411e:	f043 0320 	orr.w	r3, r3, #32
 8004122:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4413      	add	r3, r2
 800412c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004130:	461a      	mov	r2, r3
 8004132:	2310      	movs	r3, #16
 8004134:	6093      	str	r3, [r2, #8]
 8004136:	e000      	b.n	800413a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004138:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f002 fb81 	bl	8006866 <USB_ReadChInterrupts>
 8004164:	4603      	mov	r3, r0
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d11b      	bne.n	80041a6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4413      	add	r3, r2
 8004176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417a:	461a      	mov	r2, r3
 800417c:	2304      	movs	r3, #4
 800417e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	334d      	adds	r3, #77	@ 0x4d
 8004190:	2207      	movs	r2, #7
 8004192:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f003 f906 	bl	80073ae <USB_HC_Halt>
 80041a2:	f000 bc89 	b.w	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f002 fb59 	bl	8006866 <USB_ReadChInterrupts>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	f040 8082 	bne.w	80042c4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041cc:	461a      	mov	r2, r3
 80041ce:	2320      	movs	r3, #32
 80041d0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	3319      	adds	r3, #25
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d124      	bne.n	8004232 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	3319      	adds	r3, #25
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	334c      	adds	r3, #76	@ 0x4c
 800420c:	2202      	movs	r2, #2
 800420e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	334d      	adds	r3, #77	@ 0x4d
 8004220:	2203      	movs	r2, #3
 8004222:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	78fa      	ldrb	r2, [r7, #3]
 800422a:	4611      	mov	r1, r2
 800422c:	4618      	mov	r0, r3
 800422e:	f003 f8be 	bl	80073ae <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	331a      	adds	r3, #26
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b01      	cmp	r3, #1
 8004246:	f040 8437 	bne.w	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	331b      	adds	r3, #27
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f040 842b 	bne.w	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	3326      	adds	r3, #38	@ 0x26
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d009      	beq.n	800428c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	331b      	adds	r3, #27
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	334d      	adds	r3, #77	@ 0x4d
 800429c:	2203      	movs	r2, #3
 800429e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f003 f880 	bl	80073ae <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3344      	adds	r3, #68	@ 0x44
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e3f9      	b.n	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f002 faca 	bl	8006866 <USB_ReadChInterrupts>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042dc:	d111      	bne.n	8004302 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ea:	461a      	mov	r2, r3
 80042ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f003 f857 	bl	80073ae <USB_HC_Halt>
 8004300:	e3da      	b.n	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f002 faab 	bl	8006866 <USB_ReadChInterrupts>
 8004310:	4603      	mov	r3, r0
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d168      	bne.n	80043ec <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	3344      	adds	r3, #68	@ 0x44
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f002 fa95 	bl	8006866 <USB_ReadChInterrupts>
 800433c:	4603      	mov	r3, r0
 800433e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004342:	2b40      	cmp	r3, #64	@ 0x40
 8004344:	d112      	bne.n	800436c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	3319      	adds	r3, #25
 8004356:	2201      	movs	r2, #1
 8004358:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004366:	461a      	mov	r2, r3
 8004368:	2340      	movs	r3, #64	@ 0x40
 800436a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	331b      	adds	r3, #27
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d019      	beq.n	80043b6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	331b      	adds	r3, #27
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4413      	add	r3, r2
 800439e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043c2:	461a      	mov	r2, r3
 80043c4:	2301      	movs	r3, #1
 80043c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	334d      	adds	r3, #77	@ 0x4d
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	78fa      	ldrb	r2, [r7, #3]
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f002 ffe2 	bl	80073ae <USB_HC_Halt>
 80043ea:	e365      	b.n	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f002 fa36 	bl	8006866 <USB_ReadChInterrupts>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004400:	2b40      	cmp	r3, #64	@ 0x40
 8004402:	d139      	bne.n	8004478 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	334d      	adds	r3, #77	@ 0x4d
 8004414:	2205      	movs	r2, #5
 8004416:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	331a      	adds	r3, #26
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	3319      	adds	r3, #25
 800443e:	2201      	movs	r2, #1
 8004440:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	3344      	adds	r3, #68	@ 0x44
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f002 ffa5 	bl	80073ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4413      	add	r3, r2
 800446c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004470:	461a      	mov	r2, r3
 8004472:	2340      	movs	r3, #64	@ 0x40
 8004474:	6093      	str	r3, [r2, #8]
 8004476:	e31f      	b.n	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	4611      	mov	r1, r2
 8004480:	4618      	mov	r0, r3
 8004482:	f002 f9f0 	bl	8006866 <USB_ReadChInterrupts>
 8004486:	4603      	mov	r3, r0
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b08      	cmp	r3, #8
 800448e:	d11a      	bne.n	80044c6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800449c:	461a      	mov	r2, r3
 800449e:	2308      	movs	r3, #8
 80044a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	334d      	adds	r3, #77	@ 0x4d
 80044b2:	2206      	movs	r2, #6
 80044b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	4611      	mov	r1, r2
 80044be:	4618      	mov	r0, r3
 80044c0:	f002 ff75 	bl	80073ae <USB_HC_Halt>
 80044c4:	e2f8      	b.n	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	4611      	mov	r1, r2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f002 f9c9 	bl	8006866 <USB_ReadChInterrupts>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b10      	cmp	r3, #16
 80044dc:	d144      	bne.n	8004568 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	3344      	adds	r3, #68	@ 0x44
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	334d      	adds	r3, #77	@ 0x4d
 8004502:	2204      	movs	r2, #4
 8004504:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	3319      	adds	r3, #25
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d114      	bne.n	8004546 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	3318      	adds	r3, #24
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	3319      	adds	r3, #25
 8004542:	2201      	movs	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f002 ff2d 	bl	80073ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4413      	add	r3, r2
 800455c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004560:	461a      	mov	r2, r3
 8004562:	2310      	movs	r3, #16
 8004564:	6093      	str	r3, [r2, #8]
 8004566:	e2a7      	b.n	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f002 f978 	bl	8006866 <USB_ReadChInterrupts>
 8004576:	4603      	mov	r3, r0
 8004578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457c:	2b80      	cmp	r3, #128	@ 0x80
 800457e:	f040 8083 	bne.w	8004688 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	799b      	ldrb	r3, [r3, #6]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d111      	bne.n	80045ae <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	334d      	adds	r3, #77	@ 0x4d
 800459a:	2207      	movs	r2, #7
 800459c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f002 ff01 	bl	80073ae <USB_HC_Halt>
 80045ac:	e062      	b.n	8004674 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	3344      	adds	r3, #68	@ 0x44
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	1c59      	adds	r1, r3, #1
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4403      	add	r3, r0
 80045ce:	3344      	adds	r3, #68	@ 0x44
 80045d0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	3344      	adds	r3, #68	@ 0x44
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d922      	bls.n	800462e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	3344      	adds	r3, #68	@ 0x44
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	334c      	adds	r3, #76	@ 0x4c
 800460c:	2204      	movs	r2, #4
 800460e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	334c      	adds	r3, #76	@ 0x4c
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	4619      	mov	r1, r3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f005 fa1a 	bl	8009a60 <HAL_HCD_HC_NotifyURBChange_Callback>
 800462c:	e022      	b.n	8004674 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	334c      	adds	r3, #76	@ 0x4c
 800463e:	2202      	movs	r2, #2
 8004640:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004658:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004660:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4413      	add	r3, r2
 800466a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800466e:	461a      	mov	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004680:	461a      	mov	r2, r3
 8004682:	2380      	movs	r3, #128	@ 0x80
 8004684:	6093      	str	r3, [r2, #8]
 8004686:	e217      	b.n	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	78fa      	ldrb	r2, [r7, #3]
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f002 f8e8 	bl	8006866 <USB_ReadChInterrupts>
 8004696:	4603      	mov	r3, r0
 8004698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a0:	d11b      	bne.n	80046da <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80046a2:	78fa      	ldrb	r2, [r7, #3]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	334d      	adds	r3, #77	@ 0x4d
 80046b2:	2209      	movs	r2, #9
 80046b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	78fa      	ldrb	r2, [r7, #3]
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f002 fe75 	bl	80073ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d0:	461a      	mov	r2, r3
 80046d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046d6:	6093      	str	r3, [r2, #8]
 80046d8:	e1ee      	b.n	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	4611      	mov	r1, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f002 f8bf 	bl	8006866 <USB_ReadChInterrupts>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	f040 81df 	bne.w	8004ab2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004700:	461a      	mov	r2, r3
 8004702:	2302      	movs	r3, #2
 8004704:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004706:	78fa      	ldrb	r2, [r7, #3]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	334d      	adds	r3, #77	@ 0x4d
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	f040 8093 	bne.w	8004844 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	334d      	adds	r3, #77	@ 0x4d
 800472e:	2202      	movs	r2, #2
 8004730:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004732:	78fa      	ldrb	r2, [r7, #3]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	334c      	adds	r3, #76	@ 0x4c
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004746:	78fa      	ldrb	r2, [r7, #3]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	3326      	adds	r3, #38	@ 0x26
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d00b      	beq.n	8004774 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800475c:	78fa      	ldrb	r2, [r7, #3]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	3326      	adds	r3, #38	@ 0x26
 800476c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800476e:	2b03      	cmp	r3, #3
 8004770:	f040 8190 	bne.w	8004a94 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	799b      	ldrb	r3, [r3, #6]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d115      	bne.n	80047a8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	333d      	adds	r3, #61	@ 0x3d
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	f083 0301 	eor.w	r3, r3, #1
 8004794:	b2d8      	uxtb	r0, r3
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	333d      	adds	r3, #61	@ 0x3d
 80047a4:	4602      	mov	r2, r0
 80047a6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	799b      	ldrb	r3, [r3, #6]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	f040 8171 	bne.w	8004a94 <HCD_HC_OUT_IRQHandler+0x954>
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	3334      	adds	r3, #52	@ 0x34
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8165 	beq.w	8004a94 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	3334      	adds	r3, #52	@ 0x34
 80047da:	6819      	ldr	r1, [r3, #0]
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4403      	add	r3, r0
 80047ea:	3328      	adds	r3, #40	@ 0x28
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	440b      	add	r3, r1
 80047f0:	1e59      	subs	r1, r3, #1
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4403      	add	r3, r0
 8004800:	3328      	adds	r3, #40	@ 0x28
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	fbb1 f3f3 	udiv	r3, r1, r3
 8004808:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 813f 	beq.w	8004a94 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004816:	78fa      	ldrb	r2, [r7, #3]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	333d      	adds	r3, #61	@ 0x3d
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	f083 0301 	eor.w	r3, r3, #1
 800482e:	b2d8      	uxtb	r0, r3
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	333d      	adds	r3, #61	@ 0x3d
 800483e:	4602      	mov	r2, r0
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	e127      	b.n	8004a94 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	334d      	adds	r3, #77	@ 0x4d
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b03      	cmp	r3, #3
 8004858:	d120      	bne.n	800489c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	334d      	adds	r3, #77	@ 0x4d
 800486a:	2202      	movs	r2, #2
 800486c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	331b      	adds	r3, #27
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	f040 8107 	bne.w	8004a94 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004886:	78fa      	ldrb	r2, [r7, #3]
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	334c      	adds	r3, #76	@ 0x4c
 8004896:	2202      	movs	r2, #2
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e0fb      	b.n	8004a94 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	334d      	adds	r3, #77	@ 0x4d
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d13a      	bne.n	8004928 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	334d      	adds	r3, #77	@ 0x4d
 80048c2:	2202      	movs	r2, #2
 80048c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	334c      	adds	r3, #76	@ 0x4c
 80048d6:	2202      	movs	r2, #2
 80048d8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	331b      	adds	r3, #27
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	f040 80d1 	bne.w	8004a94 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	331b      	adds	r3, #27
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4413      	add	r3, r2
 800490e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	78fa      	ldrb	r2, [r7, #3]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	440a      	add	r2, r1
 800491c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004924:	6053      	str	r3, [r2, #4]
 8004926:	e0b5      	b.n	8004a94 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	334d      	adds	r3, #77	@ 0x4d
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b05      	cmp	r3, #5
 800493c:	d114      	bne.n	8004968 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	334d      	adds	r3, #77	@ 0x4d
 800494e:	2202      	movs	r2, #2
 8004950:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	334c      	adds	r3, #76	@ 0x4c
 8004962:	2202      	movs	r2, #2
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	e095      	b.n	8004a94 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	334d      	adds	r3, #77	@ 0x4d
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b06      	cmp	r3, #6
 800497c:	d114      	bne.n	80049a8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	334d      	adds	r3, #77	@ 0x4d
 800498e:	2202      	movs	r2, #2
 8004990:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	334c      	adds	r3, #76	@ 0x4c
 80049a2:	2205      	movs	r2, #5
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	e075      	b.n	8004a94 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80049a8:	78fa      	ldrb	r2, [r7, #3]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	334d      	adds	r3, #77	@ 0x4d
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b07      	cmp	r3, #7
 80049bc:	d00a      	beq.n	80049d4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80049be:	78fa      	ldrb	r2, [r7, #3]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	334d      	adds	r3, #77	@ 0x4d
 80049ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80049d0:	2b09      	cmp	r3, #9
 80049d2:	d170      	bne.n	8004ab6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	334d      	adds	r3, #77	@ 0x4d
 80049e4:	2202      	movs	r2, #2
 80049e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80049e8:	78fa      	ldrb	r2, [r7, #3]
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	3344      	adds	r3, #68	@ 0x44
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	1c59      	adds	r1, r3, #1
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4613      	mov	r3, r2
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4403      	add	r3, r0
 8004a08:	3344      	adds	r3, #68	@ 0x44
 8004a0a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a0c:	78fa      	ldrb	r2, [r7, #3]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	3344      	adds	r3, #68	@ 0x44
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d914      	bls.n	8004a4c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	3344      	adds	r3, #68	@ 0x44
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	334c      	adds	r3, #76	@ 0x4c
 8004a46:	2204      	movs	r2, #4
 8004a48:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a4a:	e022      	b.n	8004a92 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	334c      	adds	r3, #76	@ 0x4c
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a76:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a7e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a92:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	334c      	adds	r3, #76	@ 0x4c
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f004 ffd8 	bl	8009a60 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ab0:	e002      	b.n	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004ab6:	bf00      	nop
  }
}
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b08a      	sub	sp, #40	@ 0x28
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	0c5b      	lsrs	r3, r3, #17
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004af2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d004      	beq.n	8004b04 <HCD_RXQLVL_IRQHandler+0x46>
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	f000 80b6 	beq.w	8004c6e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004b02:	e0b7      	b.n	8004c74 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80b3 	beq.w	8004c72 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	332c      	adds	r3, #44	@ 0x2c
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80a7 	beq.w	8004c72 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	3338      	adds	r3, #56	@ 0x38
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	18d1      	adds	r1, r2, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4403      	add	r3, r0
 8004b48:	3334      	adds	r3, #52	@ 0x34
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4299      	cmp	r1, r3
 8004b4e:	f200 8083 	bhi.w	8004c58 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	332c      	adds	r3, #44	@ 0x2c
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	b292      	uxth	r2, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f001 fe0f 	bl	8006790 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4613      	mov	r3, r2
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	332c      	adds	r3, #44	@ 0x2c
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	18d1      	adds	r1, r2, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4403      	add	r3, r0
 8004b96:	332c      	adds	r3, #44	@ 0x2c
 8004b98:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	3338      	adds	r3, #56	@ 0x38
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	18d1      	adds	r1, r2, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4403      	add	r3, r0
 8004bbe:	3338      	adds	r3, #56	@ 0x38
 8004bc0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	0cdb      	lsrs	r3, r3, #19
 8004bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bd6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	3328      	adds	r3, #40	@ 0x28
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d13f      	bne.n	8004c72 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d03c      	beq.n	8004c72 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c0e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c16:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c24:	461a      	mov	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	333c      	adds	r3, #60	@ 0x3c
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	f083 0301 	eor.w	r3, r3, #1
 8004c40:	b2d8      	uxtb	r0, r3
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4613      	mov	r3, r2
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	333c      	adds	r3, #60	@ 0x3c
 8004c52:	4602      	mov	r2, r0
 8004c54:	701a      	strb	r2, [r3, #0]
      break;
 8004c56:	e00c      	b.n	8004c72 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	334c      	adds	r3, #76	@ 0x4c
 8004c68:	2204      	movs	r2, #4
 8004c6a:	701a      	strb	r2, [r3, #0]
      break;
 8004c6c:	e001      	b.n	8004c72 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e000      	b.n	8004c74 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004c72:	bf00      	nop
  }
}
 8004c74:	bf00      	nop
 8004c76:	3728      	adds	r7, #40	@ 0x28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004ca8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d10b      	bne.n	8004ccc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d102      	bne.n	8004cc4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f004 feb2 	bl	8009a28 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f043 0302 	orr.w	r3, r3, #2
 8004cca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d132      	bne.n	8004d3c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f043 0308 	orr.w	r3, r3, #8
 8004cdc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d126      	bne.n	8004d36 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	7a5b      	ldrb	r3, [r3, #9]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d113      	bne.n	8004d18 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004cf6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cfa:	d106      	bne.n	8004d0a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2102      	movs	r1, #2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f001 fed4 	bl	8006ab0 <USB_InitFSLSPClkSel>
 8004d08:	e011      	b.n	8004d2e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2101      	movs	r1, #1
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 fecd 	bl	8006ab0 <USB_InitFSLSPClkSel>
 8004d16:	e00a      	b.n	8004d2e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	79db      	ldrb	r3, [r3, #7]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d106      	bne.n	8004d2e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d26:	461a      	mov	r2, r3
 8004d28:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004d2c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f004 fea4 	bl	8009a7c <HAL_HCD_PortEnabled_Callback>
 8004d34:	e002      	b.n	8004d3c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f004 feae 	bl	8009a98 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d103      	bne.n	8004d4e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f043 0320 	orr.w	r3, r3, #32
 8004d4c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d54:	461a      	mov	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	6013      	str	r3, [r2, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e12b      	b.n	8004fce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fc fc54 	bl	8001638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2224      	movs	r2, #36	@ 0x24
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dc8:	f000 fd80 	bl	80058cc <HAL_RCC_GetPCLK1Freq>
 8004dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	4a81      	ldr	r2, [pc, #516]	@ (8004fd8 <HAL_I2C_Init+0x274>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d807      	bhi.n	8004de8 <HAL_I2C_Init+0x84>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a80      	ldr	r2, [pc, #512]	@ (8004fdc <HAL_I2C_Init+0x278>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	bf94      	ite	ls
 8004de0:	2301      	movls	r3, #1
 8004de2:	2300      	movhi	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	e006      	b.n	8004df6 <HAL_I2C_Init+0x92>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4a7d      	ldr	r2, [pc, #500]	@ (8004fe0 <HAL_I2C_Init+0x27c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	bf94      	ite	ls
 8004df0:	2301      	movls	r3, #1
 8004df2:	2300      	movhi	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e0e7      	b.n	8004fce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4a78      	ldr	r2, [pc, #480]	@ (8004fe4 <HAL_I2C_Init+0x280>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	0c9b      	lsrs	r3, r3, #18
 8004e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	4a6a      	ldr	r2, [pc, #424]	@ (8004fd8 <HAL_I2C_Init+0x274>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d802      	bhi.n	8004e38 <HAL_I2C_Init+0xd4>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3301      	adds	r3, #1
 8004e36:	e009      	b.n	8004e4c <HAL_I2C_Init+0xe8>
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	4a69      	ldr	r2, [pc, #420]	@ (8004fe8 <HAL_I2C_Init+0x284>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	099b      	lsrs	r3, r3, #6
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	495c      	ldr	r1, [pc, #368]	@ (8004fd8 <HAL_I2C_Init+0x274>)
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	d819      	bhi.n	8004ea0 <HAL_I2C_Init+0x13c>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	1e59      	subs	r1, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e7a:	1c59      	adds	r1, r3, #1
 8004e7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e80:	400b      	ands	r3, r1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_I2C_Init+0x138>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1e59      	subs	r1, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e94:	3301      	adds	r3, #1
 8004e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9a:	e051      	b.n	8004f40 <HAL_I2C_Init+0x1dc>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	e04f      	b.n	8004f40 <HAL_I2C_Init+0x1dc>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d111      	bne.n	8004ecc <HAL_I2C_Init+0x168>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1e58      	subs	r0, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	440b      	add	r3, r1
 8004eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	e012      	b.n	8004ef2 <HAL_I2C_Init+0x18e>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1e58      	subs	r0, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6859      	ldr	r1, [r3, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	0099      	lsls	r1, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_I2C_Init+0x196>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e022      	b.n	8004f40 <HAL_I2C_Init+0x1dc>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10e      	bne.n	8004f20 <HAL_I2C_Init+0x1bc>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1e58      	subs	r0, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6859      	ldr	r1, [r3, #4]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	440b      	add	r3, r1
 8004f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f14:	3301      	adds	r3, #1
 8004f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f1e:	e00f      	b.n	8004f40 <HAL_I2C_Init+0x1dc>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1e58      	subs	r0, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6859      	ldr	r1, [r3, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	0099      	lsls	r1, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f36:	3301      	adds	r3, #1
 8004f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	6809      	ldr	r1, [r1, #0]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6911      	ldr	r1, [r2, #16]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68d2      	ldr	r2, [r2, #12]
 8004f7a:	4311      	orrs	r1, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	430b      	orrs	r3, r1
 8004f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695a      	ldr	r2, [r3, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	000186a0 	.word	0x000186a0
 8004fdc:	001e847f 	.word	0x001e847f
 8004fe0:	003d08ff 	.word	0x003d08ff
 8004fe4:	431bde83 	.word	0x431bde83
 8004fe8:	10624dd3 	.word	0x10624dd3

08004fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e267      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d075      	beq.n	80050f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800500a:	4b88      	ldr	r3, [pc, #544]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
 8005012:	2b04      	cmp	r3, #4
 8005014:	d00c      	beq.n	8005030 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005016:	4b85      	ldr	r3, [pc, #532]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800501e:	2b08      	cmp	r3, #8
 8005020:	d112      	bne.n	8005048 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005022:	4b82      	ldr	r3, [pc, #520]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800502a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800502e:	d10b      	bne.n	8005048 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005030:	4b7e      	ldr	r3, [pc, #504]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d05b      	beq.n	80050f4 <HAL_RCC_OscConfig+0x108>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d157      	bne.n	80050f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e242      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005050:	d106      	bne.n	8005060 <HAL_RCC_OscConfig+0x74>
 8005052:	4b76      	ldr	r3, [pc, #472]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a75      	ldr	r2, [pc, #468]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e01d      	b.n	800509c <HAL_RCC_OscConfig+0xb0>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005068:	d10c      	bne.n	8005084 <HAL_RCC_OscConfig+0x98>
 800506a:	4b70      	ldr	r3, [pc, #448]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a6f      	ldr	r2, [pc, #444]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	4b6d      	ldr	r3, [pc, #436]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a6c      	ldr	r2, [pc, #432]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 800507c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e00b      	b.n	800509c <HAL_RCC_OscConfig+0xb0>
 8005084:	4b69      	ldr	r3, [pc, #420]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a68      	ldr	r2, [pc, #416]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 800508a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	4b66      	ldr	r3, [pc, #408]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a65      	ldr	r2, [pc, #404]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800509a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d013      	beq.n	80050cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a4:	f7fc fcdc 	bl	8001a60 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ac:	f7fc fcd8 	bl	8001a60 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b64      	cmp	r3, #100	@ 0x64
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e207      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050be:	4b5b      	ldr	r3, [pc, #364]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0xc0>
 80050ca:	e014      	b.n	80050f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050cc:	f7fc fcc8 	bl	8001a60 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d4:	f7fc fcc4 	bl	8001a60 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b64      	cmp	r3, #100	@ 0x64
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e1f3      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e6:	4b51      	ldr	r3, [pc, #324]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0xe8>
 80050f2:	e000      	b.n	80050f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d063      	beq.n	80051ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005102:	4b4a      	ldr	r3, [pc, #296]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800510e:	4b47      	ldr	r3, [pc, #284]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005116:	2b08      	cmp	r3, #8
 8005118:	d11c      	bne.n	8005154 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800511a:	4b44      	ldr	r3, [pc, #272]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d116      	bne.n	8005154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005126:	4b41      	ldr	r3, [pc, #260]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_RCC_OscConfig+0x152>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d001      	beq.n	800513e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e1c7      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800513e:	4b3b      	ldr	r3, [pc, #236]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	4937      	ldr	r1, [pc, #220]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 800514e:	4313      	orrs	r3, r2
 8005150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005152:	e03a      	b.n	80051ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d020      	beq.n	800519e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800515c:	4b34      	ldr	r3, [pc, #208]	@ (8005230 <HAL_RCC_OscConfig+0x244>)
 800515e:	2201      	movs	r2, #1
 8005160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005162:	f7fc fc7d 	bl	8001a60 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005168:	e008      	b.n	800517c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516a:	f7fc fc79 	bl	8001a60 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e1a8      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517c:	4b2b      	ldr	r3, [pc, #172]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0f0      	beq.n	800516a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005188:	4b28      	ldr	r3, [pc, #160]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	4925      	ldr	r1, [pc, #148]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005198:	4313      	orrs	r3, r2
 800519a:	600b      	str	r3, [r1, #0]
 800519c:	e015      	b.n	80051ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800519e:	4b24      	ldr	r3, [pc, #144]	@ (8005230 <HAL_RCC_OscConfig+0x244>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fc fc5c 	bl	8001a60 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ac:	f7fc fc58 	bl	8001a60 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e187      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051be:	4b1b      	ldr	r3, [pc, #108]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d036      	beq.n	8005244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d016      	beq.n	800520c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051de:	4b15      	ldr	r3, [pc, #84]	@ (8005234 <HAL_RCC_OscConfig+0x248>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e4:	f7fc fc3c 	bl	8001a60 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ec:	f7fc fc38 	bl	8001a60 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e167      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fe:	4b0b      	ldr	r3, [pc, #44]	@ (800522c <HAL_RCC_OscConfig+0x240>)
 8005200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0x200>
 800520a:	e01b      	b.n	8005244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800520c:	4b09      	ldr	r3, [pc, #36]	@ (8005234 <HAL_RCC_OscConfig+0x248>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005212:	f7fc fc25 	bl	8001a60 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005218:	e00e      	b.n	8005238 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800521a:	f7fc fc21 	bl	8001a60 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d907      	bls.n	8005238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e150      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
 800522c:	40023800 	.word	0x40023800
 8005230:	42470000 	.word	0x42470000
 8005234:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005238:	4b88      	ldr	r3, [pc, #544]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 800523a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1ea      	bne.n	800521a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8097 	beq.w	8005380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005252:	2300      	movs	r3, #0
 8005254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005256:	4b81      	ldr	r3, [pc, #516]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10f      	bne.n	8005282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	4b7d      	ldr	r3, [pc, #500]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	4a7c      	ldr	r2, [pc, #496]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 800526c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005270:	6413      	str	r3, [r2, #64]	@ 0x40
 8005272:	4b7a      	ldr	r3, [pc, #488]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527e:	2301      	movs	r3, #1
 8005280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005282:	4b77      	ldr	r3, [pc, #476]	@ (8005460 <HAL_RCC_OscConfig+0x474>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d118      	bne.n	80052c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800528e:	4b74      	ldr	r3, [pc, #464]	@ (8005460 <HAL_RCC_OscConfig+0x474>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a73      	ldr	r2, [pc, #460]	@ (8005460 <HAL_RCC_OscConfig+0x474>)
 8005294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800529a:	f7fc fbe1 	bl	8001a60 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a2:	f7fc fbdd 	bl	8001a60 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e10c      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b4:	4b6a      	ldr	r3, [pc, #424]	@ (8005460 <HAL_RCC_OscConfig+0x474>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d106      	bne.n	80052d6 <HAL_RCC_OscConfig+0x2ea>
 80052c8:	4b64      	ldr	r3, [pc, #400]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052cc:	4a63      	ldr	r2, [pc, #396]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052d4:	e01c      	b.n	8005310 <HAL_RCC_OscConfig+0x324>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b05      	cmp	r3, #5
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x30c>
 80052de:	4b5f      	ldr	r3, [pc, #380]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e2:	4a5e      	ldr	r2, [pc, #376]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 80052e4:	f043 0304 	orr.w	r3, r3, #4
 80052e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ea:	4b5c      	ldr	r3, [pc, #368]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 80052ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ee:	4a5b      	ldr	r2, [pc, #364]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f6:	e00b      	b.n	8005310 <HAL_RCC_OscConfig+0x324>
 80052f8:	4b58      	ldr	r3, [pc, #352]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fc:	4a57      	ldr	r2, [pc, #348]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 80052fe:	f023 0301 	bic.w	r3, r3, #1
 8005302:	6713      	str	r3, [r2, #112]	@ 0x70
 8005304:	4b55      	ldr	r3, [pc, #340]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005308:	4a54      	ldr	r2, [pc, #336]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 800530a:	f023 0304 	bic.w	r3, r3, #4
 800530e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d015      	beq.n	8005344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005318:	f7fc fba2 	bl	8001a60 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531e:	e00a      	b.n	8005336 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005320:	f7fc fb9e 	bl	8001a60 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e0cb      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005336:	4b49      	ldr	r3, [pc, #292]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 8005338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0ee      	beq.n	8005320 <HAL_RCC_OscConfig+0x334>
 8005342:	e014      	b.n	800536e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005344:	f7fc fb8c 	bl	8001a60 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800534a:	e00a      	b.n	8005362 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534c:	f7fc fb88 	bl	8001a60 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0b5      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005362:	4b3e      	ldr	r3, [pc, #248]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1ee      	bne.n	800534c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800536e:	7dfb      	ldrb	r3, [r7, #23]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d105      	bne.n	8005380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005374:	4b39      	ldr	r3, [pc, #228]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 8005376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005378:	4a38      	ldr	r2, [pc, #224]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 800537a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800537e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 80a1 	beq.w	80054cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800538a:	4b34      	ldr	r3, [pc, #208]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 030c 	and.w	r3, r3, #12
 8005392:	2b08      	cmp	r3, #8
 8005394:	d05c      	beq.n	8005450 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d141      	bne.n	8005422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800539e:	4b31      	ldr	r3, [pc, #196]	@ (8005464 <HAL_RCC_OscConfig+0x478>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a4:	f7fc fb5c 	bl	8001a60 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ac:	f7fc fb58 	bl	8001a60 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e087      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053be:	4b27      	ldr	r3, [pc, #156]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69da      	ldr	r2, [r3, #28]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d8:	019b      	lsls	r3, r3, #6
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e0:	085b      	lsrs	r3, r3, #1
 80053e2:	3b01      	subs	r3, #1
 80053e4:	041b      	lsls	r3, r3, #16
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ec:	061b      	lsls	r3, r3, #24
 80053ee:	491b      	ldr	r1, [pc, #108]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005464 <HAL_RCC_OscConfig+0x478>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fa:	f7fc fb31 	bl	8001a60 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005402:	f7fc fb2d 	bl	8001a60 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e05c      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005414:	4b11      	ldr	r3, [pc, #68]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <HAL_RCC_OscConfig+0x416>
 8005420:	e054      	b.n	80054cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005422:	4b10      	ldr	r3, [pc, #64]	@ (8005464 <HAL_RCC_OscConfig+0x478>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005428:	f7fc fb1a 	bl	8001a60 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005430:	f7fc fb16 	bl	8001a60 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e045      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005442:	4b06      	ldr	r3, [pc, #24]	@ (800545c <HAL_RCC_OscConfig+0x470>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x444>
 800544e:	e03d      	b.n	80054cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d107      	bne.n	8005468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e038      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
 800545c:	40023800 	.word	0x40023800
 8005460:	40007000 	.word	0x40007000
 8005464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005468:	4b1b      	ldr	r3, [pc, #108]	@ (80054d8 <HAL_RCC_OscConfig+0x4ec>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d028      	beq.n	80054c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005480:	429a      	cmp	r2, r3
 8005482:	d121      	bne.n	80054c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548e:	429a      	cmp	r2, r3
 8005490:	d11a      	bne.n	80054c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005498:	4013      	ands	r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800549e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d111      	bne.n	80054c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	085b      	lsrs	r3, r3, #1
 80054b0:	3b01      	subs	r3, #1
 80054b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d107      	bne.n	80054c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d001      	beq.n	80054cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40023800 	.word	0x40023800

080054dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0cc      	b.n	800568a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054f0:	4b68      	ldr	r3, [pc, #416]	@ (8005694 <HAL_RCC_ClockConfig+0x1b8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d90c      	bls.n	8005518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054fe:	4b65      	ldr	r3, [pc, #404]	@ (8005694 <HAL_RCC_ClockConfig+0x1b8>)
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005506:	4b63      	ldr	r3, [pc, #396]	@ (8005694 <HAL_RCC_ClockConfig+0x1b8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d001      	beq.n	8005518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0b8      	b.n	800568a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d020      	beq.n	8005566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005530:	4b59      	ldr	r3, [pc, #356]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	4a58      	ldr	r2, [pc, #352]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800553a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005548:	4b53      	ldr	r3, [pc, #332]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	4a52      	ldr	r2, [pc, #328]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005554:	4b50      	ldr	r3, [pc, #320]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	494d      	ldr	r1, [pc, #308]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	4313      	orrs	r3, r2
 8005564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d044      	beq.n	80055fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d107      	bne.n	800558a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800557a:	4b47      	ldr	r3, [pc, #284]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d119      	bne.n	80055ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e07f      	b.n	800568a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d003      	beq.n	800559a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005596:	2b03      	cmp	r3, #3
 8005598:	d107      	bne.n	80055aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800559a:	4b3f      	ldr	r3, [pc, #252]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e06f      	b.n	800568a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e067      	b.n	800568a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ba:	4b37      	ldr	r3, [pc, #220]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f023 0203 	bic.w	r2, r3, #3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	4934      	ldr	r1, [pc, #208]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055cc:	f7fc fa48 	bl	8001a60 <HAL_GetTick>
 80055d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d2:	e00a      	b.n	80055ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d4:	f7fc fa44 	bl	8001a60 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e04f      	b.n	800568a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 020c 	and.w	r2, r3, #12
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d1eb      	bne.n	80055d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055fc:	4b25      	ldr	r3, [pc, #148]	@ (8005694 <HAL_RCC_ClockConfig+0x1b8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d20c      	bcs.n	8005624 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560a:	4b22      	ldr	r3, [pc, #136]	@ (8005694 <HAL_RCC_ClockConfig+0x1b8>)
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b20      	ldr	r3, [pc, #128]	@ (8005694 <HAL_RCC_ClockConfig+0x1b8>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e032      	b.n	800568a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d008      	beq.n	8005642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005630:	4b19      	ldr	r3, [pc, #100]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4916      	ldr	r1, [pc, #88]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	4313      	orrs	r3, r2
 8005640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800564e:	4b12      	ldr	r3, [pc, #72]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	490e      	ldr	r1, [pc, #56]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	4313      	orrs	r3, r2
 8005660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005662:	f000 f821 	bl	80056a8 <HAL_RCC_GetSysClockFreq>
 8005666:	4602      	mov	r2, r0
 8005668:	4b0b      	ldr	r3, [pc, #44]	@ (8005698 <HAL_RCC_ClockConfig+0x1bc>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	490a      	ldr	r1, [pc, #40]	@ (800569c <HAL_RCC_ClockConfig+0x1c0>)
 8005674:	5ccb      	ldrb	r3, [r1, r3]
 8005676:	fa22 f303 	lsr.w	r3, r2, r3
 800567a:	4a09      	ldr	r2, [pc, #36]	@ (80056a0 <HAL_RCC_ClockConfig+0x1c4>)
 800567c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800567e:	4b09      	ldr	r3, [pc, #36]	@ (80056a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f7fc f9a8 	bl	80019d8 <HAL_InitTick>

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40023c00 	.word	0x40023c00
 8005698:	40023800 	.word	0x40023800
 800569c:	0800b19c 	.word	0x0800b19c
 80056a0:	20000000 	.word	0x20000000
 80056a4:	20000004 	.word	0x20000004

080056a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056ac:	b094      	sub	sp, #80	@ 0x50
 80056ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056c0:	4b79      	ldr	r3, [pc, #484]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 030c 	and.w	r3, r3, #12
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d00d      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0x40>
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	f200 80e1 	bhi.w	8005894 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <HAL_RCC_GetSysClockFreq+0x34>
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d003      	beq.n	80056e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80056da:	e0db      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056dc:	4b73      	ldr	r3, [pc, #460]	@ (80058ac <HAL_RCC_GetSysClockFreq+0x204>)
 80056de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056e0:	e0db      	b.n	800589a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056e2:	4b73      	ldr	r3, [pc, #460]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80056e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056e6:	e0d8      	b.n	800589a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056e8:	4b6f      	ldr	r3, [pc, #444]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056f2:	4b6d      	ldr	r3, [pc, #436]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d063      	beq.n	80057c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056fe:	4b6a      	ldr	r3, [pc, #424]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	099b      	lsrs	r3, r3, #6
 8005704:	2200      	movs	r2, #0
 8005706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005708:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005710:	633b      	str	r3, [r7, #48]	@ 0x30
 8005712:	2300      	movs	r3, #0
 8005714:	637b      	str	r3, [r7, #52]	@ 0x34
 8005716:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800571a:	4622      	mov	r2, r4
 800571c:	462b      	mov	r3, r5
 800571e:	f04f 0000 	mov.w	r0, #0
 8005722:	f04f 0100 	mov.w	r1, #0
 8005726:	0159      	lsls	r1, r3, #5
 8005728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800572c:	0150      	lsls	r0, r2, #5
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4621      	mov	r1, r4
 8005734:	1a51      	subs	r1, r2, r1
 8005736:	6139      	str	r1, [r7, #16]
 8005738:	4629      	mov	r1, r5
 800573a:	eb63 0301 	sbc.w	r3, r3, r1
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800574c:	4659      	mov	r1, fp
 800574e:	018b      	lsls	r3, r1, #6
 8005750:	4651      	mov	r1, sl
 8005752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005756:	4651      	mov	r1, sl
 8005758:	018a      	lsls	r2, r1, #6
 800575a:	4651      	mov	r1, sl
 800575c:	ebb2 0801 	subs.w	r8, r2, r1
 8005760:	4659      	mov	r1, fp
 8005762:	eb63 0901 	sbc.w	r9, r3, r1
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800577a:	4690      	mov	r8, r2
 800577c:	4699      	mov	r9, r3
 800577e:	4623      	mov	r3, r4
 8005780:	eb18 0303 	adds.w	r3, r8, r3
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	462b      	mov	r3, r5
 8005788:	eb49 0303 	adc.w	r3, r9, r3
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800579a:	4629      	mov	r1, r5
 800579c:	024b      	lsls	r3, r1, #9
 800579e:	4621      	mov	r1, r4
 80057a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057a4:	4621      	mov	r1, r4
 80057a6:	024a      	lsls	r2, r1, #9
 80057a8:	4610      	mov	r0, r2
 80057aa:	4619      	mov	r1, r3
 80057ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ae:	2200      	movs	r2, #0
 80057b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057b8:	f7fb f9a4 	bl	8000b04 <__aeabi_uldivmod>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4613      	mov	r3, r2
 80057c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057c4:	e058      	b.n	8005878 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057c6:	4b38      	ldr	r3, [pc, #224]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	099b      	lsrs	r3, r3, #6
 80057cc:	2200      	movs	r2, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	4611      	mov	r1, r2
 80057d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057d6:	623b      	str	r3, [r7, #32]
 80057d8:	2300      	movs	r3, #0
 80057da:	627b      	str	r3, [r7, #36]	@ 0x24
 80057dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057e0:	4642      	mov	r2, r8
 80057e2:	464b      	mov	r3, r9
 80057e4:	f04f 0000 	mov.w	r0, #0
 80057e8:	f04f 0100 	mov.w	r1, #0
 80057ec:	0159      	lsls	r1, r3, #5
 80057ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057f2:	0150      	lsls	r0, r2, #5
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4641      	mov	r1, r8
 80057fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80057fe:	4649      	mov	r1, r9
 8005800:	eb63 0b01 	sbc.w	fp, r3, r1
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005810:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005814:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005818:	ebb2 040a 	subs.w	r4, r2, sl
 800581c:	eb63 050b 	sbc.w	r5, r3, fp
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	00eb      	lsls	r3, r5, #3
 800582a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800582e:	00e2      	lsls	r2, r4, #3
 8005830:	4614      	mov	r4, r2
 8005832:	461d      	mov	r5, r3
 8005834:	4643      	mov	r3, r8
 8005836:	18e3      	adds	r3, r4, r3
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	464b      	mov	r3, r9
 800583c:	eb45 0303 	adc.w	r3, r5, r3
 8005840:	607b      	str	r3, [r7, #4]
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800584e:	4629      	mov	r1, r5
 8005850:	028b      	lsls	r3, r1, #10
 8005852:	4621      	mov	r1, r4
 8005854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005858:	4621      	mov	r1, r4
 800585a:	028a      	lsls	r2, r1, #10
 800585c:	4610      	mov	r0, r2
 800585e:	4619      	mov	r1, r3
 8005860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005862:	2200      	movs	r2, #0
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	61fa      	str	r2, [r7, #28]
 8005868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800586c:	f7fb f94a 	bl	8000b04 <__aeabi_uldivmod>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4613      	mov	r3, r2
 8005876:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005878:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	0c1b      	lsrs	r3, r3, #16
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	3301      	adds	r3, #1
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005888:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800588a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800588c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005890:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005892:	e002      	b.n	800589a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005894:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005896:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800589a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800589c:	4618      	mov	r0, r3
 800589e:	3750      	adds	r7, #80	@ 0x50
 80058a0:	46bd      	mov	sp, r7
 80058a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058a6:	bf00      	nop
 80058a8:	40023800 	.word	0x40023800
 80058ac:	00f42400 	.word	0x00f42400
 80058b0:	007a1200 	.word	0x007a1200

080058b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058b8:	4b03      	ldr	r3, [pc, #12]	@ (80058c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058ba:	681b      	ldr	r3, [r3, #0]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	20000000 	.word	0x20000000

080058cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058d0:	f7ff fff0 	bl	80058b4 <HAL_RCC_GetHCLKFreq>
 80058d4:	4602      	mov	r2, r0
 80058d6:	4b05      	ldr	r3, [pc, #20]	@ (80058ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	0a9b      	lsrs	r3, r3, #10
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	4903      	ldr	r1, [pc, #12]	@ (80058f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058e2:	5ccb      	ldrb	r3, [r1, r3]
 80058e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40023800 	.word	0x40023800
 80058f0:	0800b1ac 	.word	0x0800b1ac

080058f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e07b      	b.n	80059fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	2b00      	cmp	r3, #0
 800590c:	d108      	bne.n	8005920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005916:	d009      	beq.n	800592c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	61da      	str	r2, [r3, #28]
 800591e:	e005      	b.n	800592c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fb febe 	bl	80016c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b0:	ea42 0103 	orr.w	r1, r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	0c1b      	lsrs	r3, r3, #16
 80059ca:	f003 0104 	and.w	r1, r3, #4
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	f003 0210 	and.w	r2, r3, #16
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e041      	b.n	8005a9c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7fb fedb 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f000 fa47 	bl	8005ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d001      	beq.n	8005abc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e046      	b.n	8005b4a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a23      	ldr	r2, [pc, #140]	@ (8005b58 <HAL_TIM_Base_Start+0xb4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d022      	beq.n	8005b14 <HAL_TIM_Base_Start+0x70>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad6:	d01d      	beq.n	8005b14 <HAL_TIM_Base_Start+0x70>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a1f      	ldr	r2, [pc, #124]	@ (8005b5c <HAL_TIM_Base_Start+0xb8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d018      	beq.n	8005b14 <HAL_TIM_Base_Start+0x70>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b60 <HAL_TIM_Base_Start+0xbc>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d013      	beq.n	8005b14 <HAL_TIM_Base_Start+0x70>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b64 <HAL_TIM_Base_Start+0xc0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00e      	beq.n	8005b14 <HAL_TIM_Base_Start+0x70>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1b      	ldr	r2, [pc, #108]	@ (8005b68 <HAL_TIM_Base_Start+0xc4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d009      	beq.n	8005b14 <HAL_TIM_Base_Start+0x70>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a19      	ldr	r2, [pc, #100]	@ (8005b6c <HAL_TIM_Base_Start+0xc8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d004      	beq.n	8005b14 <HAL_TIM_Base_Start+0x70>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a18      	ldr	r2, [pc, #96]	@ (8005b70 <HAL_TIM_Base_Start+0xcc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d111      	bne.n	8005b38 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	d010      	beq.n	8005b48 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0201 	orr.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b36:	e007      	b.n	8005b48 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40000400 	.word	0x40000400
 8005b60:	40000800 	.word	0x40000800
 8005b64:	40000c00 	.word	0x40000c00
 8005b68:	40010400 	.word	0x40010400
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40001800 	.word	0x40001800

08005b74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e041      	b.n	8005c0a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fb fddc 	bl	8001758 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f000 f990 	bl	8005ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b086      	sub	sp, #24
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e088      	b.n	8005d42 <HAL_TIM_IC_ConfigChannel+0x130>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d11b      	bne.n	8005c76 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005c4e:	f000 f9ef 	bl	8006030 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 020c 	bic.w	r2, r2, #12
 8005c60:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6999      	ldr	r1, [r3, #24]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	619a      	str	r2, [r3, #24]
 8005c74:	e060      	b.n	8005d38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	d11c      	bne.n	8005cb6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005c8c:	f000 fa73 	bl	8006176 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699a      	ldr	r2, [r3, #24]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c9e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6999      	ldr	r1, [r3, #24]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	021a      	lsls	r2, r3, #8
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	619a      	str	r2, [r3, #24]
 8005cb4:	e040      	b.n	8005d38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d11b      	bne.n	8005cf4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005ccc:	f000 fac0 	bl	8006250 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	69da      	ldr	r2, [r3, #28]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 020c 	bic.w	r2, r2, #12
 8005cde:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69d9      	ldr	r1, [r3, #28]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	61da      	str	r2, [r3, #28]
 8005cf2:	e021      	b.n	8005d38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	d11c      	bne.n	8005d34 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d0a:	f000 fadd 	bl	80062c8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d1c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69d9      	ldr	r1, [r3, #28]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	021a      	lsls	r2, r3, #8
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	61da      	str	r2, [r3, #28]
 8005d32:	e001      	b.n	8005d38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_TIM_ConfigClockSource+0x1c>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e0b4      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x186>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2202      	movs	r2, #2
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d8c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d9e:	d03e      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0xd4>
 8005da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005da4:	f200 8087 	bhi.w	8005eb6 <HAL_TIM_ConfigClockSource+0x16c>
 8005da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dac:	f000 8086 	beq.w	8005ebc <HAL_TIM_ConfigClockSource+0x172>
 8005db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005db4:	d87f      	bhi.n	8005eb6 <HAL_TIM_ConfigClockSource+0x16c>
 8005db6:	2b70      	cmp	r3, #112	@ 0x70
 8005db8:	d01a      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0xa6>
 8005dba:	2b70      	cmp	r3, #112	@ 0x70
 8005dbc:	d87b      	bhi.n	8005eb6 <HAL_TIM_ConfigClockSource+0x16c>
 8005dbe:	2b60      	cmp	r3, #96	@ 0x60
 8005dc0:	d050      	beq.n	8005e64 <HAL_TIM_ConfigClockSource+0x11a>
 8005dc2:	2b60      	cmp	r3, #96	@ 0x60
 8005dc4:	d877      	bhi.n	8005eb6 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc6:	2b50      	cmp	r3, #80	@ 0x50
 8005dc8:	d03c      	beq.n	8005e44 <HAL_TIM_ConfigClockSource+0xfa>
 8005dca:	2b50      	cmp	r3, #80	@ 0x50
 8005dcc:	d873      	bhi.n	8005eb6 <HAL_TIM_ConfigClockSource+0x16c>
 8005dce:	2b40      	cmp	r3, #64	@ 0x40
 8005dd0:	d058      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0x13a>
 8005dd2:	2b40      	cmp	r3, #64	@ 0x40
 8005dd4:	d86f      	bhi.n	8005eb6 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd6:	2b30      	cmp	r3, #48	@ 0x30
 8005dd8:	d064      	beq.n	8005ea4 <HAL_TIM_ConfigClockSource+0x15a>
 8005dda:	2b30      	cmp	r3, #48	@ 0x30
 8005ddc:	d86b      	bhi.n	8005eb6 <HAL_TIM_ConfigClockSource+0x16c>
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d060      	beq.n	8005ea4 <HAL_TIM_ConfigClockSource+0x15a>
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	d867      	bhi.n	8005eb6 <HAL_TIM_ConfigClockSource+0x16c>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d05c      	beq.n	8005ea4 <HAL_TIM_ConfigClockSource+0x15a>
 8005dea:	2b10      	cmp	r3, #16
 8005dec:	d05a      	beq.n	8005ea4 <HAL_TIM_ConfigClockSource+0x15a>
 8005dee:	e062      	b.n	8005eb6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e00:	f000 faba 	bl	8006378 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e12:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	609a      	str	r2, [r3, #8]
      break;
 8005e1c:	e04f      	b.n	8005ebe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e2e:	f000 faa3 	bl	8006378 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e40:	609a      	str	r2, [r3, #8]
      break;
 8005e42:	e03c      	b.n	8005ebe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e50:	461a      	mov	r2, r3
 8005e52:	f000 f961 	bl	8006118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2150      	movs	r1, #80	@ 0x50
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fa70 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 8005e62:	e02c      	b.n	8005ebe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e70:	461a      	mov	r2, r3
 8005e72:	f000 f9bd 	bl	80061f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2160      	movs	r1, #96	@ 0x60
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fa60 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 8005e82:	e01c      	b.n	8005ebe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e90:	461a      	mov	r2, r3
 8005e92:	f000 f941 	bl	8006118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2140      	movs	r1, #64	@ 0x40
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fa50 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 8005ea2:	e00c      	b.n	8005ebe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f000 fa47 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 8005eb4:	e003      	b.n	8005ebe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8005eba:	e000      	b.n	8005ebe <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ebc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a46      	ldr	r2, [pc, #280]	@ (8006004 <TIM_Base_SetConfig+0x12c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef6:	d00f      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a43      	ldr	r2, [pc, #268]	@ (8006008 <TIM_Base_SetConfig+0x130>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00b      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a42      	ldr	r2, [pc, #264]	@ (800600c <TIM_Base_SetConfig+0x134>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d007      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a41      	ldr	r2, [pc, #260]	@ (8006010 <TIM_Base_SetConfig+0x138>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a40      	ldr	r2, [pc, #256]	@ (8006014 <TIM_Base_SetConfig+0x13c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d108      	bne.n	8005f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a35      	ldr	r2, [pc, #212]	@ (8006004 <TIM_Base_SetConfig+0x12c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d02b      	beq.n	8005f8a <TIM_Base_SetConfig+0xb2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f38:	d027      	beq.n	8005f8a <TIM_Base_SetConfig+0xb2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a32      	ldr	r2, [pc, #200]	@ (8006008 <TIM_Base_SetConfig+0x130>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d023      	beq.n	8005f8a <TIM_Base_SetConfig+0xb2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a31      	ldr	r2, [pc, #196]	@ (800600c <TIM_Base_SetConfig+0x134>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d01f      	beq.n	8005f8a <TIM_Base_SetConfig+0xb2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a30      	ldr	r2, [pc, #192]	@ (8006010 <TIM_Base_SetConfig+0x138>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d01b      	beq.n	8005f8a <TIM_Base_SetConfig+0xb2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2f      	ldr	r2, [pc, #188]	@ (8006014 <TIM_Base_SetConfig+0x13c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d017      	beq.n	8005f8a <TIM_Base_SetConfig+0xb2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006018 <TIM_Base_SetConfig+0x140>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d013      	beq.n	8005f8a <TIM_Base_SetConfig+0xb2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2d      	ldr	r2, [pc, #180]	@ (800601c <TIM_Base_SetConfig+0x144>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00f      	beq.n	8005f8a <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8006020 <TIM_Base_SetConfig+0x148>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00b      	beq.n	8005f8a <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a2b      	ldr	r2, [pc, #172]	@ (8006024 <TIM_Base_SetConfig+0x14c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d007      	beq.n	8005f8a <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8006028 <TIM_Base_SetConfig+0x150>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a29      	ldr	r2, [pc, #164]	@ (800602c <TIM_Base_SetConfig+0x154>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d108      	bne.n	8005f9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a10      	ldr	r2, [pc, #64]	@ (8006004 <TIM_Base_SetConfig+0x12c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d003      	beq.n	8005fd0 <TIM_Base_SetConfig+0xf8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a12      	ldr	r2, [pc, #72]	@ (8006014 <TIM_Base_SetConfig+0x13c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d103      	bne.n	8005fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d105      	bne.n	8005ff6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f023 0201 	bic.w	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	611a      	str	r2, [r3, #16]
  }
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40010400 	.word	0x40010400
 8006018:	40014000 	.word	0x40014000
 800601c:	40014400 	.word	0x40014400
 8006020:	40014800 	.word	0x40014800
 8006024:	40001800 	.word	0x40001800
 8006028:	40001c00 	.word	0x40001c00
 800602c:	40002000 	.word	0x40002000

08006030 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	f023 0201 	bic.w	r2, r3, #1
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4a28      	ldr	r2, [pc, #160]	@ (80060fc <TIM_TI1_SetConfig+0xcc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d01b      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006064:	d017      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4a25      	ldr	r2, [pc, #148]	@ (8006100 <TIM_TI1_SetConfig+0xd0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d013      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4a24      	ldr	r2, [pc, #144]	@ (8006104 <TIM_TI1_SetConfig+0xd4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00f      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4a23      	ldr	r2, [pc, #140]	@ (8006108 <TIM_TI1_SetConfig+0xd8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00b      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4a22      	ldr	r2, [pc, #136]	@ (800610c <TIM_TI1_SetConfig+0xdc>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d007      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a21      	ldr	r2, [pc, #132]	@ (8006110 <TIM_TI1_SetConfig+0xe0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d003      	beq.n	8006096 <TIM_TI1_SetConfig+0x66>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4a20      	ldr	r2, [pc, #128]	@ (8006114 <TIM_TI1_SetConfig+0xe4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d101      	bne.n	800609a <TIM_TI1_SetConfig+0x6a>
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <TIM_TI1_SetConfig+0x6c>
 800609a:	2300      	movs	r3, #0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f023 0303 	bic.w	r3, r3, #3
 80060a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	e003      	b.n	80060ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f023 030a 	bic.w	r3, r3, #10
 80060d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f003 030a 	and.w	r3, r3, #10
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	621a      	str	r2, [r3, #32]
}
 80060ee:	bf00      	nop
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40010000 	.word	0x40010000
 8006100:	40000400 	.word	0x40000400
 8006104:	40000800 	.word	0x40000800
 8006108:	40000c00 	.word	0x40000c00
 800610c:	40010400 	.word	0x40010400
 8006110:	40014000 	.word	0x40014000
 8006114:	40001800 	.word	0x40001800

08006118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	f023 0201 	bic.w	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f023 030a 	bic.w	r3, r3, #10
 8006154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
 8006182:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f023 0210 	bic.w	r2, r3, #16
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	031b      	lsls	r3, r3, #12
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f023 0210 	bic.w	r2, r3, #16
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800621a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	031b      	lsls	r3, r3, #12
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800622c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	621a      	str	r2, [r3, #32]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f023 0303 	bic.w	r3, r3, #3
 800627c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800628c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	b2db      	uxtb	r3, r3
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80062a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	621a      	str	r2, [r3, #32]
}
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006306:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	031b      	lsls	r3, r3, #12
 800630c:	b29b      	uxth	r3, r3
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800631a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	031b      	lsls	r3, r3, #12
 8006320:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	bf00      	nop
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006342:	b480      	push	{r7}
 8006344:	b085      	sub	sp, #20
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	f043 0307 	orr.w	r3, r3, #7
 8006364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	609a      	str	r2, [r3, #8]
}
 800636c:	bf00      	nop
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	021a      	lsls	r2, r3, #8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	431a      	orrs	r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4313      	orrs	r3, r2
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	609a      	str	r2, [r3, #8]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e05a      	b.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a21      	ldr	r2, [pc, #132]	@ (8006494 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d022      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800641c:	d01d      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1d      	ldr	r2, [pc, #116]	@ (8006498 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d018      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1b      	ldr	r2, [pc, #108]	@ (800649c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1a      	ldr	r2, [pc, #104]	@ (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00e      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a18      	ldr	r2, [pc, #96]	@ (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d009      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a17      	ldr	r2, [pc, #92]	@ (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d004      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a15      	ldr	r2, [pc, #84]	@ (80064ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d10c      	bne.n	8006474 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	4313      	orrs	r3, r2
 800646a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40010000 	.word	0x40010000
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40000c00 	.word	0x40000c00
 80064a4:	40010400 	.word	0x40010400
 80064a8:	40014000 	.word	0x40014000
 80064ac:	40001800 	.word	0x40001800

080064b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064b0:	b084      	sub	sp, #16
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	f107 001c 	add.w	r0, r7, #28
 80064be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d123      	bne.n	8006512 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80064de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d105      	bne.n	8006506 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f9dc 	bl	80068c4 <USB_CoreReset>
 800650c:	4603      	mov	r3, r0
 800650e:	73fb      	strb	r3, [r7, #15]
 8006510:	e01b      	b.n	800654a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f9d0 	bl	80068c4 <USB_CoreReset>
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006528:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800652c:	2b00      	cmp	r3, #0
 800652e:	d106      	bne.n	800653e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006534:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	639a      	str	r2, [r3, #56]	@ 0x38
 800653c:	e005      	b.n	800654a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006542:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800654a:	7fbb      	ldrb	r3, [r7, #30]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d10b      	bne.n	8006568 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f043 0206 	orr.w	r2, r3, #6
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f043 0220 	orr.w	r2, r3, #32
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006574:	b004      	add	sp, #16
 8006576:	4770      	bx	lr

08006578 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f043 0201 	orr.w	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f023 0201 	bic.w	r2, r3, #1
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d115      	bne.n	800660a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065ea:	200a      	movs	r0, #10
 80065ec:	f7fb fa44 	bl	8001a78 <HAL_Delay>
      ms += 10U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	330a      	adds	r3, #10
 80065f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f956 	bl	80068a8 <USB_GetMode>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d01e      	beq.n	8006640 <USB_SetCurrentMode+0x84>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2bc7      	cmp	r3, #199	@ 0xc7
 8006606:	d9f0      	bls.n	80065ea <USB_SetCurrentMode+0x2e>
 8006608:	e01a      	b.n	8006640 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d115      	bne.n	800663c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800661c:	200a      	movs	r0, #10
 800661e:	f7fb fa2b 	bl	8001a78 <HAL_Delay>
      ms += 10U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	330a      	adds	r3, #10
 8006626:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f93d 	bl	80068a8 <USB_GetMode>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <USB_SetCurrentMode+0x84>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2bc7      	cmp	r3, #199	@ 0xc7
 8006638:	d9f0      	bls.n	800661c <USB_SetCurrentMode+0x60>
 800663a:	e001      	b.n	8006640 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e005      	b.n	800664c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2bc8      	cmp	r3, #200	@ 0xc8
 8006644:	d101      	bne.n	800664a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3301      	adds	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800666e:	d901      	bls.n	8006674 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e01b      	b.n	80066ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	daf2      	bge.n	8006662 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	019b      	lsls	r3, r3, #6
 8006684:	f043 0220 	orr.w	r2, r3, #32
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3301      	adds	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006698:	d901      	bls.n	800669e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e006      	b.n	80066ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d0f0      	beq.n	800668c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3301      	adds	r3, #1
 80066c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066d0:	d901      	bls.n	80066d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e018      	b.n	8006708 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	daf2      	bge.n	80066c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2210      	movs	r2, #16
 80066e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066f4:	d901      	bls.n	80066fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e006      	b.n	8006708 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f003 0310 	and.w	r3, r3, #16
 8006702:	2b10      	cmp	r3, #16
 8006704:	d0f0      	beq.n	80066e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006714:	b480      	push	{r7}
 8006716:	b089      	sub	sp, #36	@ 0x24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	4611      	mov	r1, r2
 8006720:	461a      	mov	r2, r3
 8006722:	460b      	mov	r3, r1
 8006724:	71fb      	strb	r3, [r7, #7]
 8006726:	4613      	mov	r3, r2
 8006728:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006732:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006736:	2b00      	cmp	r3, #0
 8006738:	d123      	bne.n	8006782 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800673a:	88bb      	ldrh	r3, [r7, #4]
 800673c:	3303      	adds	r3, #3
 800673e:	089b      	lsrs	r3, r3, #2
 8006740:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006742:	2300      	movs	r3, #0
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	e018      	b.n	800677a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	031a      	lsls	r2, r3, #12
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	4413      	add	r3, r2
 8006750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006754:	461a      	mov	r2, r3
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	3301      	adds	r3, #1
 8006760:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	3301      	adds	r3, #1
 8006766:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	3301      	adds	r3, #1
 800676c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	3301      	adds	r3, #1
 8006772:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	3301      	adds	r3, #1
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	429a      	cmp	r2, r3
 8006780:	d3e2      	bcc.n	8006748 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3724      	adds	r7, #36	@ 0x24
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006790:	b480      	push	{r7}
 8006792:	b08b      	sub	sp, #44	@ 0x2c
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067a6:	88fb      	ldrh	r3, [r7, #6]
 80067a8:	089b      	lsrs	r3, r3, #2
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	f003 0303 	and.w	r3, r3, #3
 80067b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067b6:	2300      	movs	r3, #0
 80067b8:	623b      	str	r3, [r7, #32]
 80067ba:	e014      	b.n	80067e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	3301      	adds	r3, #1
 80067cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	3301      	adds	r3, #1
 80067d2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	3301      	adds	r3, #1
 80067d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	3301      	adds	r3, #1
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	3301      	adds	r3, #1
 80067e4:	623b      	str	r3, [r7, #32]
 80067e6:	6a3a      	ldr	r2, [r7, #32]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d3e6      	bcc.n	80067bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067ee:	8bfb      	ldrh	r3, [r7, #30]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d01e      	beq.n	8006832 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067fe:	461a      	mov	r2, r3
 8006800:	f107 0310 	add.w	r3, r7, #16
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	fa22 f303 	lsr.w	r3, r2, r3
 8006814:	b2da      	uxtb	r2, r3
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	701a      	strb	r2, [r3, #0]
      i++;
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	3301      	adds	r3, #1
 800681e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	3301      	adds	r3, #1
 8006824:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006826:	8bfb      	ldrh	r3, [r7, #30]
 8006828:	3b01      	subs	r3, #1
 800682a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800682c:	8bfb      	ldrh	r3, [r7, #30]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1ea      	bne.n	8006808 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006834:	4618      	mov	r0, r3
 8006836:	372c      	adds	r7, #44	@ 0x2c
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4013      	ands	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006858:	68fb      	ldr	r3, [r7, #12]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	4013      	ands	r3, r2
 8006898:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800689a:	68bb      	ldr	r3, [r7, #8]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f003 0301 	and.w	r3, r3, #1
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3301      	adds	r3, #1
 80068d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068dc:	d901      	bls.n	80068e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e01b      	b.n	800691a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	daf2      	bge.n	80068d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f043 0201 	orr.w	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3301      	adds	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006906:	d901      	bls.n	800690c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e006      	b.n	800691a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b01      	cmp	r3, #1
 8006916:	d0f0      	beq.n	80068fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006928:	b084      	sub	sp, #16
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006948:	461a      	mov	r2, r3
 800694a:	2300      	movs	r3, #0
 800694c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006952:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	d119      	bne.n	80069b2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800697e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006982:	2b01      	cmp	r3, #1
 8006984:	d10a      	bne.n	800699c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006994:	f043 0304 	orr.w	r3, r3, #4
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	e014      	b.n	80069c6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80069aa:	f023 0304 	bic.w	r3, r3, #4
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	e009      	b.n	80069c6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80069c0:	f023 0304 	bic.w	r3, r3, #4
 80069c4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069c6:	2110      	movs	r1, #16
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff fe43 	bl	8006654 <USB_FlushTxFifo>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff fe6d 	bl	80066b8 <USB_FlushRxFifo>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80069e8:	2300      	movs	r3, #0
 80069ea:	613b      	str	r3, [r7, #16]
 80069ec:	e015      	b.n	8006a1a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069fa:	461a      	mov	r2, r3
 80069fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006a00:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a0e:	461a      	mov	r2, r3
 8006a10:	2300      	movs	r3, #0
 8006a12:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	3301      	adds	r3, #1
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a1e:	461a      	mov	r2, r3
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d3e3      	bcc.n	80069ee <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a32:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a18      	ldr	r2, [pc, #96]	@ (8006a98 <USB_HostInit+0x170>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d10b      	bne.n	8006a54 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a42:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a15      	ldr	r2, [pc, #84]	@ (8006a9c <USB_HostInit+0x174>)
 8006a48:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a14      	ldr	r2, [pc, #80]	@ (8006aa0 <USB_HostInit+0x178>)
 8006a4e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006a52:	e009      	b.n	8006a68 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2280      	movs	r2, #128	@ 0x80
 8006a58:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a11      	ldr	r2, [pc, #68]	@ (8006aa4 <USB_HostInit+0x17c>)
 8006a5e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a11      	ldr	r2, [pc, #68]	@ (8006aa8 <USB_HostInit+0x180>)
 8006a64:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d105      	bne.n	8006a7c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	f043 0210 	orr.w	r2, r3, #16
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	699a      	ldr	r2, [r3, #24]
 8006a80:	4b0a      	ldr	r3, [pc, #40]	@ (8006aac <USB_HostInit+0x184>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a94:	b004      	add	sp, #16
 8006a96:	4770      	bx	lr
 8006a98:	40040000 	.word	0x40040000
 8006a9c:	01000200 	.word	0x01000200
 8006aa0:	00e00300 	.word	0x00e00300
 8006aa4:	00600080 	.word	0x00600080
 8006aa8:	004000e0 	.word	0x004000e0
 8006aac:	a3200008 	.word	0xa3200008

08006ab0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ace:	f023 0303 	bic.w	r3, r3, #3
 8006ad2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	68f9      	ldr	r1, [r7, #12]
 8006ae4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d107      	bne.n	8006b02 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006af8:	461a      	mov	r2, r3
 8006afa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006afe:	6053      	str	r3, [r2, #4]
 8006b00:	e00c      	b.n	8006b1c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d107      	bne.n	8006b18 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006b14:	6053      	str	r3, [r2, #4]
 8006b16:	e001      	b.n	8006b1c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006b4a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b58:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006b5a:	2064      	movs	r0, #100	@ 0x64
 8006b5c:	f7fa ff8c 	bl	8001a78 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006b68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b6c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006b6e:	200a      	movs	r0, #10
 8006b70:	f7fa ff82 	bl	8001a78 <HAL_Delay>

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b085      	sub	sp, #20
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006ba2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <USB_DriveVbus+0x44>
 8006bae:	78fb      	ldrb	r3, [r7, #3]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d106      	bne.n	8006bc2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006bbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006bc0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bcc:	d109      	bne.n	8006be2 <USB_DriveVbus+0x64>
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006bdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006be0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	0c5b      	lsrs	r3, r3, #17
 8006c0e:	f003 0303 	and.w	r3, r3, #3
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b085      	sub	sp, #20
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	b29b      	uxth	r3, r3
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	4608      	mov	r0, r1
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4603      	mov	r3, r0
 8006c50:	70fb      	strb	r3, [r7, #3]
 8006c52:	460b      	mov	r3, r1
 8006c54:	70bb      	strb	r3, [r7, #2]
 8006c56:	4613      	mov	r3, r2
 8006c58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f04f 33ff 	mov.w	r3, #4294967295
 8006c74:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006c76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d87c      	bhi.n	8006d78 <USB_HC_Init+0x138>
 8006c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c84 <USB_HC_Init+0x44>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006c95 	.word	0x08006c95
 8006c88:	08006d3b 	.word	0x08006d3b
 8006c8c:	08006c95 	.word	0x08006c95
 8006c90:	08006cfd 	.word	0x08006cfd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006ca6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006ca8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	da10      	bge.n	8006cd2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	78fa      	ldrb	r2, [r7, #3]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cce:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006cd0:	e055      	b.n	8006d7e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a6f      	ldr	r2, [pc, #444]	@ (8006e94 <USB_HC_Init+0x254>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d151      	bne.n	8006d7e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	78fa      	ldrb	r2, [r7, #3]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cf4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006cf8:	60d3      	str	r3, [r2, #12]
      break;
 8006cfa:	e040      	b.n	8006d7e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006d0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da34      	bge.n	8006d82 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d36:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006d38:	e023      	b.n	8006d82 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d46:	461a      	mov	r2, r3
 8006d48:	f240 2325 	movw	r3, #549	@ 0x225
 8006d4c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	da17      	bge.n	8006d86 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	0151      	lsls	r1, r2, #5
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	440a      	add	r2, r1
 8006d6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d70:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006d74:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006d76:	e006      	b.n	8006d86 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	77fb      	strb	r3, [r7, #31]
      break;
 8006d7c:	e004      	b.n	8006d88 <USB_HC_Init+0x148>
      break;
 8006d7e:	bf00      	nop
 8006d80:	e002      	b.n	8006d88 <USB_HC_Init+0x148>
      break;
 8006d82:	bf00      	nop
 8006d84:	e000      	b.n	8006d88 <USB_HC_Init+0x148>
      break;
 8006d86:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d94:	461a      	mov	r2, r3
 8006d96:	2300      	movs	r3, #0
 8006d98:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	78fa      	ldrb	r2, [r7, #3]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006db4:	f043 0302 	orr.w	r3, r3, #2
 8006db8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dc0:	699a      	ldr	r2, [r3, #24]
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	2101      	movs	r1, #1
 8006dca:	fa01 f303 	lsl.w	r3, r1, r3
 8006dce:	6939      	ldr	r1, [r7, #16]
 8006dd0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006de4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	da03      	bge.n	8006df4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006dec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	e001      	b.n	8006df8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff fef9 	bl	8006bf0 <USB_GetHostSpeed>
 8006dfe:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006e00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d106      	bne.n	8006e16 <USB_HC_Init+0x1d6>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d003      	beq.n	8006e16 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e12:	617b      	str	r3, [r7, #20]
 8006e14:	e001      	b.n	8006e1a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e1a:	787b      	ldrb	r3, [r7, #1]
 8006e1c:	059b      	lsls	r3, r3, #22
 8006e1e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e22:	78bb      	ldrb	r3, [r7, #2]
 8006e24:	02db      	lsls	r3, r3, #11
 8006e26:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e2a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006e30:	049b      	lsls	r3, r3, #18
 8006e32:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e36:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006e38:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e3e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	431a      	orrs	r2, r3
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e48:	78fa      	ldrb	r2, [r7, #3]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006e54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e58:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006e5a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d003      	beq.n	8006e6a <USB_HC_Init+0x22a>
 8006e62:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d10f      	bne.n	8006e8a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006e6a:	78fb      	ldrb	r3, [r7, #3]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	78fa      	ldrb	r2, [r7, #3]
 8006e7a:	0151      	lsls	r1, r2, #5
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	440a      	add	r2, r1
 8006e80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e88:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006e8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	40040000 	.word	0x40040000

08006e98 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08c      	sub	sp, #48	@ 0x30
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	785b      	ldrb	r3, [r3, #1]
 8006eae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006eb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006eb4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4a5d      	ldr	r2, [pc, #372]	@ (8007030 <USB_HC_StartXfer+0x198>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d12f      	bne.n	8006f1e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d11c      	bne.n	8006efe <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	7c9b      	ldrb	r3, [r3, #18]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <USB_HC_StartXfer+0x3c>
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	7c9b      	ldrb	r3, [r3, #18]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d124      	bne.n	8006f1e <USB_HC_StartXfer+0x86>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	799b      	ldrb	r3, [r3, #6]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d120      	bne.n	8006f1e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	6a3a      	ldr	r2, [r7, #32]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006efa:	60d3      	str	r3, [r2, #12]
 8006efc:	e00f      	b.n	8006f1e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	791b      	ldrb	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10b      	bne.n	8006f1e <USB_HC_StartXfer+0x86>
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	795b      	ldrb	r3, [r3, #5]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d107      	bne.n	8006f1e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	785b      	ldrb	r3, [r3, #1]
 8006f12:	4619      	mov	r1, r3
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fb6b 	bl	80075f0 <USB_DoPing>
        return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e232      	b.n	8007384 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	799b      	ldrb	r3, [r3, #6]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d158      	bne.n	8006fd8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006f26:	2301      	movs	r3, #1
 8006f28:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	78db      	ldrb	r3, [r3, #3]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d007      	beq.n	8006f42 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	8a92      	ldrh	r2, [r2, #20]
 8006f38:	fb03 f202 	mul.w	r2, r3, r2
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	61da      	str	r2, [r3, #28]
 8006f40:	e07c      	b.n	800703c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	7c9b      	ldrb	r3, [r3, #18]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d130      	bne.n	8006fac <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	2bbc      	cmp	r3, #188	@ 0xbc
 8006f50:	d918      	bls.n	8006f84 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	8a9b      	ldrh	r3, [r3, #20]
 8006f56:	461a      	mov	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d003      	beq.n	8006f74 <USB_HC_StartXfer+0xdc>
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d103      	bne.n	8006f7c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2202      	movs	r2, #2
 8006f78:	60da      	str	r2, [r3, #12]
 8006f7a:	e05f      	b.n	800703c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	60da      	str	r2, [r3, #12]
 8006f82:	e05b      	b.n	800703c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	6a1a      	ldr	r2, [r3, #32]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d007      	beq.n	8006fa4 <USB_HC_StartXfer+0x10c>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d003      	beq.n	8006fa4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	60da      	str	r2, [r3, #12]
 8006fa2:	e04b      	b.n	800703c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2203      	movs	r2, #3
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	e047      	b.n	800703c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d10d      	bne.n	8006fce <USB_HC_StartXfer+0x136>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	8a92      	ldrh	r2, [r2, #20]
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d907      	bls.n	8006fce <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006fbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	8a92      	ldrh	r2, [r2, #20]
 8006fc4:	fb03 f202 	mul.w	r2, r3, r2
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	61da      	str	r2, [r3, #28]
 8006fcc:	e036      	b.n	800703c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	6a1a      	ldr	r2, [r3, #32]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	61da      	str	r2, [r3, #28]
 8006fd6:	e031      	b.n	800703c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d018      	beq.n	8007012 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	8a92      	ldrh	r2, [r2, #20]
 8006fe8:	4413      	add	r3, r2
 8006fea:	3b01      	subs	r3, #1
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	8a92      	ldrh	r2, [r2, #20]
 8006ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ff4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006ff6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006ff8:	8b7b      	ldrh	r3, [r7, #26]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d90b      	bls.n	8007016 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006ffe:	8b7b      	ldrh	r3, [r7, #26]
 8007000:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007002:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	8a92      	ldrh	r2, [r2, #20]
 8007008:	fb03 f202 	mul.w	r2, r3, r2
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	61da      	str	r2, [r3, #28]
 8007010:	e001      	b.n	8007016 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007012:	2301      	movs	r3, #1
 8007014:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	78db      	ldrb	r3, [r3, #3]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800701e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	8a92      	ldrh	r2, [r2, #20]
 8007024:	fb03 f202 	mul.w	r2, r3, r2
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	61da      	str	r2, [r3, #28]
 800702c:	e006      	b.n	800703c <USB_HC_StartXfer+0x1a4>
 800702e:	bf00      	nop
 8007030:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6a1a      	ldr	r2, [r3, #32]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007044:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007046:	04d9      	lsls	r1, r3, #19
 8007048:	4ba3      	ldr	r3, [pc, #652]	@ (80072d8 <USB_HC_StartXfer+0x440>)
 800704a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800704c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	7d9b      	ldrb	r3, [r3, #22]
 8007052:	075b      	lsls	r3, r3, #29
 8007054:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007058:	69f9      	ldr	r1, [r7, #28]
 800705a:	0148      	lsls	r0, r1, #5
 800705c:	6a39      	ldr	r1, [r7, #32]
 800705e:	4401      	add	r1, r0
 8007060:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007064:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007066:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	6999      	ldr	r1, [r3, #24]
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	4413      	add	r3, r2
 800707a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800707e:	460a      	mov	r2, r1
 8007080:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	bf0c      	ite	eq
 8007092:	2301      	moveq	r3, #1
 8007094:	2300      	movne	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	0151      	lsls	r1, r2, #5
 80070ac:	6a3a      	ldr	r2, [r7, #32]
 80070ae:	440a      	add	r2, r1
 80070b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80070b8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	7e7b      	ldrb	r3, [r7, #25]
 80070ca:	075b      	lsls	r3, r3, #29
 80070cc:	69f9      	ldr	r1, [r7, #28]
 80070ce:	0148      	lsls	r0, r1, #5
 80070d0:	6a39      	ldr	r1, [r7, #32]
 80070d2:	4401      	add	r1, r0
 80070d4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80070d8:	4313      	orrs	r3, r2
 80070da:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	799b      	ldrb	r3, [r3, #6]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	f040 80c3 	bne.w	800726c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	7c5b      	ldrb	r3, [r3, #17]
 80070ea:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80070f0:	4313      	orrs	r3, r2
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	6a3a      	ldr	r2, [r7, #32]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80070fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007102:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	4413      	add	r3, r2
 800710c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	6a3a      	ldr	r2, [r7, #32]
 8007118:	440a      	add	r2, r1
 800711a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800711e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007122:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	79db      	ldrb	r3, [r3, #7]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d123      	bne.n	8007174 <USB_HC_StartXfer+0x2dc>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	78db      	ldrb	r3, [r3, #3]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d11f      	bne.n	8007174 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	4413      	add	r3, r2
 800713c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	69fa      	ldr	r2, [r7, #28]
 8007144:	0151      	lsls	r1, r2, #5
 8007146:	6a3a      	ldr	r2, [r7, #32]
 8007148:	440a      	add	r2, r1
 800714a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800714e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007152:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	4413      	add	r3, r2
 800715c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	0151      	lsls	r1, r2, #5
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	440a      	add	r2, r1
 800716a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800716e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007172:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	7c9b      	ldrb	r3, [r3, #18]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d003      	beq.n	8007184 <USB_HC_StartXfer+0x2ec>
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	7c9b      	ldrb	r3, [r3, #18]
 8007180:	2b03      	cmp	r3, #3
 8007182:	d117      	bne.n	80071b4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007188:	2b01      	cmp	r3, #1
 800718a:	d113      	bne.n	80071b4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	78db      	ldrb	r3, [r3, #3]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d10f      	bne.n	80071b4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	4413      	add	r3, r2
 800719c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	6a3a      	ldr	r2, [r7, #32]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071b2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	7c9b      	ldrb	r3, [r3, #18]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d162      	bne.n	8007282 <USB_HC_StartXfer+0x3ea>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	78db      	ldrb	r3, [r3, #3]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d15e      	bne.n	8007282 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d858      	bhi.n	8007280 <USB_HC_StartXfer+0x3e8>
 80071ce:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <USB_HC_StartXfer+0x33c>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	080071e5 	.word	0x080071e5
 80071d8:	08007207 	.word	0x08007207
 80071dc:	08007229 	.word	0x08007229
 80071e0:	0800724b 	.word	0x0800724b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	0151      	lsls	r1, r2, #5
 80071f6:	6a3a      	ldr	r2, [r7, #32]
 80071f8:	440a      	add	r2, r1
 80071fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007202:	6053      	str	r3, [r2, #4]
          break;
 8007204:	e03d      	b.n	8007282 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	4413      	add	r3, r2
 800720e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	6a3a      	ldr	r2, [r7, #32]
 800721a:	440a      	add	r2, r1
 800721c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007220:	f043 030e 	orr.w	r3, r3, #14
 8007224:	6053      	str	r3, [r2, #4]
          break;
 8007226:	e02c      	b.n	8007282 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	4413      	add	r3, r2
 8007230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	6a3a      	ldr	r2, [r7, #32]
 800723c:	440a      	add	r2, r1
 800723e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007242:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007246:	6053      	str	r3, [r2, #4]
          break;
 8007248:	e01b      	b.n	8007282 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	4413      	add	r3, r2
 8007252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	0151      	lsls	r1, r2, #5
 800725c:	6a3a      	ldr	r2, [r7, #32]
 800725e:	440a      	add	r2, r1
 8007260:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007264:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007268:	6053      	str	r3, [r2, #4]
          break;
 800726a:	e00a      	b.n	8007282 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	4413      	add	r3, r2
 8007274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007278:	461a      	mov	r2, r3
 800727a:	2300      	movs	r3, #0
 800727c:	6053      	str	r3, [r2, #4]
 800727e:	e000      	b.n	8007282 <USB_HC_StartXfer+0x3ea>
          break;
 8007280:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	4413      	add	r3, r2
 800728a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007298:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	78db      	ldrb	r3, [r3, #3]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072a8:	613b      	str	r3, [r7, #16]
 80072aa:	e003      	b.n	80072b4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072b2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072ba:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072c8:	461a      	mov	r2, r3
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e055      	b.n	8007384 <USB_HC_StartXfer+0x4ec>
 80072d8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	78db      	ldrb	r3, [r3, #3]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d14e      	bne.n	8007382 <USB_HC_StartXfer+0x4ea>
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d04a      	beq.n	8007382 <USB_HC_StartXfer+0x4ea>
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	79db      	ldrb	r3, [r3, #7]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d146      	bne.n	8007382 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	7c9b      	ldrb	r3, [r3, #18]
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d831      	bhi.n	8007360 <USB_HC_StartXfer+0x4c8>
 80072fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <USB_HC_StartXfer+0x46c>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	08007315 	.word	0x08007315
 8007308:	08007339 	.word	0x08007339
 800730c:	08007315 	.word	0x08007315
 8007310:	08007339 	.word	0x08007339
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	3303      	adds	r3, #3
 800731a:	089b      	lsrs	r3, r3, #2
 800731c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800731e:	8afa      	ldrh	r2, [r7, #22]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007324:	b29b      	uxth	r3, r3
 8007326:	429a      	cmp	r2, r3
 8007328:	d91c      	bls.n	8007364 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	f043 0220 	orr.w	r2, r3, #32
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	619a      	str	r2, [r3, #24]
        }
        break;
 8007336:	e015      	b.n	8007364 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	3303      	adds	r3, #3
 800733e:	089b      	lsrs	r3, r3, #2
 8007340:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007342:	8afa      	ldrh	r2, [r7, #22]
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	b29b      	uxth	r3, r3
 800734e:	429a      	cmp	r2, r3
 8007350:	d90a      	bls.n	8007368 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	619a      	str	r2, [r3, #24]
        }
        break;
 800735e:	e003      	b.n	8007368 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007360:	bf00      	nop
 8007362:	e002      	b.n	800736a <USB_HC_StartXfer+0x4d2>
        break;
 8007364:	bf00      	nop
 8007366:	e000      	b.n	800736a <USB_HC_StartXfer+0x4d2>
        break;
 8007368:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	6999      	ldr	r1, [r3, #24]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	785a      	ldrb	r2, [r3, #1]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	b29b      	uxth	r3, r3
 8007378:	2000      	movs	r0, #0
 800737a:	9000      	str	r0, [sp, #0]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff f9c9 	bl	8006714 <USB_WritePacket>
  }

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3728      	adds	r7, #40	@ 0x28
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	b29b      	uxth	r3, r3
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b089      	sub	sp, #36	@ 0x24
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	0c9b      	lsrs	r3, r3, #18
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	0fdb      	lsrs	r3, r3, #31
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	0fdb      	lsrs	r3, r3, #31
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f003 0320 	and.w	r3, r3, #32
 8007410:	2b20      	cmp	r3, #32
 8007412:	d10d      	bne.n	8007430 <USB_HC_Halt+0x82>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <USB_HC_Halt+0x82>
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d002      	beq.n	800742c <USB_HC_Halt+0x7e>
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b03      	cmp	r3, #3
 800742a:	d101      	bne.n	8007430 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e0d8      	b.n	80075e2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <USB_HC_Halt+0x8e>
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d173      	bne.n	8007524 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	0151      	lsls	r1, r2, #5
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	440a      	add	r2, r1
 8007452:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007456:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800745a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	2b00      	cmp	r3, #0
 8007466:	d14a      	bne.n	80074fe <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d133      	bne.n	80074dc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	4413      	add	r3, r2
 800747c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	440a      	add	r2, r1
 800748a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800748e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007492:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	0151      	lsls	r1, r2, #5
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	440a      	add	r2, r1
 80074aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80074b2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	3301      	adds	r3, #1
 80074b8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074c0:	d82e      	bhi.n	8007520 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074d8:	d0ec      	beq.n	80074b4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074da:	e081      	b.n	80075e0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	0151      	lsls	r1, r2, #5
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	440a      	add	r2, r1
 80074f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80074fa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074fc:	e070      	b.n	80075e0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	4413      	add	r3, r2
 8007506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	0151      	lsls	r1, r2, #5
 8007510:	69fa      	ldr	r2, [r7, #28]
 8007512:	440a      	add	r2, r1
 8007514:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007518:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800751c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800751e:	e05f      	b.n	80075e0 <USB_HC_Halt+0x232>
            break;
 8007520:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007522:	e05d      	b.n	80075e0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	4413      	add	r3, r2
 800752c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	440a      	add	r2, r1
 800753a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800753e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007542:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d133      	bne.n	80075bc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	4413      	add	r3, r2
 800755c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	0151      	lsls	r1, r2, #5
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	440a      	add	r2, r1
 800756a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800756e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007572:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	4413      	add	r3, r2
 800757c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	0151      	lsls	r1, r2, #5
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	440a      	add	r2, r1
 800758a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800758e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007592:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	3301      	adds	r3, #1
 8007598:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075a0:	d81d      	bhi.n	80075de <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075b8:	d0ec      	beq.n	8007594 <USB_HC_Halt+0x1e6>
 80075ba:	e011      	b.n	80075e0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	e000      	b.n	80075e0 <USB_HC_Halt+0x232>
          break;
 80075de:	bf00      	nop
    }
  }

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3724      	adds	r7, #36	@ 0x24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007604:	2301      	movs	r3, #1
 8007606:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	04da      	lsls	r2, r3, #19
 800760c:	4b15      	ldr	r3, [pc, #84]	@ (8007664 <USB_DoPing+0x74>)
 800760e:	4013      	ands	r3, r2
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	0151      	lsls	r1, r2, #5
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	440a      	add	r2, r1
 8007618:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800761c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007620:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	4413      	add	r3, r2
 800762a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007638:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007640:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	4413      	add	r3, r2
 800764a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800764e:	461a      	mov	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	1ff80000 	.word	0x1ff80000

08007668 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7fe ff8c 	bl	800659a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007682:	2110      	movs	r1, #16
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7fe ffe5 	bl	8006654 <USB_FlushTxFifo>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff f80f 	bl	80066b8 <USB_FlushRxFifo>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80076a4:	2300      	movs	r3, #0
 80076a6:	61bb      	str	r3, [r7, #24]
 80076a8:	e01f      	b.n	80076ea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	4413      	add	r3, r2
 80076da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076de:	461a      	mov	r2, r3
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	3301      	adds	r3, #1
 80076e8:	61bb      	str	r3, [r7, #24]
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b0f      	cmp	r3, #15
 80076ee:	d9dc      	bls.n	80076aa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80076f0:	2300      	movs	r3, #0
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	e034      	b.n	8007760 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800770c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007714:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800771c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	4413      	add	r3, r2
 8007726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800772a:	461a      	mov	r2, r3
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3301      	adds	r3, #1
 8007734:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800773c:	d80c      	bhi.n	8007758 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	4413      	add	r3, r2
 8007746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007754:	d0ec      	beq.n	8007730 <USB_StopHost+0xc8>
 8007756:	e000      	b.n	800775a <USB_StopHost+0xf2>
        break;
 8007758:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	3301      	adds	r3, #1
 800775e:	61bb      	str	r3, [r7, #24]
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	2b0f      	cmp	r3, #15
 8007764:	d9c7      	bls.n	80076f6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800776c:	461a      	mov	r2, r3
 800776e:	f04f 33ff 	mov.w	r3, #4294967295
 8007772:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f04f 32ff 	mov.w	r2, #4294967295
 800777a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7fe fefb 	bl	8006578 <USB_EnableGlobalInt>

  return ret;
 8007782:	7ffb      	ldrb	r3, [r7, #31]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800778c:	b590      	push	{r4, r7, lr}
 800778e:	b089      	sub	sp, #36	@ 0x24
 8007790:	af04      	add	r7, sp, #16
 8007792:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007794:	2301      	movs	r3, #1
 8007796:	2202      	movs	r2, #2
 8007798:	2102      	movs	r1, #2
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fc85 	bl	80080aa <USBH_FindInterface>
 80077a0:	4603      	mov	r3, r0
 80077a2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	2bff      	cmp	r3, #255	@ 0xff
 80077a8:	d002      	beq.n	80077b0 <USBH_CDC_InterfaceInit+0x24>
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d901      	bls.n	80077b4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80077b0:	2302      	movs	r3, #2
 80077b2:	e13d      	b.n	8007a30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fc5a 	bl	8008072 <USBH_SelectInterface>
 80077be:	4603      	mov	r3, r0
 80077c0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80077c8:	2302      	movs	r3, #2
 80077ca:	e131      	b.n	8007a30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80077d2:	2050      	movs	r0, #80	@ 0x50
 80077d4:	f002 fb64 	bl	8009ea0 <malloc>
 80077d8:	4603      	mov	r3, r0
 80077da:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80077ec:	2302      	movs	r3, #2
 80077ee:	e11f      	b.n	8007a30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80077f0:	2250      	movs	r2, #80	@ 0x50
 80077f2:	2100      	movs	r1, #0
 80077f4:	68b8      	ldr	r0, [r7, #8]
 80077f6:	f002 fc11 	bl	800a01c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	211a      	movs	r1, #26
 8007800:	fb01 f303 	mul.w	r3, r1, r3
 8007804:	4413      	add	r3, r2
 8007806:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b25b      	sxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	da15      	bge.n	800783e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	211a      	movs	r1, #26
 8007818:	fb01 f303 	mul.w	r3, r1, r3
 800781c:	4413      	add	r3, r2
 800781e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007822:	781a      	ldrb	r2, [r3, #0]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	211a      	movs	r1, #26
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	4413      	add	r3, r2
 8007834:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007838:	881a      	ldrh	r2, [r3, #0]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	785b      	ldrb	r3, [r3, #1]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 ffbe 	bl	80097c6 <USBH_AllocPipe>
 800784a:	4603      	mov	r3, r0
 800784c:	461a      	mov	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	7819      	ldrb	r1, [r3, #0]
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	7858      	ldrb	r0, [r3, #1]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	8952      	ldrh	r2, [r2, #10]
 800786a:	9202      	str	r2, [sp, #8]
 800786c:	2203      	movs	r2, #3
 800786e:	9201      	str	r2, [sp, #4]
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	4623      	mov	r3, r4
 8007874:	4602      	mov	r2, r0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f001 ff76 	bl	8009768 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2200      	movs	r2, #0
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f002 fa85 	bl	8009d94 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800788a:	2300      	movs	r3, #0
 800788c:	2200      	movs	r2, #0
 800788e:	210a      	movs	r1, #10
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fc0a 	bl	80080aa <USBH_FindInterface>
 8007896:	4603      	mov	r3, r0
 8007898:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2bff      	cmp	r3, #255	@ 0xff
 800789e:	d002      	beq.n	80078a6 <USBH_CDC_InterfaceInit+0x11a>
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d901      	bls.n	80078aa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80078a6:	2302      	movs	r3, #2
 80078a8:	e0c2      	b.n	8007a30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	211a      	movs	r1, #26
 80078b0:	fb01 f303 	mul.w	r3, r1, r3
 80078b4:	4413      	add	r3, r2
 80078b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	b25b      	sxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	da16      	bge.n	80078f0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	211a      	movs	r1, #26
 80078c8:	fb01 f303 	mul.w	r3, r1, r3
 80078cc:	4413      	add	r3, r2
 80078ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80078d2:	781a      	ldrb	r2, [r3, #0]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	211a      	movs	r1, #26
 80078de:	fb01 f303 	mul.w	r3, r1, r3
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80078e8:	881a      	ldrh	r2, [r3, #0]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	835a      	strh	r2, [r3, #26]
 80078ee:	e015      	b.n	800791c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	211a      	movs	r1, #26
 80078f6:	fb01 f303 	mul.w	r3, r1, r3
 80078fa:	4413      	add	r3, r2
 80078fc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007900:	781a      	ldrb	r2, [r3, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	211a      	movs	r1, #26
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	4413      	add	r3, r2
 8007912:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007916:	881a      	ldrh	r2, [r3, #0]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	211a      	movs	r1, #26
 8007922:	fb01 f303 	mul.w	r3, r1, r3
 8007926:	4413      	add	r3, r2
 8007928:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	b25b      	sxtb	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	da16      	bge.n	8007962 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	211a      	movs	r1, #26
 800793a:	fb01 f303 	mul.w	r3, r1, r3
 800793e:	4413      	add	r3, r2
 8007940:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007944:	781a      	ldrb	r2, [r3, #0]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	211a      	movs	r1, #26
 8007950:	fb01 f303 	mul.w	r3, r1, r3
 8007954:	4413      	add	r3, r2
 8007956:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800795a:	881a      	ldrh	r2, [r3, #0]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	835a      	strh	r2, [r3, #26]
 8007960:	e015      	b.n	800798e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	211a      	movs	r1, #26
 8007968:	fb01 f303 	mul.w	r3, r1, r3
 800796c:	4413      	add	r3, r2
 800796e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007972:	781a      	ldrb	r2, [r3, #0]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	211a      	movs	r1, #26
 800797e:	fb01 f303 	mul.w	r3, r1, r3
 8007982:	4413      	add	r3, r2
 8007984:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007988:	881a      	ldrh	r2, [r3, #0]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	7b9b      	ldrb	r3, [r3, #14]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 ff16 	bl	80097c6 <USBH_AllocPipe>
 800799a:	4603      	mov	r3, r0
 800799c:	461a      	mov	r2, r3
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	7bdb      	ldrb	r3, [r3, #15]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 ff0c 	bl	80097c6 <USBH_AllocPipe>
 80079ae:	4603      	mov	r3, r0
 80079b0:	461a      	mov	r2, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	7b59      	ldrb	r1, [r3, #13]
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	7b98      	ldrb	r0, [r3, #14]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	8b12      	ldrh	r2, [r2, #24]
 80079ce:	9202      	str	r2, [sp, #8]
 80079d0:	2202      	movs	r2, #2
 80079d2:	9201      	str	r2, [sp, #4]
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	4623      	mov	r3, r4
 80079d8:	4602      	mov	r2, r0
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f001 fec4 	bl	8009768 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	7b19      	ldrb	r1, [r3, #12]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	7bd8      	ldrb	r0, [r3, #15]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	8b52      	ldrh	r2, [r2, #26]
 80079f8:	9202      	str	r2, [sp, #8]
 80079fa:	2202      	movs	r2, #2
 80079fc:	9201      	str	r2, [sp, #4]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	4623      	mov	r3, r4
 8007a02:	4602      	mov	r2, r0
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 feaf 	bl	8009768 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	7b5b      	ldrb	r3, [r3, #13]
 8007a16:	2200      	movs	r2, #0
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f002 f9ba 	bl	8009d94 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	7b1b      	ldrb	r3, [r3, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f002 f9b3 	bl	8009d94 <USBH_LL_SetToggle>

  return USBH_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd90      	pop	{r4, r7, pc}

08007a38 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00e      	beq.n	8007a70 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 fea4 	bl	80097a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 fecf 	bl	8009808 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	7b1b      	ldrb	r3, [r3, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00e      	beq.n	8007a96 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	7b1b      	ldrb	r3, [r3, #12]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 fe91 	bl	80097a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	7b1b      	ldrb	r3, [r3, #12]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 febc 	bl	8009808 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	7b5b      	ldrb	r3, [r3, #13]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00e      	beq.n	8007abc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	7b5b      	ldrb	r3, [r3, #13]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 fe7e 	bl	80097a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	7b5b      	ldrb	r3, [r3, #13]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 fea9 	bl	8009808 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f002 f9ed 	bl	8009eb0 <free>
    phost->pActiveClass->pData = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007adc:	2200      	movs	r2, #0
 8007ade:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3340      	adds	r3, #64	@ 0x40
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f8b1 	bl	8007c6a <GetLineCoding>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007b0c:	7afb      	ldrb	r3, [r7, #11]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d105      	bne.n	8007b1e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b18:	2102      	movs	r1, #2
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b30:	2301      	movs	r3, #1
 8007b32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d877      	bhi.n	8007c3c <USBH_CDC_Process+0x114>
 8007b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b54 <USBH_CDC_Process+0x2c>)
 8007b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b52:	bf00      	nop
 8007b54:	08007b69 	.word	0x08007b69
 8007b58:	08007b6f 	.word	0x08007b6f
 8007b5c:	08007b9f 	.word	0x08007b9f
 8007b60:	08007c13 	.word	0x08007c13
 8007b64:	08007c21 	.word	0x08007c21
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b6c:	e06d      	b.n	8007c4a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f897 	bl	8007ca8 <SetLineCoding>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b8c:	e058      	b.n	8007c40 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d055      	beq.n	8007c40 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2204      	movs	r2, #4
 8007b98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007b9c:	e050      	b.n	8007c40 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	3340      	adds	r3, #64	@ 0x40
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f860 	bl	8007c6a <GetLineCoding>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d126      	bne.n	8007c02 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bc6:	791b      	ldrb	r3, [r3, #4]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d13b      	bne.n	8007c44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bd6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d133      	bne.n	8007c44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007be6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d12b      	bne.n	8007c44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bf4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d124      	bne.n	8007c44 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f958 	bl	8007eb0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c00:	e020      	b.n	8007c44 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d01d      	beq.n	8007c44 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2204      	movs	r2, #4
 8007c0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007c10:	e018      	b.n	8007c44 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f867 	bl	8007ce6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f8da 	bl	8007dd2 <CDC_ProcessReception>
      break;
 8007c1e:	e014      	b.n	8007c4a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007c20:	2100      	movs	r1, #0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 f81a 	bl	8008c5c <USBH_ClrFeature>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10a      	bne.n	8007c48 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007c3a:	e005      	b.n	8007c48 <USBH_CDC_Process+0x120>

    default:
      break;
 8007c3c:	bf00      	nop
 8007c3e:	e004      	b.n	8007c4a <USBH_CDC_Process+0x122>
      break;
 8007c40:	bf00      	nop
 8007c42:	e002      	b.n	8007c4a <USBH_CDC_Process+0x122>
      break;
 8007c44:	bf00      	nop
 8007c46:	e000      	b.n	8007c4a <USBH_CDC_Process+0x122>
      break;
 8007c48:	bf00      	nop

  }

  return status;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	22a1      	movs	r2, #161	@ 0xa1
 8007c78:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2221      	movs	r2, #33	@ 0x21
 8007c7e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2207      	movs	r2, #7
 8007c90:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2207      	movs	r2, #7
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 fb14 	bl	80092c6 <USBH_CtlReq>
 8007c9e:	4603      	mov	r3, r0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2221      	movs	r2, #33	@ 0x21
 8007cb6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2207      	movs	r2, #7
 8007cce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2207      	movs	r2, #7
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 faf5 	bl	80092c6 <USBH_CtlReq>
 8007cdc:	4603      	mov	r3, r0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b086      	sub	sp, #24
 8007cea:	af02      	add	r7, sp, #8
 8007cec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d002      	beq.n	8007d0c <CDC_ProcessTransmission+0x26>
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d023      	beq.n	8007d52 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007d0a:	e05e      	b.n	8007dca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	8b12      	ldrh	r2, [r2, #24]
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d90b      	bls.n	8007d30 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	69d9      	ldr	r1, [r3, #28]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8b1a      	ldrh	r2, [r3, #24]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	7b5b      	ldrb	r3, [r3, #13]
 8007d24:	2001      	movs	r0, #1
 8007d26:	9000      	str	r0, [sp, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 fcda 	bl	80096e2 <USBH_BulkSendData>
 8007d2e:	e00b      	b.n	8007d48 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	7b5b      	ldrb	r3, [r3, #13]
 8007d3e:	2001      	movs	r0, #1
 8007d40:	9000      	str	r0, [sp, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 fccd 	bl	80096e2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007d50:	e03b      	b.n	8007dca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	7b5b      	ldrb	r3, [r3, #13]
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 fff1 	bl	8009d40 <USBH_LL_GetURBState>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d128      	bne.n	8007dba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	8b12      	ldrh	r2, [r2, #24]
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d90e      	bls.n	8007d92 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	8b12      	ldrh	r2, [r2, #24]
 8007d7c:	1a9a      	subs	r2, r3, r2
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	8b12      	ldrh	r2, [r2, #24]
 8007d8a:	441a      	add	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	61da      	str	r2, [r3, #28]
 8007d90:	e002      	b.n	8007d98 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d004      	beq.n	8007daa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007da8:	e00e      	b.n	8007dc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f868 	bl	8007e88 <USBH_CDC_TransmitCallback>
      break;
 8007db8:	e006      	b.n	8007dc8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007dba:	7afb      	ldrb	r3, [r7, #11]
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d103      	bne.n	8007dc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007dc8:	bf00      	nop
  }
}
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b086      	sub	sp, #24
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d002      	beq.n	8007df8 <CDC_ProcessReception+0x26>
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d00e      	beq.n	8007e14 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007df6:	e043      	b.n	8007e80 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	6a19      	ldr	r1, [r3, #32]
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	8b5a      	ldrh	r2, [r3, #26]
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	7b1b      	ldrb	r3, [r3, #12]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 fc91 	bl	800972c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007e12:	e035      	b.n	8007e80 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	7b1b      	ldrb	r3, [r3, #12]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 ff90 	bl	8009d40 <USBH_LL_GetURBState>
 8007e20:	4603      	mov	r3, r0
 8007e22:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007e24:	7cfb      	ldrb	r3, [r7, #19]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d129      	bne.n	8007e7e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	7b1b      	ldrb	r3, [r3, #12]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 fef3 	bl	8009c1c <USBH_LL_GetLastXferSize>
 8007e36:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d016      	beq.n	8007e70 <CDC_ProcessReception+0x9e>
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	8b5b      	ldrh	r3, [r3, #26]
 8007e46:	461a      	mov	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d110      	bne.n	8007e70 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	1ad2      	subs	r2, r2, r3
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	6a1a      	ldr	r2, [r3, #32]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	441a      	add	r2, r3
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2203      	movs	r2, #3
 8007e6a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007e6e:	e006      	b.n	8007e7e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f80f 	bl	8007e9c <USBH_CDC_ReceiveCallback>
      break;
 8007e7e:	bf00      	nop
  }
}
 8007e80:	bf00      	nop
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e029      	b.n	8007f30 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	79fa      	ldrb	r2, [r7, #7]
 8007ee0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 f81f 	bl	8007f38 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f001 fdc3 	bl	8009ab4 <USBH_LL_Init>

  return USBH_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	e009      	b.n	8007f5e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	33e0      	adds	r3, #224	@ 0xe0
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	2200      	movs	r2, #0
 8007f56:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b0f      	cmp	r3, #15
 8007f62:	d9f2      	bls.n	8007f4a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
 8007f68:	e009      	b.n	8007f7e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f74:	2200      	movs	r2, #0
 8007f76:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f84:	d3f1      	bcc.n	8007f6a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2240      	movs	r2, #64	@ 0x40
 8007faa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	331c      	adds	r3, #28
 8007fd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fda:	2100      	movs	r1, #0
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f002 f81d 	bl	800a01c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007fe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f002 f814 	bl	800a01c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007ffa:	2212      	movs	r2, #18
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f002 f80c 	bl	800a01c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800800a:	223e      	movs	r2, #62	@ 0x3e
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f002 f804 	bl	800a01c <memset>

  return USBH_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800801e:	b480      	push	{r7}
 8008020:	b085      	sub	sp, #20
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d016      	beq.n	8008060 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10e      	bne.n	800805a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008042:	1c59      	adds	r1, r3, #1
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	33de      	adds	r3, #222	@ 0xde
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73fb      	strb	r3, [r7, #15]
 8008058:	e004      	b.n	8008064 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800805a:	2302      	movs	r3, #2
 800805c:	73fb      	strb	r3, [r7, #15]
 800805e:	e001      	b.n	8008064 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008060:	2302      	movs	r3, #2
 8008062:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008064:	7bfb      	ldrb	r3, [r7, #15]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	460b      	mov	r3, r1
 800807c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008088:	78fa      	ldrb	r2, [r7, #3]
 800808a:	429a      	cmp	r2, r3
 800808c:	d204      	bcs.n	8008098 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	78fa      	ldrb	r2, [r7, #3]
 8008092:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008096:	e001      	b.n	800809c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008098:	2302      	movs	r3, #2
 800809a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800809c:	7bfb      	ldrb	r3, [r7, #15]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b087      	sub	sp, #28
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	4608      	mov	r0, r1
 80080b4:	4611      	mov	r1, r2
 80080b6:	461a      	mov	r2, r3
 80080b8:	4603      	mov	r3, r0
 80080ba:	70fb      	strb	r3, [r7, #3]
 80080bc:	460b      	mov	r3, r1
 80080be:	70bb      	strb	r3, [r7, #2]
 80080c0:	4613      	mov	r3, r2
 80080c2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80080c8:	2300      	movs	r3, #0
 80080ca:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80080d2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80080d4:	e025      	b.n	8008122 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	221a      	movs	r2, #26
 80080da:	fb02 f303 	mul.w	r3, r2, r3
 80080de:	3308      	adds	r3, #8
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4413      	add	r3, r2
 80080e4:	3302      	adds	r3, #2
 80080e6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	795b      	ldrb	r3, [r3, #5]
 80080ec:	78fa      	ldrb	r2, [r7, #3]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d002      	beq.n	80080f8 <USBH_FindInterface+0x4e>
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	2bff      	cmp	r3, #255	@ 0xff
 80080f6:	d111      	bne.n	800811c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80080fc:	78ba      	ldrb	r2, [r7, #2]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d002      	beq.n	8008108 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008102:	78bb      	ldrb	r3, [r7, #2]
 8008104:	2bff      	cmp	r3, #255	@ 0xff
 8008106:	d109      	bne.n	800811c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800810c:	787a      	ldrb	r2, [r7, #1]
 800810e:	429a      	cmp	r2, r3
 8008110:	d002      	beq.n	8008118 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008112:	787b      	ldrb	r3, [r7, #1]
 8008114:	2bff      	cmp	r3, #255	@ 0xff
 8008116:	d101      	bne.n	800811c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	e006      	b.n	800812a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	3301      	adds	r3, #1
 8008120:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d9d6      	bls.n	80080d6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008128:	23ff      	movs	r3, #255	@ 0xff
}
 800812a:	4618      	mov	r0, r3
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 fcf4 	bl	8009b2c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008144:	2101      	movs	r1, #1
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 fe0d 	bl	8009d66 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af04      	add	r7, sp, #16
 800815e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008160:	2302      	movs	r3, #2
 8008162:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b01      	cmp	r3, #1
 8008172:	d102      	bne.n	800817a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2203      	movs	r2, #3
 8008178:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b0b      	cmp	r3, #11
 8008182:	f200 81bb 	bhi.w	80084fc <USBH_Process+0x3a4>
 8008186:	a201      	add	r2, pc, #4	@ (adr r2, 800818c <USBH_Process+0x34>)
 8008188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818c:	080081bd 	.word	0x080081bd
 8008190:	080081ef 	.word	0x080081ef
 8008194:	08008257 	.word	0x08008257
 8008198:	08008497 	.word	0x08008497
 800819c:	080084fd 	.word	0x080084fd
 80081a0:	080082f7 	.word	0x080082f7
 80081a4:	0800843d 	.word	0x0800843d
 80081a8:	0800832d 	.word	0x0800832d
 80081ac:	0800834d 	.word	0x0800834d
 80081b0:	0800836b 	.word	0x0800836b
 80081b4:	080083af 	.word	0x080083af
 80081b8:	0800847f 	.word	0x0800847f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 819b 	beq.w	8008500 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80081d0:	20c8      	movs	r0, #200	@ 0xc8
 80081d2:	f001 fe12 	bl	8009dfa <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 fd05 	bl	8009be6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081ec:	e188      	b.n	8008500 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d107      	bne.n	8008208 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008206:	e18a      	b.n	800851e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800820e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008212:	d914      	bls.n	800823e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800821a:	3301      	adds	r3, #1
 800821c:	b2da      	uxtb	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800822a:	2b03      	cmp	r3, #3
 800822c:	d903      	bls.n	8008236 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	220d      	movs	r2, #13
 8008232:	701a      	strb	r2, [r3, #0]
      break;
 8008234:	e173      	b.n	800851e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	701a      	strb	r2, [r3, #0]
      break;
 800823c:	e16f      	b.n	800851e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008244:	f103 020a 	add.w	r2, r3, #10
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800824e:	200a      	movs	r0, #10
 8008250:	f001 fdd3 	bl	8009dfa <USBH_Delay>
      break;
 8008254:	e163      	b.n	800851e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800825c:	2b00      	cmp	r3, #0
 800825e:	d005      	beq.n	800826c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008266:	2104      	movs	r1, #4
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800826c:	2064      	movs	r0, #100	@ 0x64
 800826e:	f001 fdc4 	bl	8009dfa <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 fc90 	bl	8009b98 <USBH_LL_GetSpeed>
 8008278:	4603      	mov	r3, r0
 800827a:	461a      	mov	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2205      	movs	r2, #5
 8008286:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008288:	2100      	movs	r1, #0
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 fa9b 	bl	80097c6 <USBH_AllocPipe>
 8008290:	4603      	mov	r3, r0
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008298:	2180      	movs	r1, #128	@ 0x80
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 fa93 	bl	80097c6 <USBH_AllocPipe>
 80082a0:	4603      	mov	r3, r0
 80082a2:	461a      	mov	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	7919      	ldrb	r1, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80082bc:	9202      	str	r2, [sp, #8]
 80082be:	2200      	movs	r2, #0
 80082c0:	9201      	str	r2, [sp, #4]
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	4603      	mov	r3, r0
 80082c6:	2280      	movs	r2, #128	@ 0x80
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 fa4d 	bl	8009768 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	7959      	ldrb	r1, [r3, #5]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80082e2:	9202      	str	r2, [sp, #8]
 80082e4:	2200      	movs	r2, #0
 80082e6:	9201      	str	r2, [sp, #4]
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	4603      	mov	r3, r0
 80082ec:	2200      	movs	r2, #0
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 fa3a 	bl	8009768 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082f4:	e113      	b.n	800851e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f916 	bl	8008528 <USBH_HandleEnum>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	2b00      	cmp	r3, #0
 8008306:	f040 80fd 	bne.w	8008504 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008318:	2b01      	cmp	r3, #1
 800831a:	d103      	bne.n	8008324 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2208      	movs	r2, #8
 8008320:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008322:	e0ef      	b.n	8008504 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2207      	movs	r2, #7
 8008328:	701a      	strb	r2, [r3, #0]
      break;
 800832a:	e0eb      	b.n	8008504 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 80e8 	beq.w	8008508 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800833e:	2101      	movs	r1, #1
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2208      	movs	r2, #8
 8008348:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800834a:	e0dd      	b.n	8008508 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fc3a 	bl	8008bce <USBH_SetCfg>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 80d5 	bne.w	800850c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2209      	movs	r2, #9
 8008366:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008368:	e0d0      	b.n	800850c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b00      	cmp	r3, #0
 8008376:	d016      	beq.n	80083a6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008378:	2101      	movs	r1, #1
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fc4a 	bl	8008c14 <USBH_SetFeature>
 8008380:	4603      	mov	r3, r0
 8008382:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d103      	bne.n	8008394 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	220a      	movs	r2, #10
 8008390:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008392:	e0bd      	b.n	8008510 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b03      	cmp	r3, #3
 800839a:	f040 80b9 	bne.w	8008510 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	220a      	movs	r2, #10
 80083a2:	701a      	strb	r2, [r3, #0]
      break;
 80083a4:	e0b4      	b.n	8008510 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	220a      	movs	r2, #10
 80083aa:	701a      	strb	r2, [r3, #0]
      break;
 80083ac:	e0b0      	b.n	8008510 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 80ad 	beq.w	8008514 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
 80083c6:	e016      	b.n	80083f6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80083c8:	7bfa      	ldrb	r2, [r7, #15]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	32de      	adds	r2, #222	@ 0xde
 80083ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d2:	791a      	ldrb	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80083da:	429a      	cmp	r2, r3
 80083dc:	d108      	bne.n	80083f0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80083de:	7bfa      	ldrb	r2, [r7, #15]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	32de      	adds	r2, #222	@ 0xde
 80083e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80083ee:	e005      	b.n	80083fc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	3301      	adds	r3, #1
 80083f4:	73fb      	strb	r3, [r7, #15]
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0e5      	beq.n	80083c8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008402:	2b00      	cmp	r3, #0
 8008404:	d016      	beq.n	8008434 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4798      	blx	r3
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d109      	bne.n	800842c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2206      	movs	r2, #6
 800841c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008424:	2103      	movs	r1, #3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800842a:	e073      	b.n	8008514 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	220d      	movs	r2, #13
 8008430:	701a      	strb	r2, [r3, #0]
      break;
 8008432:	e06f      	b.n	8008514 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	220d      	movs	r2, #13
 8008438:	701a      	strb	r2, [r3, #0]
      break;
 800843a:	e06b      	b.n	8008514 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008442:	2b00      	cmp	r3, #0
 8008444:	d017      	beq.n	8008476 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	4798      	blx	r3
 8008452:	4603      	mov	r3, r0
 8008454:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d103      	bne.n	8008466 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	220b      	movs	r2, #11
 8008462:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008464:	e058      	b.n	8008518 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d154      	bne.n	8008518 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	220d      	movs	r2, #13
 8008472:	701a      	strb	r2, [r3, #0]
      break;
 8008474:	e050      	b.n	8008518 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	220d      	movs	r2, #13
 800847a:	701a      	strb	r2, [r3, #0]
      break;
 800847c:	e04c      	b.n	8008518 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008484:	2b00      	cmp	r3, #0
 8008486:	d049      	beq.n	800851c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	4798      	blx	r3
      }
      break;
 8008494:	e042      	b.n	800851c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff fd4a 	bl	8007f38 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d009      	beq.n	80084c2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d005      	beq.n	80084d8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084d2:	2105      	movs	r1, #5
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d107      	bne.n	80084f4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7ff fe22 	bl	8008136 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084f2:	e014      	b.n	800851e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 fb19 	bl	8009b2c <USBH_LL_Start>
      break;
 80084fa:	e010      	b.n	800851e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80084fc:	bf00      	nop
 80084fe:	e00e      	b.n	800851e <USBH_Process+0x3c6>
      break;
 8008500:	bf00      	nop
 8008502:	e00c      	b.n	800851e <USBH_Process+0x3c6>
      break;
 8008504:	bf00      	nop
 8008506:	e00a      	b.n	800851e <USBH_Process+0x3c6>
    break;
 8008508:	bf00      	nop
 800850a:	e008      	b.n	800851e <USBH_Process+0x3c6>
      break;
 800850c:	bf00      	nop
 800850e:	e006      	b.n	800851e <USBH_Process+0x3c6>
      break;
 8008510:	bf00      	nop
 8008512:	e004      	b.n	800851e <USBH_Process+0x3c6>
      break;
 8008514:	bf00      	nop
 8008516:	e002      	b.n	800851e <USBH_Process+0x3c6>
      break;
 8008518:	bf00      	nop
 800851a:	e000      	b.n	800851e <USBH_Process+0x3c6>
      break;
 800851c:	bf00      	nop
  }
  return USBH_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af04      	add	r7, sp, #16
 800852e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008530:	2301      	movs	r3, #1
 8008532:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008534:	2301      	movs	r3, #1
 8008536:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	785b      	ldrb	r3, [r3, #1]
 800853c:	2b07      	cmp	r3, #7
 800853e:	f200 81bd 	bhi.w	80088bc <USBH_HandleEnum+0x394>
 8008542:	a201      	add	r2, pc, #4	@ (adr r2, 8008548 <USBH_HandleEnum+0x20>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	08008569 	.word	0x08008569
 800854c:	08008623 	.word	0x08008623
 8008550:	0800868d 	.word	0x0800868d
 8008554:	08008717 	.word	0x08008717
 8008558:	08008781 	.word	0x08008781
 800855c:	080087f1 	.word	0x080087f1
 8008560:	08008837 	.word	0x08008837
 8008564:	0800887d 	.word	0x0800887d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008568:	2108      	movs	r1, #8
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fa4c 	bl	8008a08 <USBH_Get_DevDesc>
 8008570:	4603      	mov	r3, r0
 8008572:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d12e      	bne.n	80085d8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	7919      	ldrb	r1, [r3, #4]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800859e:	9202      	str	r2, [sp, #8]
 80085a0:	2200      	movs	r2, #0
 80085a2:	9201      	str	r2, [sp, #4]
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	4603      	mov	r3, r0
 80085a8:	2280      	movs	r2, #128	@ 0x80
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f001 f8dc 	bl	8009768 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	7959      	ldrb	r1, [r3, #5]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80085c4:	9202      	str	r2, [sp, #8]
 80085c6:	2200      	movs	r2, #0
 80085c8:	9201      	str	r2, [sp, #4]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	4603      	mov	r3, r0
 80085ce:	2200      	movs	r2, #0
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 f8c9 	bl	8009768 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80085d6:	e173      	b.n	80088c0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b03      	cmp	r3, #3
 80085dc:	f040 8170 	bne.w	80088c0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80085e6:	3301      	adds	r3, #1
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d903      	bls.n	8008602 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	220d      	movs	r2, #13
 80085fe:	701a      	strb	r2, [r3, #0]
      break;
 8008600:	e15e      	b.n	80088c0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	795b      	ldrb	r3, [r3, #5]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 f8fd 	bl	8009808 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	791b      	ldrb	r3, [r3, #4]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 f8f7 	bl	8009808 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]
      break;
 8008620:	e14e      	b.n	80088c0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008622:	2112      	movs	r1, #18
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f9ef 	bl	8008a08 <USBH_Get_DevDesc>
 800862a:	4603      	mov	r3, r0
 800862c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d103      	bne.n	800863c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800863a:	e143      	b.n	80088c4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	2b03      	cmp	r3, #3
 8008640:	f040 8140 	bne.w	80088c4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800864a:	3301      	adds	r3, #1
 800864c:	b2da      	uxtb	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800865a:	2b03      	cmp	r3, #3
 800865c:	d903      	bls.n	8008666 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	220d      	movs	r2, #13
 8008662:	701a      	strb	r2, [r3, #0]
      break;
 8008664:	e12e      	b.n	80088c4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	795b      	ldrb	r3, [r3, #5]
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 f8cb 	bl	8009808 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	791b      	ldrb	r3, [r3, #4]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 f8c5 	bl	8009808 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	701a      	strb	r2, [r3, #0]
      break;
 800868a:	e11b      	b.n	80088c4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800868c:	2101      	movs	r1, #1
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa79 	bl	8008b86 <USBH_SetAddress>
 8008694:	4603      	mov	r3, r0
 8008696:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d130      	bne.n	8008700 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800869e:	2002      	movs	r0, #2
 80086a0:	f001 fbab 	bl	8009dfa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2203      	movs	r2, #3
 80086b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	7919      	ldrb	r1, [r3, #4]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80086c6:	9202      	str	r2, [sp, #8]
 80086c8:	2200      	movs	r2, #0
 80086ca:	9201      	str	r2, [sp, #4]
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	4603      	mov	r3, r0
 80086d0:	2280      	movs	r2, #128	@ 0x80
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f001 f848 	bl	8009768 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	7959      	ldrb	r1, [r3, #5]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086ec:	9202      	str	r2, [sp, #8]
 80086ee:	2200      	movs	r2, #0
 80086f0:	9201      	str	r2, [sp, #4]
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	4603      	mov	r3, r0
 80086f6:	2200      	movs	r2, #0
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f001 f835 	bl	8009768 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80086fe:	e0e3      	b.n	80088c8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	2b03      	cmp	r3, #3
 8008704:	f040 80e0 	bne.w	80088c8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	220d      	movs	r2, #13
 800870c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	705a      	strb	r2, [r3, #1]
      break;
 8008714:	e0d8      	b.n	80088c8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008716:	2109      	movs	r1, #9
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f9a1 	bl	8008a60 <USBH_Get_CfgDesc>
 800871e:	4603      	mov	r3, r0
 8008720:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d103      	bne.n	8008730 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2204      	movs	r2, #4
 800872c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800872e:	e0cd      	b.n	80088cc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008730:	7bbb      	ldrb	r3, [r7, #14]
 8008732:	2b03      	cmp	r3, #3
 8008734:	f040 80ca 	bne.w	80088cc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800873e:	3301      	adds	r3, #1
 8008740:	b2da      	uxtb	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800874e:	2b03      	cmp	r3, #3
 8008750:	d903      	bls.n	800875a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	220d      	movs	r2, #13
 8008756:	701a      	strb	r2, [r3, #0]
      break;
 8008758:	e0b8      	b.n	80088cc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	795b      	ldrb	r3, [r3, #5]
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f001 f851 	bl	8009808 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	791b      	ldrb	r3, [r3, #4]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 f84b 	bl	8009808 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	701a      	strb	r2, [r3, #0]
      break;
 800877e:	e0a5      	b.n	80088cc <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f969 	bl	8008a60 <USBH_Get_CfgDesc>
 800878e:	4603      	mov	r3, r0
 8008790:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d103      	bne.n	80087a0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2205      	movs	r2, #5
 800879c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800879e:	e097      	b.n	80088d0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	f040 8094 	bne.w	80088d0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80087ae:	3301      	adds	r3, #1
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d903      	bls.n	80087ca <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	220d      	movs	r2, #13
 80087c6:	701a      	strb	r2, [r3, #0]
      break;
 80087c8:	e082      	b.n	80088d0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	795b      	ldrb	r3, [r3, #5]
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f001 f819 	bl	8009808 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	791b      	ldrb	r3, [r3, #4]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 f813 	bl	8009808 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	701a      	strb	r2, [r3, #0]
      break;
 80087ee:	e06f      	b.n	80088d0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d019      	beq.n	800882e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008806:	23ff      	movs	r3, #255	@ 0xff
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f953 	bl	8008ab4 <USBH_Get_StringDesc>
 800880e:	4603      	mov	r3, r0
 8008810:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d103      	bne.n	8008820 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2206      	movs	r2, #6
 800881c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800881e:	e059      	b.n	80088d4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b03      	cmp	r3, #3
 8008824:	d156      	bne.n	80088d4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2206      	movs	r2, #6
 800882a:	705a      	strb	r2, [r3, #1]
      break;
 800882c:	e052      	b.n	80088d4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2206      	movs	r2, #6
 8008832:	705a      	strb	r2, [r3, #1]
      break;
 8008834:	e04e      	b.n	80088d4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800883c:	2b00      	cmp	r3, #0
 800883e:	d019      	beq.n	8008874 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800884c:	23ff      	movs	r3, #255	@ 0xff
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f930 	bl	8008ab4 <USBH_Get_StringDesc>
 8008854:	4603      	mov	r3, r0
 8008856:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d103      	bne.n	8008866 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2207      	movs	r2, #7
 8008862:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008864:	e038      	b.n	80088d8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	2b03      	cmp	r3, #3
 800886a:	d135      	bne.n	80088d8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2207      	movs	r2, #7
 8008870:	705a      	strb	r2, [r3, #1]
      break;
 8008872:	e031      	b.n	80088d8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2207      	movs	r2, #7
 8008878:	705a      	strb	r2, [r3, #1]
      break;
 800887a:	e02d      	b.n	80088d8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008882:	2b00      	cmp	r3, #0
 8008884:	d017      	beq.n	80088b6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008892:	23ff      	movs	r3, #255	@ 0xff
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f90d 	bl	8008ab4 <USBH_Get_StringDesc>
 800889a:	4603      	mov	r3, r0
 800889c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d102      	bne.n	80088aa <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80088a8:	e018      	b.n	80088dc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d115      	bne.n	80088dc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
      break;
 80088b4:	e012      	b.n	80088dc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	73fb      	strb	r3, [r7, #15]
      break;
 80088ba:	e00f      	b.n	80088dc <USBH_HandleEnum+0x3b4>

    default:
      break;
 80088bc:	bf00      	nop
 80088be:	e00e      	b.n	80088de <USBH_HandleEnum+0x3b6>
      break;
 80088c0:	bf00      	nop
 80088c2:	e00c      	b.n	80088de <USBH_HandleEnum+0x3b6>
      break;
 80088c4:	bf00      	nop
 80088c6:	e00a      	b.n	80088de <USBH_HandleEnum+0x3b6>
      break;
 80088c8:	bf00      	nop
 80088ca:	e008      	b.n	80088de <USBH_HandleEnum+0x3b6>
      break;
 80088cc:	bf00      	nop
 80088ce:	e006      	b.n	80088de <USBH_HandleEnum+0x3b6>
      break;
 80088d0:	bf00      	nop
 80088d2:	e004      	b.n	80088de <USBH_HandleEnum+0x3b6>
      break;
 80088d4:	bf00      	nop
 80088d6:	e002      	b.n	80088de <USBH_HandleEnum+0x3b6>
      break;
 80088d8:	bf00      	nop
 80088da:	e000      	b.n	80088de <USBH_HandleEnum+0x3b6>
      break;
 80088dc:	bf00      	nop
  }
  return Status;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80088fa:	bf00      	nop
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f804 	bl	800892a <USBH_HandleSof>
}
 8008922:	bf00      	nop
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b0b      	cmp	r3, #11
 800893a:	d10a      	bne.n	8008952 <USBH_HandleSof+0x28>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	4798      	blx	r3
  }
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800895a:	b480      	push	{r7}
 800895c:	b083      	sub	sp, #12
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800896a:	bf00      	nop
}
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008986:	bf00      	nop
}
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 f8be 	bl	8009b62 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	791b      	ldrb	r3, [r3, #4]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 ff0b 	bl	8009808 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	795b      	ldrb	r3, [r3, #5]
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 ff05 	bl	8009808 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008a14:	887b      	ldrh	r3, [r7, #2]
 8008a16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a1a:	d901      	bls.n	8008a20 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e01b      	b.n	8008a58 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008a26:	887b      	ldrh	r3, [r7, #2]
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a30:	2100      	movs	r1, #0
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f872 	bl	8008b1c <USBH_GetDescriptor>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d109      	bne.n	8008a56 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008a48:	887a      	ldrh	r2, [r7, #2]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f929 	bl	8008ca4 <USBH_ParseDevDesc>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	331c      	adds	r3, #28
 8008a70:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008a72:	887b      	ldrh	r3, [r7, #2]
 8008a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a78:	d901      	bls.n	8008a7e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e016      	b.n	8008aac <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008a7e:	887b      	ldrh	r3, [r7, #2]
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a88:	2100      	movs	r1, #0
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f846 	bl	8008b1c <USBH_GetDescriptor>
 8008a90:	4603      	mov	r3, r0
 8008a92:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d107      	bne.n	8008aaa <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008a9a:	887b      	ldrh	r3, [r7, #2]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f9af 	bl	8008e04 <USBH_ParseCfgDesc>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b088      	sub	sp, #32
 8008ab8:	af02      	add	r7, sp, #8
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	607a      	str	r2, [r7, #4]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	72fb      	strb	r3, [r7, #11]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008ac8:	893b      	ldrh	r3, [r7, #8]
 8008aca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ace:	d802      	bhi.n	8008ad6 <USBH_Get_StringDesc+0x22>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e01c      	b.n	8008b14 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008ae2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008aea:	893b      	ldrh	r3, [r7, #8]
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	460b      	mov	r3, r1
 8008af0:	2100      	movs	r1, #0
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 f812 	bl	8008b1c <USBH_GetDescriptor>
 8008af8:	4603      	mov	r3, r0
 8008afa:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008afc:	7dfb      	ldrb	r3, [r7, #23]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d107      	bne.n	8008b12 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008b08:	893a      	ldrh	r2, [r7, #8]
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fb8d 	bl	800922c <USBH_ParseStringDesc>
  }

  return status;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	607b      	str	r3, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	72fb      	strb	r3, [r7, #11]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	789b      	ldrb	r3, [r3, #2]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d11c      	bne.n	8008b70 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008b36:	7afb      	ldrb	r3, [r7, #11]
 8008b38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2206      	movs	r2, #6
 8008b46:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	893a      	ldrh	r2, [r7, #8]
 8008b4c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008b4e:	893b      	ldrh	r3, [r7, #8]
 8008b50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008b54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b58:	d104      	bne.n	8008b64 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f240 4209 	movw	r2, #1033	@ 0x409
 8008b60:	829a      	strh	r2, [r3, #20]
 8008b62:	e002      	b.n	8008b6a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	8b3a      	ldrh	r2, [r7, #24]
 8008b6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008b70:	8b3b      	ldrh	r3, [r7, #24]
 8008b72:	461a      	mov	r2, r3
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 fba5 	bl	80092c6 <USBH_CtlReq>
 8008b7c:	4603      	mov	r3, r0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b082      	sub	sp, #8
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	460b      	mov	r3, r1
 8008b90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	789b      	ldrb	r3, [r3, #2]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d10f      	bne.n	8008bba <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2205      	movs	r2, #5
 8008ba4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008ba6:	78fb      	ldrb	r3, [r7, #3]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008bba:	2200      	movs	r2, #0
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fb81 	bl	80092c6 <USBH_CtlReq>
 8008bc4:	4603      	mov	r3, r0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b082      	sub	sp, #8
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	789b      	ldrb	r3, [r3, #2]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d10e      	bne.n	8008c00 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2209      	movs	r2, #9
 8008bec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	887a      	ldrh	r2, [r7, #2]
 8008bf2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c00:	2200      	movs	r2, #0
 8008c02:	2100      	movs	r1, #0
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fb5e 	bl	80092c6 <USBH_CtlReq>
 8008c0a:	4603      	mov	r3, r0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	789b      	ldrb	r3, [r3, #2]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d10f      	bne.n	8008c48 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2203      	movs	r2, #3
 8008c32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008c34:	78fb      	ldrb	r3, [r7, #3]
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fb3a 	bl	80092c6 <USBH_CtlReq>
 8008c52:	4603      	mov	r3, r0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	789b      	ldrb	r3, [r3, #2]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d10f      	bne.n	8008c90 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008c82:	78fb      	ldrb	r3, [r7, #3]
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c90:	2200      	movs	r2, #0
 8008c92:	2100      	movs	r1, #0
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fb16 	bl	80092c6 <USBH_CtlReq>
 8008c9a:	4603      	mov	r3, r0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008cb8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	e094      	b.n	8008df2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	781a      	ldrb	r2, [r3, #0]
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	785a      	ldrb	r2, [r3, #1]
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	3302      	adds	r3, #2
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	3303      	adds	r3, #3
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	4313      	orrs	r3, r2
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	791a      	ldrb	r2, [r3, #4]
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	795a      	ldrb	r2, [r3, #5]
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	799a      	ldrb	r2, [r3, #6]
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	79da      	ldrb	r2, [r3, #7]
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d004      	beq.n	8008d26 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d11b      	bne.n	8008d5e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	79db      	ldrb	r3, [r3, #7]
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	dc0f      	bgt.n	8008d4e <USBH_ParseDevDesc+0xaa>
 8008d2e:	2b08      	cmp	r3, #8
 8008d30:	db0f      	blt.n	8008d52 <USBH_ParseDevDesc+0xae>
 8008d32:	3b08      	subs	r3, #8
 8008d34:	4a32      	ldr	r2, [pc, #200]	@ (8008e00 <USBH_ParseDevDesc+0x15c>)
 8008d36:	fa22 f303 	lsr.w	r3, r2, r3
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	bf14      	ite	ne
 8008d42:	2301      	movne	r3, #1
 8008d44:	2300      	moveq	r3, #0
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <USBH_ParseDevDesc+0xb6>
 8008d4c:	e001      	b.n	8008d52 <USBH_ParseDevDesc+0xae>
 8008d4e:	2b40      	cmp	r3, #64	@ 0x40
 8008d50:	d003      	beq.n	8008d5a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	2208      	movs	r2, #8
 8008d56:	71da      	strb	r2, [r3, #7]
        break;
 8008d58:	e000      	b.n	8008d5c <USBH_ParseDevDesc+0xb8>
        break;
 8008d5a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008d5c:	e00e      	b.n	8008d7c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d107      	bne.n	8008d78 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	79db      	ldrb	r3, [r3, #7]
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	d005      	beq.n	8008d7c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	2208      	movs	r2, #8
 8008d74:	71da      	strb	r2, [r3, #7]
 8008d76:	e001      	b.n	8008d7c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008d7c:	88fb      	ldrh	r3, [r7, #6]
 8008d7e:	2b08      	cmp	r3, #8
 8008d80:	d936      	bls.n	8008df0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	3308      	adds	r3, #8
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	3309      	adds	r3, #9
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	021b      	lsls	r3, r3, #8
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	4313      	orrs	r3, r2
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	330a      	adds	r3, #10
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	330b      	adds	r3, #11
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	021b      	lsls	r3, r3, #8
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	4313      	orrs	r3, r2
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	330c      	adds	r3, #12
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	330d      	adds	r3, #13
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	021b      	lsls	r3, r3, #8
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	7b9a      	ldrb	r2, [r3, #14]
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	7bda      	ldrb	r2, [r3, #15]
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	7c1a      	ldrb	r2, [r3, #16]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	7c5a      	ldrb	r2, [r3, #17]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	371c      	adds	r7, #28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	01000101 	.word	0x01000101

08008e04 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08c      	sub	sp, #48	@ 0x30
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008e18:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008e32:	2302      	movs	r3, #2
 8008e34:	e0da      	b.n	8008fec <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b09      	cmp	r3, #9
 8008e40:	d002      	beq.n	8008e48 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e44:	2209      	movs	r2, #9
 8008e46:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	785a      	ldrb	r2, [r3, #1]
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	3302      	adds	r3, #2
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	3303      	adds	r3, #3
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	021b      	lsls	r3, r3, #8
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e72:	bf28      	it	cs
 8008e74:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	791a      	ldrb	r2, [r3, #4]
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	795a      	ldrb	r2, [r3, #5]
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	799a      	ldrb	r2, [r3, #6]
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	79da      	ldrb	r2, [r3, #7]
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	7a1a      	ldrb	r2, [r3, #8]
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	2b09      	cmp	r3, #9
 8008eaa:	f240 809d 	bls.w	8008fe8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008eae:	2309      	movs	r3, #9
 8008eb0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008eb6:	e081      	b.n	8008fbc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008eb8:	f107 0316 	add.w	r3, r7, #22
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ec0:	f000 f9e7 	bl	8009292 <USBH_GetNextDesc>
 8008ec4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec8:	785b      	ldrb	r3, [r3, #1]
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d176      	bne.n	8008fbc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b09      	cmp	r3, #9
 8008ed4:	d002      	beq.n	8008edc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed8:	2209      	movs	r2, #9
 8008eda:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ee0:	221a      	movs	r2, #26
 8008ee2:	fb02 f303 	mul.w	r3, r2, r3
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	6a3a      	ldr	r2, [r7, #32]
 8008eea:	4413      	add	r3, r2
 8008eec:	3302      	adds	r3, #2
 8008eee:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ef2:	69f8      	ldr	r0, [r7, #28]
 8008ef4:	f000 f87e 	bl	8008ff4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f02:	e043      	b.n	8008f8c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f04:	f107 0316 	add.w	r3, r7, #22
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f0c:	f000 f9c1 	bl	8009292 <USBH_GetNextDesc>
 8008f10:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f14:	785b      	ldrb	r3, [r3, #1]
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d138      	bne.n	8008f8c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	795b      	ldrb	r3, [r3, #5]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d113      	bne.n	8008f4a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d003      	beq.n	8008f32 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	799b      	ldrb	r3, [r3, #6]
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d10b      	bne.n	8008f4a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	79db      	ldrb	r3, [r3, #7]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10b      	bne.n	8008f52 <USBH_ParseCfgDesc+0x14e>
 8008f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b09      	cmp	r3, #9
 8008f40:	d007      	beq.n	8008f52 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f44:	2209      	movs	r2, #9
 8008f46:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f48:	e003      	b.n	8008f52 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4c:	2207      	movs	r2, #7
 8008f4e:	701a      	strb	r2, [r3, #0]
 8008f50:	e000      	b.n	8008f54 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f52:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f58:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008f5c:	3201      	adds	r2, #1
 8008f5e:	00d2      	lsls	r2, r2, #3
 8008f60:	211a      	movs	r1, #26
 8008f62:	fb01 f303 	mul.w	r3, r1, r3
 8008f66:	4413      	add	r3, r2
 8008f68:	3308      	adds	r3, #8
 8008f6a:	6a3a      	ldr	r2, [r7, #32]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	3304      	adds	r3, #4
 8008f70:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f74:	69b9      	ldr	r1, [r7, #24]
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 f870 	bl	800905c <USBH_ParseEPDesc>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008f82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008f86:	3301      	adds	r3, #1
 8008f88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	791b      	ldrb	r3, [r3, #4]
 8008f90:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d204      	bcs.n	8008fa2 <USBH_ParseCfgDesc+0x19e>
 8008f98:	6a3b      	ldr	r3, [r7, #32]
 8008f9a:	885a      	ldrh	r2, [r3, #2]
 8008f9c:	8afb      	ldrh	r3, [r7, #22]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d8b0      	bhi.n	8008f04 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	791b      	ldrb	r3, [r3, #4]
 8008fa6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d201      	bcs.n	8008fb2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e01c      	b.n	8008fec <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d805      	bhi.n	8008fd0 <USBH_ParseCfgDesc+0x1cc>
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	885a      	ldrh	r2, [r3, #2]
 8008fc8:	8afb      	ldrh	r3, [r7, #22]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	f63f af74 	bhi.w	8008eb8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008fd0:	6a3b      	ldr	r3, [r7, #32]
 8008fd2:	791b      	ldrb	r3, [r3, #4]
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	bf28      	it	cs
 8008fd8:	2302      	movcs	r3, #2
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d201      	bcs.n	8008fe8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e001      	b.n	8008fec <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3730      	adds	r7, #48	@ 0x30
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781a      	ldrb	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	785a      	ldrb	r2, [r3, #1]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	789a      	ldrb	r2, [r3, #2]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	78da      	ldrb	r2, [r3, #3]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	3304      	adds	r3, #4
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b02      	cmp	r3, #2
 8009026:	bf28      	it	cs
 8009028:	2302      	movcs	r3, #2
 800902a:	b2da      	uxtb	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	795a      	ldrb	r2, [r3, #5]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	799a      	ldrb	r2, [r3, #6]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	79da      	ldrb	r2, [r3, #7]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	7a1a      	ldrb	r2, [r3, #8]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	721a      	strb	r2, [r3, #8]
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	781a      	ldrb	r2, [r3, #0]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	785a      	ldrb	r2, [r3, #1]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	789a      	ldrb	r2, [r3, #2]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	78da      	ldrb	r2, [r3, #3]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3304      	adds	r3, #4
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3305      	adds	r3, #5
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	021b      	lsls	r3, r3, #8
 800909c:	b29b      	uxth	r3, r3
 800909e:	4313      	orrs	r3, r2
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	799a      	ldrb	r2, [r3, #6]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	889b      	ldrh	r3, [r3, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d009      	beq.n	80090ca <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80090ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090be:	d804      	bhi.n	80090ca <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80090c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090c8:	d901      	bls.n	80090ce <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80090ca:	2303      	movs	r3, #3
 80090cc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d136      	bne.n	8009146 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	78db      	ldrb	r3, [r3, #3]
 80090dc:	f003 0303 	and.w	r3, r3, #3
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d108      	bne.n	80090f6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	889b      	ldrh	r3, [r3, #4]
 80090e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090ec:	f240 8097 	bls.w	800921e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80090f0:	2303      	movs	r3, #3
 80090f2:	75fb      	strb	r3, [r7, #23]
 80090f4:	e093      	b.n	800921e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	78db      	ldrb	r3, [r3, #3]
 80090fa:	f003 0303 	and.w	r3, r3, #3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d107      	bne.n	8009112 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	889b      	ldrh	r3, [r3, #4]
 8009106:	2b40      	cmp	r3, #64	@ 0x40
 8009108:	f240 8089 	bls.w	800921e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800910c:	2303      	movs	r3, #3
 800910e:	75fb      	strb	r3, [r7, #23]
 8009110:	e085      	b.n	800921e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	78db      	ldrb	r3, [r3, #3]
 8009116:	f003 0303 	and.w	r3, r3, #3
 800911a:	2b01      	cmp	r3, #1
 800911c:	d005      	beq.n	800912a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	78db      	ldrb	r3, [r3, #3]
 8009122:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009126:	2b03      	cmp	r3, #3
 8009128:	d10a      	bne.n	8009140 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	799b      	ldrb	r3, [r3, #6]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <USBH_ParseEPDesc+0xde>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	799b      	ldrb	r3, [r3, #6]
 8009136:	2b10      	cmp	r3, #16
 8009138:	d970      	bls.n	800921c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800913a:	2303      	movs	r3, #3
 800913c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800913e:	e06d      	b.n	800921c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009140:	2303      	movs	r3, #3
 8009142:	75fb      	strb	r3, [r7, #23]
 8009144:	e06b      	b.n	800921e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800914c:	2b01      	cmp	r3, #1
 800914e:	d13c      	bne.n	80091ca <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	78db      	ldrb	r3, [r3, #3]
 8009154:	f003 0303 	and.w	r3, r3, #3
 8009158:	2b02      	cmp	r3, #2
 800915a:	d005      	beq.n	8009168 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	78db      	ldrb	r3, [r3, #3]
 8009160:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009164:	2b00      	cmp	r3, #0
 8009166:	d106      	bne.n	8009176 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	889b      	ldrh	r3, [r3, #4]
 800916c:	2b40      	cmp	r3, #64	@ 0x40
 800916e:	d956      	bls.n	800921e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009170:	2303      	movs	r3, #3
 8009172:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009174:	e053      	b.n	800921e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	78db      	ldrb	r3, [r3, #3]
 800917a:	f003 0303 	and.w	r3, r3, #3
 800917e:	2b01      	cmp	r3, #1
 8009180:	d10e      	bne.n	80091a0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	799b      	ldrb	r3, [r3, #6]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d007      	beq.n	800919a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800918e:	2b10      	cmp	r3, #16
 8009190:	d803      	bhi.n	800919a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009196:	2b40      	cmp	r3, #64	@ 0x40
 8009198:	d941      	bls.n	800921e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800919a:	2303      	movs	r3, #3
 800919c:	75fb      	strb	r3, [r7, #23]
 800919e:	e03e      	b.n	800921e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	78db      	ldrb	r3, [r3, #3]
 80091a4:	f003 0303 	and.w	r3, r3, #3
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d10b      	bne.n	80091c4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	799b      	ldrb	r3, [r3, #6]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <USBH_ParseEPDesc+0x162>
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	889b      	ldrh	r3, [r3, #4]
 80091b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091bc:	d32f      	bcc.n	800921e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80091be:	2303      	movs	r3, #3
 80091c0:	75fb      	strb	r3, [r7, #23]
 80091c2:	e02c      	b.n	800921e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80091c4:	2303      	movs	r3, #3
 80091c6:	75fb      	strb	r3, [r7, #23]
 80091c8:	e029      	b.n	800921e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d120      	bne.n	8009216 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	78db      	ldrb	r3, [r3, #3]
 80091d8:	f003 0303 	and.w	r3, r3, #3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d106      	bne.n	80091ee <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	889b      	ldrh	r3, [r3, #4]
 80091e4:	2b08      	cmp	r3, #8
 80091e6:	d01a      	beq.n	800921e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80091e8:	2303      	movs	r3, #3
 80091ea:	75fb      	strb	r3, [r7, #23]
 80091ec:	e017      	b.n	800921e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	78db      	ldrb	r3, [r3, #3]
 80091f2:	f003 0303 	and.w	r3, r3, #3
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d10a      	bne.n	8009210 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	799b      	ldrb	r3, [r3, #6]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <USBH_ParseEPDesc+0x1ae>
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	889b      	ldrh	r3, [r3, #4]
 8009206:	2b08      	cmp	r3, #8
 8009208:	d909      	bls.n	800921e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800920a:	2303      	movs	r3, #3
 800920c:	75fb      	strb	r3, [r7, #23]
 800920e:	e006      	b.n	800921e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009210:	2303      	movs	r3, #3
 8009212:	75fb      	strb	r3, [r7, #23]
 8009214:	e003      	b.n	800921e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009216:	2303      	movs	r3, #3
 8009218:	75fb      	strb	r3, [r7, #23]
 800921a:	e000      	b.n	800921e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800921c:	bf00      	nop
  }

  return status;
 800921e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009220:	4618      	mov	r0, r3
 8009222:	371c      	adds	r7, #28
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	4613      	mov	r3, r2
 8009238:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	3301      	adds	r3, #1
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b03      	cmp	r3, #3
 8009242:	d120      	bne.n	8009286 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	1e9a      	subs	r2, r3, #2
 800924a:	88fb      	ldrh	r3, [r7, #6]
 800924c:	4293      	cmp	r3, r2
 800924e:	bf28      	it	cs
 8009250:	4613      	movcs	r3, r2
 8009252:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	3302      	adds	r3, #2
 8009258:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800925a:	2300      	movs	r3, #0
 800925c:	82fb      	strh	r3, [r7, #22]
 800925e:	e00b      	b.n	8009278 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009260:	8afb      	ldrh	r3, [r7, #22]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	4413      	add	r3, r2
 8009266:	781a      	ldrb	r2, [r3, #0]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	3301      	adds	r3, #1
 8009270:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009272:	8afb      	ldrh	r3, [r7, #22]
 8009274:	3302      	adds	r3, #2
 8009276:	82fb      	strh	r3, [r7, #22]
 8009278:	8afa      	ldrh	r2, [r7, #22]
 800927a:	8abb      	ldrh	r3, [r7, #20]
 800927c:	429a      	cmp	r2, r3
 800927e:	d3ef      	bcc.n	8009260 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2200      	movs	r2, #0
 8009284:	701a      	strb	r2, [r3, #0]
  }
}
 8009286:	bf00      	nop
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009292:	b480      	push	{r7}
 8009294:	b085      	sub	sp, #20
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	7812      	ldrb	r2, [r2, #0]
 80092a4:	4413      	add	r3, r2
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4413      	add	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80092b8:	68fb      	ldr	r3, [r7, #12]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b086      	sub	sp, #24
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	60f8      	str	r0, [r7, #12]
 80092ce:	60b9      	str	r1, [r7, #8]
 80092d0:	4613      	mov	r3, r2
 80092d2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80092d4:	2301      	movs	r3, #1
 80092d6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	789b      	ldrb	r3, [r3, #2]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d002      	beq.n	80092e6 <USBH_CtlReq+0x20>
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d00f      	beq.n	8009304 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80092e4:	e027      	b.n	8009336 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	88fa      	ldrh	r2, [r7, #6]
 80092f0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2201      	movs	r2, #1
 80092f6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2202      	movs	r2, #2
 80092fc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80092fe:	2301      	movs	r3, #1
 8009300:	75fb      	strb	r3, [r7, #23]
      break;
 8009302:	e018      	b.n	8009336 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 f81b 	bl	8009340 <USBH_HandleControl>
 800930a:	4603      	mov	r3, r0
 800930c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800930e:	7dfb      	ldrb	r3, [r7, #23]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <USBH_CtlReq+0x54>
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	2b03      	cmp	r3, #3
 8009318:	d106      	bne.n	8009328 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2201      	movs	r2, #1
 800931e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	761a      	strb	r2, [r3, #24]
      break;
 8009326:	e005      	b.n	8009334 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009328:	7dfb      	ldrb	r3, [r7, #23]
 800932a:	2b02      	cmp	r3, #2
 800932c:	d102      	bne.n	8009334 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2201      	movs	r2, #1
 8009332:	709a      	strb	r2, [r3, #2]
      break;
 8009334:	bf00      	nop
  }
  return status;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af02      	add	r7, sp, #8
 8009346:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009348:	2301      	movs	r3, #1
 800934a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800934c:	2300      	movs	r3, #0
 800934e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	7e1b      	ldrb	r3, [r3, #24]
 8009354:	3b01      	subs	r3, #1
 8009356:	2b0a      	cmp	r3, #10
 8009358:	f200 8156 	bhi.w	8009608 <USBH_HandleControl+0x2c8>
 800935c:	a201      	add	r2, pc, #4	@ (adr r2, 8009364 <USBH_HandleControl+0x24>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	08009391 	.word	0x08009391
 8009368:	080093ab 	.word	0x080093ab
 800936c:	08009415 	.word	0x08009415
 8009370:	0800943b 	.word	0x0800943b
 8009374:	08009473 	.word	0x08009473
 8009378:	0800949d 	.word	0x0800949d
 800937c:	080094ef 	.word	0x080094ef
 8009380:	08009511 	.word	0x08009511
 8009384:	0800954d 	.word	0x0800954d
 8009388:	08009573 	.word	0x08009573
 800938c:	080095b1 	.word	0x080095b1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f103 0110 	add.w	r1, r3, #16
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	795b      	ldrb	r3, [r3, #5]
 800939a:	461a      	mov	r2, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f943 	bl	8009628 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2202      	movs	r2, #2
 80093a6:	761a      	strb	r2, [r3, #24]
      break;
 80093a8:	e139      	b.n	800961e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	795b      	ldrb	r3, [r3, #5]
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fcc5 	bl	8009d40 <USBH_LL_GetURBState>
 80093b6:	4603      	mov	r3, r0
 80093b8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d11e      	bne.n	80093fe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	7c1b      	ldrb	r3, [r3, #16]
 80093c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80093c8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	8adb      	ldrh	r3, [r3, #22]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80093d2:	7b7b      	ldrb	r3, [r7, #13]
 80093d4:	2b80      	cmp	r3, #128	@ 0x80
 80093d6:	d103      	bne.n	80093e0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2203      	movs	r2, #3
 80093dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093de:	e115      	b.n	800960c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2205      	movs	r2, #5
 80093e4:	761a      	strb	r2, [r3, #24]
      break;
 80093e6:	e111      	b.n	800960c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80093e8:	7b7b      	ldrb	r3, [r7, #13]
 80093ea:	2b80      	cmp	r3, #128	@ 0x80
 80093ec:	d103      	bne.n	80093f6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2209      	movs	r2, #9
 80093f2:	761a      	strb	r2, [r3, #24]
      break;
 80093f4:	e10a      	b.n	800960c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2207      	movs	r2, #7
 80093fa:	761a      	strb	r2, [r3, #24]
      break;
 80093fc:	e106      	b.n	800960c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80093fe:	7bbb      	ldrb	r3, [r7, #14]
 8009400:	2b04      	cmp	r3, #4
 8009402:	d003      	beq.n	800940c <USBH_HandleControl+0xcc>
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	2b02      	cmp	r3, #2
 8009408:	f040 8100 	bne.w	800960c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	220b      	movs	r2, #11
 8009410:	761a      	strb	r2, [r3, #24]
      break;
 8009412:	e0fb      	b.n	800960c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800941a:	b29a      	uxth	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6899      	ldr	r1, [r3, #8]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	899a      	ldrh	r2, [r3, #12]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	791b      	ldrb	r3, [r3, #4]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f93a 	bl	80096a6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2204      	movs	r2, #4
 8009436:	761a      	strb	r2, [r3, #24]
      break;
 8009438:	e0f1      	b.n	800961e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	791b      	ldrb	r3, [r3, #4]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fc7d 	bl	8009d40 <USBH_LL_GetURBState>
 8009446:	4603      	mov	r3, r0
 8009448:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d102      	bne.n	8009456 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2209      	movs	r2, #9
 8009454:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	2b05      	cmp	r3, #5
 800945a:	d102      	bne.n	8009462 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800945c:	2303      	movs	r3, #3
 800945e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009460:	e0d6      	b.n	8009610 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	2b04      	cmp	r3, #4
 8009466:	f040 80d3 	bne.w	8009610 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	220b      	movs	r2, #11
 800946e:	761a      	strb	r2, [r3, #24]
      break;
 8009470:	e0ce      	b.n	8009610 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6899      	ldr	r1, [r3, #8]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	899a      	ldrh	r2, [r3, #12]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	795b      	ldrb	r3, [r3, #5]
 800947e:	2001      	movs	r0, #1
 8009480:	9000      	str	r0, [sp, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f8ea 	bl	800965c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2206      	movs	r2, #6
 8009498:	761a      	strb	r2, [r3, #24]
      break;
 800949a:	e0c0      	b.n	800961e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	795b      	ldrb	r3, [r3, #5]
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fc4c 	bl	8009d40 <USBH_LL_GetURBState>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d103      	bne.n	80094ba <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2207      	movs	r2, #7
 80094b6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094b8:	e0ac      	b.n	8009614 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	2b05      	cmp	r3, #5
 80094be:	d105      	bne.n	80094cc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	220c      	movs	r2, #12
 80094c4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80094c6:	2303      	movs	r3, #3
 80094c8:	73fb      	strb	r3, [r7, #15]
      break;
 80094ca:	e0a3      	b.n	8009614 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d103      	bne.n	80094da <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2205      	movs	r2, #5
 80094d6:	761a      	strb	r2, [r3, #24]
      break;
 80094d8:	e09c      	b.n	8009614 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	2b04      	cmp	r3, #4
 80094de:	f040 8099 	bne.w	8009614 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	220b      	movs	r2, #11
 80094e6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80094e8:	2302      	movs	r3, #2
 80094ea:	73fb      	strb	r3, [r7, #15]
      break;
 80094ec:	e092      	b.n	8009614 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	791b      	ldrb	r3, [r3, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	2100      	movs	r1, #0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f8d5 	bl	80096a6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009502:	b29a      	uxth	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2208      	movs	r2, #8
 800950c:	761a      	strb	r2, [r3, #24]

      break;
 800950e:	e086      	b.n	800961e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	791b      	ldrb	r3, [r3, #4]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fc12 	bl	8009d40 <USBH_LL_GetURBState>
 800951c:	4603      	mov	r3, r0
 800951e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009520:	7bbb      	ldrb	r3, [r7, #14]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d105      	bne.n	8009532 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	220d      	movs	r2, #13
 800952a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009530:	e072      	b.n	8009618 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	2b04      	cmp	r3, #4
 8009536:	d103      	bne.n	8009540 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	220b      	movs	r2, #11
 800953c:	761a      	strb	r2, [r3, #24]
      break;
 800953e:	e06b      	b.n	8009618 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	2b05      	cmp	r3, #5
 8009544:	d168      	bne.n	8009618 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009546:	2303      	movs	r3, #3
 8009548:	73fb      	strb	r3, [r7, #15]
      break;
 800954a:	e065      	b.n	8009618 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	795b      	ldrb	r3, [r3, #5]
 8009550:	2201      	movs	r2, #1
 8009552:	9200      	str	r2, [sp, #0]
 8009554:	2200      	movs	r2, #0
 8009556:	2100      	movs	r1, #0
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f87f 	bl	800965c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009564:	b29a      	uxth	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	220a      	movs	r2, #10
 800956e:	761a      	strb	r2, [r3, #24]
      break;
 8009570:	e055      	b.n	800961e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	795b      	ldrb	r3, [r3, #5]
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fbe1 	bl	8009d40 <USBH_LL_GetURBState>
 800957e:	4603      	mov	r3, r0
 8009580:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d105      	bne.n	8009594 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	220d      	movs	r2, #13
 8009590:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009592:	e043      	b.n	800961c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009594:	7bbb      	ldrb	r3, [r7, #14]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d103      	bne.n	80095a2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2209      	movs	r2, #9
 800959e:	761a      	strb	r2, [r3, #24]
      break;
 80095a0:	e03c      	b.n	800961c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
 80095a4:	2b04      	cmp	r3, #4
 80095a6:	d139      	bne.n	800961c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	220b      	movs	r2, #11
 80095ac:	761a      	strb	r2, [r3, #24]
      break;
 80095ae:	e035      	b.n	800961c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	7e5b      	ldrb	r3, [r3, #25]
 80095b4:	3301      	adds	r3, #1
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	765a      	strb	r2, [r3, #25]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	7e5b      	ldrb	r3, [r3, #25]
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d806      	bhi.n	80095d2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80095d0:	e025      	b.n	800961e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80095d8:	2106      	movs	r1, #6
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	795b      	ldrb	r3, [r3, #5]
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f90c 	bl	8009808 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	791b      	ldrb	r3, [r3, #4]
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f906 	bl	8009808 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009602:	2302      	movs	r3, #2
 8009604:	73fb      	strb	r3, [r7, #15]
      break;
 8009606:	e00a      	b.n	800961e <USBH_HandleControl+0x2de>

    default:
      break;
 8009608:	bf00      	nop
 800960a:	e008      	b.n	800961e <USBH_HandleControl+0x2de>
      break;
 800960c:	bf00      	nop
 800960e:	e006      	b.n	800961e <USBH_HandleControl+0x2de>
      break;
 8009610:	bf00      	nop
 8009612:	e004      	b.n	800961e <USBH_HandleControl+0x2de>
      break;
 8009614:	bf00      	nop
 8009616:	e002      	b.n	800961e <USBH_HandleControl+0x2de>
      break;
 8009618:	bf00      	nop
 800961a:	e000      	b.n	800961e <USBH_HandleControl+0x2de>
      break;
 800961c:	bf00      	nop
  }

  return status;
 800961e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af04      	add	r7, sp, #16
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	4613      	mov	r3, r2
 8009634:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009636:	79f9      	ldrb	r1, [r7, #7]
 8009638:	2300      	movs	r3, #0
 800963a:	9303      	str	r3, [sp, #12]
 800963c:	2308      	movs	r3, #8
 800963e:	9302      	str	r3, [sp, #8]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	2300      	movs	r3, #0
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	2300      	movs	r3, #0
 800964a:	2200      	movs	r2, #0
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 fb46 	bl	8009cde <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b088      	sub	sp, #32
 8009660:	af04      	add	r7, sp, #16
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	4611      	mov	r1, r2
 8009668:	461a      	mov	r2, r3
 800966a:	460b      	mov	r3, r1
 800966c:	80fb      	strh	r3, [r7, #6]
 800966e:	4613      	mov	r3, r2
 8009670:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009680:	7979      	ldrb	r1, [r7, #5]
 8009682:	7e3b      	ldrb	r3, [r7, #24]
 8009684:	9303      	str	r3, [sp, #12]
 8009686:	88fb      	ldrh	r3, [r7, #6]
 8009688:	9302      	str	r3, [sp, #8]
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	9301      	str	r3, [sp, #4]
 800968e:	2301      	movs	r3, #1
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	2300      	movs	r3, #0
 8009694:	2200      	movs	r2, #0
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fb21 	bl	8009cde <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b088      	sub	sp, #32
 80096aa:	af04      	add	r7, sp, #16
 80096ac:	60f8      	str	r0, [r7, #12]
 80096ae:	60b9      	str	r1, [r7, #8]
 80096b0:	4611      	mov	r1, r2
 80096b2:	461a      	mov	r2, r3
 80096b4:	460b      	mov	r3, r1
 80096b6:	80fb      	strh	r3, [r7, #6]
 80096b8:	4613      	mov	r3, r2
 80096ba:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096bc:	7979      	ldrb	r1, [r7, #5]
 80096be:	2300      	movs	r3, #0
 80096c0:	9303      	str	r3, [sp, #12]
 80096c2:	88fb      	ldrh	r3, [r7, #6]
 80096c4:	9302      	str	r3, [sp, #8]
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	2301      	movs	r3, #1
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	2300      	movs	r3, #0
 80096d0:	2201      	movs	r2, #1
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 fb03 	bl	8009cde <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80096d8:	2300      	movs	r3, #0

}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b088      	sub	sp, #32
 80096e6:	af04      	add	r7, sp, #16
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	60b9      	str	r1, [r7, #8]
 80096ec:	4611      	mov	r1, r2
 80096ee:	461a      	mov	r2, r3
 80096f0:	460b      	mov	r3, r1
 80096f2:	80fb      	strh	r3, [r7, #6]
 80096f4:	4613      	mov	r3, r2
 80096f6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009702:	2300      	movs	r3, #0
 8009704:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009706:	7979      	ldrb	r1, [r7, #5]
 8009708:	7e3b      	ldrb	r3, [r7, #24]
 800970a:	9303      	str	r3, [sp, #12]
 800970c:	88fb      	ldrh	r3, [r7, #6]
 800970e:	9302      	str	r3, [sp, #8]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	9301      	str	r3, [sp, #4]
 8009714:	2301      	movs	r3, #1
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	2302      	movs	r3, #2
 800971a:	2200      	movs	r2, #0
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 fade 	bl	8009cde <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b088      	sub	sp, #32
 8009730:	af04      	add	r7, sp, #16
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	4611      	mov	r1, r2
 8009738:	461a      	mov	r2, r3
 800973a:	460b      	mov	r3, r1
 800973c:	80fb      	strh	r3, [r7, #6]
 800973e:	4613      	mov	r3, r2
 8009740:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009742:	7979      	ldrb	r1, [r7, #5]
 8009744:	2300      	movs	r3, #0
 8009746:	9303      	str	r3, [sp, #12]
 8009748:	88fb      	ldrh	r3, [r7, #6]
 800974a:	9302      	str	r3, [sp, #8]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	2301      	movs	r3, #1
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	2302      	movs	r3, #2
 8009756:	2201      	movs	r2, #1
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 fac0 	bl	8009cde <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af04      	add	r7, sp, #16
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	4608      	mov	r0, r1
 8009772:	4611      	mov	r1, r2
 8009774:	461a      	mov	r2, r3
 8009776:	4603      	mov	r3, r0
 8009778:	70fb      	strb	r3, [r7, #3]
 800977a:	460b      	mov	r3, r1
 800977c:	70bb      	strb	r3, [r7, #2]
 800977e:	4613      	mov	r3, r2
 8009780:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009782:	7878      	ldrb	r0, [r7, #1]
 8009784:	78ba      	ldrb	r2, [r7, #2]
 8009786:	78f9      	ldrb	r1, [r7, #3]
 8009788:	8b3b      	ldrh	r3, [r7, #24]
 800978a:	9302      	str	r3, [sp, #8]
 800978c:	7d3b      	ldrb	r3, [r7, #20]
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	7c3b      	ldrb	r3, [r7, #16]
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	4603      	mov	r3, r0
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fa53 	bl	8009c42 <USBH_LL_OpenPipe>

  return USBH_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b082      	sub	sp, #8
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	460b      	mov	r3, r1
 80097b0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80097b2:	78fb      	ldrb	r3, [r7, #3]
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fa72 	bl	8009ca0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f836 	bl	8009844 <USBH_GetFreePipe>
 80097d8:	4603      	mov	r3, r0
 80097da:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80097dc:	89fb      	ldrh	r3, [r7, #14]
 80097de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d00a      	beq.n	80097fc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80097e6:	78fa      	ldrb	r2, [r7, #3]
 80097e8:	89fb      	ldrh	r3, [r7, #14]
 80097ea:	f003 030f 	and.w	r3, r3, #15
 80097ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	33e0      	adds	r3, #224	@ 0xe0
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	440b      	add	r3, r1
 80097fa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80097fc:	89fb      	ldrh	r3, [r7, #14]
 80097fe:	b2db      	uxtb	r3, r3
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	2b0f      	cmp	r3, #15
 8009818:	d80d      	bhi.n	8009836 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800981a:	78fb      	ldrb	r3, [r7, #3]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	33e0      	adds	r3, #224	@ 0xe0
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	78fb      	ldrb	r3, [r7, #3]
 8009828:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	33e0      	adds	r3, #224	@ 0xe0
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	440b      	add	r3, r1
 8009834:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009850:	2300      	movs	r3, #0
 8009852:	73fb      	strb	r3, [r7, #15]
 8009854:	e00f      	b.n	8009876 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009856:	7bfb      	ldrb	r3, [r7, #15]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	33e0      	adds	r3, #224	@ 0xe0
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d102      	bne.n	8009870 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	b29b      	uxth	r3, r3
 800986e:	e007      	b.n	8009880 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	3301      	adds	r3, #1
 8009874:	73fb      	strb	r3, [r7, #15]
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	2b0f      	cmp	r3, #15
 800987a:	d9ec      	bls.n	8009856 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800987c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009880:	4618      	mov	r0, r3
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009890:	2201      	movs	r2, #1
 8009892:	490e      	ldr	r1, [pc, #56]	@ (80098cc <MX_USB_HOST_Init+0x40>)
 8009894:	480e      	ldr	r0, [pc, #56]	@ (80098d0 <MX_USB_HOST_Init+0x44>)
 8009896:	f7fe fb15 	bl	8007ec4 <USBH_Init>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80098a0:	f7f7 fe24 	bl	80014ec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80098a4:	490b      	ldr	r1, [pc, #44]	@ (80098d4 <MX_USB_HOST_Init+0x48>)
 80098a6:	480a      	ldr	r0, [pc, #40]	@ (80098d0 <MX_USB_HOST_Init+0x44>)
 80098a8:	f7fe fbb9 	bl	800801e <USBH_RegisterClass>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80098b2:	f7f7 fe1b 	bl	80014ec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80098b6:	4806      	ldr	r0, [pc, #24]	@ (80098d0 <MX_USB_HOST_Init+0x44>)
 80098b8:	f7fe fc3d 	bl	8008136 <USBH_Start>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80098c2:	f7f7 fe13 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80098c6:	bf00      	nop
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	080098ed 	.word	0x080098ed
 80098d0:	200003e0 	.word	0x200003e0
 80098d4:	2000000c 	.word	0x2000000c

080098d8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80098dc:	4802      	ldr	r0, [pc, #8]	@ (80098e8 <MX_USB_HOST_Process+0x10>)
 80098de:	f7fe fc3b 	bl	8008158 <USBH_Process>
}
 80098e2:	bf00      	nop
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	200003e0 	.word	0x200003e0

080098ec <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d819      	bhi.n	8009934 <USBH_UserProcess+0x48>
 8009900:	a201      	add	r2, pc, #4	@ (adr r2, 8009908 <USBH_UserProcess+0x1c>)
 8009902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009906:	bf00      	nop
 8009908:	08009935 	.word	0x08009935
 800990c:	08009925 	.word	0x08009925
 8009910:	08009935 	.word	0x08009935
 8009914:	0800992d 	.word	0x0800992d
 8009918:	0800991d 	.word	0x0800991d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800991c:	4b09      	ldr	r3, [pc, #36]	@ (8009944 <USBH_UserProcess+0x58>)
 800991e:	2203      	movs	r2, #3
 8009920:	701a      	strb	r2, [r3, #0]
  break;
 8009922:	e008      	b.n	8009936 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009924:	4b07      	ldr	r3, [pc, #28]	@ (8009944 <USBH_UserProcess+0x58>)
 8009926:	2202      	movs	r2, #2
 8009928:	701a      	strb	r2, [r3, #0]
  break;
 800992a:	e004      	b.n	8009936 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800992c:	4b05      	ldr	r3, [pc, #20]	@ (8009944 <USBH_UserProcess+0x58>)
 800992e:	2201      	movs	r2, #1
 8009930:	701a      	strb	r2, [r3, #0]
  break;
 8009932:	e000      	b.n	8009936 <USBH_UserProcess+0x4a>

  default:
  break;
 8009934:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009936:	bf00      	nop
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	200007b8 	.word	0x200007b8

08009948 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	@ 0x28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009950:	f107 0314 	add.w	r3, r7, #20
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	605a      	str	r2, [r3, #4]
 800995a:	609a      	str	r2, [r3, #8]
 800995c:	60da      	str	r2, [r3, #12]
 800995e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009968:	d147      	bne.n	80099fa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800996a:	2300      	movs	r3, #0
 800996c:	613b      	str	r3, [r7, #16]
 800996e:	4b25      	ldr	r3, [pc, #148]	@ (8009a04 <HAL_HCD_MspInit+0xbc>)
 8009970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009972:	4a24      	ldr	r2, [pc, #144]	@ (8009a04 <HAL_HCD_MspInit+0xbc>)
 8009974:	f043 0301 	orr.w	r3, r3, #1
 8009978:	6313      	str	r3, [r2, #48]	@ 0x30
 800997a:	4b22      	ldr	r3, [pc, #136]	@ (8009a04 <HAL_HCD_MspInit+0xbc>)
 800997c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	613b      	str	r3, [r7, #16]
 8009984:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009986:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800998a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800998c:	2300      	movs	r3, #0
 800998e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009990:	2300      	movs	r3, #0
 8009992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009994:	f107 0314 	add.w	r3, r7, #20
 8009998:	4619      	mov	r1, r3
 800999a:	481b      	ldr	r0, [pc, #108]	@ (8009a08 <HAL_HCD_MspInit+0xc0>)
 800999c:	f7f8 fef8 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80099a0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80099a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099a6:	2302      	movs	r3, #2
 80099a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099ae:	2300      	movs	r3, #0
 80099b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099b2:	230a      	movs	r3, #10
 80099b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099b6:	f107 0314 	add.w	r3, r7, #20
 80099ba:	4619      	mov	r1, r3
 80099bc:	4812      	ldr	r0, [pc, #72]	@ (8009a08 <HAL_HCD_MspInit+0xc0>)
 80099be:	f7f8 fee7 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099c2:	4b10      	ldr	r3, [pc, #64]	@ (8009a04 <HAL_HCD_MspInit+0xbc>)
 80099c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c6:	4a0f      	ldr	r2, [pc, #60]	@ (8009a04 <HAL_HCD_MspInit+0xbc>)
 80099c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099cc:	6353      	str	r3, [r2, #52]	@ 0x34
 80099ce:	2300      	movs	r3, #0
 80099d0:	60fb      	str	r3, [r7, #12]
 80099d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009a04 <HAL_HCD_MspInit+0xbc>)
 80099d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099d6:	4a0b      	ldr	r2, [pc, #44]	@ (8009a04 <HAL_HCD_MspInit+0xbc>)
 80099d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80099dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80099de:	4b09      	ldr	r3, [pc, #36]	@ (8009a04 <HAL_HCD_MspInit+0xbc>)
 80099e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80099ea:	2200      	movs	r2, #0
 80099ec:	2100      	movs	r1, #0
 80099ee:	2043      	movs	r0, #67	@ 0x43
 80099f0:	f7f8 f941 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80099f4:	2043      	movs	r0, #67	@ 0x43
 80099f6:	f7f8 f95a 	bl	8001cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099fa:	bf00      	nop
 80099fc:	3728      	adds	r7, #40	@ 0x28
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	40023800 	.word	0x40023800
 8009a08:	40020000 	.word	0x40020000

08009a0c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe ff73 	bl	8008906 <USBH_LL_IncTimer>
}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe ffab 	bl	8008992 <USBH_LL_Connect>
}
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fe ffb4 	bl	80089c0 <USBH_LL_Disconnect>
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe ff65 	bl	800895a <USBH_LL_PortEnabled>
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe ff65 	bl	8008976 <USBH_LL_PortDisabled>
}
 8009aac:	bf00      	nop
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d12a      	bne.n	8009b1c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009ac6:	4a18      	ldr	r2, [pc, #96]	@ (8009b28 <USBH_LL_Init+0x74>)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a15      	ldr	r2, [pc, #84]	@ (8009b28 <USBH_LL_Init+0x74>)
 8009ad2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ad6:	4b14      	ldr	r3, [pc, #80]	@ (8009b28 <USBH_LL_Init+0x74>)
 8009ad8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009adc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009ade:	4b12      	ldr	r3, [pc, #72]	@ (8009b28 <USBH_LL_Init+0x74>)
 8009ae0:	2208      	movs	r2, #8
 8009ae2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009ae4:	4b10      	ldr	r3, [pc, #64]	@ (8009b28 <USBH_LL_Init+0x74>)
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009aea:	4b0f      	ldr	r3, [pc, #60]	@ (8009b28 <USBH_LL_Init+0x74>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009af0:	4b0d      	ldr	r3, [pc, #52]	@ (8009b28 <USBH_LL_Init+0x74>)
 8009af2:	2202      	movs	r2, #2
 8009af4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009af6:	4b0c      	ldr	r3, [pc, #48]	@ (8009b28 <USBH_LL_Init+0x74>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009afc:	480a      	ldr	r0, [pc, #40]	@ (8009b28 <USBH_LL_Init+0x74>)
 8009afe:	f7f8 fffc 	bl	8002afa <HAL_HCD_Init>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009b08:	f7f7 fcf0 	bl	80014ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009b0c:	4806      	ldr	r0, [pc, #24]	@ (8009b28 <USBH_LL_Init+0x74>)
 8009b0e:	f7f9 fc5d 	bl	80033cc <HAL_HCD_GetCurrentFrame>
 8009b12:	4603      	mov	r3, r0
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7fe fee6 	bl	80088e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	200007bc 	.word	0x200007bc

08009b2c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7f9 fbca 	bl	80032dc <HAL_HCD_Start>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 f95e 	bl	8009e10 <USBH_Get_USB_Status>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7f9 fbd2 	bl	8003322 <HAL_HCD_Stop>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 f943 	bl	8009e10 <USBH_Get_USB_Status>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7f9 fc1c 	bl	80033e8 <HAL_HCD_GetCurrentSpeed>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d00c      	beq.n	8009bd0 <USBH_LL_GetSpeed+0x38>
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d80d      	bhi.n	8009bd6 <USBH_LL_GetSpeed+0x3e>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <USBH_LL_GetSpeed+0x2c>
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d003      	beq.n	8009bca <USBH_LL_GetSpeed+0x32>
 8009bc2:	e008      	b.n	8009bd6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc8:	e008      	b.n	8009bdc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	73fb      	strb	r3, [r7, #15]
    break;
 8009bce:	e005      	b.n	8009bdc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd4:	e002      	b.n	8009bdc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bda:	bf00      	nop
  }
  return  speed;
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7f9 fbad 	bl	800335c <HAL_HCD_ResetPort>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 f901 	bl	8009e10 <USBH_Get_USB_Status>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c2e:	78fa      	ldrb	r2, [r7, #3]
 8009c30:	4611      	mov	r1, r2
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7f9 fbb5 	bl	80033a2 <HAL_HCD_HC_GetXferCount>
 8009c38:	4603      	mov	r3, r0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009c42:	b590      	push	{r4, r7, lr}
 8009c44:	b089      	sub	sp, #36	@ 0x24
 8009c46:	af04      	add	r7, sp, #16
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	4608      	mov	r0, r1
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4603      	mov	r3, r0
 8009c52:	70fb      	strb	r3, [r7, #3]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70bb      	strb	r3, [r7, #2]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009c6a:	787c      	ldrb	r4, [r7, #1]
 8009c6c:	78ba      	ldrb	r2, [r7, #2]
 8009c6e:	78f9      	ldrb	r1, [r7, #3]
 8009c70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009c72:	9302      	str	r3, [sp, #8]
 8009c74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c78:	9301      	str	r3, [sp, #4]
 8009c7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	4623      	mov	r3, r4
 8009c82:	f7f8 ffa1 	bl	8002bc8 <HAL_HCD_HC_Init>
 8009c86:	4603      	mov	r3, r0
 8009c88:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 f8bf 	bl	8009e10 <USBH_Get_USB_Status>
 8009c92:	4603      	mov	r3, r0
 8009c94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd90      	pop	{r4, r7, pc}

08009ca0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009cba:	78fa      	ldrb	r2, [r7, #3]
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f9 f83a 	bl	8002d38 <HAL_HCD_HC_Halt>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 f8a0 	bl	8009e10 <USBH_Get_USB_Status>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009cde:	b590      	push	{r4, r7, lr}
 8009ce0:	b089      	sub	sp, #36	@ 0x24
 8009ce2:	af04      	add	r7, sp, #16
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	4611      	mov	r1, r2
 8009cea:	461a      	mov	r2, r3
 8009cec:	4603      	mov	r3, r0
 8009cee:	70fb      	strb	r3, [r7, #3]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70bb      	strb	r3, [r7, #2]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009d06:	787c      	ldrb	r4, [r7, #1]
 8009d08:	78ba      	ldrb	r2, [r7, #2]
 8009d0a:	78f9      	ldrb	r1, [r7, #3]
 8009d0c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009d10:	9303      	str	r3, [sp, #12]
 8009d12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009d14:	9302      	str	r3, [sp, #8]
 8009d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d18:	9301      	str	r3, [sp, #4]
 8009d1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	4623      	mov	r3, r4
 8009d22:	f7f9 f82d 	bl	8002d80 <HAL_HCD_HC_SubmitRequest>
 8009d26:	4603      	mov	r3, r0
 8009d28:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 f86f 	bl	8009e10 <USBH_Get_USB_Status>
 8009d32:	4603      	mov	r3, r0
 8009d34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd90      	pop	{r4, r7, pc}

08009d40 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d52:	78fa      	ldrb	r2, [r7, #3]
 8009d54:	4611      	mov	r1, r2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7f9 fb0e 	bl	8003378 <HAL_HCD_HC_GetURBState>
 8009d5c:	4603      	mov	r3, r0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d103      	bne.n	8009d84 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009d7c:	78fb      	ldrb	r3, [r7, #3]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 f872 	bl	8009e68 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009d84:	20c8      	movs	r0, #200	@ 0xc8
 8009d86:	f7f7 fe77 	bl	8001a78 <HAL_Delay>
  return USBH_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
 8009da0:	4613      	mov	r3, r2
 8009da2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009daa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009dac:	78fa      	ldrb	r2, [r7, #3]
 8009dae:	68f9      	ldr	r1, [r7, #12]
 8009db0:	4613      	mov	r3, r2
 8009db2:	011b      	lsls	r3, r3, #4
 8009db4:	1a9b      	subs	r3, r3, r2
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	440b      	add	r3, r1
 8009dba:	3317      	adds	r3, #23
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009dc2:	78fa      	ldrb	r2, [r7, #3]
 8009dc4:	68f9      	ldr	r1, [r7, #12]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	011b      	lsls	r3, r3, #4
 8009dca:	1a9b      	subs	r3, r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	440b      	add	r3, r1
 8009dd0:	333c      	adds	r3, #60	@ 0x3c
 8009dd2:	78ba      	ldrb	r2, [r7, #2]
 8009dd4:	701a      	strb	r2, [r3, #0]
 8009dd6:	e009      	b.n	8009dec <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009dd8:	78fa      	ldrb	r2, [r7, #3]
 8009dda:	68f9      	ldr	r1, [r7, #12]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	011b      	lsls	r3, r3, #4
 8009de0:	1a9b      	subs	r3, r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	440b      	add	r3, r1
 8009de6:	333d      	adds	r3, #61	@ 0x3d
 8009de8:	78ba      	ldrb	r2, [r7, #2]
 8009dea:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7f7 fe38 	bl	8001a78 <HAL_Delay>
}
 8009e08:	bf00      	nop
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e1e:	79fb      	ldrb	r3, [r7, #7]
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	d817      	bhi.n	8009e54 <USBH_Get_USB_Status+0x44>
 8009e24:	a201      	add	r2, pc, #4	@ (adr r2, 8009e2c <USBH_Get_USB_Status+0x1c>)
 8009e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2a:	bf00      	nop
 8009e2c:	08009e3d 	.word	0x08009e3d
 8009e30:	08009e43 	.word	0x08009e43
 8009e34:	08009e49 	.word	0x08009e49
 8009e38:	08009e4f 	.word	0x08009e4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e40:	e00b      	b.n	8009e5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009e42:	2302      	movs	r3, #2
 8009e44:	73fb      	strb	r3, [r7, #15]
    break;
 8009e46:	e008      	b.n	8009e5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4c:	e005      	b.n	8009e5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009e4e:	2302      	movs	r3, #2
 8009e50:	73fb      	strb	r3, [r7, #15]
    break;
 8009e52:	e002      	b.n	8009e5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009e54:	2302      	movs	r3, #2
 8009e56:	73fb      	strb	r3, [r7, #15]
    break;
 8009e58:	bf00      	nop
  }
  return usb_status;
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009e76:	79fb      	ldrb	r3, [r7, #7]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d102      	bne.n	8009e82 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73fb      	strb	r3, [r7, #15]
 8009e80:	e001      	b.n	8009e86 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009e82:	2301      	movs	r3, #1
 8009e84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	4803      	ldr	r0, [pc, #12]	@ (8009e9c <MX_DriverVbusFS+0x34>)
 8009e8e:	f7f8 fe1b 	bl	8002ac8 <HAL_GPIO_WritePin>
}
 8009e92:	bf00      	nop
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	40020800 	.word	0x40020800

08009ea0 <malloc>:
 8009ea0:	4b02      	ldr	r3, [pc, #8]	@ (8009eac <malloc+0xc>)
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	6818      	ldr	r0, [r3, #0]
 8009ea6:	f000 b82d 	b.w	8009f04 <_malloc_r>
 8009eaa:	bf00      	nop
 8009eac:	2000002c 	.word	0x2000002c

08009eb0 <free>:
 8009eb0:	4b02      	ldr	r3, [pc, #8]	@ (8009ebc <free+0xc>)
 8009eb2:	4601      	mov	r1, r0
 8009eb4:	6818      	ldr	r0, [r3, #0]
 8009eb6:	f000 b8f5 	b.w	800a0a4 <_free_r>
 8009eba:	bf00      	nop
 8009ebc:	2000002c 	.word	0x2000002c

08009ec0 <sbrk_aligned>:
 8009ec0:	b570      	push	{r4, r5, r6, lr}
 8009ec2:	4e0f      	ldr	r6, [pc, #60]	@ (8009f00 <sbrk_aligned+0x40>)
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	6831      	ldr	r1, [r6, #0]
 8009ec8:	4605      	mov	r5, r0
 8009eca:	b911      	cbnz	r1, 8009ed2 <sbrk_aligned+0x12>
 8009ecc:	f000 f8ae 	bl	800a02c <_sbrk_r>
 8009ed0:	6030      	str	r0, [r6, #0]
 8009ed2:	4621      	mov	r1, r4
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f000 f8a9 	bl	800a02c <_sbrk_r>
 8009eda:	1c43      	adds	r3, r0, #1
 8009edc:	d103      	bne.n	8009ee6 <sbrk_aligned+0x26>
 8009ede:	f04f 34ff 	mov.w	r4, #4294967295
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	bd70      	pop	{r4, r5, r6, pc}
 8009ee6:	1cc4      	adds	r4, r0, #3
 8009ee8:	f024 0403 	bic.w	r4, r4, #3
 8009eec:	42a0      	cmp	r0, r4
 8009eee:	d0f8      	beq.n	8009ee2 <sbrk_aligned+0x22>
 8009ef0:	1a21      	subs	r1, r4, r0
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f000 f89a 	bl	800a02c <_sbrk_r>
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d1f2      	bne.n	8009ee2 <sbrk_aligned+0x22>
 8009efc:	e7ef      	b.n	8009ede <sbrk_aligned+0x1e>
 8009efe:	bf00      	nop
 8009f00:	20000b9c 	.word	0x20000b9c

08009f04 <_malloc_r>:
 8009f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f08:	1ccd      	adds	r5, r1, #3
 8009f0a:	f025 0503 	bic.w	r5, r5, #3
 8009f0e:	3508      	adds	r5, #8
 8009f10:	2d0c      	cmp	r5, #12
 8009f12:	bf38      	it	cc
 8009f14:	250c      	movcc	r5, #12
 8009f16:	2d00      	cmp	r5, #0
 8009f18:	4606      	mov	r6, r0
 8009f1a:	db01      	blt.n	8009f20 <_malloc_r+0x1c>
 8009f1c:	42a9      	cmp	r1, r5
 8009f1e:	d904      	bls.n	8009f2a <_malloc_r+0x26>
 8009f20:	230c      	movs	r3, #12
 8009f22:	6033      	str	r3, [r6, #0]
 8009f24:	2000      	movs	r0, #0
 8009f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a000 <_malloc_r+0xfc>
 8009f2e:	f000 f869 	bl	800a004 <__malloc_lock>
 8009f32:	f8d8 3000 	ldr.w	r3, [r8]
 8009f36:	461c      	mov	r4, r3
 8009f38:	bb44      	cbnz	r4, 8009f8c <_malloc_r+0x88>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f7ff ffbf 	bl	8009ec0 <sbrk_aligned>
 8009f42:	1c43      	adds	r3, r0, #1
 8009f44:	4604      	mov	r4, r0
 8009f46:	d158      	bne.n	8009ffa <_malloc_r+0xf6>
 8009f48:	f8d8 4000 	ldr.w	r4, [r8]
 8009f4c:	4627      	mov	r7, r4
 8009f4e:	2f00      	cmp	r7, #0
 8009f50:	d143      	bne.n	8009fda <_malloc_r+0xd6>
 8009f52:	2c00      	cmp	r4, #0
 8009f54:	d04b      	beq.n	8009fee <_malloc_r+0xea>
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	4639      	mov	r1, r7
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	eb04 0903 	add.w	r9, r4, r3
 8009f60:	f000 f864 	bl	800a02c <_sbrk_r>
 8009f64:	4581      	cmp	r9, r0
 8009f66:	d142      	bne.n	8009fee <_malloc_r+0xea>
 8009f68:	6821      	ldr	r1, [r4, #0]
 8009f6a:	1a6d      	subs	r5, r5, r1
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f7ff ffa6 	bl	8009ec0 <sbrk_aligned>
 8009f74:	3001      	adds	r0, #1
 8009f76:	d03a      	beq.n	8009fee <_malloc_r+0xea>
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	442b      	add	r3, r5
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	bb62      	cbnz	r2, 8009fe0 <_malloc_r+0xdc>
 8009f86:	f8c8 7000 	str.w	r7, [r8]
 8009f8a:	e00f      	b.n	8009fac <_malloc_r+0xa8>
 8009f8c:	6822      	ldr	r2, [r4, #0]
 8009f8e:	1b52      	subs	r2, r2, r5
 8009f90:	d420      	bmi.n	8009fd4 <_malloc_r+0xd0>
 8009f92:	2a0b      	cmp	r2, #11
 8009f94:	d917      	bls.n	8009fc6 <_malloc_r+0xc2>
 8009f96:	1961      	adds	r1, r4, r5
 8009f98:	42a3      	cmp	r3, r4
 8009f9a:	6025      	str	r5, [r4, #0]
 8009f9c:	bf18      	it	ne
 8009f9e:	6059      	strne	r1, [r3, #4]
 8009fa0:	6863      	ldr	r3, [r4, #4]
 8009fa2:	bf08      	it	eq
 8009fa4:	f8c8 1000 	streq.w	r1, [r8]
 8009fa8:	5162      	str	r2, [r4, r5]
 8009faa:	604b      	str	r3, [r1, #4]
 8009fac:	4630      	mov	r0, r6
 8009fae:	f000 f82f 	bl	800a010 <__malloc_unlock>
 8009fb2:	f104 000b 	add.w	r0, r4, #11
 8009fb6:	1d23      	adds	r3, r4, #4
 8009fb8:	f020 0007 	bic.w	r0, r0, #7
 8009fbc:	1ac2      	subs	r2, r0, r3
 8009fbe:	bf1c      	itt	ne
 8009fc0:	1a1b      	subne	r3, r3, r0
 8009fc2:	50a3      	strne	r3, [r4, r2]
 8009fc4:	e7af      	b.n	8009f26 <_malloc_r+0x22>
 8009fc6:	6862      	ldr	r2, [r4, #4]
 8009fc8:	42a3      	cmp	r3, r4
 8009fca:	bf0c      	ite	eq
 8009fcc:	f8c8 2000 	streq.w	r2, [r8]
 8009fd0:	605a      	strne	r2, [r3, #4]
 8009fd2:	e7eb      	b.n	8009fac <_malloc_r+0xa8>
 8009fd4:	4623      	mov	r3, r4
 8009fd6:	6864      	ldr	r4, [r4, #4]
 8009fd8:	e7ae      	b.n	8009f38 <_malloc_r+0x34>
 8009fda:	463c      	mov	r4, r7
 8009fdc:	687f      	ldr	r7, [r7, #4]
 8009fde:	e7b6      	b.n	8009f4e <_malloc_r+0x4a>
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	42a3      	cmp	r3, r4
 8009fe6:	d1fb      	bne.n	8009fe0 <_malloc_r+0xdc>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	6053      	str	r3, [r2, #4]
 8009fec:	e7de      	b.n	8009fac <_malloc_r+0xa8>
 8009fee:	230c      	movs	r3, #12
 8009ff0:	6033      	str	r3, [r6, #0]
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f000 f80c 	bl	800a010 <__malloc_unlock>
 8009ff8:	e794      	b.n	8009f24 <_malloc_r+0x20>
 8009ffa:	6005      	str	r5, [r0, #0]
 8009ffc:	e7d6      	b.n	8009fac <_malloc_r+0xa8>
 8009ffe:	bf00      	nop
 800a000:	20000ba0 	.word	0x20000ba0

0800a004 <__malloc_lock>:
 800a004:	4801      	ldr	r0, [pc, #4]	@ (800a00c <__malloc_lock+0x8>)
 800a006:	f000 b84b 	b.w	800a0a0 <__retarget_lock_acquire_recursive>
 800a00a:	bf00      	nop
 800a00c:	20000ce0 	.word	0x20000ce0

0800a010 <__malloc_unlock>:
 800a010:	4801      	ldr	r0, [pc, #4]	@ (800a018 <__malloc_unlock+0x8>)
 800a012:	f000 b846 	b.w	800a0a2 <__retarget_lock_release_recursive>
 800a016:	bf00      	nop
 800a018:	20000ce0 	.word	0x20000ce0

0800a01c <memset>:
 800a01c:	4402      	add	r2, r0
 800a01e:	4603      	mov	r3, r0
 800a020:	4293      	cmp	r3, r2
 800a022:	d100      	bne.n	800a026 <memset+0xa>
 800a024:	4770      	bx	lr
 800a026:	f803 1b01 	strb.w	r1, [r3], #1
 800a02a:	e7f9      	b.n	800a020 <memset+0x4>

0800a02c <_sbrk_r>:
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	4d06      	ldr	r5, [pc, #24]	@ (800a048 <_sbrk_r+0x1c>)
 800a030:	2300      	movs	r3, #0
 800a032:	4604      	mov	r4, r0
 800a034:	4608      	mov	r0, r1
 800a036:	602b      	str	r3, [r5, #0]
 800a038:	f7f7 fc3a 	bl	80018b0 <_sbrk>
 800a03c:	1c43      	adds	r3, r0, #1
 800a03e:	d102      	bne.n	800a046 <_sbrk_r+0x1a>
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	b103      	cbz	r3, 800a046 <_sbrk_r+0x1a>
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	bd38      	pop	{r3, r4, r5, pc}
 800a048:	20000cdc 	.word	0x20000cdc

0800a04c <__errno>:
 800a04c:	4b01      	ldr	r3, [pc, #4]	@ (800a054 <__errno+0x8>)
 800a04e:	6818      	ldr	r0, [r3, #0]
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	2000002c 	.word	0x2000002c

0800a058 <__libc_init_array>:
 800a058:	b570      	push	{r4, r5, r6, lr}
 800a05a:	4d0d      	ldr	r5, [pc, #52]	@ (800a090 <__libc_init_array+0x38>)
 800a05c:	4c0d      	ldr	r4, [pc, #52]	@ (800a094 <__libc_init_array+0x3c>)
 800a05e:	1b64      	subs	r4, r4, r5
 800a060:	10a4      	asrs	r4, r4, #2
 800a062:	2600      	movs	r6, #0
 800a064:	42a6      	cmp	r6, r4
 800a066:	d109      	bne.n	800a07c <__libc_init_array+0x24>
 800a068:	4d0b      	ldr	r5, [pc, #44]	@ (800a098 <__libc_init_array+0x40>)
 800a06a:	4c0c      	ldr	r4, [pc, #48]	@ (800a09c <__libc_init_array+0x44>)
 800a06c:	f001 f888 	bl	800b180 <_init>
 800a070:	1b64      	subs	r4, r4, r5
 800a072:	10a4      	asrs	r4, r4, #2
 800a074:	2600      	movs	r6, #0
 800a076:	42a6      	cmp	r6, r4
 800a078:	d105      	bne.n	800a086 <__libc_init_array+0x2e>
 800a07a:	bd70      	pop	{r4, r5, r6, pc}
 800a07c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a080:	4798      	blx	r3
 800a082:	3601      	adds	r6, #1
 800a084:	e7ee      	b.n	800a064 <__libc_init_array+0xc>
 800a086:	f855 3b04 	ldr.w	r3, [r5], #4
 800a08a:	4798      	blx	r3
 800a08c:	3601      	adds	r6, #1
 800a08e:	e7f2      	b.n	800a076 <__libc_init_array+0x1e>
 800a090:	0800b3a0 	.word	0x0800b3a0
 800a094:	0800b3a0 	.word	0x0800b3a0
 800a098:	0800b3a0 	.word	0x0800b3a0
 800a09c:	0800b3a4 	.word	0x0800b3a4

0800a0a0 <__retarget_lock_acquire_recursive>:
 800a0a0:	4770      	bx	lr

0800a0a2 <__retarget_lock_release_recursive>:
 800a0a2:	4770      	bx	lr

0800a0a4 <_free_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	2900      	cmp	r1, #0
 800a0aa:	d041      	beq.n	800a130 <_free_r+0x8c>
 800a0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0b0:	1f0c      	subs	r4, r1, #4
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	bfb8      	it	lt
 800a0b6:	18e4      	addlt	r4, r4, r3
 800a0b8:	f7ff ffa4 	bl	800a004 <__malloc_lock>
 800a0bc:	4a1d      	ldr	r2, [pc, #116]	@ (800a134 <_free_r+0x90>)
 800a0be:	6813      	ldr	r3, [r2, #0]
 800a0c0:	b933      	cbnz	r3, 800a0d0 <_free_r+0x2c>
 800a0c2:	6063      	str	r3, [r4, #4]
 800a0c4:	6014      	str	r4, [r2, #0]
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0cc:	f7ff bfa0 	b.w	800a010 <__malloc_unlock>
 800a0d0:	42a3      	cmp	r3, r4
 800a0d2:	d908      	bls.n	800a0e6 <_free_r+0x42>
 800a0d4:	6820      	ldr	r0, [r4, #0]
 800a0d6:	1821      	adds	r1, r4, r0
 800a0d8:	428b      	cmp	r3, r1
 800a0da:	bf01      	itttt	eq
 800a0dc:	6819      	ldreq	r1, [r3, #0]
 800a0de:	685b      	ldreq	r3, [r3, #4]
 800a0e0:	1809      	addeq	r1, r1, r0
 800a0e2:	6021      	streq	r1, [r4, #0]
 800a0e4:	e7ed      	b.n	800a0c2 <_free_r+0x1e>
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	b10b      	cbz	r3, 800a0f0 <_free_r+0x4c>
 800a0ec:	42a3      	cmp	r3, r4
 800a0ee:	d9fa      	bls.n	800a0e6 <_free_r+0x42>
 800a0f0:	6811      	ldr	r1, [r2, #0]
 800a0f2:	1850      	adds	r0, r2, r1
 800a0f4:	42a0      	cmp	r0, r4
 800a0f6:	d10b      	bne.n	800a110 <_free_r+0x6c>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	4401      	add	r1, r0
 800a0fc:	1850      	adds	r0, r2, r1
 800a0fe:	4283      	cmp	r3, r0
 800a100:	6011      	str	r1, [r2, #0]
 800a102:	d1e0      	bne.n	800a0c6 <_free_r+0x22>
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	6053      	str	r3, [r2, #4]
 800a10a:	4408      	add	r0, r1
 800a10c:	6010      	str	r0, [r2, #0]
 800a10e:	e7da      	b.n	800a0c6 <_free_r+0x22>
 800a110:	d902      	bls.n	800a118 <_free_r+0x74>
 800a112:	230c      	movs	r3, #12
 800a114:	602b      	str	r3, [r5, #0]
 800a116:	e7d6      	b.n	800a0c6 <_free_r+0x22>
 800a118:	6820      	ldr	r0, [r4, #0]
 800a11a:	1821      	adds	r1, r4, r0
 800a11c:	428b      	cmp	r3, r1
 800a11e:	bf04      	itt	eq
 800a120:	6819      	ldreq	r1, [r3, #0]
 800a122:	685b      	ldreq	r3, [r3, #4]
 800a124:	6063      	str	r3, [r4, #4]
 800a126:	bf04      	itt	eq
 800a128:	1809      	addeq	r1, r1, r0
 800a12a:	6021      	streq	r1, [r4, #0]
 800a12c:	6054      	str	r4, [r2, #4]
 800a12e:	e7ca      	b.n	800a0c6 <_free_r+0x22>
 800a130:	bd38      	pop	{r3, r4, r5, pc}
 800a132:	bf00      	nop
 800a134:	20000ba0 	.word	0x20000ba0

0800a138 <sin>:
 800a138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a13a:	ec53 2b10 	vmov	r2, r3, d0
 800a13e:	4826      	ldr	r0, [pc, #152]	@ (800a1d8 <sin+0xa0>)
 800a140:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a144:	4281      	cmp	r1, r0
 800a146:	d807      	bhi.n	800a158 <sin+0x20>
 800a148:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a1d0 <sin+0x98>
 800a14c:	2000      	movs	r0, #0
 800a14e:	b005      	add	sp, #20
 800a150:	f85d eb04 	ldr.w	lr, [sp], #4
 800a154:	f000 b90c 	b.w	800a370 <__kernel_sin>
 800a158:	4820      	ldr	r0, [pc, #128]	@ (800a1dc <sin+0xa4>)
 800a15a:	4281      	cmp	r1, r0
 800a15c:	d908      	bls.n	800a170 <sin+0x38>
 800a15e:	4610      	mov	r0, r2
 800a160:	4619      	mov	r1, r3
 800a162:	f7f6 f835 	bl	80001d0 <__aeabi_dsub>
 800a166:	ec41 0b10 	vmov	d0, r0, r1
 800a16a:	b005      	add	sp, #20
 800a16c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a170:	4668      	mov	r0, sp
 800a172:	f000 f9b9 	bl	800a4e8 <__ieee754_rem_pio2>
 800a176:	f000 0003 	and.w	r0, r0, #3
 800a17a:	2801      	cmp	r0, #1
 800a17c:	d00c      	beq.n	800a198 <sin+0x60>
 800a17e:	2802      	cmp	r0, #2
 800a180:	d011      	beq.n	800a1a6 <sin+0x6e>
 800a182:	b9e8      	cbnz	r0, 800a1c0 <sin+0x88>
 800a184:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a188:	ed9d 0b00 	vldr	d0, [sp]
 800a18c:	2001      	movs	r0, #1
 800a18e:	f000 f8ef 	bl	800a370 <__kernel_sin>
 800a192:	ec51 0b10 	vmov	r0, r1, d0
 800a196:	e7e6      	b.n	800a166 <sin+0x2e>
 800a198:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a19c:	ed9d 0b00 	vldr	d0, [sp]
 800a1a0:	f000 f81e 	bl	800a1e0 <__kernel_cos>
 800a1a4:	e7f5      	b.n	800a192 <sin+0x5a>
 800a1a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1aa:	ed9d 0b00 	vldr	d0, [sp]
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	f000 f8de 	bl	800a370 <__kernel_sin>
 800a1b4:	ec53 2b10 	vmov	r2, r3, d0
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a1be:	e7d2      	b.n	800a166 <sin+0x2e>
 800a1c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1c4:	ed9d 0b00 	vldr	d0, [sp]
 800a1c8:	f000 f80a 	bl	800a1e0 <__kernel_cos>
 800a1cc:	e7f2      	b.n	800a1b4 <sin+0x7c>
 800a1ce:	bf00      	nop
	...
 800a1d8:	3fe921fb 	.word	0x3fe921fb
 800a1dc:	7fefffff 	.word	0x7fefffff

0800a1e0 <__kernel_cos>:
 800a1e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e4:	ec57 6b10 	vmov	r6, r7, d0
 800a1e8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a1ec:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a1f0:	ed8d 1b00 	vstr	d1, [sp]
 800a1f4:	d206      	bcs.n	800a204 <__kernel_cos+0x24>
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	f7f6 fc3b 	bl	8000a74 <__aeabi_d2iz>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f000 8088 	beq.w	800a314 <__kernel_cos+0x134>
 800a204:	4632      	mov	r2, r6
 800a206:	463b      	mov	r3, r7
 800a208:	4630      	mov	r0, r6
 800a20a:	4639      	mov	r1, r7
 800a20c:	f7f6 f998 	bl	8000540 <__aeabi_dmul>
 800a210:	4b51      	ldr	r3, [pc, #324]	@ (800a358 <__kernel_cos+0x178>)
 800a212:	2200      	movs	r2, #0
 800a214:	4604      	mov	r4, r0
 800a216:	460d      	mov	r5, r1
 800a218:	f7f6 f992 	bl	8000540 <__aeabi_dmul>
 800a21c:	a340      	add	r3, pc, #256	@ (adr r3, 800a320 <__kernel_cos+0x140>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	4682      	mov	sl, r0
 800a224:	468b      	mov	fp, r1
 800a226:	4620      	mov	r0, r4
 800a228:	4629      	mov	r1, r5
 800a22a:	f7f6 f989 	bl	8000540 <__aeabi_dmul>
 800a22e:	a33e      	add	r3, pc, #248	@ (adr r3, 800a328 <__kernel_cos+0x148>)
 800a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a234:	f7f5 ffce 	bl	80001d4 <__adddf3>
 800a238:	4622      	mov	r2, r4
 800a23a:	462b      	mov	r3, r5
 800a23c:	f7f6 f980 	bl	8000540 <__aeabi_dmul>
 800a240:	a33b      	add	r3, pc, #236	@ (adr r3, 800a330 <__kernel_cos+0x150>)
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	f7f5 ffc3 	bl	80001d0 <__aeabi_dsub>
 800a24a:	4622      	mov	r2, r4
 800a24c:	462b      	mov	r3, r5
 800a24e:	f7f6 f977 	bl	8000540 <__aeabi_dmul>
 800a252:	a339      	add	r3, pc, #228	@ (adr r3, 800a338 <__kernel_cos+0x158>)
 800a254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a258:	f7f5 ffbc 	bl	80001d4 <__adddf3>
 800a25c:	4622      	mov	r2, r4
 800a25e:	462b      	mov	r3, r5
 800a260:	f7f6 f96e 	bl	8000540 <__aeabi_dmul>
 800a264:	a336      	add	r3, pc, #216	@ (adr r3, 800a340 <__kernel_cos+0x160>)
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	f7f5 ffb1 	bl	80001d0 <__aeabi_dsub>
 800a26e:	4622      	mov	r2, r4
 800a270:	462b      	mov	r3, r5
 800a272:	f7f6 f965 	bl	8000540 <__aeabi_dmul>
 800a276:	a334      	add	r3, pc, #208	@ (adr r3, 800a348 <__kernel_cos+0x168>)
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f7f5 ffaa 	bl	80001d4 <__adddf3>
 800a280:	4622      	mov	r2, r4
 800a282:	462b      	mov	r3, r5
 800a284:	f7f6 f95c 	bl	8000540 <__aeabi_dmul>
 800a288:	4622      	mov	r2, r4
 800a28a:	462b      	mov	r3, r5
 800a28c:	f7f6 f958 	bl	8000540 <__aeabi_dmul>
 800a290:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a294:	4604      	mov	r4, r0
 800a296:	460d      	mov	r5, r1
 800a298:	4630      	mov	r0, r6
 800a29a:	4639      	mov	r1, r7
 800a29c:	f7f6 f950 	bl	8000540 <__aeabi_dmul>
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f7f5 ff92 	bl	80001d0 <__aeabi_dsub>
 800a2ac:	4b2b      	ldr	r3, [pc, #172]	@ (800a35c <__kernel_cos+0x17c>)
 800a2ae:	4598      	cmp	r8, r3
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	460f      	mov	r7, r1
 800a2b4:	d810      	bhi.n	800a2d8 <__kernel_cos+0xf8>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4650      	mov	r0, sl
 800a2bc:	4659      	mov	r1, fp
 800a2be:	f7f5 ff87 	bl	80001d0 <__aeabi_dsub>
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4926      	ldr	r1, [pc, #152]	@ (800a360 <__kernel_cos+0x180>)
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	f7f5 ff81 	bl	80001d0 <__aeabi_dsub>
 800a2ce:	ec41 0b10 	vmov	d0, r0, r1
 800a2d2:	b003      	add	sp, #12
 800a2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d8:	4b22      	ldr	r3, [pc, #136]	@ (800a364 <__kernel_cos+0x184>)
 800a2da:	4921      	ldr	r1, [pc, #132]	@ (800a360 <__kernel_cos+0x180>)
 800a2dc:	4598      	cmp	r8, r3
 800a2de:	bf8c      	ite	hi
 800a2e0:	4d21      	ldrhi	r5, [pc, #132]	@ (800a368 <__kernel_cos+0x188>)
 800a2e2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a2e6:	2400      	movs	r4, #0
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	f7f5 ff6f 	bl	80001d0 <__aeabi_dsub>
 800a2f2:	4622      	mov	r2, r4
 800a2f4:	4680      	mov	r8, r0
 800a2f6:	4689      	mov	r9, r1
 800a2f8:	462b      	mov	r3, r5
 800a2fa:	4650      	mov	r0, sl
 800a2fc:	4659      	mov	r1, fp
 800a2fe:	f7f5 ff67 	bl	80001d0 <__aeabi_dsub>
 800a302:	4632      	mov	r2, r6
 800a304:	463b      	mov	r3, r7
 800a306:	f7f5 ff63 	bl	80001d0 <__aeabi_dsub>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4640      	mov	r0, r8
 800a310:	4649      	mov	r1, r9
 800a312:	e7da      	b.n	800a2ca <__kernel_cos+0xea>
 800a314:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a350 <__kernel_cos+0x170>
 800a318:	e7db      	b.n	800a2d2 <__kernel_cos+0xf2>
 800a31a:	bf00      	nop
 800a31c:	f3af 8000 	nop.w
 800a320:	be8838d4 	.word	0xbe8838d4
 800a324:	bda8fae9 	.word	0xbda8fae9
 800a328:	bdb4b1c4 	.word	0xbdb4b1c4
 800a32c:	3e21ee9e 	.word	0x3e21ee9e
 800a330:	809c52ad 	.word	0x809c52ad
 800a334:	3e927e4f 	.word	0x3e927e4f
 800a338:	19cb1590 	.word	0x19cb1590
 800a33c:	3efa01a0 	.word	0x3efa01a0
 800a340:	16c15177 	.word	0x16c15177
 800a344:	3f56c16c 	.word	0x3f56c16c
 800a348:	5555554c 	.word	0x5555554c
 800a34c:	3fa55555 	.word	0x3fa55555
 800a350:	00000000 	.word	0x00000000
 800a354:	3ff00000 	.word	0x3ff00000
 800a358:	3fe00000 	.word	0x3fe00000
 800a35c:	3fd33332 	.word	0x3fd33332
 800a360:	3ff00000 	.word	0x3ff00000
 800a364:	3fe90000 	.word	0x3fe90000
 800a368:	3fd20000 	.word	0x3fd20000
 800a36c:	00000000 	.word	0x00000000

0800a370 <__kernel_sin>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	ec55 4b10 	vmov	r4, r5, d0
 800a378:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a37c:	b085      	sub	sp, #20
 800a37e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a382:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a386:	4680      	mov	r8, r0
 800a388:	d205      	bcs.n	800a396 <__kernel_sin+0x26>
 800a38a:	4620      	mov	r0, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7f6 fb71 	bl	8000a74 <__aeabi_d2iz>
 800a392:	2800      	cmp	r0, #0
 800a394:	d052      	beq.n	800a43c <__kernel_sin+0xcc>
 800a396:	4622      	mov	r2, r4
 800a398:	462b      	mov	r3, r5
 800a39a:	4620      	mov	r0, r4
 800a39c:	4629      	mov	r1, r5
 800a39e:	f7f6 f8cf 	bl	8000540 <__aeabi_dmul>
 800a3a2:	4682      	mov	sl, r0
 800a3a4:	468b      	mov	fp, r1
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	f7f6 f8c7 	bl	8000540 <__aeabi_dmul>
 800a3b2:	a342      	add	r3, pc, #264	@ (adr r3, 800a4bc <__kernel_sin+0x14c>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	e9cd 0100 	strd	r0, r1, [sp]
 800a3bc:	4650      	mov	r0, sl
 800a3be:	4659      	mov	r1, fp
 800a3c0:	f7f6 f8be 	bl	8000540 <__aeabi_dmul>
 800a3c4:	a33f      	add	r3, pc, #252	@ (adr r3, 800a4c4 <__kernel_sin+0x154>)
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	f7f5 ff01 	bl	80001d0 <__aeabi_dsub>
 800a3ce:	4652      	mov	r2, sl
 800a3d0:	465b      	mov	r3, fp
 800a3d2:	f7f6 f8b5 	bl	8000540 <__aeabi_dmul>
 800a3d6:	a33d      	add	r3, pc, #244	@ (adr r3, 800a4cc <__kernel_sin+0x15c>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	f7f5 fefa 	bl	80001d4 <__adddf3>
 800a3e0:	4652      	mov	r2, sl
 800a3e2:	465b      	mov	r3, fp
 800a3e4:	f7f6 f8ac 	bl	8000540 <__aeabi_dmul>
 800a3e8:	a33a      	add	r3, pc, #232	@ (adr r3, 800a4d4 <__kernel_sin+0x164>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	f7f5 feef 	bl	80001d0 <__aeabi_dsub>
 800a3f2:	4652      	mov	r2, sl
 800a3f4:	465b      	mov	r3, fp
 800a3f6:	f7f6 f8a3 	bl	8000540 <__aeabi_dmul>
 800a3fa:	a338      	add	r3, pc, #224	@ (adr r3, 800a4dc <__kernel_sin+0x16c>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	f7f5 fee8 	bl	80001d4 <__adddf3>
 800a404:	4606      	mov	r6, r0
 800a406:	460f      	mov	r7, r1
 800a408:	f1b8 0f00 	cmp.w	r8, #0
 800a40c:	d11b      	bne.n	800a446 <__kernel_sin+0xd6>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4650      	mov	r0, sl
 800a414:	4659      	mov	r1, fp
 800a416:	f7f6 f893 	bl	8000540 <__aeabi_dmul>
 800a41a:	a325      	add	r3, pc, #148	@ (adr r3, 800a4b0 <__kernel_sin+0x140>)
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	f7f5 fed6 	bl	80001d0 <__aeabi_dsub>
 800a424:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a428:	f7f6 f88a 	bl	8000540 <__aeabi_dmul>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4620      	mov	r0, r4
 800a432:	4629      	mov	r1, r5
 800a434:	f7f5 fece 	bl	80001d4 <__adddf3>
 800a438:	4604      	mov	r4, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	ec45 4b10 	vmov	d0, r4, r5
 800a440:	b005      	add	sp, #20
 800a442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a44a:	4b1b      	ldr	r3, [pc, #108]	@ (800a4b8 <__kernel_sin+0x148>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	f7f6 f877 	bl	8000540 <__aeabi_dmul>
 800a452:	4632      	mov	r2, r6
 800a454:	4680      	mov	r8, r0
 800a456:	4689      	mov	r9, r1
 800a458:	463b      	mov	r3, r7
 800a45a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a45e:	f7f6 f86f 	bl	8000540 <__aeabi_dmul>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4640      	mov	r0, r8
 800a468:	4649      	mov	r1, r9
 800a46a:	f7f5 feb1 	bl	80001d0 <__aeabi_dsub>
 800a46e:	4652      	mov	r2, sl
 800a470:	465b      	mov	r3, fp
 800a472:	f7f6 f865 	bl	8000540 <__aeabi_dmul>
 800a476:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a47a:	f7f5 fea9 	bl	80001d0 <__aeabi_dsub>
 800a47e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a4b0 <__kernel_sin+0x140>)
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	4606      	mov	r6, r0
 800a486:	460f      	mov	r7, r1
 800a488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a48c:	f7f6 f858 	bl	8000540 <__aeabi_dmul>
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	4630      	mov	r0, r6
 800a496:	4639      	mov	r1, r7
 800a498:	f7f5 fe9c 	bl	80001d4 <__adddf3>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	f7f5 fe94 	bl	80001d0 <__aeabi_dsub>
 800a4a8:	e7c6      	b.n	800a438 <__kernel_sin+0xc8>
 800a4aa:	bf00      	nop
 800a4ac:	f3af 8000 	nop.w
 800a4b0:	55555549 	.word	0x55555549
 800a4b4:	3fc55555 	.word	0x3fc55555
 800a4b8:	3fe00000 	.word	0x3fe00000
 800a4bc:	5acfd57c 	.word	0x5acfd57c
 800a4c0:	3de5d93a 	.word	0x3de5d93a
 800a4c4:	8a2b9ceb 	.word	0x8a2b9ceb
 800a4c8:	3e5ae5e6 	.word	0x3e5ae5e6
 800a4cc:	57b1fe7d 	.word	0x57b1fe7d
 800a4d0:	3ec71de3 	.word	0x3ec71de3
 800a4d4:	19c161d5 	.word	0x19c161d5
 800a4d8:	3f2a01a0 	.word	0x3f2a01a0
 800a4dc:	1110f8a6 	.word	0x1110f8a6
 800a4e0:	3f811111 	.word	0x3f811111
 800a4e4:	00000000 	.word	0x00000000

0800a4e8 <__ieee754_rem_pio2>:
 800a4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ec:	ec57 6b10 	vmov	r6, r7, d0
 800a4f0:	4bc5      	ldr	r3, [pc, #788]	@ (800a808 <__ieee754_rem_pio2+0x320>)
 800a4f2:	b08d      	sub	sp, #52	@ 0x34
 800a4f4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a4f8:	4598      	cmp	r8, r3
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	9704      	str	r7, [sp, #16]
 800a4fe:	d807      	bhi.n	800a510 <__ieee754_rem_pio2+0x28>
 800a500:	2200      	movs	r2, #0
 800a502:	2300      	movs	r3, #0
 800a504:	ed80 0b00 	vstr	d0, [r0]
 800a508:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a50c:	2500      	movs	r5, #0
 800a50e:	e028      	b.n	800a562 <__ieee754_rem_pio2+0x7a>
 800a510:	4bbe      	ldr	r3, [pc, #760]	@ (800a80c <__ieee754_rem_pio2+0x324>)
 800a512:	4598      	cmp	r8, r3
 800a514:	d878      	bhi.n	800a608 <__ieee754_rem_pio2+0x120>
 800a516:	9b04      	ldr	r3, [sp, #16]
 800a518:	4dbd      	ldr	r5, [pc, #756]	@ (800a810 <__ieee754_rem_pio2+0x328>)
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	4630      	mov	r0, r6
 800a51e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a7d0 <__ieee754_rem_pio2+0x2e8>)
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	4639      	mov	r1, r7
 800a526:	dd38      	ble.n	800a59a <__ieee754_rem_pio2+0xb2>
 800a528:	f7f5 fe52 	bl	80001d0 <__aeabi_dsub>
 800a52c:	45a8      	cmp	r8, r5
 800a52e:	4606      	mov	r6, r0
 800a530:	460f      	mov	r7, r1
 800a532:	d01a      	beq.n	800a56a <__ieee754_rem_pio2+0x82>
 800a534:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a7d8 <__ieee754_rem_pio2+0x2f0>)
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	f7f5 fe49 	bl	80001d0 <__aeabi_dsub>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4680      	mov	r8, r0
 800a544:	4689      	mov	r9, r1
 800a546:	4630      	mov	r0, r6
 800a548:	4639      	mov	r1, r7
 800a54a:	f7f5 fe41 	bl	80001d0 <__aeabi_dsub>
 800a54e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a7d8 <__ieee754_rem_pio2+0x2f0>)
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	f7f5 fe3c 	bl	80001d0 <__aeabi_dsub>
 800a558:	e9c4 8900 	strd	r8, r9, [r4]
 800a55c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a560:	2501      	movs	r5, #1
 800a562:	4628      	mov	r0, r5
 800a564:	b00d      	add	sp, #52	@ 0x34
 800a566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56a:	a39d      	add	r3, pc, #628	@ (adr r3, 800a7e0 <__ieee754_rem_pio2+0x2f8>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f7f5 fe2e 	bl	80001d0 <__aeabi_dsub>
 800a574:	a39c      	add	r3, pc, #624	@ (adr r3, 800a7e8 <__ieee754_rem_pio2+0x300>)
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	4606      	mov	r6, r0
 800a57c:	460f      	mov	r7, r1
 800a57e:	f7f5 fe27 	bl	80001d0 <__aeabi_dsub>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	4680      	mov	r8, r0
 800a588:	4689      	mov	r9, r1
 800a58a:	4630      	mov	r0, r6
 800a58c:	4639      	mov	r1, r7
 800a58e:	f7f5 fe1f 	bl	80001d0 <__aeabi_dsub>
 800a592:	a395      	add	r3, pc, #596	@ (adr r3, 800a7e8 <__ieee754_rem_pio2+0x300>)
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	e7dc      	b.n	800a554 <__ieee754_rem_pio2+0x6c>
 800a59a:	f7f5 fe1b 	bl	80001d4 <__adddf3>
 800a59e:	45a8      	cmp	r8, r5
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	460f      	mov	r7, r1
 800a5a4:	d018      	beq.n	800a5d8 <__ieee754_rem_pio2+0xf0>
 800a5a6:	a38c      	add	r3, pc, #560	@ (adr r3, 800a7d8 <__ieee754_rem_pio2+0x2f0>)
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	f7f5 fe12 	bl	80001d4 <__adddf3>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4689      	mov	r9, r1
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	f7f5 fe08 	bl	80001d0 <__aeabi_dsub>
 800a5c0:	a385      	add	r3, pc, #532	@ (adr r3, 800a7d8 <__ieee754_rem_pio2+0x2f0>)
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	f7f5 fe05 	bl	80001d4 <__adddf3>
 800a5ca:	f04f 35ff 	mov.w	r5, #4294967295
 800a5ce:	e9c4 8900 	strd	r8, r9, [r4]
 800a5d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a5d6:	e7c4      	b.n	800a562 <__ieee754_rem_pio2+0x7a>
 800a5d8:	a381      	add	r3, pc, #516	@ (adr r3, 800a7e0 <__ieee754_rem_pio2+0x2f8>)
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	f7f5 fdf9 	bl	80001d4 <__adddf3>
 800a5e2:	a381      	add	r3, pc, #516	@ (adr r3, 800a7e8 <__ieee754_rem_pio2+0x300>)
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	4606      	mov	r6, r0
 800a5ea:	460f      	mov	r7, r1
 800a5ec:	f7f5 fdf2 	bl	80001d4 <__adddf3>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	4689      	mov	r9, r1
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	4639      	mov	r1, r7
 800a5fc:	f7f5 fde8 	bl	80001d0 <__aeabi_dsub>
 800a600:	a379      	add	r3, pc, #484	@ (adr r3, 800a7e8 <__ieee754_rem_pio2+0x300>)
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	e7de      	b.n	800a5c6 <__ieee754_rem_pio2+0xde>
 800a608:	4b82      	ldr	r3, [pc, #520]	@ (800a814 <__ieee754_rem_pio2+0x32c>)
 800a60a:	4598      	cmp	r8, r3
 800a60c:	f200 80d1 	bhi.w	800a7b2 <__ieee754_rem_pio2+0x2ca>
 800a610:	f000 f966 	bl	800a8e0 <fabs>
 800a614:	ec57 6b10 	vmov	r6, r7, d0
 800a618:	a375      	add	r3, pc, #468	@ (adr r3, 800a7f0 <__ieee754_rem_pio2+0x308>)
 800a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61e:	4630      	mov	r0, r6
 800a620:	4639      	mov	r1, r7
 800a622:	f7f5 ff8d 	bl	8000540 <__aeabi_dmul>
 800a626:	4b7c      	ldr	r3, [pc, #496]	@ (800a818 <__ieee754_rem_pio2+0x330>)
 800a628:	2200      	movs	r2, #0
 800a62a:	f7f5 fdd3 	bl	80001d4 <__adddf3>
 800a62e:	f7f6 fa21 	bl	8000a74 <__aeabi_d2iz>
 800a632:	4605      	mov	r5, r0
 800a634:	f7f5 ff1a 	bl	800046c <__aeabi_i2d>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a640:	a363      	add	r3, pc, #396	@ (adr r3, 800a7d0 <__ieee754_rem_pio2+0x2e8>)
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	f7f5 ff7b 	bl	8000540 <__aeabi_dmul>
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	4630      	mov	r0, r6
 800a650:	4639      	mov	r1, r7
 800a652:	f7f5 fdbd 	bl	80001d0 <__aeabi_dsub>
 800a656:	a360      	add	r3, pc, #384	@ (adr r3, 800a7d8 <__ieee754_rem_pio2+0x2f0>)
 800a658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65c:	4682      	mov	sl, r0
 800a65e:	468b      	mov	fp, r1
 800a660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a664:	f7f5 ff6c 	bl	8000540 <__aeabi_dmul>
 800a668:	2d1f      	cmp	r5, #31
 800a66a:	4606      	mov	r6, r0
 800a66c:	460f      	mov	r7, r1
 800a66e:	dc0c      	bgt.n	800a68a <__ieee754_rem_pio2+0x1a2>
 800a670:	4b6a      	ldr	r3, [pc, #424]	@ (800a81c <__ieee754_rem_pio2+0x334>)
 800a672:	1e6a      	subs	r2, r5, #1
 800a674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a678:	4543      	cmp	r3, r8
 800a67a:	d006      	beq.n	800a68a <__ieee754_rem_pio2+0x1a2>
 800a67c:	4632      	mov	r2, r6
 800a67e:	463b      	mov	r3, r7
 800a680:	4650      	mov	r0, sl
 800a682:	4659      	mov	r1, fp
 800a684:	f7f5 fda4 	bl	80001d0 <__aeabi_dsub>
 800a688:	e00e      	b.n	800a6a8 <__ieee754_rem_pio2+0x1c0>
 800a68a:	463b      	mov	r3, r7
 800a68c:	4632      	mov	r2, r6
 800a68e:	4650      	mov	r0, sl
 800a690:	4659      	mov	r1, fp
 800a692:	f7f5 fd9d 	bl	80001d0 <__aeabi_dsub>
 800a696:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a69a:	9305      	str	r3, [sp, #20]
 800a69c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a6a0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a6a4:	2b10      	cmp	r3, #16
 800a6a6:	dc02      	bgt.n	800a6ae <__ieee754_rem_pio2+0x1c6>
 800a6a8:	e9c4 0100 	strd	r0, r1, [r4]
 800a6ac:	e039      	b.n	800a722 <__ieee754_rem_pio2+0x23a>
 800a6ae:	a34c      	add	r3, pc, #304	@ (adr r3, 800a7e0 <__ieee754_rem_pio2+0x2f8>)
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6b8:	f7f5 ff42 	bl	8000540 <__aeabi_dmul>
 800a6bc:	4606      	mov	r6, r0
 800a6be:	460f      	mov	r7, r1
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4650      	mov	r0, sl
 800a6c6:	4659      	mov	r1, fp
 800a6c8:	f7f5 fd82 	bl	80001d0 <__aeabi_dsub>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4680      	mov	r8, r0
 800a6d2:	4689      	mov	r9, r1
 800a6d4:	4650      	mov	r0, sl
 800a6d6:	4659      	mov	r1, fp
 800a6d8:	f7f5 fd7a 	bl	80001d0 <__aeabi_dsub>
 800a6dc:	4632      	mov	r2, r6
 800a6de:	463b      	mov	r3, r7
 800a6e0:	f7f5 fd76 	bl	80001d0 <__aeabi_dsub>
 800a6e4:	a340      	add	r3, pc, #256	@ (adr r3, 800a7e8 <__ieee754_rem_pio2+0x300>)
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	4606      	mov	r6, r0
 800a6ec:	460f      	mov	r7, r1
 800a6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6f2:	f7f5 ff25 	bl	8000540 <__aeabi_dmul>
 800a6f6:	4632      	mov	r2, r6
 800a6f8:	463b      	mov	r3, r7
 800a6fa:	f7f5 fd69 	bl	80001d0 <__aeabi_dsub>
 800a6fe:	4602      	mov	r2, r0
 800a700:	460b      	mov	r3, r1
 800a702:	4606      	mov	r6, r0
 800a704:	460f      	mov	r7, r1
 800a706:	4640      	mov	r0, r8
 800a708:	4649      	mov	r1, r9
 800a70a:	f7f5 fd61 	bl	80001d0 <__aeabi_dsub>
 800a70e:	9a05      	ldr	r2, [sp, #20]
 800a710:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	2b31      	cmp	r3, #49	@ 0x31
 800a718:	dc20      	bgt.n	800a75c <__ieee754_rem_pio2+0x274>
 800a71a:	e9c4 0100 	strd	r0, r1, [r4]
 800a71e:	46c2      	mov	sl, r8
 800a720:	46cb      	mov	fp, r9
 800a722:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a726:	4650      	mov	r0, sl
 800a728:	4642      	mov	r2, r8
 800a72a:	464b      	mov	r3, r9
 800a72c:	4659      	mov	r1, fp
 800a72e:	f7f5 fd4f 	bl	80001d0 <__aeabi_dsub>
 800a732:	463b      	mov	r3, r7
 800a734:	4632      	mov	r2, r6
 800a736:	f7f5 fd4b 	bl	80001d0 <__aeabi_dsub>
 800a73a:	9b04      	ldr	r3, [sp, #16]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a742:	f6bf af0e 	bge.w	800a562 <__ieee754_rem_pio2+0x7a>
 800a746:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a74a:	6063      	str	r3, [r4, #4]
 800a74c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a750:	f8c4 8000 	str.w	r8, [r4]
 800a754:	60a0      	str	r0, [r4, #8]
 800a756:	60e3      	str	r3, [r4, #12]
 800a758:	426d      	negs	r5, r5
 800a75a:	e702      	b.n	800a562 <__ieee754_rem_pio2+0x7a>
 800a75c:	a326      	add	r3, pc, #152	@ (adr r3, 800a7f8 <__ieee754_rem_pio2+0x310>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a766:	f7f5 feeb 	bl	8000540 <__aeabi_dmul>
 800a76a:	4606      	mov	r6, r0
 800a76c:	460f      	mov	r7, r1
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	4640      	mov	r0, r8
 800a774:	4649      	mov	r1, r9
 800a776:	f7f5 fd2b 	bl	80001d0 <__aeabi_dsub>
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	4682      	mov	sl, r0
 800a780:	468b      	mov	fp, r1
 800a782:	4640      	mov	r0, r8
 800a784:	4649      	mov	r1, r9
 800a786:	f7f5 fd23 	bl	80001d0 <__aeabi_dsub>
 800a78a:	4632      	mov	r2, r6
 800a78c:	463b      	mov	r3, r7
 800a78e:	f7f5 fd1f 	bl	80001d0 <__aeabi_dsub>
 800a792:	a31b      	add	r3, pc, #108	@ (adr r3, 800a800 <__ieee754_rem_pio2+0x318>)
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	4606      	mov	r6, r0
 800a79a:	460f      	mov	r7, r1
 800a79c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7a0:	f7f5 fece 	bl	8000540 <__aeabi_dmul>
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	463b      	mov	r3, r7
 800a7a8:	f7f5 fd12 	bl	80001d0 <__aeabi_dsub>
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	460f      	mov	r7, r1
 800a7b0:	e764      	b.n	800a67c <__ieee754_rem_pio2+0x194>
 800a7b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a820 <__ieee754_rem_pio2+0x338>)
 800a7b4:	4598      	cmp	r8, r3
 800a7b6:	d935      	bls.n	800a824 <__ieee754_rem_pio2+0x33c>
 800a7b8:	4632      	mov	r2, r6
 800a7ba:	463b      	mov	r3, r7
 800a7bc:	4630      	mov	r0, r6
 800a7be:	4639      	mov	r1, r7
 800a7c0:	f7f5 fd06 	bl	80001d0 <__aeabi_dsub>
 800a7c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7c8:	e9c4 0100 	strd	r0, r1, [r4]
 800a7cc:	e69e      	b.n	800a50c <__ieee754_rem_pio2+0x24>
 800a7ce:	bf00      	nop
 800a7d0:	54400000 	.word	0x54400000
 800a7d4:	3ff921fb 	.word	0x3ff921fb
 800a7d8:	1a626331 	.word	0x1a626331
 800a7dc:	3dd0b461 	.word	0x3dd0b461
 800a7e0:	1a600000 	.word	0x1a600000
 800a7e4:	3dd0b461 	.word	0x3dd0b461
 800a7e8:	2e037073 	.word	0x2e037073
 800a7ec:	3ba3198a 	.word	0x3ba3198a
 800a7f0:	6dc9c883 	.word	0x6dc9c883
 800a7f4:	3fe45f30 	.word	0x3fe45f30
 800a7f8:	2e000000 	.word	0x2e000000
 800a7fc:	3ba3198a 	.word	0x3ba3198a
 800a800:	252049c1 	.word	0x252049c1
 800a804:	397b839a 	.word	0x397b839a
 800a808:	3fe921fb 	.word	0x3fe921fb
 800a80c:	4002d97b 	.word	0x4002d97b
 800a810:	3ff921fb 	.word	0x3ff921fb
 800a814:	413921fb 	.word	0x413921fb
 800a818:	3fe00000 	.word	0x3fe00000
 800a81c:	0800b1bc 	.word	0x0800b1bc
 800a820:	7fefffff 	.word	0x7fefffff
 800a824:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a828:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a82c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a830:	4630      	mov	r0, r6
 800a832:	460f      	mov	r7, r1
 800a834:	f7f6 f91e 	bl	8000a74 <__aeabi_d2iz>
 800a838:	f7f5 fe18 	bl	800046c <__aeabi_i2d>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4630      	mov	r0, r6
 800a842:	4639      	mov	r1, r7
 800a844:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a848:	f7f5 fcc2 	bl	80001d0 <__aeabi_dsub>
 800a84c:	4b22      	ldr	r3, [pc, #136]	@ (800a8d8 <__ieee754_rem_pio2+0x3f0>)
 800a84e:	2200      	movs	r2, #0
 800a850:	f7f5 fe76 	bl	8000540 <__aeabi_dmul>
 800a854:	460f      	mov	r7, r1
 800a856:	4606      	mov	r6, r0
 800a858:	f7f6 f90c 	bl	8000a74 <__aeabi_d2iz>
 800a85c:	f7f5 fe06 	bl	800046c <__aeabi_i2d>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4630      	mov	r0, r6
 800a866:	4639      	mov	r1, r7
 800a868:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a86c:	f7f5 fcb0 	bl	80001d0 <__aeabi_dsub>
 800a870:	4b19      	ldr	r3, [pc, #100]	@ (800a8d8 <__ieee754_rem_pio2+0x3f0>)
 800a872:	2200      	movs	r2, #0
 800a874:	f7f5 fe64 	bl	8000540 <__aeabi_dmul>
 800a878:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a87c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a880:	f04f 0803 	mov.w	r8, #3
 800a884:	2600      	movs	r6, #0
 800a886:	2700      	movs	r7, #0
 800a888:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a88c:	4632      	mov	r2, r6
 800a88e:	463b      	mov	r3, r7
 800a890:	46c2      	mov	sl, r8
 800a892:	f108 38ff 	add.w	r8, r8, #4294967295
 800a896:	f7f6 f8bb 	bl	8000a10 <__aeabi_dcmpeq>
 800a89a:	2800      	cmp	r0, #0
 800a89c:	d1f4      	bne.n	800a888 <__ieee754_rem_pio2+0x3a0>
 800a89e:	4b0f      	ldr	r3, [pc, #60]	@ (800a8dc <__ieee754_rem_pio2+0x3f4>)
 800a8a0:	9301      	str	r3, [sp, #4]
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	462a      	mov	r2, r5
 800a8a8:	4653      	mov	r3, sl
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	a806      	add	r0, sp, #24
 800a8ae:	f000 f81f 	bl	800a8f0 <__kernel_rem_pio2>
 800a8b2:	9b04      	ldr	r3, [sp, #16]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	f6bf ae53 	bge.w	800a562 <__ieee754_rem_pio2+0x7a>
 800a8bc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a8c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8c4:	e9c4 2300 	strd	r2, r3, [r4]
 800a8c8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a8cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8d0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a8d4:	e740      	b.n	800a758 <__ieee754_rem_pio2+0x270>
 800a8d6:	bf00      	nop
 800a8d8:	41700000 	.word	0x41700000
 800a8dc:	0800b23c 	.word	0x0800b23c

0800a8e0 <fabs>:
 800a8e0:	ec51 0b10 	vmov	r0, r1, d0
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a8ea:	ec43 2b10 	vmov	d0, r2, r3
 800a8ee:	4770      	bx	lr

0800a8f0 <__kernel_rem_pio2>:
 800a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	ed2d 8b02 	vpush	{d8}
 800a8f8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a8fc:	f112 0f14 	cmn.w	r2, #20
 800a900:	9306      	str	r3, [sp, #24]
 800a902:	9104      	str	r1, [sp, #16]
 800a904:	4bc2      	ldr	r3, [pc, #776]	@ (800ac10 <__kernel_rem_pio2+0x320>)
 800a906:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a908:	9008      	str	r0, [sp, #32]
 800a90a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	9b06      	ldr	r3, [sp, #24]
 800a912:	f103 33ff 	add.w	r3, r3, #4294967295
 800a916:	bfa8      	it	ge
 800a918:	1ed4      	subge	r4, r2, #3
 800a91a:	9305      	str	r3, [sp, #20]
 800a91c:	bfb2      	itee	lt
 800a91e:	2400      	movlt	r4, #0
 800a920:	2318      	movge	r3, #24
 800a922:	fb94 f4f3 	sdivge	r4, r4, r3
 800a926:	f06f 0317 	mvn.w	r3, #23
 800a92a:	fb04 3303 	mla	r3, r4, r3, r3
 800a92e:	eb03 0b02 	add.w	fp, r3, r2
 800a932:	9b00      	ldr	r3, [sp, #0]
 800a934:	9a05      	ldr	r2, [sp, #20]
 800a936:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800ac00 <__kernel_rem_pio2+0x310>
 800a93a:	eb03 0802 	add.w	r8, r3, r2
 800a93e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a940:	1aa7      	subs	r7, r4, r2
 800a942:	ae20      	add	r6, sp, #128	@ 0x80
 800a944:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a948:	2500      	movs	r5, #0
 800a94a:	4545      	cmp	r5, r8
 800a94c:	dd12      	ble.n	800a974 <__kernel_rem_pio2+0x84>
 800a94e:	9b06      	ldr	r3, [sp, #24]
 800a950:	aa20      	add	r2, sp, #128	@ 0x80
 800a952:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a956:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a95a:	2700      	movs	r7, #0
 800a95c:	9b00      	ldr	r3, [sp, #0]
 800a95e:	429f      	cmp	r7, r3
 800a960:	dc2e      	bgt.n	800a9c0 <__kernel_rem_pio2+0xd0>
 800a962:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800ac00 <__kernel_rem_pio2+0x310>
 800a966:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a96a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a96e:	46a8      	mov	r8, r5
 800a970:	2600      	movs	r6, #0
 800a972:	e01b      	b.n	800a9ac <__kernel_rem_pio2+0xbc>
 800a974:	42ef      	cmn	r7, r5
 800a976:	d407      	bmi.n	800a988 <__kernel_rem_pio2+0x98>
 800a978:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a97c:	f7f5 fd76 	bl	800046c <__aeabi_i2d>
 800a980:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a984:	3501      	adds	r5, #1
 800a986:	e7e0      	b.n	800a94a <__kernel_rem_pio2+0x5a>
 800a988:	ec51 0b18 	vmov	r0, r1, d8
 800a98c:	e7f8      	b.n	800a980 <__kernel_rem_pio2+0x90>
 800a98e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800a992:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a996:	f7f5 fdd3 	bl	8000540 <__aeabi_dmul>
 800a99a:	4602      	mov	r2, r0
 800a99c:	460b      	mov	r3, r1
 800a99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9a2:	f7f5 fc17 	bl	80001d4 <__adddf3>
 800a9a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9aa:	3601      	adds	r6, #1
 800a9ac:	9b05      	ldr	r3, [sp, #20]
 800a9ae:	429e      	cmp	r6, r3
 800a9b0:	dded      	ble.n	800a98e <__kernel_rem_pio2+0x9e>
 800a9b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9b6:	3701      	adds	r7, #1
 800a9b8:	ecaa 7b02 	vstmia	sl!, {d7}
 800a9bc:	3508      	adds	r5, #8
 800a9be:	e7cd      	b.n	800a95c <__kernel_rem_pio2+0x6c>
 800a9c0:	9b00      	ldr	r3, [sp, #0]
 800a9c2:	f8dd 8000 	ldr.w	r8, [sp]
 800a9c6:	aa0c      	add	r2, sp, #48	@ 0x30
 800a9c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a9d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a9d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a9da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9dc:	ab98      	add	r3, sp, #608	@ 0x260
 800a9de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a9e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a9e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9ea:	ac0c      	add	r4, sp, #48	@ 0x30
 800a9ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a9ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a9f2:	46a1      	mov	r9, r4
 800a9f4:	46c2      	mov	sl, r8
 800a9f6:	f1ba 0f00 	cmp.w	sl, #0
 800a9fa:	dc77      	bgt.n	800aaec <__kernel_rem_pio2+0x1fc>
 800a9fc:	4658      	mov	r0, fp
 800a9fe:	ed9d 0b02 	vldr	d0, [sp, #8]
 800aa02:	f000 fac5 	bl	800af90 <scalbn>
 800aa06:	ec57 6b10 	vmov	r6, r7, d0
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800aa10:	4630      	mov	r0, r6
 800aa12:	4639      	mov	r1, r7
 800aa14:	f7f5 fd94 	bl	8000540 <__aeabi_dmul>
 800aa18:	ec41 0b10 	vmov	d0, r0, r1
 800aa1c:	f000 fb34 	bl	800b088 <floor>
 800aa20:	4b7c      	ldr	r3, [pc, #496]	@ (800ac14 <__kernel_rem_pio2+0x324>)
 800aa22:	ec51 0b10 	vmov	r0, r1, d0
 800aa26:	2200      	movs	r2, #0
 800aa28:	f7f5 fd8a 	bl	8000540 <__aeabi_dmul>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4630      	mov	r0, r6
 800aa32:	4639      	mov	r1, r7
 800aa34:	f7f5 fbcc 	bl	80001d0 <__aeabi_dsub>
 800aa38:	460f      	mov	r7, r1
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	f7f6 f81a 	bl	8000a74 <__aeabi_d2iz>
 800aa40:	9002      	str	r0, [sp, #8]
 800aa42:	f7f5 fd13 	bl	800046c <__aeabi_i2d>
 800aa46:	4602      	mov	r2, r0
 800aa48:	460b      	mov	r3, r1
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	4639      	mov	r1, r7
 800aa4e:	f7f5 fbbf 	bl	80001d0 <__aeabi_dsub>
 800aa52:	f1bb 0f00 	cmp.w	fp, #0
 800aa56:	4606      	mov	r6, r0
 800aa58:	460f      	mov	r7, r1
 800aa5a:	dd6c      	ble.n	800ab36 <__kernel_rem_pio2+0x246>
 800aa5c:	f108 31ff 	add.w	r1, r8, #4294967295
 800aa60:	ab0c      	add	r3, sp, #48	@ 0x30
 800aa62:	9d02      	ldr	r5, [sp, #8]
 800aa64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa68:	f1cb 0018 	rsb	r0, fp, #24
 800aa6c:	fa43 f200 	asr.w	r2, r3, r0
 800aa70:	4415      	add	r5, r2
 800aa72:	4082      	lsls	r2, r0
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	aa0c      	add	r2, sp, #48	@ 0x30
 800aa78:	9502      	str	r5, [sp, #8]
 800aa7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800aa7e:	f1cb 0217 	rsb	r2, fp, #23
 800aa82:	fa43 f902 	asr.w	r9, r3, r2
 800aa86:	f1b9 0f00 	cmp.w	r9, #0
 800aa8a:	dd64      	ble.n	800ab56 <__kernel_rem_pio2+0x266>
 800aa8c:	9b02      	ldr	r3, [sp, #8]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	3301      	adds	r3, #1
 800aa92:	9302      	str	r3, [sp, #8]
 800aa94:	4615      	mov	r5, r2
 800aa96:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800aa9a:	4590      	cmp	r8, r2
 800aa9c:	f300 80a1 	bgt.w	800abe2 <__kernel_rem_pio2+0x2f2>
 800aaa0:	f1bb 0f00 	cmp.w	fp, #0
 800aaa4:	dd07      	ble.n	800aab6 <__kernel_rem_pio2+0x1c6>
 800aaa6:	f1bb 0f01 	cmp.w	fp, #1
 800aaaa:	f000 80c1 	beq.w	800ac30 <__kernel_rem_pio2+0x340>
 800aaae:	f1bb 0f02 	cmp.w	fp, #2
 800aab2:	f000 80c8 	beq.w	800ac46 <__kernel_rem_pio2+0x356>
 800aab6:	f1b9 0f02 	cmp.w	r9, #2
 800aaba:	d14c      	bne.n	800ab56 <__kernel_rem_pio2+0x266>
 800aabc:	4632      	mov	r2, r6
 800aabe:	463b      	mov	r3, r7
 800aac0:	4955      	ldr	r1, [pc, #340]	@ (800ac18 <__kernel_rem_pio2+0x328>)
 800aac2:	2000      	movs	r0, #0
 800aac4:	f7f5 fb84 	bl	80001d0 <__aeabi_dsub>
 800aac8:	4606      	mov	r6, r0
 800aaca:	460f      	mov	r7, r1
 800aacc:	2d00      	cmp	r5, #0
 800aace:	d042      	beq.n	800ab56 <__kernel_rem_pio2+0x266>
 800aad0:	4658      	mov	r0, fp
 800aad2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800ac08 <__kernel_rem_pio2+0x318>
 800aad6:	f000 fa5b 	bl	800af90 <scalbn>
 800aada:	4630      	mov	r0, r6
 800aadc:	4639      	mov	r1, r7
 800aade:	ec53 2b10 	vmov	r2, r3, d0
 800aae2:	f7f5 fb75 	bl	80001d0 <__aeabi_dsub>
 800aae6:	4606      	mov	r6, r0
 800aae8:	460f      	mov	r7, r1
 800aaea:	e034      	b.n	800ab56 <__kernel_rem_pio2+0x266>
 800aaec:	4b4b      	ldr	r3, [pc, #300]	@ (800ac1c <__kernel_rem_pio2+0x32c>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf4:	f7f5 fd24 	bl	8000540 <__aeabi_dmul>
 800aaf8:	f7f5 ffbc 	bl	8000a74 <__aeabi_d2iz>
 800aafc:	f7f5 fcb6 	bl	800046c <__aeabi_i2d>
 800ab00:	4b47      	ldr	r3, [pc, #284]	@ (800ac20 <__kernel_rem_pio2+0x330>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	4606      	mov	r6, r0
 800ab06:	460f      	mov	r7, r1
 800ab08:	f7f5 fd1a 	bl	8000540 <__aeabi_dmul>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab14:	f7f5 fb5c 	bl	80001d0 <__aeabi_dsub>
 800ab18:	f7f5 ffac 	bl	8000a74 <__aeabi_d2iz>
 800ab1c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ab20:	f849 0b04 	str.w	r0, [r9], #4
 800ab24:	4639      	mov	r1, r7
 800ab26:	4630      	mov	r0, r6
 800ab28:	f7f5 fb54 	bl	80001d4 <__adddf3>
 800ab2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab34:	e75f      	b.n	800a9f6 <__kernel_rem_pio2+0x106>
 800ab36:	d107      	bne.n	800ab48 <__kernel_rem_pio2+0x258>
 800ab38:	f108 33ff 	add.w	r3, r8, #4294967295
 800ab3c:	aa0c      	add	r2, sp, #48	@ 0x30
 800ab3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab42:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ab46:	e79e      	b.n	800aa86 <__kernel_rem_pio2+0x196>
 800ab48:	4b36      	ldr	r3, [pc, #216]	@ (800ac24 <__kernel_rem_pio2+0x334>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f7f5 ff7e 	bl	8000a4c <__aeabi_dcmpge>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d143      	bne.n	800abdc <__kernel_rem_pio2+0x2ec>
 800ab54:	4681      	mov	r9, r0
 800ab56:	2200      	movs	r2, #0
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	f7f5 ff57 	bl	8000a10 <__aeabi_dcmpeq>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	f000 80c1 	beq.w	800acea <__kernel_rem_pio2+0x3fa>
 800ab68:	f108 33ff 	add.w	r3, r8, #4294967295
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	9900      	ldr	r1, [sp, #0]
 800ab70:	428b      	cmp	r3, r1
 800ab72:	da70      	bge.n	800ac56 <__kernel_rem_pio2+0x366>
 800ab74:	2a00      	cmp	r2, #0
 800ab76:	f000 808b 	beq.w	800ac90 <__kernel_rem_pio2+0x3a0>
 800ab7a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab7e:	ab0c      	add	r3, sp, #48	@ 0x30
 800ab80:	f1ab 0b18 	sub.w	fp, fp, #24
 800ab84:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d0f6      	beq.n	800ab7a <__kernel_rem_pio2+0x28a>
 800ab8c:	4658      	mov	r0, fp
 800ab8e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800ac08 <__kernel_rem_pio2+0x318>
 800ab92:	f000 f9fd 	bl	800af90 <scalbn>
 800ab96:	f108 0301 	add.w	r3, r8, #1
 800ab9a:	00da      	lsls	r2, r3, #3
 800ab9c:	9205      	str	r2, [sp, #20]
 800ab9e:	ec55 4b10 	vmov	r4, r5, d0
 800aba2:	aa70      	add	r2, sp, #448	@ 0x1c0
 800aba4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800ac1c <__kernel_rem_pio2+0x32c>
 800aba8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800abac:	4646      	mov	r6, r8
 800abae:	f04f 0a00 	mov.w	sl, #0
 800abb2:	2e00      	cmp	r6, #0
 800abb4:	f280 80d1 	bge.w	800ad5a <__kernel_rem_pio2+0x46a>
 800abb8:	4644      	mov	r4, r8
 800abba:	2c00      	cmp	r4, #0
 800abbc:	f2c0 80ff 	blt.w	800adbe <__kernel_rem_pio2+0x4ce>
 800abc0:	4b19      	ldr	r3, [pc, #100]	@ (800ac28 <__kernel_rem_pio2+0x338>)
 800abc2:	461f      	mov	r7, r3
 800abc4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800abc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abca:	9306      	str	r3, [sp, #24]
 800abcc:	f04f 0a00 	mov.w	sl, #0
 800abd0:	f04f 0b00 	mov.w	fp, #0
 800abd4:	2600      	movs	r6, #0
 800abd6:	eba8 0504 	sub.w	r5, r8, r4
 800abda:	e0e4      	b.n	800ada6 <__kernel_rem_pio2+0x4b6>
 800abdc:	f04f 0902 	mov.w	r9, #2
 800abe0:	e754      	b.n	800aa8c <__kernel_rem_pio2+0x19c>
 800abe2:	f854 3b04 	ldr.w	r3, [r4], #4
 800abe6:	bb0d      	cbnz	r5, 800ac2c <__kernel_rem_pio2+0x33c>
 800abe8:	b123      	cbz	r3, 800abf4 <__kernel_rem_pio2+0x304>
 800abea:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800abee:	f844 3c04 	str.w	r3, [r4, #-4]
 800abf2:	2301      	movs	r3, #1
 800abf4:	3201      	adds	r2, #1
 800abf6:	461d      	mov	r5, r3
 800abf8:	e74f      	b.n	800aa9a <__kernel_rem_pio2+0x1aa>
 800abfa:	bf00      	nop
 800abfc:	f3af 8000 	nop.w
	...
 800ac0c:	3ff00000 	.word	0x3ff00000
 800ac10:	0800b388 	.word	0x0800b388
 800ac14:	40200000 	.word	0x40200000
 800ac18:	3ff00000 	.word	0x3ff00000
 800ac1c:	3e700000 	.word	0x3e700000
 800ac20:	41700000 	.word	0x41700000
 800ac24:	3fe00000 	.word	0x3fe00000
 800ac28:	0800b348 	.word	0x0800b348
 800ac2c:	1acb      	subs	r3, r1, r3
 800ac2e:	e7de      	b.n	800abee <__kernel_rem_pio2+0x2fe>
 800ac30:	f108 32ff 	add.w	r2, r8, #4294967295
 800ac34:	ab0c      	add	r3, sp, #48	@ 0x30
 800ac36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ac3e:	a90c      	add	r1, sp, #48	@ 0x30
 800ac40:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ac44:	e737      	b.n	800aab6 <__kernel_rem_pio2+0x1c6>
 800ac46:	f108 32ff 	add.w	r2, r8, #4294967295
 800ac4a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ac4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ac54:	e7f3      	b.n	800ac3e <__kernel_rem_pio2+0x34e>
 800ac56:	a90c      	add	r1, sp, #48	@ 0x30
 800ac58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	e785      	b.n	800ab6e <__kernel_rem_pio2+0x27e>
 800ac62:	3401      	adds	r4, #1
 800ac64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ac68:	2a00      	cmp	r2, #0
 800ac6a:	d0fa      	beq.n	800ac62 <__kernel_rem_pio2+0x372>
 800ac6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ac72:	eb0d 0503 	add.w	r5, sp, r3
 800ac76:	9b06      	ldr	r3, [sp, #24]
 800ac78:	aa20      	add	r2, sp, #128	@ 0x80
 800ac7a:	4443      	add	r3, r8
 800ac7c:	f108 0701 	add.w	r7, r8, #1
 800ac80:	3d98      	subs	r5, #152	@ 0x98
 800ac82:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ac86:	4444      	add	r4, r8
 800ac88:	42bc      	cmp	r4, r7
 800ac8a:	da04      	bge.n	800ac96 <__kernel_rem_pio2+0x3a6>
 800ac8c:	46a0      	mov	r8, r4
 800ac8e:	e6a2      	b.n	800a9d6 <__kernel_rem_pio2+0xe6>
 800ac90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac92:	2401      	movs	r4, #1
 800ac94:	e7e6      	b.n	800ac64 <__kernel_rem_pio2+0x374>
 800ac96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac98:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ac9c:	f7f5 fbe6 	bl	800046c <__aeabi_i2d>
 800aca0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800af60 <__kernel_rem_pio2+0x670>
 800aca4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aca8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800acac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acb0:	46b2      	mov	sl, r6
 800acb2:	f04f 0800 	mov.w	r8, #0
 800acb6:	9b05      	ldr	r3, [sp, #20]
 800acb8:	4598      	cmp	r8, r3
 800acba:	dd05      	ble.n	800acc8 <__kernel_rem_pio2+0x3d8>
 800acbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800acc0:	3701      	adds	r7, #1
 800acc2:	eca5 7b02 	vstmia	r5!, {d7}
 800acc6:	e7df      	b.n	800ac88 <__kernel_rem_pio2+0x398>
 800acc8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800accc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800acd0:	f7f5 fc36 	bl	8000540 <__aeabi_dmul>
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acdc:	f7f5 fa7a 	bl	80001d4 <__adddf3>
 800ace0:	f108 0801 	add.w	r8, r8, #1
 800ace4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ace8:	e7e5      	b.n	800acb6 <__kernel_rem_pio2+0x3c6>
 800acea:	f1cb 0000 	rsb	r0, fp, #0
 800acee:	ec47 6b10 	vmov	d0, r6, r7
 800acf2:	f000 f94d 	bl	800af90 <scalbn>
 800acf6:	ec55 4b10 	vmov	r4, r5, d0
 800acfa:	4b9b      	ldr	r3, [pc, #620]	@ (800af68 <__kernel_rem_pio2+0x678>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	4620      	mov	r0, r4
 800ad00:	4629      	mov	r1, r5
 800ad02:	f7f5 fea3 	bl	8000a4c <__aeabi_dcmpge>
 800ad06:	b300      	cbz	r0, 800ad4a <__kernel_rem_pio2+0x45a>
 800ad08:	4b98      	ldr	r3, [pc, #608]	@ (800af6c <__kernel_rem_pio2+0x67c>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	4629      	mov	r1, r5
 800ad10:	f7f5 fc16 	bl	8000540 <__aeabi_dmul>
 800ad14:	f7f5 feae 	bl	8000a74 <__aeabi_d2iz>
 800ad18:	4606      	mov	r6, r0
 800ad1a:	f7f5 fba7 	bl	800046c <__aeabi_i2d>
 800ad1e:	4b92      	ldr	r3, [pc, #584]	@ (800af68 <__kernel_rem_pio2+0x678>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	f7f5 fc0d 	bl	8000540 <__aeabi_dmul>
 800ad26:	460b      	mov	r3, r1
 800ad28:	4602      	mov	r2, r0
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f7f5 fa4f 	bl	80001d0 <__aeabi_dsub>
 800ad32:	f7f5 fe9f 	bl	8000a74 <__aeabi_d2iz>
 800ad36:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad38:	f10b 0b18 	add.w	fp, fp, #24
 800ad3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800ad40:	f108 0801 	add.w	r8, r8, #1
 800ad44:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800ad48:	e720      	b.n	800ab8c <__kernel_rem_pio2+0x29c>
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	4629      	mov	r1, r5
 800ad4e:	f7f5 fe91 	bl	8000a74 <__aeabi_d2iz>
 800ad52:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad54:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800ad58:	e718      	b.n	800ab8c <__kernel_rem_pio2+0x29c>
 800ad5a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ad5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ad60:	f7f5 fb84 	bl	800046c <__aeabi_i2d>
 800ad64:	4622      	mov	r2, r4
 800ad66:	462b      	mov	r3, r5
 800ad68:	f7f5 fbea 	bl	8000540 <__aeabi_dmul>
 800ad6c:	4652      	mov	r2, sl
 800ad6e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800ad72:	465b      	mov	r3, fp
 800ad74:	4620      	mov	r0, r4
 800ad76:	4629      	mov	r1, r5
 800ad78:	f7f5 fbe2 	bl	8000540 <__aeabi_dmul>
 800ad7c:	3e01      	subs	r6, #1
 800ad7e:	4604      	mov	r4, r0
 800ad80:	460d      	mov	r5, r1
 800ad82:	e716      	b.n	800abb2 <__kernel_rem_pio2+0x2c2>
 800ad84:	9906      	ldr	r1, [sp, #24]
 800ad86:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800ad8a:	9106      	str	r1, [sp, #24]
 800ad8c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800ad90:	f7f5 fbd6 	bl	8000540 <__aeabi_dmul>
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	4650      	mov	r0, sl
 800ad9a:	4659      	mov	r1, fp
 800ad9c:	f7f5 fa1a 	bl	80001d4 <__adddf3>
 800ada0:	3601      	adds	r6, #1
 800ada2:	4682      	mov	sl, r0
 800ada4:	468b      	mov	fp, r1
 800ada6:	9b00      	ldr	r3, [sp, #0]
 800ada8:	429e      	cmp	r6, r3
 800adaa:	dc01      	bgt.n	800adb0 <__kernel_rem_pio2+0x4c0>
 800adac:	42ae      	cmp	r6, r5
 800adae:	dde9      	ble.n	800ad84 <__kernel_rem_pio2+0x494>
 800adb0:	ab48      	add	r3, sp, #288	@ 0x120
 800adb2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800adb6:	e9c5 ab00 	strd	sl, fp, [r5]
 800adba:	3c01      	subs	r4, #1
 800adbc:	e6fd      	b.n	800abba <__kernel_rem_pio2+0x2ca>
 800adbe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	dc0b      	bgt.n	800addc <__kernel_rem_pio2+0x4ec>
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	dc35      	bgt.n	800ae34 <__kernel_rem_pio2+0x544>
 800adc8:	d059      	beq.n	800ae7e <__kernel_rem_pio2+0x58e>
 800adca:	9b02      	ldr	r3, [sp, #8]
 800adcc:	f003 0007 	and.w	r0, r3, #7
 800add0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800add4:	ecbd 8b02 	vpop	{d8}
 800add8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800addc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d1f3      	bne.n	800adca <__kernel_rem_pio2+0x4da>
 800ade2:	9b05      	ldr	r3, [sp, #20]
 800ade4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ade8:	eb0d 0403 	add.w	r4, sp, r3
 800adec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800adf0:	4625      	mov	r5, r4
 800adf2:	46c2      	mov	sl, r8
 800adf4:	f1ba 0f00 	cmp.w	sl, #0
 800adf8:	dc69      	bgt.n	800aece <__kernel_rem_pio2+0x5de>
 800adfa:	4645      	mov	r5, r8
 800adfc:	2d01      	cmp	r5, #1
 800adfe:	f300 8087 	bgt.w	800af10 <__kernel_rem_pio2+0x620>
 800ae02:	9c05      	ldr	r4, [sp, #20]
 800ae04:	ab48      	add	r3, sp, #288	@ 0x120
 800ae06:	441c      	add	r4, r3
 800ae08:	2000      	movs	r0, #0
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	f1b8 0f01 	cmp.w	r8, #1
 800ae10:	f300 809c 	bgt.w	800af4c <__kernel_rem_pio2+0x65c>
 800ae14:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800ae18:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800ae1c:	f1b9 0f00 	cmp.w	r9, #0
 800ae20:	f040 80a6 	bne.w	800af70 <__kernel_rem_pio2+0x680>
 800ae24:	9b04      	ldr	r3, [sp, #16]
 800ae26:	e9c3 5600 	strd	r5, r6, [r3]
 800ae2a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ae2e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ae32:	e7ca      	b.n	800adca <__kernel_rem_pio2+0x4da>
 800ae34:	9d05      	ldr	r5, [sp, #20]
 800ae36:	ab48      	add	r3, sp, #288	@ 0x120
 800ae38:	441d      	add	r5, r3
 800ae3a:	4644      	mov	r4, r8
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	2100      	movs	r1, #0
 800ae40:	2c00      	cmp	r4, #0
 800ae42:	da35      	bge.n	800aeb0 <__kernel_rem_pio2+0x5c0>
 800ae44:	f1b9 0f00 	cmp.w	r9, #0
 800ae48:	d038      	beq.n	800aebc <__kernel_rem_pio2+0x5cc>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae50:	9c04      	ldr	r4, [sp, #16]
 800ae52:	e9c4 2300 	strd	r2, r3, [r4]
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800ae5e:	f7f5 f9b7 	bl	80001d0 <__aeabi_dsub>
 800ae62:	ad4a      	add	r5, sp, #296	@ 0x128
 800ae64:	2401      	movs	r4, #1
 800ae66:	45a0      	cmp	r8, r4
 800ae68:	da2b      	bge.n	800aec2 <__kernel_rem_pio2+0x5d2>
 800ae6a:	f1b9 0f00 	cmp.w	r9, #0
 800ae6e:	d002      	beq.n	800ae76 <__kernel_rem_pio2+0x586>
 800ae70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae74:	4619      	mov	r1, r3
 800ae76:	9b04      	ldr	r3, [sp, #16]
 800ae78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ae7c:	e7a5      	b.n	800adca <__kernel_rem_pio2+0x4da>
 800ae7e:	9c05      	ldr	r4, [sp, #20]
 800ae80:	ab48      	add	r3, sp, #288	@ 0x120
 800ae82:	441c      	add	r4, r3
 800ae84:	2000      	movs	r0, #0
 800ae86:	2100      	movs	r1, #0
 800ae88:	f1b8 0f00 	cmp.w	r8, #0
 800ae8c:	da09      	bge.n	800aea2 <__kernel_rem_pio2+0x5b2>
 800ae8e:	f1b9 0f00 	cmp.w	r9, #0
 800ae92:	d002      	beq.n	800ae9a <__kernel_rem_pio2+0x5aa>
 800ae94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae98:	4619      	mov	r1, r3
 800ae9a:	9b04      	ldr	r3, [sp, #16]
 800ae9c:	e9c3 0100 	strd	r0, r1, [r3]
 800aea0:	e793      	b.n	800adca <__kernel_rem_pio2+0x4da>
 800aea2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aea6:	f7f5 f995 	bl	80001d4 <__adddf3>
 800aeaa:	f108 38ff 	add.w	r8, r8, #4294967295
 800aeae:	e7eb      	b.n	800ae88 <__kernel_rem_pio2+0x598>
 800aeb0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800aeb4:	f7f5 f98e 	bl	80001d4 <__adddf3>
 800aeb8:	3c01      	subs	r4, #1
 800aeba:	e7c1      	b.n	800ae40 <__kernel_rem_pio2+0x550>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	e7c6      	b.n	800ae50 <__kernel_rem_pio2+0x560>
 800aec2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800aec6:	f7f5 f985 	bl	80001d4 <__adddf3>
 800aeca:	3401      	adds	r4, #1
 800aecc:	e7cb      	b.n	800ae66 <__kernel_rem_pio2+0x576>
 800aece:	ed35 7b02 	vldmdb	r5!, {d7}
 800aed2:	ed8d 7b00 	vstr	d7, [sp]
 800aed6:	ed95 7b02 	vldr	d7, [r5, #8]
 800aeda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aede:	ec53 2b17 	vmov	r2, r3, d7
 800aee2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aee6:	f7f5 f975 	bl	80001d4 <__adddf3>
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	4606      	mov	r6, r0
 800aef0:	460f      	mov	r7, r1
 800aef2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aef6:	f7f5 f96b 	bl	80001d0 <__aeabi_dsub>
 800aefa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aefe:	f7f5 f969 	bl	80001d4 <__adddf3>
 800af02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af06:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800af0a:	e9c5 6700 	strd	r6, r7, [r5]
 800af0e:	e771      	b.n	800adf4 <__kernel_rem_pio2+0x504>
 800af10:	ed34 7b02 	vldmdb	r4!, {d7}
 800af14:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800af18:	ec51 0b17 	vmov	r0, r1, d7
 800af1c:	4652      	mov	r2, sl
 800af1e:	465b      	mov	r3, fp
 800af20:	ed8d 7b00 	vstr	d7, [sp]
 800af24:	f7f5 f956 	bl	80001d4 <__adddf3>
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	4606      	mov	r6, r0
 800af2e:	460f      	mov	r7, r1
 800af30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af34:	f7f5 f94c 	bl	80001d0 <__aeabi_dsub>
 800af38:	4652      	mov	r2, sl
 800af3a:	465b      	mov	r3, fp
 800af3c:	f7f5 f94a 	bl	80001d4 <__adddf3>
 800af40:	3d01      	subs	r5, #1
 800af42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800af46:	e9c4 6700 	strd	r6, r7, [r4]
 800af4a:	e757      	b.n	800adfc <__kernel_rem_pio2+0x50c>
 800af4c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800af50:	f7f5 f940 	bl	80001d4 <__adddf3>
 800af54:	f108 38ff 	add.w	r8, r8, #4294967295
 800af58:	e758      	b.n	800ae0c <__kernel_rem_pio2+0x51c>
 800af5a:	bf00      	nop
 800af5c:	f3af 8000 	nop.w
	...
 800af68:	41700000 	.word	0x41700000
 800af6c:	3e700000 	.word	0x3e700000
 800af70:	9b04      	ldr	r3, [sp, #16]
 800af72:	9a04      	ldr	r2, [sp, #16]
 800af74:	601d      	str	r5, [r3, #0]
 800af76:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800af7a:	605c      	str	r4, [r3, #4]
 800af7c:	609f      	str	r7, [r3, #8]
 800af7e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800af82:	60d3      	str	r3, [r2, #12]
 800af84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af88:	6110      	str	r0, [r2, #16]
 800af8a:	6153      	str	r3, [r2, #20]
 800af8c:	e71d      	b.n	800adca <__kernel_rem_pio2+0x4da>
 800af8e:	bf00      	nop

0800af90 <scalbn>:
 800af90:	b570      	push	{r4, r5, r6, lr}
 800af92:	ec55 4b10 	vmov	r4, r5, d0
 800af96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800af9a:	4606      	mov	r6, r0
 800af9c:	462b      	mov	r3, r5
 800af9e:	b991      	cbnz	r1, 800afc6 <scalbn+0x36>
 800afa0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800afa4:	4323      	orrs	r3, r4
 800afa6:	d03b      	beq.n	800b020 <scalbn+0x90>
 800afa8:	4b33      	ldr	r3, [pc, #204]	@ (800b078 <scalbn+0xe8>)
 800afaa:	4620      	mov	r0, r4
 800afac:	4629      	mov	r1, r5
 800afae:	2200      	movs	r2, #0
 800afb0:	f7f5 fac6 	bl	8000540 <__aeabi_dmul>
 800afb4:	4b31      	ldr	r3, [pc, #196]	@ (800b07c <scalbn+0xec>)
 800afb6:	429e      	cmp	r6, r3
 800afb8:	4604      	mov	r4, r0
 800afba:	460d      	mov	r5, r1
 800afbc:	da0f      	bge.n	800afde <scalbn+0x4e>
 800afbe:	a326      	add	r3, pc, #152	@ (adr r3, 800b058 <scalbn+0xc8>)
 800afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc4:	e01e      	b.n	800b004 <scalbn+0x74>
 800afc6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800afca:	4291      	cmp	r1, r2
 800afcc:	d10b      	bne.n	800afe6 <scalbn+0x56>
 800afce:	4622      	mov	r2, r4
 800afd0:	4620      	mov	r0, r4
 800afd2:	4629      	mov	r1, r5
 800afd4:	f7f5 f8fe 	bl	80001d4 <__adddf3>
 800afd8:	4604      	mov	r4, r0
 800afda:	460d      	mov	r5, r1
 800afdc:	e020      	b.n	800b020 <scalbn+0x90>
 800afde:	460b      	mov	r3, r1
 800afe0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800afe4:	3936      	subs	r1, #54	@ 0x36
 800afe6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800afea:	4296      	cmp	r6, r2
 800afec:	dd0d      	ble.n	800b00a <scalbn+0x7a>
 800afee:	2d00      	cmp	r5, #0
 800aff0:	a11b      	add	r1, pc, #108	@ (adr r1, 800b060 <scalbn+0xd0>)
 800aff2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aff6:	da02      	bge.n	800affe <scalbn+0x6e>
 800aff8:	a11b      	add	r1, pc, #108	@ (adr r1, 800b068 <scalbn+0xd8>)
 800affa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800affe:	a318      	add	r3, pc, #96	@ (adr r3, 800b060 <scalbn+0xd0>)
 800b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b004:	f7f5 fa9c 	bl	8000540 <__aeabi_dmul>
 800b008:	e7e6      	b.n	800afd8 <scalbn+0x48>
 800b00a:	1872      	adds	r2, r6, r1
 800b00c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b010:	428a      	cmp	r2, r1
 800b012:	dcec      	bgt.n	800afee <scalbn+0x5e>
 800b014:	2a00      	cmp	r2, #0
 800b016:	dd06      	ble.n	800b026 <scalbn+0x96>
 800b018:	f36f 531e 	bfc	r3, #20, #11
 800b01c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b020:	ec45 4b10 	vmov	d0, r4, r5
 800b024:	bd70      	pop	{r4, r5, r6, pc}
 800b026:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b02a:	da08      	bge.n	800b03e <scalbn+0xae>
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	a10a      	add	r1, pc, #40	@ (adr r1, 800b058 <scalbn+0xc8>)
 800b030:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b034:	dac3      	bge.n	800afbe <scalbn+0x2e>
 800b036:	a10e      	add	r1, pc, #56	@ (adr r1, 800b070 <scalbn+0xe0>)
 800b038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b03c:	e7bf      	b.n	800afbe <scalbn+0x2e>
 800b03e:	3236      	adds	r2, #54	@ 0x36
 800b040:	f36f 531e 	bfc	r3, #20, #11
 800b044:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b048:	4620      	mov	r0, r4
 800b04a:	4b0d      	ldr	r3, [pc, #52]	@ (800b080 <scalbn+0xf0>)
 800b04c:	4629      	mov	r1, r5
 800b04e:	2200      	movs	r2, #0
 800b050:	e7d8      	b.n	800b004 <scalbn+0x74>
 800b052:	bf00      	nop
 800b054:	f3af 8000 	nop.w
 800b058:	c2f8f359 	.word	0xc2f8f359
 800b05c:	01a56e1f 	.word	0x01a56e1f
 800b060:	8800759c 	.word	0x8800759c
 800b064:	7e37e43c 	.word	0x7e37e43c
 800b068:	8800759c 	.word	0x8800759c
 800b06c:	fe37e43c 	.word	0xfe37e43c
 800b070:	c2f8f359 	.word	0xc2f8f359
 800b074:	81a56e1f 	.word	0x81a56e1f
 800b078:	43500000 	.word	0x43500000
 800b07c:	ffff3cb0 	.word	0xffff3cb0
 800b080:	3c900000 	.word	0x3c900000
 800b084:	00000000 	.word	0x00000000

0800b088 <floor>:
 800b088:	ec51 0b10 	vmov	r0, r1, d0
 800b08c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b094:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b098:	2e13      	cmp	r6, #19
 800b09a:	460c      	mov	r4, r1
 800b09c:	4605      	mov	r5, r0
 800b09e:	4680      	mov	r8, r0
 800b0a0:	dc34      	bgt.n	800b10c <floor+0x84>
 800b0a2:	2e00      	cmp	r6, #0
 800b0a4:	da17      	bge.n	800b0d6 <floor+0x4e>
 800b0a6:	a332      	add	r3, pc, #200	@ (adr r3, 800b170 <floor+0xe8>)
 800b0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ac:	f7f5 f892 	bl	80001d4 <__adddf3>
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	f7f5 fcd4 	bl	8000a60 <__aeabi_dcmpgt>
 800b0b8:	b150      	cbz	r0, 800b0d0 <floor+0x48>
 800b0ba:	2c00      	cmp	r4, #0
 800b0bc:	da55      	bge.n	800b16a <floor+0xe2>
 800b0be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b0c2:	432c      	orrs	r4, r5
 800b0c4:	2500      	movs	r5, #0
 800b0c6:	42ac      	cmp	r4, r5
 800b0c8:	4c2b      	ldr	r4, [pc, #172]	@ (800b178 <floor+0xf0>)
 800b0ca:	bf08      	it	eq
 800b0cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	e023      	b.n	800b11e <floor+0x96>
 800b0d6:	4f29      	ldr	r7, [pc, #164]	@ (800b17c <floor+0xf4>)
 800b0d8:	4137      	asrs	r7, r6
 800b0da:	ea01 0307 	and.w	r3, r1, r7
 800b0de:	4303      	orrs	r3, r0
 800b0e0:	d01d      	beq.n	800b11e <floor+0x96>
 800b0e2:	a323      	add	r3, pc, #140	@ (adr r3, 800b170 <floor+0xe8>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 f874 	bl	80001d4 <__adddf3>
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f7f5 fcb6 	bl	8000a60 <__aeabi_dcmpgt>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d0eb      	beq.n	800b0d0 <floor+0x48>
 800b0f8:	2c00      	cmp	r4, #0
 800b0fa:	bfbe      	ittt	lt
 800b0fc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b100:	4133      	asrlt	r3, r6
 800b102:	18e4      	addlt	r4, r4, r3
 800b104:	ea24 0407 	bic.w	r4, r4, r7
 800b108:	2500      	movs	r5, #0
 800b10a:	e7e1      	b.n	800b0d0 <floor+0x48>
 800b10c:	2e33      	cmp	r6, #51	@ 0x33
 800b10e:	dd0a      	ble.n	800b126 <floor+0x9e>
 800b110:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b114:	d103      	bne.n	800b11e <floor+0x96>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	f7f5 f85b 	bl	80001d4 <__adddf3>
 800b11e:	ec41 0b10 	vmov	d0, r0, r1
 800b122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b126:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b12a:	f04f 37ff 	mov.w	r7, #4294967295
 800b12e:	40df      	lsrs	r7, r3
 800b130:	4207      	tst	r7, r0
 800b132:	d0f4      	beq.n	800b11e <floor+0x96>
 800b134:	a30e      	add	r3, pc, #56	@ (adr r3, 800b170 <floor+0xe8>)
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	f7f5 f84b 	bl	80001d4 <__adddf3>
 800b13e:	2200      	movs	r2, #0
 800b140:	2300      	movs	r3, #0
 800b142:	f7f5 fc8d 	bl	8000a60 <__aeabi_dcmpgt>
 800b146:	2800      	cmp	r0, #0
 800b148:	d0c2      	beq.n	800b0d0 <floor+0x48>
 800b14a:	2c00      	cmp	r4, #0
 800b14c:	da0a      	bge.n	800b164 <floor+0xdc>
 800b14e:	2e14      	cmp	r6, #20
 800b150:	d101      	bne.n	800b156 <floor+0xce>
 800b152:	3401      	adds	r4, #1
 800b154:	e006      	b.n	800b164 <floor+0xdc>
 800b156:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b15a:	2301      	movs	r3, #1
 800b15c:	40b3      	lsls	r3, r6
 800b15e:	441d      	add	r5, r3
 800b160:	4545      	cmp	r5, r8
 800b162:	d3f6      	bcc.n	800b152 <floor+0xca>
 800b164:	ea25 0507 	bic.w	r5, r5, r7
 800b168:	e7b2      	b.n	800b0d0 <floor+0x48>
 800b16a:	2500      	movs	r5, #0
 800b16c:	462c      	mov	r4, r5
 800b16e:	e7af      	b.n	800b0d0 <floor+0x48>
 800b170:	8800759c 	.word	0x8800759c
 800b174:	7e37e43c 	.word	0x7e37e43c
 800b178:	bff00000 	.word	0xbff00000
 800b17c:	000fffff 	.word	0x000fffff

0800b180 <_init>:
 800b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b182:	bf00      	nop
 800b184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b186:	bc08      	pop	{r3}
 800b188:	469e      	mov	lr, r3
 800b18a:	4770      	bx	lr

0800b18c <_fini>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	bf00      	nop
 800b190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b192:	bc08      	pop	{r3}
 800b194:	469e      	mov	lr, r3
 800b196:	4770      	bx	lr
