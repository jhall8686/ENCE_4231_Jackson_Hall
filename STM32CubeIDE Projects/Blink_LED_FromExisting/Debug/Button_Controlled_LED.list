
Button_Controlled_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009340  08009340  0000a340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800935c  0800935c  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800935c  0800935c  0000a35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009364  08009364  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009364  08009364  0000a364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009368  08009368  0000a368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800936c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a64  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019091  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dc2  00000000  00000000  0002413d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  00027f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001178  00000000  00000000  00029598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243c8  00000000  00000000  0002a710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d924  00000000  00000000  0004ead8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4141  00000000  00000000  0006c3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014053d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006350  00000000  00000000  00140580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000090  00000000  00000000  001468d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009328 	.word	0x08009328

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009328 	.word	0x08009328

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fcb8 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f826 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f978 	bl	80007f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f88c 	bl	8000620 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8b8 	bl	800067c <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8e6 	bl	80006dc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f008 fab4 	bl	8008a7c <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000514:	f000 f918 	bl	8000748 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port,BUTTON_Pin)) {
 8000518:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800051c:	480a      	ldr	r0, [pc, #40]	@ (8000548 <main+0x54>)
 800051e:	f000 ffe9 	bl	80014f4 <HAL_GPIO_ReadPin>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d006      	beq.n	8000536 <main+0x42>
	  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800052e:	4806      	ldr	r0, [pc, #24]	@ (8000548 <main+0x54>)
 8000530:	f000 fff8 	bl	8001524 <HAL_GPIO_WritePin>
 8000534:	e005      	b.n	8000542 <main+0x4e>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800053c:	4802      	ldr	r0, [pc, #8]	@ (8000548 <main+0x54>)
 800053e:	f000 fff1 	bl	8001524 <HAL_GPIO_WritePin>
	}
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000542:	f008 fac1 	bl	8008ac8 <MX_USB_HOST_Process>
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port,BUTTON_Pin)) {
 8000546:	e7e7      	b.n	8000518 <main+0x24>
 8000548:	40020c00 	.word	0x40020c00

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	@ 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f008 fe56 	bl	800920c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b28      	ldr	r3, [pc, #160]	@ (8000618 <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	4a27      	ldr	r2, [pc, #156]	@ (8000618 <SystemClock_Config+0xcc>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000580:	4b25      	ldr	r3, [pc, #148]	@ (8000618 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b22      	ldr	r3, [pc, #136]	@ (800061c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a21      	ldr	r2, [pc, #132]	@ (800061c <SystemClock_Config+0xd0>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1f      	ldr	r3, [pc, #124]	@ (800061c <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005bc:	2308      	movs	r3, #8
 80005be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ca:	2307      	movs	r3, #7
 80005cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fed8 	bl	8004388 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005de:	f000 fa13 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2105      	movs	r1, #5
 8000600:	4618      	mov	r0, r3
 8000602:	f004 f939 	bl	8004878 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800060c:	f000 f9fc 	bl	8000a08 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	@ 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f003 f8af 	bl	80037c0 <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f9ce 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000098 	.word	0x20000098
 8000674:	40005400 	.word	0x40005400
 8000678:	000186a0 	.word	0x000186a0

0800067c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000680:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <MX_I2S3_Init+0x54>)
 8000682:	4a14      	ldr	r2, [pc, #80]	@ (80006d4 <MX_I2S3_Init+0x58>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_I2S3_Init+0x54>)
 8000688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800068c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000694:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <MX_I2S3_Init+0x54>)
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006a4:	4a0c      	ldr	r2, [pc, #48]	@ (80006d8 <MX_I2S3_Init+0x5c>)
 80006a6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006bc:	f003 f9c4 	bl	8003a48 <HAL_I2S_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006c6:	f000 f99f 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000ec 	.word	0x200000ec
 80006d4:	40003c00 	.word	0x40003c00
 80006d8:	00017700 	.word	0x00017700

080006dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e0:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <MX_SPI1_Init+0x64>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	@ (8000744 <MX_SPI1_Init+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800070c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_SPI1_Init+0x64>)
 8000728:	220a      	movs	r2, #10
 800072a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_SPI1_Init+0x64>)
 800072e:	f004 fbf1 	bl	8004f14 <HAL_SPI_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000738:	f000 f966 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000134 	.word	0x20000134
 8000744:	40013000 	.word	0x40013000

08000748 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000764:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <MX_TIM1_Init+0xa4>)
 8000766:	4a22      	ldr	r2, [pc, #136]	@ (80007f0 <MX_TIM1_Init+0xa8>)
 8000768:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800076a:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <MX_TIM1_Init+0xa4>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <MX_TIM1_Init+0xa4>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000776:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_TIM1_Init+0xa4>)
 8000778:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800077c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_TIM1_Init+0xa4>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000784:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_TIM1_Init+0xa4>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_TIM1_Init+0xa4>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000790:	4816      	ldr	r0, [pc, #88]	@ (80007ec <MX_TIM1_Init+0xa4>)
 8000792:	f004 fc48 	bl	8005026 <HAL_TIM_IC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800079c:	f000 f934 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	480f      	ldr	r0, [pc, #60]	@ (80007ec <MX_TIM1_Init+0xa4>)
 80007b0:	f004 fefa 	bl	80055a8 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007ba:	f000 f925 	bl	8000a08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007c2:	2301      	movs	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_TIM1_Init+0xa4>)
 80007d6:	f004 fc75 	bl	80050c4 <HAL_TIM_IC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80007e0:	f000 f912 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000018c 	.word	0x2000018c
 80007f0:	40010000 	.word	0x40010000

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	@ 0x30
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	4b78      	ldr	r3, [pc, #480]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a77      	ldr	r2, [pc, #476]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b75      	ldr	r3, [pc, #468]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	4b71      	ldr	r3, [pc, #452]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a70      	ldr	r2, [pc, #448]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b6e      	ldr	r3, [pc, #440]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b6a      	ldr	r3, [pc, #424]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a69      	ldr	r2, [pc, #420]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b67      	ldr	r3, [pc, #412]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b63      	ldr	r3, [pc, #396]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a62      	ldr	r2, [pc, #392]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b60      	ldr	r3, [pc, #384]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b5c      	ldr	r3, [pc, #368]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a5b      	ldr	r2, [pc, #364]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b59      	ldr	r3, [pc, #356]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b55      	ldr	r3, [pc, #340]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a54      	ldr	r2, [pc, #336]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b52      	ldr	r3, [pc, #328]	@ (80009f0 <MX_GPIO_Init+0x1fc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2108      	movs	r1, #8
 80008b6:	484f      	ldr	r0, [pc, #316]	@ (80009f4 <MX_GPIO_Init+0x200>)
 80008b8:	f000 fe34 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2101      	movs	r1, #1
 80008c0:	484d      	ldr	r0, [pc, #308]	@ (80009f8 <MX_GPIO_Init+0x204>)
 80008c2:	f000 fe2f 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c6:	2200      	movs	r2, #0
 80008c8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008cc:	484b      	ldr	r0, [pc, #300]	@ (80009fc <MX_GPIO_Init+0x208>)
 80008ce:	f000 fe29 	bl	8001524 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008d2:	2308      	movs	r3, #8
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4842      	ldr	r0, [pc, #264]	@ (80009f4 <MX_GPIO_Init+0x200>)
 80008ea:	f000 fc67 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	483c      	ldr	r0, [pc, #240]	@ (80009f8 <MX_GPIO_Init+0x204>)
 8000906:	f000 fc59 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091a:	2305      	movs	r3, #5
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4834      	ldr	r0, [pc, #208]	@ (80009f8 <MX_GPIO_Init+0x204>)
 8000926:	f000 fc49 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800092e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4830      	ldr	r0, [pc, #192]	@ (8000a00 <MX_GPIO_Init+0x20c>)
 8000940:	f000 fc3c 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000944:	2304      	movs	r3, #4
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	482b      	ldr	r0, [pc, #172]	@ (8000a04 <MX_GPIO_Init+0x210>)
 8000958:	f000 fc30 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800095c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096e:	2305      	movs	r3, #5
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4822      	ldr	r0, [pc, #136]	@ (8000a04 <MX_GPIO_Init+0x210>)
 800097a:	f000 fc1f 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800097e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000988:	2302      	movs	r3, #2
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	481a      	ldr	r0, [pc, #104]	@ (80009fc <MX_GPIO_Init+0x208>)
 8000994:	f000 fc12 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000998:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800099c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4812      	ldr	r0, [pc, #72]	@ (80009fc <MX_GPIO_Init+0x208>)
 80009b2:	f000 fc03 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b6:	2320      	movs	r3, #32
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	480c      	ldr	r0, [pc, #48]	@ (80009fc <MX_GPIO_Init+0x208>)
 80009ca:	f000 fbf7 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_GPIO_Init+0x200>)
 80009e4:	f000 fbea 	bl	80011bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e8:	bf00      	nop
 80009ea:	3730      	adds	r7, #48	@ 0x30
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40020800 	.word	0x40020800
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020400 	.word	0x40020400

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	4a0f      	ldr	r2, [pc, #60]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a52:	2007      	movs	r0, #7
 8000a54:	f000 fb70 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a19      	ldr	r2, [pc, #100]	@ (8000ae8 <HAL_I2C_MspInit+0x84>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d12c      	bne.n	8000ae0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <HAL_I2C_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <HAL_I2C_MspInit+0x88>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <HAL_I2C_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aa2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa8:	2312      	movs	r3, #18
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <HAL_I2C_MspInit+0x8c>)
 8000ac0:	f000 fb7c 	bl	80011bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <HAL_I2C_MspInit+0x88>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000acc:	4a07      	ldr	r2, [pc, #28]	@ (8000aec <HAL_I2C_MspInit+0x88>)
 8000ace:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_I2C_MspInit+0x88>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	@ 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020400 	.word	0x40020400

08000af4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	@ 0x38
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a31      	ldr	r2, [pc, #196]	@ (8000be4 <HAL_I2S_MspInit+0xf0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d15a      	bne.n	8000bda <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b24:	2301      	movs	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b28:	23c0      	movs	r3, #192	@ 0xc0
 8000b2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 f8ab 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b40:	f7ff ff62 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a26      	ldr	r2, [pc, #152]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	4a1f      	ldr	r2, [pc, #124]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b70:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	4a18      	ldr	r2, [pc, #96]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8c:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba8:	2306      	movs	r3, #6
 8000baa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480e      	ldr	r0, [pc, #56]	@ (8000bec <HAL_I2S_MspInit+0xf8>)
 8000bb4:	f000 fb02 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bb8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <HAL_I2S_MspInit+0xfc>)
 8000bd6:	f000 faf1 	bl	80011bc <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bda:	bf00      	nop
 8000bdc:	3738      	adds	r7, #56	@ 0x38
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40003c00 	.word	0x40003c00
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020800 	.word	0x40020800

08000bf4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	@ (8000c78 <HAL_SPI_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12b      	bne.n	8000c6e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c4e:	23e0      	movs	r3, #224	@ 0xe0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <HAL_SPI_MspInit+0x8c>)
 8000c6a:	f000 faa7 	bl	80011bc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40013000 	.word	0x40013000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	@ (8000d08 <HAL_TIM_IC_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12c      	bne.n	8000d00 <HAL_TIM_IC_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <HAL_TIM_IC_MspInit+0x88>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	4a17      	ldr	r2, [pc, #92]	@ (8000d0c <HAL_TIM_IC_MspInit+0x88>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <HAL_TIM_IC_MspInit+0x88>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_TIM_IC_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	@ (8000d0c <HAL_TIM_IC_MspInit+0x88>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_TIM_IC_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <HAL_TIM_IC_MspInit+0x8c>)
 8000cfc:	f000 fa5e 	bl	80011bc <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	@ 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40010000 	.word	0x40010000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40021000 	.word	0x40021000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <NMI_Handler+0x4>

08000d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6a:	f000 f8d1 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <OTG_FS_IRQHandler+0x10>)
 8000d7a:	f000 fecd 	bl	8001b18 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200005b8 	.word	0x200005b8

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f008 fa40 	bl	800923c <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	200001d4 	.word	0x200001d4
 8000df0:	20000ae0 	.word	0x20000ae0

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e1c:	f7ff ffea 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	@ (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f008 f9ff 	bl	8009248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fb53 	bl	80004f4 <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e5c:	0800936c 	.word	0x0800936c
  ldr r2, =_sbss
 8000e60:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e64:	20000ae0 	.word	0x20000ae0

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	@ (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f94f 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fdb8 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f967 	bl	80011a2 <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f92f 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	@ (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	200001d8 	.word	0x200001d8

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	@ (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200001d8 	.word	0x200001d8

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4907      	ldr	r1, [pc, #28]	@ (8001034 <__NVIC_EnableIRQ+0x38>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	@ (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	@ (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	@ 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	@ 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff8e 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff29 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff3e 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff8e 	bl	800108c <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff31 	bl	8000ffc <__NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffa2 	bl	80010f4 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	e16b      	b.n	80014b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 815a 	bne.w	80014aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d005      	beq.n	800120e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	2b02      	cmp	r3, #2
 800120c:	d130      	bne.n	8001270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b03      	cmp	r3, #3
 800127a:	d017      	beq.n	80012ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d123      	bne.n	8001300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	69b9      	ldr	r1, [r7, #24]
 80012fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80b4 	beq.w	80014aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b60      	ldr	r3, [pc, #384]	@ (80014c8 <HAL_GPIO_Init+0x30c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	4a5f      	ldr	r2, [pc, #380]	@ (80014c8 <HAL_GPIO_Init+0x30c>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001350:	6453      	str	r3, [r2, #68]	@ 0x44
 8001352:	4b5d      	ldr	r3, [pc, #372]	@ (80014c8 <HAL_GPIO_Init+0x30c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135e:	4a5b      	ldr	r2, [pc, #364]	@ (80014cc <HAL_GPIO_Init+0x310>)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a52      	ldr	r2, [pc, #328]	@ (80014d0 <HAL_GPIO_Init+0x314>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d02b      	beq.n	80013e2 <HAL_GPIO_Init+0x226>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a51      	ldr	r2, [pc, #324]	@ (80014d4 <HAL_GPIO_Init+0x318>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d025      	beq.n	80013de <HAL_GPIO_Init+0x222>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a50      	ldr	r2, [pc, #320]	@ (80014d8 <HAL_GPIO_Init+0x31c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01f      	beq.n	80013da <HAL_GPIO_Init+0x21e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4f      	ldr	r2, [pc, #316]	@ (80014dc <HAL_GPIO_Init+0x320>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x21a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4e      	ldr	r2, [pc, #312]	@ (80014e0 <HAL_GPIO_Init+0x324>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x216>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4d      	ldr	r2, [pc, #308]	@ (80014e4 <HAL_GPIO_Init+0x328>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x212>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4c      	ldr	r2, [pc, #304]	@ (80014e8 <HAL_GPIO_Init+0x32c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4b      	ldr	r2, [pc, #300]	@ (80014ec <HAL_GPIO_Init+0x330>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x20a>
 80013c2:	2307      	movs	r3, #7
 80013c4:	e00e      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013c6:	2308      	movs	r3, #8
 80013c8:	e00c      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013ca:	2306      	movs	r3, #6
 80013cc:	e00a      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013ce:	2305      	movs	r3, #5
 80013d0:	e008      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013d2:	2304      	movs	r3, #4
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013d6:	2303      	movs	r3, #3
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x228>
 80013e2:	2300      	movs	r3, #0
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f4:	4935      	ldr	r1, [pc, #212]	@ (80014cc <HAL_GPIO_Init+0x310>)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001402:	4b3b      	ldr	r3, [pc, #236]	@ (80014f0 <HAL_GPIO_Init+0x334>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001426:	4a32      	ldr	r2, [pc, #200]	@ (80014f0 <HAL_GPIO_Init+0x334>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800142c:	4b30      	ldr	r3, [pc, #192]	@ (80014f0 <HAL_GPIO_Init+0x334>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001450:	4a27      	ldr	r2, [pc, #156]	@ (80014f0 <HAL_GPIO_Init+0x334>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001456:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <HAL_GPIO_Init+0x334>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800147a:	4a1d      	ldr	r2, [pc, #116]	@ (80014f0 <HAL_GPIO_Init+0x334>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <HAL_GPIO_Init+0x334>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a4:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <HAL_GPIO_Init+0x334>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3301      	adds	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	f67f ae90 	bls.w	80011d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3724      	adds	r7, #36	@ 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40013800 	.word	0x40013800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40021400 	.word	0x40021400
 80014e8:	40021800 	.word	0x40021800
 80014ec:	40021c00 	.word	0x40021c00
 80014f0:	40013c00 	.word	0x40013c00

080014f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e001      	b.n	8001516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
 8001530:	4613      	mov	r3, r2
 8001532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001534:	787b      	ldrb	r3, [r7, #1]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001540:	e003      	b.n	800154a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	619a      	str	r2, [r3, #24]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af02      	add	r7, sp, #8
 800155c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e059      	b.n	800161c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f007 fad8 	bl	8008b38 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2203      	movs	r2, #3
 800158c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001596:	d102      	bne.n	800159e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 f8f1 	bl	800578a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7c1a      	ldrb	r2, [r3, #16]
 80015b0:	f88d 2000 	strb.w	r2, [sp]
 80015b4:	3304      	adds	r3, #4
 80015b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b8:	f004 f872 	bl	80056a0 <USB_CoreInit>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2202      	movs	r2, #2
 80015c6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e026      	b.n	800161c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2101      	movs	r1, #1
 80015d4:	4618      	mov	r0, r3
 80015d6:	f004 f8e9 	bl	80057ac <USB_SetCurrentMode>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e017      	b.n	800161c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7c1a      	ldrb	r2, [r3, #16]
 80015f4:	f88d 2000 	strb.w	r2, [sp]
 80015f8:	3304      	adds	r3, #4
 80015fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fc:	f004 fa8c 	bl	8005b18 <USB_HostInit>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2202      	movs	r2, #2
 800160a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e004      	b.n	800161c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b08b      	sub	sp, #44	@ 0x2c
 8001628:	af04      	add	r7, sp, #16
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4608      	mov	r0, r1
 800162e:	4611      	mov	r1, r2
 8001630:	461a      	mov	r2, r3
 8001632:	4603      	mov	r3, r0
 8001634:	70fb      	strb	r3, [r7, #3]
 8001636:	460b      	mov	r3, r1
 8001638:	70bb      	strb	r3, [r7, #2]
 800163a:	4613      	mov	r3, r2
 800163c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800163e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001640:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_HCD_HC_Init+0x2c>
 800164c:	2302      	movs	r3, #2
 800164e:	e09d      	b.n	800178c <HAL_HCD_HC_Init+0x168>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3319      	adds	r3, #25
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3314      	adds	r3, #20
 800167c:	787a      	ldrb	r2, [r7, #1]
 800167e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	3315      	adds	r3, #21
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	1a9b      	subs	r3, r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	3326      	adds	r3, #38	@ 0x26
 80016a4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80016a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	78bb      	ldrb	r3, [r7, #2]
 80016ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016b2:	b2d8      	uxtb	r0, r3
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	1a9b      	subs	r3, r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	3316      	adds	r3, #22
 80016c2:	4602      	mov	r2, r0
 80016c4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	4619      	mov	r1, r3
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fbc8 	bl	8001e60 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80016d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	da0a      	bge.n	80016ee <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	3317      	adds	r3, #23
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e009      	b.n	8001702 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016ee:	78fa      	ldrb	r2, [r7, #3]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	3317      	adds	r3, #23
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f004 fb6a 	bl	8005de0 <USB_GetHostSpeed>
 800170c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800170e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001712:	2b01      	cmp	r3, #1
 8001714:	d10b      	bne.n	800172e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001716:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_HCD_HC_Init+0x10a>
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d104      	bne.n	800172e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2bbc      	cmp	r3, #188	@ 0xbc
 8001728:	d901      	bls.n	800172e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800172a:	23bc      	movs	r3, #188	@ 0xbc
 800172c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	3318      	adds	r3, #24
 800173e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001742:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	b298      	uxth	r0, r3
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	3328      	adds	r3, #40	@ 0x28
 8001758:	4602      	mov	r2, r0
 800175a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	b29b      	uxth	r3, r3
 8001764:	787c      	ldrb	r4, [r7, #1]
 8001766:	78ba      	ldrb	r2, [r7, #2]
 8001768:	78f9      	ldrb	r1, [r7, #3]
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	4623      	mov	r3, r4
 800177a:	f004 fb59 	bl	8005e30 <USB_HC_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	371c      	adds	r7, #28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}

08001794 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_HCD_HC_Halt+0x1e>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e00f      	b.n	80017d2 <HAL_HCD_HC_Halt+0x3e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 feeb 	bl	800659e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	4608      	mov	r0, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	70fb      	strb	r3, [r7, #3]
 80017ee:	460b      	mov	r3, r1
 80017f0:	70bb      	strb	r3, [r7, #2]
 80017f2:	4613      	mov	r3, r2
 80017f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	3317      	adds	r3, #23
 8001806:	78ba      	ldrb	r2, [r7, #2]
 8001808:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	1a9b      	subs	r3, r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	3326      	adds	r3, #38	@ 0x26
 800181a:	787a      	ldrb	r2, [r7, #1]
 800181c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800181e:	7c3b      	ldrb	r3, [r7, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d114      	bne.n	800184e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001824:	78fa      	ldrb	r2, [r7, #3]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	1a9b      	subs	r3, r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	332a      	adds	r3, #42	@ 0x2a
 8001834:	2203      	movs	r2, #3
 8001836:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	1a9b      	subs	r3, r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	3319      	adds	r3, #25
 8001848:	7f3a      	ldrb	r2, [r7, #28]
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	e009      	b.n	8001862 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	332a      	adds	r3, #42	@ 0x2a
 800185e:	2202      	movs	r2, #2
 8001860:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001862:	787b      	ldrb	r3, [r7, #1]
 8001864:	2b03      	cmp	r3, #3
 8001866:	f200 8102 	bhi.w	8001a6e <HAL_HCD_HC_SubmitRequest+0x292>
 800186a:	a201      	add	r2, pc, #4	@ (adr r2, 8001870 <HAL_HCD_HC_SubmitRequest+0x94>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	08001881 	.word	0x08001881
 8001874:	08001a59 	.word	0x08001a59
 8001878:	08001945 	.word	0x08001945
 800187c:	080019cf 	.word	0x080019cf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001880:	7c3b      	ldrb	r3, [r7, #16]
 8001882:	2b01      	cmp	r3, #1
 8001884:	f040 80f5 	bne.w	8001a72 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001888:	78bb      	ldrb	r3, [r7, #2]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d12d      	bne.n	80018ea <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800188e:	8b3b      	ldrh	r3, [r7, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	333d      	adds	r3, #61	@ 0x3d
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	333d      	adds	r3, #61	@ 0x3d
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10a      	bne.n	80018d4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	332a      	adds	r3, #42	@ 0x2a
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80018d2:	e0ce      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	332a      	adds	r3, #42	@ 0x2a
 80018e4:	2202      	movs	r2, #2
 80018e6:	701a      	strb	r2, [r3, #0]
      break;
 80018e8:	e0c3      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	331a      	adds	r3, #26
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	f040 80b8 	bne.w	8001a72 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	333c      	adds	r3, #60	@ 0x3c
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10a      	bne.n	800192e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	332a      	adds	r3, #42	@ 0x2a
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
      break;
 800192c:	e0a1      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	332a      	adds	r3, #42	@ 0x2a
 800193e:	2202      	movs	r2, #2
 8001940:	701a      	strb	r2, [r3, #0]
      break;
 8001942:	e096      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001944:	78bb      	ldrb	r3, [r7, #2]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d120      	bne.n	800198c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	333d      	adds	r3, #61	@ 0x3d
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10a      	bne.n	8001976 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	332a      	adds	r3, #42	@ 0x2a
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001974:	e07e      	b.n	8001a74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	332a      	adds	r3, #42	@ 0x2a
 8001986:	2202      	movs	r2, #2
 8001988:	701a      	strb	r2, [r3, #0]
      break;
 800198a:	e073      	b.n	8001a74 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800198c:	78fa      	ldrb	r2, [r7, #3]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	333c      	adds	r3, #60	@ 0x3c
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10a      	bne.n	80019b8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	332a      	adds	r3, #42	@ 0x2a
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
      break;
 80019b6:	e05d      	b.n	8001a74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	332a      	adds	r3, #42	@ 0x2a
 80019c8:	2202      	movs	r2, #2
 80019ca:	701a      	strb	r2, [r3, #0]
      break;
 80019cc:	e052      	b.n	8001a74 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019ce:	78bb      	ldrb	r3, [r7, #2]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d120      	bne.n	8001a16 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	333d      	adds	r3, #61	@ 0x3d
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10a      	bne.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	332a      	adds	r3, #42	@ 0x2a
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019fe:	e039      	b.n	8001a74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	332a      	adds	r3, #42	@ 0x2a
 8001a10:	2202      	movs	r2, #2
 8001a12:	701a      	strb	r2, [r3, #0]
      break;
 8001a14:	e02e      	b.n	8001a74 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	333c      	adds	r3, #60	@ 0x3c
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10a      	bne.n	8001a42 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	332a      	adds	r3, #42	@ 0x2a
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
      break;
 8001a40:	e018      	b.n	8001a74 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	332a      	adds	r3, #42	@ 0x2a
 8001a52:	2202      	movs	r2, #2
 8001a54:	701a      	strb	r2, [r3, #0]
      break;
 8001a56:	e00d      	b.n	8001a74 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	332a      	adds	r3, #42	@ 0x2a
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
      break;
 8001a6c:	e002      	b.n	8001a74 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a6e:	bf00      	nop
 8001a70:	e000      	b.n	8001a74 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a72:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	332c      	adds	r3, #44	@ 0x2c
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	8b39      	ldrh	r1, [r7, #24]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4403      	add	r3, r0
 8001a98:	3334      	adds	r3, #52	@ 0x34
 8001a9a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	334c      	adds	r3, #76	@ 0x4c
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	1a9b      	subs	r3, r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	3338      	adds	r3, #56	@ 0x38
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3315      	adds	r3, #21
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	334d      	adds	r3, #77	@ 0x4d
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	4613      	mov	r3, r2
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	3310      	adds	r3, #16
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	1d19      	adds	r1, r3, #4
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	799b      	ldrb	r3, [r3, #6]
 8001b06:	461a      	mov	r2, r3
 8001b08:	f004 fabe 	bl	8006088 <USB_HC_StartXfer>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop

08001b18 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 ffb2 	bl	8005a98 <USB_GetMode>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	f040 80fb 	bne.w	8001d32 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 ff75 	bl	8005a30 <USB_ReadInterrupts>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80f1 	beq.w	8001d30 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 ff6c 	bl	8005a30 <USB_ReadInterrupts>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b62:	d104      	bne.n	8001b6e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 ff5c 	bl	8005a30 <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b82:	d104      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 ff4c 	bl	8005a30 <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ba2:	d104      	bne.n	8001bae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001bac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 ff3c 	bl	8005a30 <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d103      	bne.n	8001bca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 ff2e 	bl	8005a30 <USB_ReadInterrupts>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bde:	d120      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001be8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d113      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bfa:	2110      	movs	r1, #16
 8001bfc:	6938      	ldr	r0, [r7, #16]
 8001bfe:	f003 fe21 	bl	8005844 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c02:	6938      	ldr	r0, [r7, #16]
 8001c04:	f003 fe50 	bl	80058a8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7a5b      	ldrb	r3, [r3, #9]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d105      	bne.n	8001c1c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2101      	movs	r1, #1
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 f842 	bl	8005ca0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f007 f809 	bl	8008c34 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 ff02 	bl	8005a30 <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c36:	d102      	bne.n	8001c3e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f001 fd4d 	bl	80036d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 fef4 	bl	8005a30 <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d106      	bne.n	8001c60 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f006 ffd2 	bl	8008bfc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fee3 	bl	8005a30 <USB_ReadInterrupts>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c74:	d139      	bne.n	8001cea <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f004 fc7e 	bl	800657c <USB_HC_ReadInterrupt>
 8001c80:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e025      	b.n	8001cd4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d018      	beq.n	8001cce <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cb2:	d106      	bne.n	8001cc2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	4619      	mov	r1, r3
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f905 	bl	8001eca <HCD_HC_IN_IRQHandler>
 8001cc0:	e005      	b.n	8001cce <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 ff67 	bl	8002b9c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	795b      	ldrb	r3, [r3, #5]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d3d3      	bcc.n	8001c88 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 fe9e 	bl	8005a30 <USB_ReadInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d101      	bne.n	8001d02 <HAL_HCD_IRQHandler+0x1ea>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_HCD_IRQHandler+0x1ec>
 8001d02:	2300      	movs	r3, #0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d014      	beq.n	8001d32 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0210 	bic.w	r2, r2, #16
 8001d16:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f001 fbfe 	bl	800351a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0210 	orr.w	r2, r2, #16
 8001d2c:	619a      	str	r2, [r3, #24]
 8001d2e:	e000      	b.n	8001d32 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d30:	bf00      	nop
    }
  }
}
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_HCD_Start+0x16>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e013      	b.n	8001d76 <HAL_HCD_Start+0x3e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f004 f806 	bl	8005d6e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 fcfe 	bl	8005768 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_HCD_Stop+0x16>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e00d      	b.n	8001db0 <HAL_HCD_Stop+0x32>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f004 fd59 	bl	8006858 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 ffa8 	bl	8005d1a <USB_ResetPort>
 8001dca:	4603      	mov	r3, r0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001de0:	78fa      	ldrb	r2, [r7, #3]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	334c      	adds	r3, #76	@ 0x4c
 8001df0:	781b      	ldrb	r3, [r3, #0]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e0a:	78fa      	ldrb	r2, [r7, #3]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	3338      	adds	r3, #56	@ 0x38
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 ffea 	bl	8005e0e <USB_GetCurrentFrame>
 8001e3a:	4603      	mov	r3, r0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 ffc5 	bl	8005de0 <USB_GetHostSpeed>
 8001e56:	4603      	mov	r3, r0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	331a      	adds	r3, #26
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	331b      	adds	r3, #27
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	1a9b      	subs	r3, r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3325      	adds	r3, #37	@ 0x25
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3324      	adds	r3, #36	@ 0x24
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fdb4 	bl	8005a56 <USB_ReadChInterrupts>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d11a      	bne.n	8001f2e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f04:	461a      	mov	r2, r3
 8001f06:	2304      	movs	r3, #4
 8001f08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	334d      	adds	r3, #77	@ 0x4d
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	78fa      	ldrb	r2, [r7, #3]
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 fb39 	bl	800659e <USB_HC_Halt>
 8001f2c:	e09e      	b.n	800206c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fd8d 	bl	8005a56 <USB_ReadChInterrupts>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f46:	d11b      	bne.n	8001f80 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f54:	461a      	mov	r2, r3
 8001f56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	334d      	adds	r3, #77	@ 0x4d
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 fb10 	bl	800659e <USB_HC_Halt>
 8001f7e:	e075      	b.n	800206c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 fd64 	bl	8005a56 <USB_ReadChInterrupts>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d11a      	bne.n	8001fce <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	334d      	adds	r3, #77	@ 0x4d
 8001fba:	2206      	movs	r2, #6
 8001fbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f004 fae9 	bl	800659e <USB_HC_Halt>
 8001fcc:	e04e      	b.n	800206c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 fd3d 	bl	8005a56 <USB_ReadChInterrupts>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe6:	d11b      	bne.n	8002020 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ffa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	334d      	adds	r3, #77	@ 0x4d
 800200c:	2209      	movs	r2, #9
 800200e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f004 fac0 	bl	800659e <USB_HC_Halt>
 800201e:	e025      	b.n	800206c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f003 fd14 	bl	8005a56 <USB_ReadChInterrupts>
 800202e:	4603      	mov	r3, r0
 8002030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002034:	2b80      	cmp	r3, #128	@ 0x80
 8002036:	d119      	bne.n	800206c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002044:	461a      	mov	r2, r3
 8002046:	2380      	movs	r3, #128	@ 0x80
 8002048:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	334d      	adds	r3, #77	@ 0x4d
 800205a:	2207      	movs	r2, #7
 800205c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f004 fa99 	bl	800659e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f003 fcee 	bl	8005a56 <USB_ReadChInterrupts>
 800207a:	4603      	mov	r3, r0
 800207c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002084:	d112      	bne.n	80020ac <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f004 fa85 	bl	800659e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a0:	461a      	mov	r2, r3
 80020a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020a6:	6093      	str	r3, [r2, #8]
 80020a8:	f000 bd75 	b.w	8002b96 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 fcce 	bl	8005a56 <USB_ReadChInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	f040 8128 	bne.w	8002316 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d2:	461a      	mov	r2, r3
 80020d4:	2320      	movs	r3, #32
 80020d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	331b      	adds	r3, #27
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d119      	bne.n	8002122 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	331b      	adds	r3, #27
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	0151      	lsls	r1, r2, #5
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	440a      	add	r2, r1
 8002118:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800211c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002120:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	799b      	ldrb	r3, [r3, #6]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01b      	beq.n	8002162 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3330      	adds	r3, #48	@ 0x30
 800213a:	6819      	ldr	r1, [r3, #0]
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	1ac9      	subs	r1, r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4403      	add	r3, r0
 800215e:	3338      	adds	r3, #56	@ 0x38
 8002160:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	334d      	adds	r3, #77	@ 0x4d
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3344      	adds	r3, #68	@ 0x44
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002196:	461a      	mov	r2, r3
 8002198:	2301      	movs	r3, #1
 800219a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	3326      	adds	r3, #38	@ 0x26
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	3326      	adds	r3, #38	@ 0x26
 80021c2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d110      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f004 f9e4 	bl	800659e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	2310      	movs	r3, #16
 80021e6:	6093      	str	r3, [r2, #8]
 80021e8:	e03d      	b.n	8002266 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	3326      	adds	r3, #38	@ 0x26
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d00a      	beq.n	8002216 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	3326      	adds	r3, #38	@ 0x26
 8002210:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002212:	2b01      	cmp	r3, #1
 8002214:	d127      	bne.n	8002266 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	0151      	lsls	r1, r2, #5
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	440a      	add	r2, r1
 800222c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002230:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002234:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	334c      	adds	r3, #76	@ 0x4c
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	334c      	adds	r3, #76	@ 0x4c
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	4619      	mov	r1, r3
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f006 fcf5 	bl	8008c50 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	799b      	ldrb	r3, [r3, #6]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d13b      	bne.n	80022e6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	3338      	adds	r3, #56	@ 0x38
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4403      	add	r3, r0
 800228e:	3328      	adds	r3, #40	@ 0x28
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	440b      	add	r3, r1
 8002294:	1e59      	subs	r1, r3, #1
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4403      	add	r3, r0
 80022a4:	3328      	adds	r3, #40	@ 0x28
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8470 	beq.w	8002b96 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	333c      	adds	r3, #60	@ 0x3c
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2d8      	uxtb	r0, r3
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	333c      	adds	r3, #60	@ 0x3c
 80022de:	4602      	mov	r2, r0
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	f000 bc58 	b.w	8002b96 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	333c      	adds	r3, #60	@ 0x3c
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	f083 0301 	eor.w	r3, r3, #1
 80022fe:	b2d8      	uxtb	r0, r3
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	333c      	adds	r3, #60	@ 0x3c
 800230e:	4602      	mov	r2, r0
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	f000 bc40 	b.w	8002b96 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fb99 	bl	8005a56 <USB_ReadChInterrupts>
 8002324:	4603      	mov	r3, r0
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b20      	cmp	r3, #32
 800232c:	d131      	bne.n	8002392 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800233a:	461a      	mov	r2, r3
 800233c:	2320      	movs	r3, #32
 800233e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	331a      	adds	r3, #26
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	f040 841f 	bne.w	8002b96 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	331b      	adds	r3, #27
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	334d      	adds	r3, #77	@ 0x4d
 800237c:	2203      	movs	r2, #3
 800237e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f004 f908 	bl	800659e <USB_HC_Halt>
 800238e:	f000 bc02 	b.w	8002b96 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f003 fb5b 	bl	8005a56 <USB_ReadChInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	f040 8305 	bne.w	80029b6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023b8:	461a      	mov	r2, r3
 80023ba:	2302      	movs	r3, #2
 80023bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	334d      	adds	r3, #77	@ 0x4d
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d114      	bne.n	80023fe <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	334d      	adds	r3, #77	@ 0x4d
 80023e4:	2202      	movs	r2, #2
 80023e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	334c      	adds	r3, #76	@ 0x4c
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e2cc      	b.n	8002998 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	334d      	adds	r3, #77	@ 0x4d
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b06      	cmp	r3, #6
 8002412:	d114      	bne.n	800243e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	334d      	adds	r3, #77	@ 0x4d
 8002424:	2202      	movs	r2, #2
 8002426:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	334c      	adds	r3, #76	@ 0x4c
 8002438:	2205      	movs	r2, #5
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e2ac      	b.n	8002998 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	334d      	adds	r3, #77	@ 0x4d
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b07      	cmp	r3, #7
 8002452:	d00b      	beq.n	800246c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	334d      	adds	r3, #77	@ 0x4d
 8002464:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002466:	2b09      	cmp	r3, #9
 8002468:	f040 80a6 	bne.w	80025b8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	334d      	adds	r3, #77	@ 0x4d
 800247c:	2202      	movs	r2, #2
 800247e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	3344      	adds	r3, #68	@ 0x44
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	1c59      	adds	r1, r3, #1
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4403      	add	r3, r0
 80024a0:	3344      	adds	r3, #68	@ 0x44
 80024a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	3344      	adds	r3, #68	@ 0x44
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d943      	bls.n	8002542 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	3344      	adds	r3, #68	@ 0x44
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	331a      	adds	r3, #26
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d123      	bne.n	800252c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	331b      	adds	r3, #27
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	331c      	adds	r3, #28
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4413      	add	r3, r2
 8002514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	0151      	lsls	r1, r2, #5
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	440a      	add	r2, r1
 8002522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800252a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	334c      	adds	r3, #76	@ 0x4c
 800253c:	2204      	movs	r2, #4
 800253e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002540:	e229      	b.n	8002996 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	334c      	adds	r3, #76	@ 0x4c
 8002552:	2202      	movs	r2, #2
 8002554:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3326      	adds	r3, #38	@ 0x26
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00b      	beq.n	8002584 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3326      	adds	r3, #38	@ 0x26
 800257c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800257e:	2b02      	cmp	r3, #2
 8002580:	f040 8209 	bne.w	8002996 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800259a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025b0:	461a      	mov	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025b6:	e1ee      	b.n	8002996 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	334d      	adds	r3, #77	@ 0x4d
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	f040 80c8 	bne.w	8002760 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	334d      	adds	r3, #77	@ 0x4d
 80025e0:	2202      	movs	r2, #2
 80025e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	331b      	adds	r3, #27
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	f040 81ce 	bne.w	8002998 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	3326      	adds	r3, #38	@ 0x26
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d16b      	bne.n	80026ea <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	3348      	adds	r3, #72	@ 0x48
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	1c59      	adds	r1, r3, #1
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4403      	add	r3, r0
 8002632:	3348      	adds	r3, #72	@ 0x48
 8002634:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	3348      	adds	r3, #72	@ 0x48
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d943      	bls.n	80026d4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3348      	adds	r3, #72	@ 0x48
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	331b      	adds	r3, #27
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3344      	adds	r3, #68	@ 0x44
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d809      	bhi.n	800269e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	331c      	adds	r3, #28
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	0151      	lsls	r1, r2, #5
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	440a      	add	r2, r1
 80026b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026bc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	334c      	adds	r3, #76	@ 0x4c
 80026ce:	2204      	movs	r2, #4
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e014      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	334c      	adds	r3, #76	@ 0x4c
 80026e4:	2202      	movs	r2, #2
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e009      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	334c      	adds	r3, #76	@ 0x4c
 80026fa:	2202      	movs	r2, #2
 80026fc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	3326      	adds	r3, #38	@ 0x26
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3326      	adds	r3, #38	@ 0x26
 8002724:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002726:	2b02      	cmp	r3, #2
 8002728:	f040 8136 	bne.w	8002998 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002742:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800274a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002758:	461a      	mov	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e11b      	b.n	8002998 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	334d      	adds	r3, #77	@ 0x4d
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b03      	cmp	r3, #3
 8002774:	f040 8081 	bne.w	800287a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	334d      	adds	r3, #77	@ 0x4d
 8002788:	2202      	movs	r2, #2
 800278a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	331b      	adds	r3, #27
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	f040 80fa 	bne.w	8002998 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	334c      	adds	r3, #76	@ 0x4c
 80027b4:	2202      	movs	r2, #2
 80027b6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	0151      	lsls	r1, r2, #5
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	440a      	add	r2, r1
 80027ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	0151      	lsls	r1, r2, #5
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	440a      	add	r2, r1
 80027ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027f6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	0151      	lsls	r1, r2, #5
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	440a      	add	r2, r1
 800280e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002812:	f023 0320 	bic.w	r3, r3, #32
 8002816:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	3326      	adds	r3, #38	@ 0x26
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	3326      	adds	r3, #38	@ 0x26
 800283e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002840:	2b02      	cmp	r3, #2
 8002842:	f040 80a9 	bne.w	8002998 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800285c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002864:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	e08e      	b.n	8002998 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	334d      	adds	r3, #77	@ 0x4d
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d143      	bne.n	8002918 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	334d      	adds	r3, #77	@ 0x4d
 80028a0:	2202      	movs	r2, #2
 80028a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	334c      	adds	r3, #76	@ 0x4c
 80028b4:	2202      	movs	r2, #2
 80028b6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	3326      	adds	r3, #38	@ 0x26
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3326      	adds	r3, #38	@ 0x26
 80028de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d159      	bne.n	8002998 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002902:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e03f      	b.n	8002998 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	334d      	adds	r3, #77	@ 0x4d
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b08      	cmp	r3, #8
 800292c:	d126      	bne.n	800297c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	334d      	adds	r3, #77	@ 0x4d
 800293e:	2202      	movs	r2, #2
 8002940:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	3344      	adds	r3, #68	@ 0x44
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	1c59      	adds	r1, r3, #1
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4403      	add	r3, r0
 8002962:	3344      	adds	r3, #68	@ 0x44
 8002964:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	334c      	adds	r3, #76	@ 0x4c
 8002976:	2204      	movs	r2, #4
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e00d      	b.n	8002998 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	334d      	adds	r3, #77	@ 0x4d
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b02      	cmp	r3, #2
 8002990:	f000 8100 	beq.w	8002b94 <HCD_HC_IN_IRQHandler+0xcca>
 8002994:	e000      	b.n	8002998 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002996:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	334c      	adds	r3, #76	@ 0x4c
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f006 f94e 	bl	8008c50 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029b4:	e0ef      	b.n	8002b96 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 f849 	bl	8005a56 <USB_ReadChInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ca:	2b40      	cmp	r3, #64	@ 0x40
 80029cc:	d12f      	bne.n	8002a2e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029da:	461a      	mov	r2, r3
 80029dc:	2340      	movs	r3, #64	@ 0x40
 80029de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	334d      	adds	r3, #77	@ 0x4d
 80029f0:	2205      	movs	r2, #5
 80029f2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	331a      	adds	r3, #26
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	3344      	adds	r3, #68	@ 0x44
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 fdb9 	bl	800659e <USB_HC_Halt>
 8002a2c:	e0b3      	b.n	8002b96 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 f80d 	bl	8005a56 <USB_ReadChInterrupts>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	f040 80a7 	bne.w	8002b96 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	3326      	adds	r3, #38	@ 0x26
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d11b      	bne.n	8002a96 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3344      	adds	r3, #68	@ 0x44
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	334d      	adds	r3, #77	@ 0x4d
 8002a82:	2204      	movs	r2, #4
 8002a84:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 fd85 	bl	800659e <USB_HC_Halt>
 8002a94:	e03f      	b.n	8002b16 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3326      	adds	r3, #38	@ 0x26
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	3326      	adds	r3, #38	@ 0x26
 8002abc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d129      	bne.n	8002b16 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	3344      	adds	r3, #68	@ 0x44
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	799b      	ldrb	r3, [r3, #6]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HCD_HC_IN_IRQHandler+0xc2a>
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	331b      	adds	r3, #27
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d110      	bne.n	8002b16 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	334d      	adds	r3, #77	@ 0x4d
 8002b04:	2204      	movs	r2, #4
 8002b06:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f003 fd44 	bl	800659e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	331b      	adds	r3, #27
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d129      	bne.n	8002b80 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	331b      	adds	r3, #27
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	0151      	lsls	r1, r2, #5
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	440a      	add	r2, r1
 8002b56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b5e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	0151      	lsls	r1, r2, #5
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	440a      	add	r2, r1
 8002b76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b7a:	f043 0320 	orr.w	r3, r3, #32
 8002b7e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2310      	movs	r3, #16
 8002b90:	6093      	str	r3, [r2, #8]
 8002b92:	e000      	b.n	8002b96 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b94:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 ff4b 	bl	8005a56 <USB_ReadChInterrupts>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d11b      	bne.n	8002c02 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2304      	movs	r3, #4
 8002bda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	334d      	adds	r3, #77	@ 0x4d
 8002bec:	2207      	movs	r2, #7
 8002bee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fcd0 	bl	800659e <USB_HC_Halt>
 8002bfe:	f000 bc89 	b.w	8003514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f002 ff23 	bl	8005a56 <USB_ReadChInterrupts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	f040 8082 	bne.w	8002d20 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3319      	adds	r3, #25
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d124      	bne.n	8002c8e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	3319      	adds	r3, #25
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	334c      	adds	r3, #76	@ 0x4c
 8002c68:	2202      	movs	r2, #2
 8002c6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	334d      	adds	r3, #77	@ 0x4d
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 fc88 	bl	800659e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	331a      	adds	r3, #26
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	f040 8437 	bne.w	8003514 <HCD_HC_OUT_IRQHandler+0x978>
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	331b      	adds	r3, #27
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f040 842b 	bne.w	8003514 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3326      	adds	r3, #38	@ 0x26
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d009      	beq.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	331b      	adds	r3, #27
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334d      	adds	r3, #77	@ 0x4d
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 fc4a 	bl	800659e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3344      	adds	r3, #68	@ 0x44
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e3f9      	b.n	8003514 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f002 fe94 	bl	8005a56 <USB_ReadChInterrupts>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d38:	d111      	bne.n	8002d5e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d4c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 fc21 	bl	800659e <USB_HC_Halt>
 8002d5c:	e3da      	b.n	8003514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 fe75 	bl	8005a56 <USB_ReadChInterrupts>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d168      	bne.n	8002e48 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3344      	adds	r3, #68	@ 0x44
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f002 fe5f 	bl	8005a56 <USB_ReadChInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9e:	2b40      	cmp	r3, #64	@ 0x40
 8002da0:	d112      	bne.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	3319      	adds	r3, #25
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2340      	movs	r3, #64	@ 0x40
 8002dc6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	331b      	adds	r3, #27
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d019      	beq.n	8002e12 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	331b      	adds	r3, #27
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	0151      	lsls	r1, r2, #5
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	440a      	add	r2, r1
 8002e08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e10:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2301      	movs	r3, #1
 8002e22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	334d      	adds	r3, #77	@ 0x4d
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fbac 	bl	800659e <USB_HC_Halt>
 8002e46:	e365      	b.n	8003514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 fe00 	bl	8005a56 <USB_ReadChInterrupts>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5c:	2b40      	cmp	r3, #64	@ 0x40
 8002e5e:	d139      	bne.n	8002ed4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	334d      	adds	r3, #77	@ 0x4d
 8002e70:	2205      	movs	r2, #5
 8002e72:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	331a      	adds	r3, #26
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3319      	adds	r3, #25
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3344      	adds	r3, #68	@ 0x44
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 fb6f 	bl	800659e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2340      	movs	r3, #64	@ 0x40
 8002ed0:	6093      	str	r3, [r2, #8]
 8002ed2:	e31f      	b.n	8003514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 fdba 	bl	8005a56 <USB_ReadChInterrupts>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d11a      	bne.n	8002f22 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2308      	movs	r3, #8
 8002efc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	334d      	adds	r3, #77	@ 0x4d
 8002f0e:	2206      	movs	r2, #6
 8002f10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 fb3f 	bl	800659e <USB_HC_Halt>
 8002f20:	e2f8      	b.n	8003514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 fd93 	bl	8005a56 <USB_ReadChInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d144      	bne.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	3344      	adds	r3, #68	@ 0x44
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	334d      	adds	r3, #77	@ 0x4d
 8002f5e:	2204      	movs	r2, #4
 8002f60:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	3319      	adds	r3, #25
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d114      	bne.n	8002fa2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	3318      	adds	r3, #24
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	3319      	adds	r3, #25
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 faf7 	bl	800659e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	6093      	str	r3, [r2, #8]
 8002fc2:	e2a7      	b.n	8003514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f002 fd42 	bl	8005a56 <USB_ReadChInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd8:	2b80      	cmp	r3, #128	@ 0x80
 8002fda:	f040 8083 	bne.w	80030e4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	799b      	ldrb	r3, [r3, #6]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d111      	bne.n	800300a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	334d      	adds	r3, #77	@ 0x4d
 8002ff6:	2207      	movs	r2, #7
 8002ff8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f003 facb 	bl	800659e <USB_HC_Halt>
 8003008:	e062      	b.n	80030d0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	3344      	adds	r3, #68	@ 0x44
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	1c59      	adds	r1, r3, #1
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4403      	add	r3, r0
 800302a:	3344      	adds	r3, #68	@ 0x44
 800302c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	3344      	adds	r3, #68	@ 0x44
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d922      	bls.n	800308a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	3344      	adds	r3, #68	@ 0x44
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	334c      	adds	r3, #76	@ 0x4c
 8003068:	2204      	movs	r2, #4
 800306a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	334c      	adds	r3, #76	@ 0x4c
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	4619      	mov	r1, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f005 fde4 	bl	8008c50 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003088:	e022      	b.n	80030d0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	334c      	adds	r3, #76	@ 0x4c
 800309a:	2202      	movs	r2, #2
 800309c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030b4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030bc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030dc:	461a      	mov	r2, r3
 80030de:	2380      	movs	r3, #128	@ 0x80
 80030e0:	6093      	str	r3, [r2, #8]
 80030e2:	e217      	b.n	8003514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f002 fcb2 	bl	8005a56 <USB_ReadChInterrupts>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fc:	d11b      	bne.n	8003136 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	334d      	adds	r3, #77	@ 0x4d
 800310e:	2209      	movs	r2, #9
 8003110:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f003 fa3f 	bl	800659e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312c:	461a      	mov	r2, r3
 800312e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003132:	6093      	str	r3, [r2, #8]
 8003134:	e1ee      	b.n	8003514 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f002 fc89 	bl	8005a56 <USB_ReadChInterrupts>
 8003144:	4603      	mov	r3, r0
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b02      	cmp	r3, #2
 800314c:	f040 81df 	bne.w	800350e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800315c:	461a      	mov	r2, r3
 800315e:	2302      	movs	r3, #2
 8003160:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334d      	adds	r3, #77	@ 0x4d
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	f040 8093 	bne.w	80032a0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	334d      	adds	r3, #77	@ 0x4d
 800318a:	2202      	movs	r2, #2
 800318c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	334c      	adds	r3, #76	@ 0x4c
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	3326      	adds	r3, #38	@ 0x26
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d00b      	beq.n	80031d0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3326      	adds	r3, #38	@ 0x26
 80031c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	f040 8190 	bne.w	80034f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	799b      	ldrb	r3, [r3, #6]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d115      	bne.n	8003204 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	333d      	adds	r3, #61	@ 0x3d
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	f083 0301 	eor.w	r3, r3, #1
 80031f0:	b2d8      	uxtb	r0, r3
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	333d      	adds	r3, #61	@ 0x3d
 8003200:	4602      	mov	r2, r0
 8003202:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	799b      	ldrb	r3, [r3, #6]
 8003208:	2b01      	cmp	r3, #1
 800320a:	f040 8171 	bne.w	80034f0 <HCD_HC_OUT_IRQHandler+0x954>
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3334      	adds	r3, #52	@ 0x34
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8165 	beq.w	80034f0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	3334      	adds	r3, #52	@ 0x34
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4403      	add	r3, r0
 8003246:	3328      	adds	r3, #40	@ 0x28
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	440b      	add	r3, r1
 800324c:	1e59      	subs	r1, r3, #1
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4403      	add	r3, r0
 800325c:	3328      	adds	r3, #40	@ 0x28
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	fbb1 f3f3 	udiv	r3, r1, r3
 8003264:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 813f 	beq.w	80034f0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	333d      	adds	r3, #61	@ 0x3d
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	f083 0301 	eor.w	r3, r3, #1
 800328a:	b2d8      	uxtb	r0, r3
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	333d      	adds	r3, #61	@ 0x3d
 800329a:	4602      	mov	r2, r0
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e127      	b.n	80034f0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	334d      	adds	r3, #77	@ 0x4d
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d120      	bne.n	80032f8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	334d      	adds	r3, #77	@ 0x4d
 80032c6:	2202      	movs	r2, #2
 80032c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	331b      	adds	r3, #27
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	f040 8107 	bne.w	80034f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	334c      	adds	r3, #76	@ 0x4c
 80032f2:	2202      	movs	r2, #2
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e0fb      	b.n	80034f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	334d      	adds	r3, #77	@ 0x4d
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b04      	cmp	r3, #4
 800330c:	d13a      	bne.n	8003384 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334d      	adds	r3, #77	@ 0x4d
 800331e:	2202      	movs	r2, #2
 8003320:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	334c      	adds	r3, #76	@ 0x4c
 8003332:	2202      	movs	r2, #2
 8003334:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	331b      	adds	r3, #27
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	f040 80d1 	bne.w	80034f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	331b      	adds	r3, #27
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	0151      	lsls	r1, r2, #5
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	440a      	add	r2, r1
 8003378:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800337c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003380:	6053      	str	r3, [r2, #4]
 8003382:	e0b5      	b.n	80034f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	334d      	adds	r3, #77	@ 0x4d
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b05      	cmp	r3, #5
 8003398:	d114      	bne.n	80033c4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	334d      	adds	r3, #77	@ 0x4d
 80033aa:	2202      	movs	r2, #2
 80033ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	334c      	adds	r3, #76	@ 0x4c
 80033be:	2202      	movs	r2, #2
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e095      	b.n	80034f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	334d      	adds	r3, #77	@ 0x4d
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d114      	bne.n	8003404 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	334d      	adds	r3, #77	@ 0x4d
 80033ea:	2202      	movs	r2, #2
 80033ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	334c      	adds	r3, #76	@ 0x4c
 80033fe:	2205      	movs	r2, #5
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e075      	b.n	80034f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334d      	adds	r3, #77	@ 0x4d
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b07      	cmp	r3, #7
 8003418:	d00a      	beq.n	8003430 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	334d      	adds	r3, #77	@ 0x4d
 800342a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800342c:	2b09      	cmp	r3, #9
 800342e:	d170      	bne.n	8003512 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334d      	adds	r3, #77	@ 0x4d
 8003440:	2202      	movs	r2, #2
 8003442:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	3344      	adds	r3, #68	@ 0x44
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	1c59      	adds	r1, r3, #1
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4403      	add	r3, r0
 8003464:	3344      	adds	r3, #68	@ 0x44
 8003466:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	3344      	adds	r3, #68	@ 0x44
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d914      	bls.n	80034a8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3344      	adds	r3, #68	@ 0x44
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	334c      	adds	r3, #76	@ 0x4c
 80034a2:	2204      	movs	r2, #4
 80034a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034a6:	e022      	b.n	80034ee <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	334c      	adds	r3, #76	@ 0x4c
 80034b8:	2202      	movs	r2, #2
 80034ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e8:	461a      	mov	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	334c      	adds	r3, #76	@ 0x4c
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f005 fba2 	bl	8008c50 <HAL_HCD_HC_NotifyURBChange_Callback>
 800350c:	e002      	b.n	8003514 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003512:	bf00      	nop
  }
}
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b08a      	sub	sp, #40	@ 0x28
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	0c5b      	lsrs	r3, r3, #17
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800354e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d004      	beq.n	8003560 <HCD_RXQLVL_IRQHandler+0x46>
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b05      	cmp	r3, #5
 800355a:	f000 80b6 	beq.w	80036ca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800355e:	e0b7      	b.n	80036d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80b3 	beq.w	80036ce <HCD_RXQLVL_IRQHandler+0x1b4>
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	332c      	adds	r3, #44	@ 0x2c
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80a7 	beq.w	80036ce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3338      	adds	r3, #56	@ 0x38
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	18d1      	adds	r1, r2, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4403      	add	r3, r0
 80035a4:	3334      	adds	r3, #52	@ 0x34
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4299      	cmp	r1, r3
 80035aa:	f200 8083 	bhi.w	80036b4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	332c      	adds	r3, #44	@ 0x2c
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	b292      	uxth	r2, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	f002 f9d9 	bl	8005980 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	332c      	adds	r3, #44	@ 0x2c
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	18d1      	adds	r1, r2, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4403      	add	r3, r0
 80035f2:	332c      	adds	r3, #44	@ 0x2c
 80035f4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3338      	adds	r3, #56	@ 0x38
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	18d1      	adds	r1, r2, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4613      	mov	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4403      	add	r3, r0
 800361a:	3338      	adds	r3, #56	@ 0x38
 800361c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	4413      	add	r3, r2
 8003626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	0cdb      	lsrs	r3, r3, #19
 800362e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003632:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	3328      	adds	r3, #40	@ 0x28
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4293      	cmp	r3, r2
 800364c:	d13f      	bne.n	80036ce <HCD_RXQLVL_IRQHandler+0x1b4>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d03c      	beq.n	80036ce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	4413      	add	r3, r2
 800365c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800366a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003672:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003680:	461a      	mov	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	333c      	adds	r3, #60	@ 0x3c
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	f083 0301 	eor.w	r3, r3, #1
 800369c:	b2d8      	uxtb	r0, r3
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	333c      	adds	r3, #60	@ 0x3c
 80036ae:	4602      	mov	r2, r0
 80036b0:	701a      	strb	r2, [r3, #0]
      break;
 80036b2:	e00c      	b.n	80036ce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4613      	mov	r3, r2
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	334c      	adds	r3, #76	@ 0x4c
 80036c4:	2204      	movs	r2, #4
 80036c6:	701a      	strb	r2, [r3, #0]
      break;
 80036c8:	e001      	b.n	80036ce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80036ce:	bf00      	nop
  }
}
 80036d0:	bf00      	nop
 80036d2:	3728      	adds	r7, #40	@ 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003704:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d10b      	bne.n	8003728 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d102      	bne.n	8003720 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f005 fa7c 	bl	8008c18 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f043 0302 	orr.w	r3, r3, #2
 8003726:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b08      	cmp	r3, #8
 8003730:	d132      	bne.n	8003798 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f043 0308 	orr.w	r3, r3, #8
 8003738:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b04      	cmp	r3, #4
 8003742:	d126      	bne.n	8003792 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	7a5b      	ldrb	r3, [r3, #9]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d113      	bne.n	8003774 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003752:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003756:	d106      	bne.n	8003766 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2102      	movs	r1, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f002 fa9e 	bl	8005ca0 <USB_InitFSLSPClkSel>
 8003764:	e011      	b.n	800378a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f002 fa97 	bl	8005ca0 <USB_InitFSLSPClkSel>
 8003772:	e00a      	b.n	800378a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	79db      	ldrb	r3, [r3, #7]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d106      	bne.n	800378a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003782:	461a      	mov	r2, r3
 8003784:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003788:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f005 fa6e 	bl	8008c6c <HAL_HCD_PortEnabled_Callback>
 8003790:	e002      	b.n	8003798 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f005 fa78 	bl	8008c88 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d103      	bne.n	80037aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f043 0320 	orr.w	r3, r3, #32
 80037a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037b0:	461a      	mov	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	6013      	str	r3, [r2, #0]
}
 80037b6:	bf00      	nop
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e12b      	b.n	8003a2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd f93c 	bl	8000a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	@ 0x24
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003812:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003824:	f001 fa20 	bl	8004c68 <HAL_RCC_GetPCLK1Freq>
 8003828:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4a81      	ldr	r2, [pc, #516]	@ (8003a34 <HAL_I2C_Init+0x274>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d807      	bhi.n	8003844 <HAL_I2C_Init+0x84>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a80      	ldr	r2, [pc, #512]	@ (8003a38 <HAL_I2C_Init+0x278>)
 8003838:	4293      	cmp	r3, r2
 800383a:	bf94      	ite	ls
 800383c:	2301      	movls	r3, #1
 800383e:	2300      	movhi	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	e006      	b.n	8003852 <HAL_I2C_Init+0x92>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a7d      	ldr	r2, [pc, #500]	@ (8003a3c <HAL_I2C_Init+0x27c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	bf94      	ite	ls
 800384c:	2301      	movls	r3, #1
 800384e:	2300      	movhi	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e0e7      	b.n	8003a2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a78      	ldr	r2, [pc, #480]	@ (8003a40 <HAL_I2C_Init+0x280>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	0c9b      	lsrs	r3, r3, #18
 8003864:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a6a      	ldr	r2, [pc, #424]	@ (8003a34 <HAL_I2C_Init+0x274>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d802      	bhi.n	8003894 <HAL_I2C_Init+0xd4>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3301      	adds	r3, #1
 8003892:	e009      	b.n	80038a8 <HAL_I2C_Init+0xe8>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	4a69      	ldr	r2, [pc, #420]	@ (8003a44 <HAL_I2C_Init+0x284>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	099b      	lsrs	r3, r3, #6
 80038a6:	3301      	adds	r3, #1
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	495c      	ldr	r1, [pc, #368]	@ (8003a34 <HAL_I2C_Init+0x274>)
 80038c4:	428b      	cmp	r3, r1
 80038c6:	d819      	bhi.n	80038fc <HAL_I2C_Init+0x13c>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1e59      	subs	r1, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d6:	1c59      	adds	r1, r3, #1
 80038d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038dc:	400b      	ands	r3, r1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_I2C_Init+0x138>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1e59      	subs	r1, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f6:	e051      	b.n	800399c <HAL_I2C_Init+0x1dc>
 80038f8:	2304      	movs	r3, #4
 80038fa:	e04f      	b.n	800399c <HAL_I2C_Init+0x1dc>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d111      	bne.n	8003928 <HAL_I2C_Init+0x168>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1e58      	subs	r0, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e012      	b.n	800394e <HAL_I2C_Init+0x18e>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1e58      	subs	r0, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	0099      	lsls	r1, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	fbb0 f3f3 	udiv	r3, r0, r3
 800393e:	3301      	adds	r3, #1
 8003940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Init+0x196>
 8003952:	2301      	movs	r3, #1
 8003954:	e022      	b.n	800399c <HAL_I2C_Init+0x1dc>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10e      	bne.n	800397c <HAL_I2C_Init+0x1bc>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1e58      	subs	r0, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	460b      	mov	r3, r1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	440b      	add	r3, r1
 800396c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003970:	3301      	adds	r3, #1
 8003972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800397a:	e00f      	b.n	800399c <HAL_I2C_Init+0x1dc>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	0099      	lsls	r1, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003992:	3301      	adds	r3, #1
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	6809      	ldr	r1, [r1, #0]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6911      	ldr	r1, [r2, #16]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68d2      	ldr	r2, [r2, #12]
 80039d6:	4311      	orrs	r1, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	430b      	orrs	r3, r1
 80039de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	000186a0 	.word	0x000186a0
 8003a38:	001e847f 	.word	0x001e847f
 8003a3c:	003d08ff 	.word	0x003d08ff
 8003a40:	431bde83 	.word	0x431bde83
 8003a44:	10624dd3 	.word	0x10624dd3

08003a48 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e128      	b.n	8003cac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a90      	ldr	r2, [pc, #576]	@ (8003cb4 <HAL_I2S_Init+0x26c>)
 8003a72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7fd f83d 	bl	8000af4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a90:	f023 030f 	bic.w	r3, r3, #15
 8003a94:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d060      	beq.n	8003b68 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003aae:	2310      	movs	r3, #16
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e001      	b.n	8003ab8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ab4:	2320      	movs	r3, #32
 8003ab6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d802      	bhi.n	8003ac6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f001 f9c4 	bl	8004e54 <HAL_RCCEx_GetPeriphCLKFreq>
 8003acc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ad6:	d125      	bne.n	8003b24 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	461a      	mov	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	3305      	adds	r3, #5
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	e01f      	b.n	8003b42 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	461a      	mov	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	3305      	adds	r3, #5
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	e00e      	b.n	8003b42 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	461a      	mov	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	3305      	adds	r3, #5
 8003b40:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4a5c      	ldr	r2, [pc, #368]	@ (8003cb8 <HAL_I2S_Init+0x270>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	08db      	lsrs	r3, r3, #3
 8003b4c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	021b      	lsls	r3, r3, #8
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	e003      	b.n	8003b70 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d902      	bls.n	8003b7c <HAL_I2S_Init+0x134>
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	2bff      	cmp	r3, #255	@ 0xff
 8003b7a:	d907      	bls.n	8003b8c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b80:	f043 0210 	orr.w	r2, r3, #16
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e08f      	b.n	8003cac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	ea42 0103 	orr.w	r1, r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003baa:	f023 030f 	bic.w	r3, r3, #15
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6851      	ldr	r1, [r2, #4]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6892      	ldr	r2, [r2, #8]
 8003bb6:	4311      	orrs	r1, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68d2      	ldr	r2, [r2, #12]
 8003bbc:	4311      	orrs	r1, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6992      	ldr	r2, [r2, #24]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d161      	bne.n	8003c9c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a38      	ldr	r2, [pc, #224]	@ (8003cbc <HAL_I2S_Init+0x274>)
 8003bdc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a37      	ldr	r2, [pc, #220]	@ (8003cc0 <HAL_I2S_Init+0x278>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_I2S_Init+0x1a4>
 8003be8:	4b36      	ldr	r3, [pc, #216]	@ (8003cc4 <HAL_I2S_Init+0x27c>)
 8003bea:	e001      	b.n	8003bf0 <HAL_I2S_Init+0x1a8>
 8003bec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	4932      	ldr	r1, [pc, #200]	@ (8003cc0 <HAL_I2S_Init+0x278>)
 8003bf8:	428a      	cmp	r2, r1
 8003bfa:	d101      	bne.n	8003c00 <HAL_I2S_Init+0x1b8>
 8003bfc:	4a31      	ldr	r2, [pc, #196]	@ (8003cc4 <HAL_I2S_Init+0x27c>)
 8003bfe:	e001      	b.n	8003c04 <HAL_I2S_Init+0x1bc>
 8003c00:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003c04:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c08:	f023 030f 	bic.w	r3, r3, #15
 8003c0c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc0 <HAL_I2S_Init+0x278>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d101      	bne.n	8003c1c <HAL_I2S_Init+0x1d4>
 8003c18:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc4 <HAL_I2S_Init+0x27c>)
 8003c1a:	e001      	b.n	8003c20 <HAL_I2S_Init+0x1d8>
 8003c1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c20:	2202      	movs	r2, #2
 8003c22:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a25      	ldr	r2, [pc, #148]	@ (8003cc0 <HAL_I2S_Init+0x278>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2S_Init+0x1ea>
 8003c2e:	4b25      	ldr	r3, [pc, #148]	@ (8003cc4 <HAL_I2S_Init+0x27c>)
 8003c30:	e001      	b.n	8003c36 <HAL_I2S_Init+0x1ee>
 8003c32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c42:	d003      	beq.n	8003c4c <HAL_I2S_Init+0x204>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	e001      	b.n	8003c58 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c62:	4313      	orrs	r3, r2
 8003c64:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c76:	4313      	orrs	r3, r2
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	897b      	ldrh	r3, [r7, #10]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c84:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc0 <HAL_I2S_Init+0x278>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <HAL_I2S_Init+0x24c>
 8003c90:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <HAL_I2S_Init+0x27c>)
 8003c92:	e001      	b.n	8003c98 <HAL_I2S_Init+0x250>
 8003c94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c98:	897a      	ldrh	r2, [r7, #10]
 8003c9a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	08003dbf 	.word	0x08003dbf
 8003cb8:	cccccccd 	.word	0xcccccccd
 8003cbc:	08003ed5 	.word	0x08003ed5
 8003cc0:	40003800 	.word	0x40003800
 8003cc4:	40003400 	.word	0x40003400

08003cc8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	881a      	ldrh	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	1c9a      	adds	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10e      	bne.n	8003d58 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d48:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ffb8 	bl	8003cc8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d72:	b292      	uxth	r2, r2
 8003d74:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	1c9a      	adds	r2, r3, #2
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10e      	bne.n	8003db6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003da6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ff93 	bl	8003cdc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b086      	sub	sp, #24
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d13a      	bne.n	8003e50 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d109      	bne.n	8003df8 <I2S_IRQHandler+0x3a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dee:	2b40      	cmp	r3, #64	@ 0x40
 8003df0:	d102      	bne.n	8003df8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ffb4 	bl	8003d60 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfe:	2b40      	cmp	r3, #64	@ 0x40
 8003e00:	d126      	bne.n	8003e50 <I2S_IRQHandler+0x92>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d11f      	bne.n	8003e50 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e42:	f043 0202 	orr.w	r2, r3, #2
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff ff50 	bl	8003cf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d136      	bne.n	8003eca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d109      	bne.n	8003e7a <I2S_IRQHandler+0xbc>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e70:	2b80      	cmp	r3, #128	@ 0x80
 8003e72:	d102      	bne.n	8003e7a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ff45 	bl	8003d04 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d122      	bne.n	8003eca <I2S_IRQHandler+0x10c>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d11b      	bne.n	8003eca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ea0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebc:	f043 0204 	orr.w	r2, r3, #4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff ff13 	bl	8003cf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eca:	bf00      	nop
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a92      	ldr	r2, [pc, #584]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d101      	bne.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003eee:	4b92      	ldr	r3, [pc, #584]	@ (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef0:	e001      	b.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ef2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a8b      	ldr	r2, [pc, #556]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d101      	bne.n	8003f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f0c:	4b8a      	ldr	r3, [pc, #552]	@ (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f0e:	e001      	b.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f20:	d004      	beq.n	8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 8099 	bne.w	800405e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d107      	bne.n	8003f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f925 	bl	8004190 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d107      	bne.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9c8 	bl	80042f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f66:	2b40      	cmp	r3, #64	@ 0x40
 8003f68:	d13a      	bne.n	8003fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d035      	beq.n	8003fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a6e      	ldr	r2, [pc, #440]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f7e:	4b6e      	ldr	r3, [pc, #440]	@ (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f80:	e001      	b.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4969      	ldr	r1, [pc, #420]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8e:	428b      	cmp	r3, r1
 8003f90:	d101      	bne.n	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f92:	4b69      	ldr	r3, [pc, #420]	@ (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f94:	e001      	b.n	8003f9a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f9e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	f043 0202 	orr.w	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff fe88 	bl	8003cf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	f040 80c3 	bne.w	8004172 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80bd 	beq.w	8004172 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004006:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a49      	ldr	r2, [pc, #292]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d101      	bne.n	8004016 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004012:	4b49      	ldr	r3, [pc, #292]	@ (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004014:	e001      	b.n	800401a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004016:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4944      	ldr	r1, [pc, #272]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004022:	428b      	cmp	r3, r1
 8004024:	d101      	bne.n	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004026:	4b44      	ldr	r3, [pc, #272]	@ (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004028:	e001      	b.n	800402e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800402a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800402e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004032:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004034:	2300      	movs	r3, #0
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f043 0204 	orr.w	r2, r3, #4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fe4a 	bl	8003cf0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800405c:	e089      	b.n	8004172 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d107      	bne.n	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8be 	bl	80041f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b01      	cmp	r3, #1
 8004080:	d107      	bne.n	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f8fd 	bl	800428c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004098:	2b40      	cmp	r3, #64	@ 0x40
 800409a:	d12f      	bne.n	80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d02a      	beq.n	80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040b4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d101      	bne.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80040c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040c2:	e001      	b.n	80040c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80040c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4919      	ldr	r1, [pc, #100]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040d0:	428b      	cmp	r3, r1
 80040d2:	d101      	bne.n	80040d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040d4:	4b18      	ldr	r3, [pc, #96]	@ (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040d6:	e001      	b.n	80040dc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	f043 0202 	orr.w	r2, r3, #2
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff fdfa 	bl	8003cf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b08      	cmp	r3, #8
 8004104:	d136      	bne.n	8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d031      	beq.n	8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a07      	ldr	r2, [pc, #28]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d101      	bne.n	800411e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800411a:	4b07      	ldr	r3, [pc, #28]	@ (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800411c:	e001      	b.n	8004122 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800411e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4902      	ldr	r1, [pc, #8]	@ (8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800412a:	428b      	cmp	r3, r1
 800412c:	d106      	bne.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800412e:	4b02      	ldr	r3, [pc, #8]	@ (8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004130:	e006      	b.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004132:	bf00      	nop
 8004134:	40003800 	.word	0x40003800
 8004138:	40003400 	.word	0x40003400
 800413c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004140:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004144:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004154:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	f043 0204 	orr.w	r2, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fdc0 	bl	8003cf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004170:	e000      	b.n	8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004172:	bf00      	nop
}
 8004174:	bf00      	nop
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	1c99      	adds	r1, r3, #2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6251      	str	r1, [r2, #36]	@ 0x24
 80041a2:	881a      	ldrh	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d113      	bne.n	80041ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ffc9 	bl	800417c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	1c99      	adds	r1, r3, #2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6251      	str	r1, [r2, #36]	@ 0x24
 8004206:	8819      	ldrh	r1, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1d      	ldr	r2, [pc, #116]	@ (8004284 <I2SEx_TxISR_I2SExt+0x90>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <I2SEx_TxISR_I2SExt+0x22>
 8004212:	4b1d      	ldr	r3, [pc, #116]	@ (8004288 <I2SEx_TxISR_I2SExt+0x94>)
 8004214:	e001      	b.n	800421a <I2SEx_TxISR_I2SExt+0x26>
 8004216:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800421a:	460a      	mov	r2, r1
 800421c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d121      	bne.n	800427a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a12      	ldr	r2, [pc, #72]	@ (8004284 <I2SEx_TxISR_I2SExt+0x90>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d101      	bne.n	8004244 <I2SEx_TxISR_I2SExt+0x50>
 8004240:	4b11      	ldr	r3, [pc, #68]	@ (8004288 <I2SEx_TxISR_I2SExt+0x94>)
 8004242:	e001      	b.n	8004248 <I2SEx_TxISR_I2SExt+0x54>
 8004244:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	490d      	ldr	r1, [pc, #52]	@ (8004284 <I2SEx_TxISR_I2SExt+0x90>)
 8004250:	428b      	cmp	r3, r1
 8004252:	d101      	bne.n	8004258 <I2SEx_TxISR_I2SExt+0x64>
 8004254:	4b0c      	ldr	r3, [pc, #48]	@ (8004288 <I2SEx_TxISR_I2SExt+0x94>)
 8004256:	e001      	b.n	800425c <I2SEx_TxISR_I2SExt+0x68>
 8004258:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800425c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004260:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff ff81 	bl	800417c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40003800 	.word	0x40003800
 8004288:	40003400 	.word	0x40003400

0800428c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68d8      	ldr	r0, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429e:	1c99      	adds	r1, r3, #2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042a4:	b282      	uxth	r2, r0
 80042a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d113      	bne.n	80042e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff ff4a 	bl	800417c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042e8:	bf00      	nop
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a20      	ldr	r2, [pc, #128]	@ (8004380 <I2SEx_RxISR_I2SExt+0x90>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d101      	bne.n	8004306 <I2SEx_RxISR_I2SExt+0x16>
 8004302:	4b20      	ldr	r3, [pc, #128]	@ (8004384 <I2SEx_RxISR_I2SExt+0x94>)
 8004304:	e001      	b.n	800430a <I2SEx_RxISR_I2SExt+0x1a>
 8004306:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800430a:	68d8      	ldr	r0, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004310:	1c99      	adds	r1, r3, #2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004316:	b282      	uxth	r2, r0
 8004318:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d121      	bne.n	8004376 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a12      	ldr	r2, [pc, #72]	@ (8004380 <I2SEx_RxISR_I2SExt+0x90>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d101      	bne.n	8004340 <I2SEx_RxISR_I2SExt+0x50>
 800433c:	4b11      	ldr	r3, [pc, #68]	@ (8004384 <I2SEx_RxISR_I2SExt+0x94>)
 800433e:	e001      	b.n	8004344 <I2SEx_RxISR_I2SExt+0x54>
 8004340:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	490d      	ldr	r1, [pc, #52]	@ (8004380 <I2SEx_RxISR_I2SExt+0x90>)
 800434c:	428b      	cmp	r3, r1
 800434e:	d101      	bne.n	8004354 <I2SEx_RxISR_I2SExt+0x64>
 8004350:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <I2SEx_RxISR_I2SExt+0x94>)
 8004352:	e001      	b.n	8004358 <I2SEx_RxISR_I2SExt+0x68>
 8004354:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004358:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800435c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff03 	bl	800417c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40003800 	.word	0x40003800
 8004384:	40003400 	.word	0x40003400

08004388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e267      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d075      	beq.n	8004492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043a6:	4b88      	ldr	r3, [pc, #544]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d00c      	beq.n	80043cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b2:	4b85      	ldr	r3, [pc, #532]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d112      	bne.n	80043e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043be:	4b82      	ldr	r3, [pc, #520]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ca:	d10b      	bne.n	80043e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	4b7e      	ldr	r3, [pc, #504]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d05b      	beq.n	8004490 <HAL_RCC_OscConfig+0x108>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d157      	bne.n	8004490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e242      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ec:	d106      	bne.n	80043fc <HAL_RCC_OscConfig+0x74>
 80043ee:	4b76      	ldr	r3, [pc, #472]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a75      	ldr	r2, [pc, #468]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e01d      	b.n	8004438 <HAL_RCC_OscConfig+0xb0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004404:	d10c      	bne.n	8004420 <HAL_RCC_OscConfig+0x98>
 8004406:	4b70      	ldr	r3, [pc, #448]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a6f      	ldr	r2, [pc, #444]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 800440c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	4b6d      	ldr	r3, [pc, #436]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a6c      	ldr	r2, [pc, #432]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e00b      	b.n	8004438 <HAL_RCC_OscConfig+0xb0>
 8004420:	4b69      	ldr	r3, [pc, #420]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a68      	ldr	r2, [pc, #416]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 8004426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b66      	ldr	r3, [pc, #408]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a65      	ldr	r2, [pc, #404]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 8004432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d013      	beq.n	8004468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fc fd7a 	bl	8000f38 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004448:	f7fc fd76 	bl	8000f38 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	@ 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e207      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445a:	4b5b      	ldr	r3, [pc, #364]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0xc0>
 8004466:	e014      	b.n	8004492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fc fd66 	bl	8000f38 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004470:	f7fc fd62 	bl	8000f38 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	@ 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e1f3      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004482:	4b51      	ldr	r3, [pc, #324]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0xe8>
 800448e:	e000      	b.n	8004492 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d063      	beq.n	8004566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800449e:	4b4a      	ldr	r3, [pc, #296]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044aa:	4b47      	ldr	r3, [pc, #284]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d11c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b6:	4b44      	ldr	r3, [pc, #272]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d116      	bne.n	80044f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c2:	4b41      	ldr	r3, [pc, #260]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_RCC_OscConfig+0x152>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d001      	beq.n	80044da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e1c7      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044da:	4b3b      	ldr	r3, [pc, #236]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4937      	ldr	r1, [pc, #220]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ee:	e03a      	b.n	8004566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f8:	4b34      	ldr	r3, [pc, #208]	@ (80045cc <HAL_RCC_OscConfig+0x244>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fc fd1b 	bl	8000f38 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004506:	f7fc fd17 	bl	8000f38 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e1a8      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004518:	4b2b      	ldr	r3, [pc, #172]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004524:	4b28      	ldr	r3, [pc, #160]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4925      	ldr	r1, [pc, #148]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 8004534:	4313      	orrs	r3, r2
 8004536:	600b      	str	r3, [r1, #0]
 8004538:	e015      	b.n	8004566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453a:	4b24      	ldr	r3, [pc, #144]	@ (80045cc <HAL_RCC_OscConfig+0x244>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fc fcfa 	bl	8000f38 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004548:	f7fc fcf6 	bl	8000f38 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e187      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455a:	4b1b      	ldr	r3, [pc, #108]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d036      	beq.n	80045e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800457a:	4b15      	ldr	r3, [pc, #84]	@ (80045d0 <HAL_RCC_OscConfig+0x248>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fc fcda 	bl	8000f38 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004588:	f7fc fcd6 	bl	8000f38 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e167      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459a:	4b0b      	ldr	r3, [pc, #44]	@ (80045c8 <HAL_RCC_OscConfig+0x240>)
 800459c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x200>
 80045a6:	e01b      	b.n	80045e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a8:	4b09      	ldr	r3, [pc, #36]	@ (80045d0 <HAL_RCC_OscConfig+0x248>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ae:	f7fc fcc3 	bl	8000f38 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b4:	e00e      	b.n	80045d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b6:	f7fc fcbf 	bl	8000f38 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d907      	bls.n	80045d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e150      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
 80045c8:	40023800 	.word	0x40023800
 80045cc:	42470000 	.word	0x42470000
 80045d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d4:	4b88      	ldr	r3, [pc, #544]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 80045d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ea      	bne.n	80045b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8097 	beq.w	800471c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ee:	2300      	movs	r3, #0
 80045f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f2:	4b81      	ldr	r3, [pc, #516]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10f      	bne.n	800461e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	4b7d      	ldr	r3, [pc, #500]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004606:	4a7c      	ldr	r2, [pc, #496]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800460c:	6413      	str	r3, [r2, #64]	@ 0x40
 800460e:	4b7a      	ldr	r3, [pc, #488]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461e:	4b77      	ldr	r3, [pc, #476]	@ (80047fc <HAL_RCC_OscConfig+0x474>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d118      	bne.n	800465c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462a:	4b74      	ldr	r3, [pc, #464]	@ (80047fc <HAL_RCC_OscConfig+0x474>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a73      	ldr	r2, [pc, #460]	@ (80047fc <HAL_RCC_OscConfig+0x474>)
 8004630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004636:	f7fc fc7f 	bl	8000f38 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463e:	f7fc fc7b 	bl	8000f38 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e10c      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	4b6a      	ldr	r3, [pc, #424]	@ (80047fc <HAL_RCC_OscConfig+0x474>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d106      	bne.n	8004672 <HAL_RCC_OscConfig+0x2ea>
 8004664:	4b64      	ldr	r3, [pc, #400]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004668:	4a63      	ldr	r2, [pc, #396]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004670:	e01c      	b.n	80046ac <HAL_RCC_OscConfig+0x324>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b05      	cmp	r3, #5
 8004678:	d10c      	bne.n	8004694 <HAL_RCC_OscConfig+0x30c>
 800467a:	4b5f      	ldr	r3, [pc, #380]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467e:	4a5e      	ldr	r2, [pc, #376]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 8004680:	f043 0304 	orr.w	r3, r3, #4
 8004684:	6713      	str	r3, [r2, #112]	@ 0x70
 8004686:	4b5c      	ldr	r3, [pc, #368]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468a:	4a5b      	ldr	r2, [pc, #364]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6713      	str	r3, [r2, #112]	@ 0x70
 8004692:	e00b      	b.n	80046ac <HAL_RCC_OscConfig+0x324>
 8004694:	4b58      	ldr	r3, [pc, #352]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004698:	4a57      	ldr	r2, [pc, #348]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a0:	4b55      	ldr	r3, [pc, #340]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a4:	4a54      	ldr	r2, [pc, #336]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 80046a6:	f023 0304 	bic.w	r3, r3, #4
 80046aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d015      	beq.n	80046e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b4:	f7fc fc40 	bl	8000f38 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ba:	e00a      	b.n	80046d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046bc:	f7fc fc3c 	bl	8000f38 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e0cb      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d2:	4b49      	ldr	r3, [pc, #292]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0ee      	beq.n	80046bc <HAL_RCC_OscConfig+0x334>
 80046de:	e014      	b.n	800470a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e0:	f7fc fc2a 	bl	8000f38 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e6:	e00a      	b.n	80046fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e8:	f7fc fc26 	bl	8000f38 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e0b5      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fe:	4b3e      	ldr	r3, [pc, #248]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1ee      	bne.n	80046e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800470a:	7dfb      	ldrb	r3, [r7, #23]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d105      	bne.n	800471c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004710:	4b39      	ldr	r3, [pc, #228]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 8004712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004714:	4a38      	ldr	r2, [pc, #224]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 8004716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800471a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80a1 	beq.w	8004868 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004726:	4b34      	ldr	r3, [pc, #208]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b08      	cmp	r3, #8
 8004730:	d05c      	beq.n	80047ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d141      	bne.n	80047be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473a:	4b31      	ldr	r3, [pc, #196]	@ (8004800 <HAL_RCC_OscConfig+0x478>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004740:	f7fc fbfa 	bl	8000f38 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004748:	f7fc fbf6 	bl	8000f38 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e087      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475a:	4b27      	ldr	r3, [pc, #156]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004774:	019b      	lsls	r3, r3, #6
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	3b01      	subs	r3, #1
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	061b      	lsls	r3, r3, #24
 800478a:	491b      	ldr	r1, [pc, #108]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 800478c:	4313      	orrs	r3, r2
 800478e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004790:	4b1b      	ldr	r3, [pc, #108]	@ (8004800 <HAL_RCC_OscConfig+0x478>)
 8004792:	2201      	movs	r2, #1
 8004794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004796:	f7fc fbcf 	bl	8000f38 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479e:	f7fc fbcb 	bl	8000f38 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e05c      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b0:	4b11      	ldr	r3, [pc, #68]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCC_OscConfig+0x416>
 80047bc:	e054      	b.n	8004868 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047be:	4b10      	ldr	r3, [pc, #64]	@ (8004800 <HAL_RCC_OscConfig+0x478>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c4:	f7fc fbb8 	bl	8000f38 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047cc:	f7fc fbb4 	bl	8000f38 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e045      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <HAL_RCC_OscConfig+0x470>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x444>
 80047ea:	e03d      	b.n	8004868 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d107      	bne.n	8004804 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e038      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
 80047f8:	40023800 	.word	0x40023800
 80047fc:	40007000 	.word	0x40007000
 8004800:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004804:	4b1b      	ldr	r3, [pc, #108]	@ (8004874 <HAL_RCC_OscConfig+0x4ec>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d028      	beq.n	8004864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d121      	bne.n	8004864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d11a      	bne.n	8004864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004834:	4013      	ands	r3, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800483a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800483c:	4293      	cmp	r3, r2
 800483e:	d111      	bne.n	8004864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	085b      	lsrs	r3, r3, #1
 800484c:	3b01      	subs	r3, #1
 800484e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004850:	429a      	cmp	r2, r3
 8004852:	d107      	bne.n	8004864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800

08004878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0cc      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800488c:	4b68      	ldr	r3, [pc, #416]	@ (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d90c      	bls.n	80048b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b65      	ldr	r3, [pc, #404]	@ (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b63      	ldr	r3, [pc, #396]	@ (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0b8      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d020      	beq.n	8004902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048cc:	4b59      	ldr	r3, [pc, #356]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a58      	ldr	r2, [pc, #352]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e4:	4b53      	ldr	r3, [pc, #332]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4a52      	ldr	r2, [pc, #328]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f0:	4b50      	ldr	r3, [pc, #320]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	494d      	ldr	r1, [pc, #308]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d044      	beq.n	8004998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d107      	bne.n	8004926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004916:	4b47      	ldr	r3, [pc, #284]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d119      	bne.n	8004956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e07f      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d003      	beq.n	8004936 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004932:	2b03      	cmp	r3, #3
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004936:	4b3f      	ldr	r3, [pc, #252]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e06f      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004946:	4b3b      	ldr	r3, [pc, #236]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e067      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004956:	4b37      	ldr	r3, [pc, #220]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f023 0203 	bic.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4934      	ldr	r1, [pc, #208]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	4313      	orrs	r3, r2
 8004966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004968:	f7fc fae6 	bl	8000f38 <HAL_GetTick>
 800496c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	e00a      	b.n	8004986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004970:	f7fc fae2 	bl	8000f38 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e04f      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	4b2b      	ldr	r3, [pc, #172]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 020c 	and.w	r2, r3, #12
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	429a      	cmp	r2, r3
 8004996:	d1eb      	bne.n	8004970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004998:	4b25      	ldr	r3, [pc, #148]	@ (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d20c      	bcs.n	80049c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b22      	ldr	r3, [pc, #136]	@ (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b20      	ldr	r3, [pc, #128]	@ (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e032      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049cc:	4b19      	ldr	r3, [pc, #100]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4916      	ldr	r1, [pc, #88]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ea:	4b12      	ldr	r3, [pc, #72]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	490e      	ldr	r1, [pc, #56]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049fe:	f000 f821 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8004a02:	4602      	mov	r2, r0
 8004a04:	4b0b      	ldr	r3, [pc, #44]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	490a      	ldr	r1, [pc, #40]	@ (8004a38 <HAL_RCC_ClockConfig+0x1c0>)
 8004a10:	5ccb      	ldrb	r3, [r1, r3]
 8004a12:	fa22 f303 	lsr.w	r3, r2, r3
 8004a16:	4a09      	ldr	r2, [pc, #36]	@ (8004a3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a1a:	4b09      	ldr	r3, [pc, #36]	@ (8004a40 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fc fa46 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023c00 	.word	0x40023c00
 8004a34:	40023800 	.word	0x40023800
 8004a38:	08009344 	.word	0x08009344
 8004a3c:	20000000 	.word	0x20000000
 8004a40:	20000004 	.word	0x20000004

08004a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a48:	b094      	sub	sp, #80	@ 0x50
 8004a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a5c:	4b79      	ldr	r3, [pc, #484]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 030c 	and.w	r3, r3, #12
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d00d      	beq.n	8004a84 <HAL_RCC_GetSysClockFreq+0x40>
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	f200 80e1 	bhi.w	8004c30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x34>
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d003      	beq.n	8004a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a76:	e0db      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4b73      	ldr	r3, [pc, #460]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a7c:	e0db      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a7e:	4b73      	ldr	r3, [pc, #460]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x208>)
 8004a80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a82:	e0d8      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a84:	4b6f      	ldr	r3, [pc, #444]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d063      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	099b      	lsrs	r3, r3, #6
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004aa4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aae:	2300      	movs	r3, #0
 8004ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ab2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	462b      	mov	r3, r5
 8004aba:	f04f 0000 	mov.w	r0, #0
 8004abe:	f04f 0100 	mov.w	r1, #0
 8004ac2:	0159      	lsls	r1, r3, #5
 8004ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac8:	0150      	lsls	r0, r2, #5
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4621      	mov	r1, r4
 8004ad0:	1a51      	subs	r1, r2, r1
 8004ad2:	6139      	str	r1, [r7, #16]
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ae8:	4659      	mov	r1, fp
 8004aea:	018b      	lsls	r3, r1, #6
 8004aec:	4651      	mov	r1, sl
 8004aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004af2:	4651      	mov	r1, sl
 8004af4:	018a      	lsls	r2, r1, #6
 8004af6:	4651      	mov	r1, sl
 8004af8:	ebb2 0801 	subs.w	r8, r2, r1
 8004afc:	4659      	mov	r1, fp
 8004afe:	eb63 0901 	sbc.w	r9, r3, r1
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b16:	4690      	mov	r8, r2
 8004b18:	4699      	mov	r9, r3
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	eb18 0303 	adds.w	r3, r8, r3
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	462b      	mov	r3, r5
 8004b24:	eb49 0303 	adc.w	r3, r9, r3
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b36:	4629      	mov	r1, r5
 8004b38:	024b      	lsls	r3, r1, #9
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b40:	4621      	mov	r1, r4
 8004b42:	024a      	lsls	r2, r1, #9
 8004b44:	4610      	mov	r0, r2
 8004b46:	4619      	mov	r1, r3
 8004b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b54:	f7fb fb38 	bl	80001c8 <__aeabi_uldivmod>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b60:	e058      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b62:	4b38      	ldr	r3, [pc, #224]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	099b      	lsrs	r3, r3, #6
 8004b68:	2200      	movs	r2, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	2300      	movs	r3, #0
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	f04f 0000 	mov.w	r0, #0
 8004b84:	f04f 0100 	mov.w	r1, #0
 8004b88:	0159      	lsls	r1, r3, #5
 8004b8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b8e:	0150      	lsls	r0, r2, #5
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4641      	mov	r1, r8
 8004b96:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bb4:	ebb2 040a 	subs.w	r4, r2, sl
 8004bb8:	eb63 050b 	sbc.w	r5, r3, fp
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	00eb      	lsls	r3, r5, #3
 8004bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bca:	00e2      	lsls	r2, r4, #3
 8004bcc:	4614      	mov	r4, r2
 8004bce:	461d      	mov	r5, r3
 8004bd0:	4643      	mov	r3, r8
 8004bd2:	18e3      	adds	r3, r4, r3
 8004bd4:	603b      	str	r3, [r7, #0]
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	eb45 0303 	adc.w	r3, r5, r3
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bea:	4629      	mov	r1, r5
 8004bec:	028b      	lsls	r3, r1, #10
 8004bee:	4621      	mov	r1, r4
 8004bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	028a      	lsls	r2, r1, #10
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bfe:	2200      	movs	r2, #0
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	61fa      	str	r2, [r7, #28]
 8004c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c08:	f7fb fade 	bl	80001c8 <__aeabi_uldivmod>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4613      	mov	r3, r2
 8004c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c14:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c2e:	e002      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c30:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3750      	adds	r7, #80	@ 0x50
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c42:	bf00      	nop
 8004c44:	40023800 	.word	0x40023800
 8004c48:	00f42400 	.word	0x00f42400
 8004c4c:	007a1200 	.word	0x007a1200

08004c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c54:	4b03      	ldr	r3, [pc, #12]	@ (8004c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c56:	681b      	ldr	r3, [r3, #0]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000000 	.word	0x20000000

08004c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c6c:	f7ff fff0 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8004c70:	4602      	mov	r2, r0
 8004c72:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	0a9b      	lsrs	r3, r3, #10
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	4903      	ldr	r1, [pc, #12]	@ (8004c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c7e:	5ccb      	ldrb	r3, [r1, r3]
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	08009354 	.word	0x08009354

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d035      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cb8:	4b62      	ldr	r3, [pc, #392]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cbe:	f7fc f93b 	bl	8000f38 <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cc6:	f7fc f937 	bl	8000f38 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e0b0      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cd8:	4b5b      	ldr	r3, [pc, #364]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f0      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	019a      	lsls	r2, r3, #6
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	071b      	lsls	r3, r3, #28
 8004cf0:	4955      	ldr	r1, [pc, #340]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cf8:	4b52      	ldr	r3, [pc, #328]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cfe:	f7fc f91b 	bl	8000f38 <HAL_GetTick>
 8004d02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d06:	f7fc f917 	bl	8000f38 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e090      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d18:	4b4b      	ldr	r3, [pc, #300]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8083 	beq.w	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	4b44      	ldr	r3, [pc, #272]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	4a43      	ldr	r2, [pc, #268]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d42:	4b41      	ldr	r3, [pc, #260]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a3e      	ldr	r2, [pc, #248]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d5a:	f7fc f8ed 	bl	8000f38 <HAL_GetTick>
 8004d5e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d62:	f7fc f8e9 	bl	8000f38 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e062      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d74:	4b35      	ldr	r3, [pc, #212]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d80:	4b31      	ldr	r3, [pc, #196]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d88:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d02f      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d028      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004da8:	4b29      	ldr	r3, [pc, #164]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dae:	4b28      	ldr	r3, [pc, #160]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004db4:	4a24      	ldr	r2, [pc, #144]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dba:	4b23      	ldr	r3, [pc, #140]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d114      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dc6:	f7fc f8b7 	bl	8000f38 <HAL_GetTick>
 8004dca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dce:	f7fc f8b3 	bl	8000f38 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e02a      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de4:	4b18      	ldr	r3, [pc, #96]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ee      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dfc:	d10d      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dfe:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e12:	490d      	ldr	r1, [pc, #52]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	608b      	str	r3, [r1, #8]
 8004e18:	e005      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e20:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e24:	6093      	str	r3, [r2, #8]
 8004e26:	4b08      	ldr	r3, [pc, #32]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e32:	4905      	ldr	r1, [pc, #20]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	42470068 	.word	0x42470068
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40007000 	.word	0x40007000
 8004e50:	42470e40 	.word	0x42470e40

08004e54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d13f      	bne.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e72:	4b24      	ldr	r3, [pc, #144]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e7a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d006      	beq.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e88:	d12f      	bne.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e8c:	617b      	str	r3, [r7, #20]
          break;
 8004e8e:	e02f      	b.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e90:	4b1c      	ldr	r3, [pc, #112]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e9c:	d108      	bne.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e9e:	4b19      	ldr	r3, [pc, #100]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ea6:	4a19      	ldr	r2, [pc, #100]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	e007      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004eb0:	4b14      	ldr	r3, [pc, #80]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eb8:	4a15      	ldr	r2, [pc, #84]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebe:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ec0:	4b10      	ldr	r3, [pc, #64]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ec6:	099b      	lsrs	r3, r3, #6
 8004ec8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eda:	0f1b      	lsrs	r3, r3, #28
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	617b      	str	r3, [r7, #20]
          break;
 8004ee8:	e002      	b.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
          break;
 8004eee:	bf00      	nop
        }
      }
      break;
 8004ef0:	e000      	b.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004ef2:	bf00      	nop
    }
  }
  return frequency;
 8004ef4:	697b      	ldr	r3, [r7, #20]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40023800 	.word	0x40023800
 8004f08:	00bb8000 	.word	0x00bb8000
 8004f0c:	007a1200 	.word	0x007a1200
 8004f10:	00f42400 	.word	0x00f42400

08004f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e07b      	b.n	800501e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d108      	bne.n	8004f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f36:	d009      	beq.n	8004f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	61da      	str	r2, [r3, #28]
 8004f3e:	e005      	b.n	8004f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fb fe44 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd0:	ea42 0103 	orr.w	r1, r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	f003 0104 	and.w	r1, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	f003 0210 	and.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800500c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e041      	b.n	80050bc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7fb fe19 	bl	8000c84 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3304      	adds	r3, #4
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f000 f8c9 	bl	80051fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80050de:	2302      	movs	r3, #2
 80050e0:	e088      	b.n	80051f4 <HAL_TIM_IC_ConfigChannel+0x130>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d11b      	bne.n	8005128 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005100:	f000 f928 	bl	8005354 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 020c 	bic.w	r2, r2, #12
 8005112:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6999      	ldr	r1, [r3, #24]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	619a      	str	r2, [r3, #24]
 8005126:	e060      	b.n	80051ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d11c      	bne.n	8005168 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800513e:	f000 f97d 	bl	800543c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005150:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6999      	ldr	r1, [r3, #24]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	021a      	lsls	r2, r3, #8
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	619a      	str	r2, [r3, #24]
 8005166:	e040      	b.n	80051ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b08      	cmp	r3, #8
 800516c:	d11b      	bne.n	80051a6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800517e:	f000 f99a 	bl	80054b6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 020c 	bic.w	r2, r2, #12
 8005190:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69d9      	ldr	r1, [r3, #28]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	61da      	str	r2, [r3, #28]
 80051a4:	e021      	b.n	80051ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b0c      	cmp	r3, #12
 80051aa:	d11c      	bne.n	80051e6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80051bc:	f000 f9b7 	bl	800552e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80051ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69d9      	ldr	r1, [r3, #28]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	021a      	lsls	r2, r3, #8
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	61da      	str	r2, [r3, #28]
 80051e4:	e001      	b.n	80051ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a46      	ldr	r2, [pc, #280]	@ (8005328 <TIM_Base_SetConfig+0x12c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800521a:	d00f      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a43      	ldr	r2, [pc, #268]	@ (800532c <TIM_Base_SetConfig+0x130>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00b      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a42      	ldr	r2, [pc, #264]	@ (8005330 <TIM_Base_SetConfig+0x134>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d007      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a41      	ldr	r2, [pc, #260]	@ (8005334 <TIM_Base_SetConfig+0x138>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a40      	ldr	r2, [pc, #256]	@ (8005338 <TIM_Base_SetConfig+0x13c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d108      	bne.n	800524e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a35      	ldr	r2, [pc, #212]	@ (8005328 <TIM_Base_SetConfig+0x12c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d02b      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800525c:	d027      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a32      	ldr	r2, [pc, #200]	@ (800532c <TIM_Base_SetConfig+0x130>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d023      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a31      	ldr	r2, [pc, #196]	@ (8005330 <TIM_Base_SetConfig+0x134>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01f      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a30      	ldr	r2, [pc, #192]	@ (8005334 <TIM_Base_SetConfig+0x138>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01b      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2f      	ldr	r2, [pc, #188]	@ (8005338 <TIM_Base_SetConfig+0x13c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d017      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2e      	ldr	r2, [pc, #184]	@ (800533c <TIM_Base_SetConfig+0x140>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d013      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a2d      	ldr	r2, [pc, #180]	@ (8005340 <TIM_Base_SetConfig+0x144>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00f      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2c      	ldr	r2, [pc, #176]	@ (8005344 <TIM_Base_SetConfig+0x148>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00b      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a2b      	ldr	r2, [pc, #172]	@ (8005348 <TIM_Base_SetConfig+0x14c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2a      	ldr	r2, [pc, #168]	@ (800534c <TIM_Base_SetConfig+0x150>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a29      	ldr	r2, [pc, #164]	@ (8005350 <TIM_Base_SetConfig+0x154>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d108      	bne.n	80052c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a10      	ldr	r2, [pc, #64]	@ (8005328 <TIM_Base_SetConfig+0x12c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0xf8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a12      	ldr	r2, [pc, #72]	@ (8005338 <TIM_Base_SetConfig+0x13c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d103      	bne.n	80052fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d105      	bne.n	800531a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	611a      	str	r2, [r3, #16]
  }
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010000 	.word	0x40010000
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40000c00 	.word	0x40000c00
 8005338:	40010400 	.word	0x40010400
 800533c:	40014000 	.word	0x40014000
 8005340:	40014400 	.word	0x40014400
 8005344:	40014800 	.word	0x40014800
 8005348:	40001800 	.word	0x40001800
 800534c:	40001c00 	.word	0x40001c00
 8005350:	40002000 	.word	0x40002000

08005354 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f023 0201 	bic.w	r2, r3, #1
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4a28      	ldr	r2, [pc, #160]	@ (8005420 <TIM_TI1_SetConfig+0xcc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01b      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005388:	d017      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a25      	ldr	r2, [pc, #148]	@ (8005424 <TIM_TI1_SetConfig+0xd0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4a24      	ldr	r2, [pc, #144]	@ (8005428 <TIM_TI1_SetConfig+0xd4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00f      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4a23      	ldr	r2, [pc, #140]	@ (800542c <TIM_TI1_SetConfig+0xd8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4a22      	ldr	r2, [pc, #136]	@ (8005430 <TIM_TI1_SetConfig+0xdc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4a21      	ldr	r2, [pc, #132]	@ (8005434 <TIM_TI1_SetConfig+0xe0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4a20      	ldr	r2, [pc, #128]	@ (8005438 <TIM_TI1_SetConfig+0xe4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d101      	bne.n	80053be <TIM_TI1_SetConfig+0x6a>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <TIM_TI1_SetConfig+0x6c>
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0303 	bic.w	r3, r3, #3
 80053ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e003      	b.n	80053de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f023 030a 	bic.w	r3, r3, #10
 80053f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f003 030a 	and.w	r3, r3, #10
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40010400 	.word	0x40010400
 8005434:	40014000 	.word	0x40014000
 8005438:	40001800 	.word	0x40001800

0800543c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	f023 0210 	bic.w	r2, r3, #16
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800547a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	031b      	lsls	r3, r3, #12
 8005480:	b29b      	uxth	r3, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800548e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b087      	sub	sp, #28
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f023 0303 	bic.w	r3, r3, #3
 80054e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054f2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005506:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800552e:	b480      	push	{r7}
 8005530:	b087      	sub	sp, #28
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800555a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800556c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	031b      	lsls	r3, r3, #12
 8005572:	b29b      	uxth	r3, r3
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005580:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	031b      	lsls	r3, r3, #12
 8005586:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	621a      	str	r2, [r3, #32]
}
 800559c:	bf00      	nop
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055bc:	2302      	movs	r3, #2
 80055be:	e05a      	b.n	8005676 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a21      	ldr	r2, [pc, #132]	@ (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d022      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800560c:	d01d      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1d      	ldr	r2, [pc, #116]	@ (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1b      	ldr	r2, [pc, #108]	@ (800568c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1a      	ldr	r2, [pc, #104]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a18      	ldr	r2, [pc, #96]	@ (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a17      	ldr	r2, [pc, #92]	@ (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a15      	ldr	r2, [pc, #84]	@ (800569c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d10c      	bne.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4313      	orrs	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40010000 	.word	0x40010000
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40000c00 	.word	0x40000c00
 8005694:	40010400 	.word	0x40010400
 8005698:	40014000 	.word	0x40014000
 800569c:	40001800 	.word	0x40001800

080056a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056a0:	b084      	sub	sp, #16
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	f107 001c 	add.w	r0, r7, #28
 80056ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d123      	bne.n	8005702 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80056ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d105      	bne.n	80056f6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f9dc 	bl	8005ab4 <USB_CoreReset>
 80056fc:	4603      	mov	r3, r0
 80056fe:	73fb      	strb	r3, [r7, #15]
 8005700:	e01b      	b.n	800573a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f9d0 	bl	8005ab4 <USB_CoreReset>
 8005714:	4603      	mov	r3, r0
 8005716:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005718:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005724:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	639a      	str	r2, [r3, #56]	@ 0x38
 800572c:	e005      	b.n	800573a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005732:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800573a:	7fbb      	ldrb	r3, [r7, #30]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10b      	bne.n	8005758 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f043 0206 	orr.w	r2, r3, #6
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f043 0220 	orr.w	r2, r3, #32
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005764:	b004      	add	sp, #16
 8005766:	4770      	bx	lr

08005768 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f043 0201 	orr.w	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f023 0201 	bic.w	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d115      	bne.n	80057fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057da:	200a      	movs	r0, #10
 80057dc:	f7fb fbb8 	bl	8000f50 <HAL_Delay>
      ms += 10U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	330a      	adds	r3, #10
 80057e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f956 	bl	8005a98 <USB_GetMode>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d01e      	beq.n	8005830 <USB_SetCurrentMode+0x84>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80057f6:	d9f0      	bls.n	80057da <USB_SetCurrentMode+0x2e>
 80057f8:	e01a      	b.n	8005830 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d115      	bne.n	800582c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800580c:	200a      	movs	r0, #10
 800580e:	f7fb fb9f 	bl	8000f50 <HAL_Delay>
      ms += 10U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	330a      	adds	r3, #10
 8005816:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f93d 	bl	8005a98 <USB_GetMode>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <USB_SetCurrentMode+0x84>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2bc7      	cmp	r3, #199	@ 0xc7
 8005828:	d9f0      	bls.n	800580c <USB_SetCurrentMode+0x60>
 800582a:	e001      	b.n	8005830 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e005      	b.n	800583c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2bc8      	cmp	r3, #200	@ 0xc8
 8005834:	d101      	bne.n	800583a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3301      	adds	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800585e:	d901      	bls.n	8005864 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e01b      	b.n	800589c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	daf2      	bge.n	8005852 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	019b      	lsls	r3, r3, #6
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3301      	adds	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005888:	d901      	bls.n	800588e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e006      	b.n	800589c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b20      	cmp	r3, #32
 8005898:	d0f0      	beq.n	800587c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3301      	adds	r3, #1
 80058b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058c0:	d901      	bls.n	80058c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e018      	b.n	80058f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	daf2      	bge.n	80058b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2210      	movs	r2, #16
 80058d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058e4:	d901      	bls.n	80058ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e006      	b.n	80058f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d0f0      	beq.n	80058d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005904:	b480      	push	{r7}
 8005906:	b089      	sub	sp, #36	@ 0x24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	4611      	mov	r1, r2
 8005910:	461a      	mov	r2, r3
 8005912:	460b      	mov	r3, r1
 8005914:	71fb      	strb	r3, [r7, #7]
 8005916:	4613      	mov	r3, r2
 8005918:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005922:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005926:	2b00      	cmp	r3, #0
 8005928:	d123      	bne.n	8005972 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800592a:	88bb      	ldrh	r3, [r7, #4]
 800592c:	3303      	adds	r3, #3
 800592e:	089b      	lsrs	r3, r3, #2
 8005930:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005932:	2300      	movs	r3, #0
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	e018      	b.n	800596a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	031a      	lsls	r2, r3, #12
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	4413      	add	r3, r2
 8005940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005944:	461a      	mov	r2, r3
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	3301      	adds	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	3301      	adds	r3, #1
 8005956:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	3301      	adds	r3, #1
 8005962:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	3301      	adds	r3, #1
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	429a      	cmp	r2, r3
 8005970:	d3e2      	bcc.n	8005938 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3724      	adds	r7, #36	@ 0x24
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005980:	b480      	push	{r7}
 8005982:	b08b      	sub	sp, #44	@ 0x2c
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	089b      	lsrs	r3, r3, #2
 800599a:	b29b      	uxth	r3, r3
 800599c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800599e:	88fb      	ldrh	r3, [r7, #6]
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059a6:	2300      	movs	r3, #0
 80059a8:	623b      	str	r3, [r7, #32]
 80059aa:	e014      	b.n	80059d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	3301      	adds	r3, #1
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	3301      	adds	r3, #1
 80059c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	3301      	adds	r3, #1
 80059c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	3301      	adds	r3, #1
 80059ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	3301      	adds	r3, #1
 80059d4:	623b      	str	r3, [r7, #32]
 80059d6:	6a3a      	ldr	r2, [r7, #32]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d3e6      	bcc.n	80059ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059de:	8bfb      	ldrh	r3, [r7, #30]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01e      	beq.n	8005a22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ee:	461a      	mov	r2, r3
 80059f0:	f107 0310 	add.w	r3, r7, #16
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	701a      	strb	r2, [r3, #0]
      i++;
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	3301      	adds	r3, #1
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005a16:	8bfb      	ldrh	r3, [r7, #30]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a1c:	8bfb      	ldrh	r3, [r7, #30]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1ea      	bne.n	80059f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	372c      	adds	r7, #44	@ 0x2c
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4013      	ands	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a48:	68fb      	ldr	r3, [r7, #12]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	4013      	ands	r3, r2
 8005a88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005acc:	d901      	bls.n	8005ad2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e01b      	b.n	8005b0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	daf2      	bge.n	8005ac0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f043 0201 	orr.w	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3301      	adds	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005af6:	d901      	bls.n	8005afc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e006      	b.n	8005b0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d0f0      	beq.n	8005aea <USB_CoreReset+0x36>

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b18:	b084      	sub	sp, #16
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b086      	sub	sp, #24
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b42:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d119      	bne.n	8005ba2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d10a      	bne.n	8005b8c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b84:	f043 0304 	orr.w	r3, r3, #4
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	e014      	b.n	8005bb6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b9a:	f023 0304 	bic.w	r3, r3, #4
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	e009      	b.n	8005bb6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bb0:	f023 0304 	bic.w	r3, r3, #4
 8005bb4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bb6:	2110      	movs	r1, #16
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff fe43 	bl	8005844 <USB_FlushTxFifo>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fe6d 	bl	80058a8 <USB_FlushRxFifo>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	613b      	str	r3, [r7, #16]
 8005bdc:	e015      	b.n	8005c0a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bea:	461a      	mov	r2, r3
 8005bec:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2300      	movs	r3, #0
 8005c02:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	3301      	adds	r3, #1
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005c0e:	461a      	mov	r2, r3
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d3e3      	bcc.n	8005bde <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c22:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a18      	ldr	r2, [pc, #96]	@ (8005c88 <USB_HostInit+0x170>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d10b      	bne.n	8005c44 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c32:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a15      	ldr	r2, [pc, #84]	@ (8005c8c <USB_HostInit+0x174>)
 8005c38:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a14      	ldr	r2, [pc, #80]	@ (8005c90 <USB_HostInit+0x178>)
 8005c3e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005c42:	e009      	b.n	8005c58 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2280      	movs	r2, #128	@ 0x80
 8005c48:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a11      	ldr	r2, [pc, #68]	@ (8005c94 <USB_HostInit+0x17c>)
 8005c4e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a11      	ldr	r2, [pc, #68]	@ (8005c98 <USB_HostInit+0x180>)
 8005c54:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f043 0210 	orr.w	r2, r3, #16
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	4b0a      	ldr	r3, [pc, #40]	@ (8005c9c <USB_HostInit+0x184>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c84:	b004      	add	sp, #16
 8005c86:	4770      	bx	lr
 8005c88:	40040000 	.word	0x40040000
 8005c8c:	01000200 	.word	0x01000200
 8005c90:	00e00300 	.word	0x00e00300
 8005c94:	00600080 	.word	0x00600080
 8005c98:	004000e0 	.word	0x004000e0
 8005c9c:	a3200008 	.word	0xa3200008

08005ca0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005cbe:	f023 0303 	bic.w	r3, r3, #3
 8005cc2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d107      	bne.n	8005cf2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005cee:	6053      	str	r3, [r2, #4]
 8005cf0:	e00c      	b.n	8005d0c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d107      	bne.n	8005d08 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005d04:	6053      	str	r3, [r2, #4]
 8005d06:	e001      	b.n	8005d0c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005d3a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d48:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d4a:	2064      	movs	r0, #100	@ 0x64
 8005d4c:	f7fb f900 	bl	8000f50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d5c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d5e:	200a      	movs	r0, #10
 8005d60:	f7fb f8f6 	bl	8000f50 <HAL_Delay>

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	460b      	mov	r3, r1
 8005d78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005d92:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <USB_DriveVbus+0x44>
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d106      	bne.n	8005db2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005dac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005db0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dbc:	d109      	bne.n	8005dd2 <USB_DriveVbus+0x64>
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005dcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dd0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	0c5b      	lsrs	r3, r3, #17
 8005dfe:	f003 0303 	and.w	r3, r3, #3
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	b29b      	uxth	r3, r3
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	4608      	mov	r0, r1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	70fb      	strb	r3, [r7, #3]
 8005e42:	460b      	mov	r3, r1
 8005e44:	70bb      	strb	r3, [r7, #2]
 8005e46:	4613      	mov	r3, r2
 8005e48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f04f 33ff 	mov.w	r3, #4294967295
 8005e64:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d87c      	bhi.n	8005f68 <USB_HC_Init+0x138>
 8005e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e74 <USB_HC_Init+0x44>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e85 	.word	0x08005e85
 8005e78:	08005f2b 	.word	0x08005f2b
 8005e7c:	08005e85 	.word	0x08005e85
 8005e80:	08005eed 	.word	0x08005eed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e90:	461a      	mov	r2, r3
 8005e92:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005e96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005e98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da10      	bge.n	8005ec2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	78fa      	ldrb	r2, [r7, #3]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ebe:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005ec0:	e055      	b.n	8005f6e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a6f      	ldr	r2, [pc, #444]	@ (8006084 <USB_HC_Init+0x254>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d151      	bne.n	8005f6e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	78fa      	ldrb	r2, [r7, #3]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ee4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005ee8:	60d3      	str	r3, [r2, #12]
      break;
 8005eea:	e040      	b.n	8005f6e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005efe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	da34      	bge.n	8005f72 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	78fa      	ldrb	r2, [r7, #3]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f26:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f28:	e023      	b.n	8005f72 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f36:	461a      	mov	r2, r3
 8005f38:	f240 2325 	movw	r3, #549	@ 0x225
 8005f3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	da17      	bge.n	8005f76 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	78fa      	ldrb	r2, [r7, #3]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f60:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005f64:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f66:	e006      	b.n	8005f76 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	77fb      	strb	r3, [r7, #31]
      break;
 8005f6c:	e004      	b.n	8005f78 <USB_HC_Init+0x148>
      break;
 8005f6e:	bf00      	nop
 8005f70:	e002      	b.n	8005f78 <USB_HC_Init+0x148>
      break;
 8005f72:	bf00      	nop
 8005f74:	e000      	b.n	8005f78 <USB_HC_Init+0x148>
      break;
 8005f76:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f84:	461a      	mov	r2, r3
 8005f86:	2300      	movs	r3, #0
 8005f88:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fa4:	f043 0302 	orr.w	r3, r3, #2
 8005fa8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fb0:	699a      	ldr	r2, [r3, #24]
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	f003 030f 	and.w	r3, r3, #15
 8005fb8:	2101      	movs	r1, #1
 8005fba:	fa01 f303 	lsl.w	r3, r1, r3
 8005fbe:	6939      	ldr	r1, [r7, #16]
 8005fc0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005fd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	da03      	bge.n	8005fe4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005fdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	e001      	b.n	8005fe8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff fef9 	bl	8005de0 <USB_GetHostSpeed>
 8005fee:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005ff0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d106      	bne.n	8006006 <USB_HC_Init+0x1d6>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d003      	beq.n	8006006 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ffe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e001      	b.n	800600a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800600a:	787b      	ldrb	r3, [r7, #1]
 800600c:	059b      	lsls	r3, r3, #22
 800600e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006012:	78bb      	ldrb	r3, [r7, #2]
 8006014:	02db      	lsls	r3, r3, #11
 8006016:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800601a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800601c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006020:	049b      	lsls	r3, r3, #18
 8006022:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006026:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006028:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800602a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800602e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	431a      	orrs	r2, r3
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006038:	78fa      	ldrb	r2, [r7, #3]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	440a      	add	r2, r1
 8006040:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006044:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006048:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800604a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800604e:	2b03      	cmp	r3, #3
 8006050:	d003      	beq.n	800605a <USB_HC_Init+0x22a>
 8006052:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006056:	2b01      	cmp	r3, #1
 8006058:	d10f      	bne.n	800607a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800605a:	78fb      	ldrb	r3, [r7, #3]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4413      	add	r3, r2
 8006062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	78fa      	ldrb	r2, [r7, #3]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	440a      	add	r2, r1
 8006070:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006074:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006078:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800607a:	7ffb      	ldrb	r3, [r7, #31]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40040000 	.word	0x40040000

08006088 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08c      	sub	sp, #48	@ 0x30
 800608c:	af02      	add	r7, sp, #8
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80060a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060a4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006220 <USB_HC_StartXfer+0x198>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d12f      	bne.n	800610e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d11c      	bne.n	80060ee <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	7c9b      	ldrb	r3, [r3, #18]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <USB_HC_StartXfer+0x3c>
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	7c9b      	ldrb	r3, [r3, #18]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d124      	bne.n	800610e <USB_HC_StartXfer+0x86>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	799b      	ldrb	r3, [r3, #6]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d120      	bne.n	800610e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	6a3a      	ldr	r2, [r7, #32]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ea:	60d3      	str	r3, [r2, #12]
 80060ec:	e00f      	b.n	800610e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	791b      	ldrb	r3, [r3, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <USB_HC_StartXfer+0x86>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	795b      	ldrb	r3, [r3, #5]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d107      	bne.n	800610e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	4619      	mov	r1, r3
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fb6b 	bl	80067e0 <USB_DoPing>
        return HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	e232      	b.n	8006574 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	799b      	ldrb	r3, [r3, #6]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d158      	bne.n	80061c8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006116:	2301      	movs	r3, #1
 8006118:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	78db      	ldrb	r3, [r3, #3]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006122:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	8a92      	ldrh	r2, [r2, #20]
 8006128:	fb03 f202 	mul.w	r2, r3, r2
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	61da      	str	r2, [r3, #28]
 8006130:	e07c      	b.n	800622c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	7c9b      	ldrb	r3, [r3, #18]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d130      	bne.n	800619c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	2bbc      	cmp	r3, #188	@ 0xbc
 8006140:	d918      	bls.n	8006174 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	8a9b      	ldrh	r3, [r3, #20]
 8006146:	461a      	mov	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d003      	beq.n	8006164 <USB_HC_StartXfer+0xdc>
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d103      	bne.n	800616c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2202      	movs	r2, #2
 8006168:	60da      	str	r2, [r3, #12]
 800616a:	e05f      	b.n	800622c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2201      	movs	r2, #1
 8006170:	60da      	str	r2, [r3, #12]
 8006172:	e05b      	b.n	800622c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	6a1a      	ldr	r2, [r3, #32]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d007      	beq.n	8006194 <USB_HC_StartXfer+0x10c>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d003      	beq.n	8006194 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2204      	movs	r2, #4
 8006190:	60da      	str	r2, [r3, #12]
 8006192:	e04b      	b.n	800622c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2203      	movs	r2, #3
 8006198:	60da      	str	r2, [r3, #12]
 800619a:	e047      	b.n	800622c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d10d      	bne.n	80061be <USB_HC_StartXfer+0x136>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	8a92      	ldrh	r2, [r2, #20]
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d907      	bls.n	80061be <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	8a92      	ldrh	r2, [r2, #20]
 80061b4:	fb03 f202 	mul.w	r2, r3, r2
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	61da      	str	r2, [r3, #28]
 80061bc:	e036      	b.n	800622c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	6a1a      	ldr	r2, [r3, #32]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	61da      	str	r2, [r3, #28]
 80061c6:	e031      	b.n	800622c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d018      	beq.n	8006202 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	8a92      	ldrh	r2, [r2, #20]
 80061d8:	4413      	add	r3, r2
 80061da:	3b01      	subs	r3, #1
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	8a92      	ldrh	r2, [r2, #20]
 80061e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80061e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80061e6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80061e8:	8b7b      	ldrh	r3, [r7, #26]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d90b      	bls.n	8006206 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80061ee:	8b7b      	ldrh	r3, [r7, #26]
 80061f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	8a92      	ldrh	r2, [r2, #20]
 80061f8:	fb03 f202 	mul.w	r2, r3, r2
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	61da      	str	r2, [r3, #28]
 8006200:	e001      	b.n	8006206 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006202:	2301      	movs	r3, #1
 8006204:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	78db      	ldrb	r3, [r3, #3]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800620e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	8a92      	ldrh	r2, [r2, #20]
 8006214:	fb03 f202 	mul.w	r2, r3, r2
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	61da      	str	r2, [r3, #28]
 800621c:	e006      	b.n	800622c <USB_HC_StartXfer+0x1a4>
 800621e:	bf00      	nop
 8006220:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006234:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006236:	04d9      	lsls	r1, r3, #19
 8006238:	4ba3      	ldr	r3, [pc, #652]	@ (80064c8 <USB_HC_StartXfer+0x440>)
 800623a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800623c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	7d9b      	ldrb	r3, [r3, #22]
 8006242:	075b      	lsls	r3, r3, #29
 8006244:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006248:	69f9      	ldr	r1, [r7, #28]
 800624a:	0148      	lsls	r0, r1, #5
 800624c:	6a39      	ldr	r1, [r7, #32]
 800624e:	4401      	add	r1, r0
 8006250:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006254:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006256:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6999      	ldr	r1, [r3, #24]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800626e:	460a      	mov	r2, r1
 8006270:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	bf0c      	ite	eq
 8006282:	2301      	moveq	r3, #1
 8006284:	2300      	movne	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	4413      	add	r3, r2
 8006292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	6a3a      	ldr	r2, [r7, #32]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	7e7b      	ldrb	r3, [r7, #25]
 80062ba:	075b      	lsls	r3, r3, #29
 80062bc:	69f9      	ldr	r1, [r7, #28]
 80062be:	0148      	lsls	r0, r1, #5
 80062c0:	6a39      	ldr	r1, [r7, #32]
 80062c2:	4401      	add	r1, r0
 80062c4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80062c8:	4313      	orrs	r3, r2
 80062ca:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	799b      	ldrb	r3, [r3, #6]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	f040 80c3 	bne.w	800645c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	7c5b      	ldrb	r3, [r3, #17]
 80062da:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062e0:	4313      	orrs	r3, r2
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	0151      	lsls	r1, r2, #5
 80062e6:	6a3a      	ldr	r2, [r7, #32]
 80062e8:	440a      	add	r2, r1
 80062ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80062ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062f2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	6a3a      	ldr	r2, [r7, #32]
 8006308:	440a      	add	r2, r1
 800630a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800630e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006312:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	79db      	ldrb	r3, [r3, #7]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d123      	bne.n	8006364 <USB_HC_StartXfer+0x2dc>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	78db      	ldrb	r3, [r3, #3]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d11f      	bne.n	8006364 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	6a3a      	ldr	r2, [r7, #32]
 8006338:	440a      	add	r2, r1
 800633a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800633e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006342:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	6a3a      	ldr	r2, [r7, #32]
 8006358:	440a      	add	r2, r1
 800635a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800635e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006362:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	7c9b      	ldrb	r3, [r3, #18]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d003      	beq.n	8006374 <USB_HC_StartXfer+0x2ec>
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	7c9b      	ldrb	r3, [r3, #18]
 8006370:	2b03      	cmp	r3, #3
 8006372:	d117      	bne.n	80063a4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006378:	2b01      	cmp	r3, #1
 800637a:	d113      	bne.n	80063a4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	78db      	ldrb	r3, [r3, #3]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d10f      	bne.n	80063a4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	4413      	add	r3, r2
 800638c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	6a3a      	ldr	r2, [r7, #32]
 8006398:	440a      	add	r2, r1
 800639a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800639e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	7c9b      	ldrb	r3, [r3, #18]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d162      	bne.n	8006472 <USB_HC_StartXfer+0x3ea>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	78db      	ldrb	r3, [r3, #3]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d15e      	bne.n	8006472 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d858      	bhi.n	8006470 <USB_HC_StartXfer+0x3e8>
 80063be:	a201      	add	r2, pc, #4	@ (adr r2, 80063c4 <USB_HC_StartXfer+0x33c>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	080063f7 	.word	0x080063f7
 80063cc:	08006419 	.word	0x08006419
 80063d0:	0800643b 	.word	0x0800643b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	0151      	lsls	r1, r2, #5
 80063e6:	6a3a      	ldr	r2, [r7, #32]
 80063e8:	440a      	add	r2, r1
 80063ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f2:	6053      	str	r3, [r2, #4]
          break;
 80063f4:	e03d      	b.n	8006472 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	6a3a      	ldr	r2, [r7, #32]
 800640a:	440a      	add	r2, r1
 800640c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006410:	f043 030e 	orr.w	r3, r3, #14
 8006414:	6053      	str	r3, [r2, #4]
          break;
 8006416:	e02c      	b.n	8006472 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	6a3a      	ldr	r2, [r7, #32]
 800642c:	440a      	add	r2, r1
 800642e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006432:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006436:	6053      	str	r3, [r2, #4]
          break;
 8006438:	e01b      	b.n	8006472 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	0151      	lsls	r1, r2, #5
 800644c:	6a3a      	ldr	r2, [r7, #32]
 800644e:	440a      	add	r2, r1
 8006450:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006454:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006458:	6053      	str	r3, [r2, #4]
          break;
 800645a:	e00a      	b.n	8006472 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	4413      	add	r3, r2
 8006464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006468:	461a      	mov	r2, r3
 800646a:	2300      	movs	r3, #0
 800646c:	6053      	str	r3, [r2, #4]
 800646e:	e000      	b.n	8006472 <USB_HC_StartXfer+0x3ea>
          break;
 8006470:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	4413      	add	r3, r2
 800647a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006488:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	78db      	ldrb	r3, [r3, #3]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006498:	613b      	str	r3, [r7, #16]
 800649a:	e003      	b.n	80064a4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064a2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064aa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064b8:	461a      	mov	r2, r3
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e055      	b.n	8006574 <USB_HC_StartXfer+0x4ec>
 80064c8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	78db      	ldrb	r3, [r3, #3]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d14e      	bne.n	8006572 <USB_HC_StartXfer+0x4ea>
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d04a      	beq.n	8006572 <USB_HC_StartXfer+0x4ea>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	79db      	ldrb	r3, [r3, #7]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d146      	bne.n	8006572 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	7c9b      	ldrb	r3, [r3, #18]
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d831      	bhi.n	8006550 <USB_HC_StartXfer+0x4c8>
 80064ec:	a201      	add	r2, pc, #4	@ (adr r2, 80064f4 <USB_HC_StartXfer+0x46c>)
 80064ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f2:	bf00      	nop
 80064f4:	08006505 	.word	0x08006505
 80064f8:	08006529 	.word	0x08006529
 80064fc:	08006505 	.word	0x08006505
 8006500:	08006529 	.word	0x08006529
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	3303      	adds	r3, #3
 800650a:	089b      	lsrs	r3, r3, #2
 800650c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800650e:	8afa      	ldrh	r2, [r7, #22]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	b29b      	uxth	r3, r3
 8006516:	429a      	cmp	r2, r3
 8006518:	d91c      	bls.n	8006554 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f043 0220 	orr.w	r2, r3, #32
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	619a      	str	r2, [r3, #24]
        }
        break;
 8006526:	e015      	b.n	8006554 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	3303      	adds	r3, #3
 800652e:	089b      	lsrs	r3, r3, #2
 8006530:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006532:	8afa      	ldrh	r2, [r7, #22]
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	b29b      	uxth	r3, r3
 800653e:	429a      	cmp	r2, r3
 8006540:	d90a      	bls.n	8006558 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	619a      	str	r2, [r3, #24]
        }
        break;
 800654e:	e003      	b.n	8006558 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006550:	bf00      	nop
 8006552:	e002      	b.n	800655a <USB_HC_StartXfer+0x4d2>
        break;
 8006554:	bf00      	nop
 8006556:	e000      	b.n	800655a <USB_HC_StartXfer+0x4d2>
        break;
 8006558:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6999      	ldr	r1, [r3, #24]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	785a      	ldrb	r2, [r3, #1]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	b29b      	uxth	r3, r3
 8006568:	2000      	movs	r0, #0
 800656a:	9000      	str	r0, [sp, #0]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff f9c9 	bl	8005904 <USB_WritePacket>
  }

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3728      	adds	r7, #40	@ 0x28
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	b29b      	uxth	r3, r3
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800659e:	b480      	push	{r7}
 80065a0:	b089      	sub	sp, #36	@ 0x24
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80065ae:	78fb      	ldrb	r3, [r7, #3]
 80065b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	0c9b      	lsrs	r3, r3, #18
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	0fdb      	lsrs	r3, r3, #31
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	0fdb      	lsrs	r3, r3, #31
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b20      	cmp	r3, #32
 8006602:	d10d      	bne.n	8006620 <USB_HC_Halt+0x82>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <USB_HC_Halt+0x82>
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d002      	beq.n	800661c <USB_HC_Halt+0x7e>
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b03      	cmp	r3, #3
 800661a:	d101      	bne.n	8006620 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	e0d8      	b.n	80067d2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <USB_HC_Halt+0x8e>
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d173      	bne.n	8006714 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	4413      	add	r3, r2
 8006634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	440a      	add	r2, r1
 8006642:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006646:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800664a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d14a      	bne.n	80066ee <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d133      	bne.n	80066cc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	4413      	add	r3, r2
 800666c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	440a      	add	r2, r1
 800667a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800667e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006682:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	4413      	add	r3, r2
 800668c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	440a      	add	r2, r1
 800669a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800669e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066a2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	3301      	adds	r3, #1
 80066a8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066b0:	d82e      	bhi.n	8006710 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066c8:	d0ec      	beq.n	80066a4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066ca:	e081      	b.n	80067d0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066ea:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066ec:	e070      	b.n	80067d0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	440a      	add	r2, r1
 8006704:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006708:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800670c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800670e:	e05f      	b.n	80067d0 <USB_HC_Halt+0x232>
            break;
 8006710:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006712:	e05d      	b.n	80067d0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	440a      	add	r2, r1
 800672a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800672e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006732:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d133      	bne.n	80067ac <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4413      	add	r3, r2
 800674c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	0151      	lsls	r1, r2, #5
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	440a      	add	r2, r1
 800675a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800675e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006762:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	4413      	add	r3, r2
 800676c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	0151      	lsls	r1, r2, #5
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	440a      	add	r2, r1
 800677a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800677e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006782:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	3301      	adds	r3, #1
 8006788:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006790:	d81d      	bhi.n	80067ce <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067a8:	d0ec      	beq.n	8006784 <USB_HC_Halt+0x1e6>
 80067aa:	e011      	b.n	80067d0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	e000      	b.n	80067d0 <USB_HC_Halt+0x232>
          break;
 80067ce:	bf00      	nop
    }
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3724      	adds	r7, #36	@ 0x24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
	...

080067e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80067f4:	2301      	movs	r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	04da      	lsls	r2, r3, #19
 80067fc:	4b15      	ldr	r3, [pc, #84]	@ (8006854 <USB_DoPing+0x74>)
 80067fe:	4013      	ands	r3, r2
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	440a      	add	r2, r1
 8006808:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800680c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006810:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006828:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006830:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800683e:	461a      	mov	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	1ff80000 	.word	0x1ff80000

08006858 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7fe ff8c 	bl	800578a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006872:	2110      	movs	r1, #16
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7fe ffe5 	bl	8005844 <USB_FlushTxFifo>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff f80f 	bl	80058a8 <USB_FlushRxFifo>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006894:	2300      	movs	r3, #0
 8006896:	61bb      	str	r3, [r7, #24]
 8006898:	e01f      	b.n	80068da <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ce:	461a      	mov	r2, r3
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	3301      	adds	r3, #1
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b0f      	cmp	r3, #15
 80068de:	d9dc      	bls.n	800689a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068e0:	2300      	movs	r3, #0
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	e034      	b.n	8006950 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006904:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800690c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	4413      	add	r3, r2
 8006916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800691a:	461a      	mov	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800692c:	d80c      	bhi.n	8006948 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006940:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006944:	d0ec      	beq.n	8006920 <USB_StopHost+0xc8>
 8006946:	e000      	b.n	800694a <USB_StopHost+0xf2>
        break;
 8006948:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	3301      	adds	r3, #1
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	2b0f      	cmp	r3, #15
 8006954:	d9c7      	bls.n	80068e6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800695c:	461a      	mov	r2, r3
 800695e:	f04f 33ff 	mov.w	r3, #4294967295
 8006962:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f04f 32ff 	mov.w	r2, #4294967295
 800696a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7fe fefb 	bl	8005768 <USB_EnableGlobalInt>

  return ret;
 8006972:	7ffb      	ldrb	r3, [r7, #31]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3720      	adds	r7, #32
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800697c:	b590      	push	{r4, r7, lr}
 800697e:	b089      	sub	sp, #36	@ 0x24
 8006980:	af04      	add	r7, sp, #16
 8006982:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006984:	2301      	movs	r3, #1
 8006986:	2202      	movs	r2, #2
 8006988:	2102      	movs	r1, #2
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fc85 	bl	800729a <USBH_FindInterface>
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	2bff      	cmp	r3, #255	@ 0xff
 8006998:	d002      	beq.n	80069a0 <USBH_CDC_InterfaceInit+0x24>
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d901      	bls.n	80069a4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069a0:	2302      	movs	r3, #2
 80069a2:	e13d      	b.n	8006c20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fc5a 	bl	8007262 <USBH_SelectInterface>
 80069ae:	4603      	mov	r3, r0
 80069b0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80069b8:	2302      	movs	r3, #2
 80069ba:	e131      	b.n	8006c20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80069c2:	2050      	movs	r0, #80	@ 0x50
 80069c4:	f002 fb64 	bl	8009090 <malloc>
 80069c8:	4603      	mov	r3, r0
 80069ca:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069dc:	2302      	movs	r3, #2
 80069de:	e11f      	b.n	8006c20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069e0:	2250      	movs	r2, #80	@ 0x50
 80069e2:	2100      	movs	r1, #0
 80069e4:	68b8      	ldr	r0, [r7, #8]
 80069e6:	f002 fc11 	bl	800920c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	211a      	movs	r1, #26
 80069f0:	fb01 f303 	mul.w	r3, r1, r3
 80069f4:	4413      	add	r3, r2
 80069f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	b25b      	sxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	da15      	bge.n	8006a2e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	211a      	movs	r1, #26
 8006a08:	fb01 f303 	mul.w	r3, r1, r3
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a12:	781a      	ldrb	r2, [r3, #0]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	211a      	movs	r1, #26
 8006a1e:	fb01 f303 	mul.w	r3, r1, r3
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a28:	881a      	ldrh	r2, [r3, #0]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 ffbe 	bl	80089b6 <USBH_AllocPipe>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	7819      	ldrb	r1, [r3, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	7858      	ldrb	r0, [r3, #1]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	8952      	ldrh	r2, [r2, #10]
 8006a5a:	9202      	str	r2, [sp, #8]
 8006a5c:	2203      	movs	r2, #3
 8006a5e:	9201      	str	r2, [sp, #4]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	4623      	mov	r3, r4
 8006a64:	4602      	mov	r2, r0
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 ff76 	bl	8008958 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2200      	movs	r2, #0
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f002 fa85 	bl	8008f84 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	210a      	movs	r1, #10
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fc0a 	bl	800729a <USBH_FindInterface>
 8006a86:	4603      	mov	r3, r0
 8006a88:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
 8006a8c:	2bff      	cmp	r3, #255	@ 0xff
 8006a8e:	d002      	beq.n	8006a96 <USBH_CDC_InterfaceInit+0x11a>
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d901      	bls.n	8006a9a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a96:	2302      	movs	r3, #2
 8006a98:	e0c2      	b.n	8006c20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	211a      	movs	r1, #26
 8006aa0:	fb01 f303 	mul.w	r3, r1, r3
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	b25b      	sxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	da16      	bge.n	8006ae0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	211a      	movs	r1, #26
 8006ab8:	fb01 f303 	mul.w	r3, r1, r3
 8006abc:	4413      	add	r3, r2
 8006abe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ac2:	781a      	ldrb	r2, [r3, #0]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	211a      	movs	r1, #26
 8006ace:	fb01 f303 	mul.w	r3, r1, r3
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006ad8:	881a      	ldrh	r2, [r3, #0]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	835a      	strh	r2, [r3, #26]
 8006ade:	e015      	b.n	8006b0c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	211a      	movs	r1, #26
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006af0:	781a      	ldrb	r2, [r3, #0]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	211a      	movs	r1, #26
 8006afc:	fb01 f303 	mul.w	r3, r1, r3
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006b06:	881a      	ldrh	r2, [r3, #0]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	211a      	movs	r1, #26
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	4413      	add	r3, r2
 8006b18:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	b25b      	sxtb	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	da16      	bge.n	8006b52 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	211a      	movs	r1, #26
 8006b2a:	fb01 f303 	mul.w	r3, r1, r3
 8006b2e:	4413      	add	r3, r2
 8006b30:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b34:	781a      	ldrb	r2, [r3, #0]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	211a      	movs	r1, #26
 8006b40:	fb01 f303 	mul.w	r3, r1, r3
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b4a:	881a      	ldrh	r2, [r3, #0]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	835a      	strh	r2, [r3, #26]
 8006b50:	e015      	b.n	8006b7e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	211a      	movs	r1, #26
 8006b58:	fb01 f303 	mul.w	r3, r1, r3
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b62:	781a      	ldrb	r2, [r3, #0]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	211a      	movs	r1, #26
 8006b6e:	fb01 f303 	mul.w	r3, r1, r3
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b78:	881a      	ldrh	r2, [r3, #0]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	7b9b      	ldrb	r3, [r3, #14]
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 ff16 	bl	80089b6 <USBH_AllocPipe>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	7bdb      	ldrb	r3, [r3, #15]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 ff0c 	bl	80089b6 <USBH_AllocPipe>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	7b59      	ldrb	r1, [r3, #13]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	7b98      	ldrb	r0, [r3, #14]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	8b12      	ldrh	r2, [r2, #24]
 8006bbe:	9202      	str	r2, [sp, #8]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	9201      	str	r2, [sp, #4]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	4623      	mov	r3, r4
 8006bc8:	4602      	mov	r2, r0
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 fec4 	bl	8008958 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	7b19      	ldrb	r1, [r3, #12]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	7bd8      	ldrb	r0, [r3, #15]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	8b52      	ldrh	r2, [r2, #26]
 8006be8:	9202      	str	r2, [sp, #8]
 8006bea:	2202      	movs	r2, #2
 8006bec:	9201      	str	r2, [sp, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	4623      	mov	r3, r4
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 feaf 	bl	8008958 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	7b5b      	ldrb	r3, [r3, #13]
 8006c06:	2200      	movs	r2, #0
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f002 f9ba 	bl	8008f84 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	7b1b      	ldrb	r3, [r3, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f002 f9b3 	bl	8008f84 <USBH_LL_SetToggle>

  return USBH_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd90      	pop	{r4, r7, pc}

08006c28 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00e      	beq.n	8006c60 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 fea4 	bl	8008996 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fecf 	bl	80089f8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	7b1b      	ldrb	r3, [r3, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00e      	beq.n	8006c86 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	7b1b      	ldrb	r3, [r3, #12]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 fe91 	bl	8008996 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	7b1b      	ldrb	r3, [r3, #12]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 febc 	bl	80089f8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	7b5b      	ldrb	r3, [r3, #13]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00e      	beq.n	8006cac <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	7b5b      	ldrb	r3, [r3, #13]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 fe7e 	bl	8008996 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	7b5b      	ldrb	r3, [r3, #13]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 fea9 	bl	80089f8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f002 f9ed 	bl	80090a0 <free>
    phost->pActiveClass->pData = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ccc:	2200      	movs	r2, #0
 8006cce:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3340      	adds	r3, #64	@ 0x40
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f8b1 	bl	8006e5a <GetLineCoding>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d105      	bne.n	8006d0e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d08:	2102      	movs	r1, #2
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d20:	2301      	movs	r3, #1
 8006d22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d877      	bhi.n	8006e2c <USBH_CDC_Process+0x114>
 8006d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <USBH_CDC_Process+0x2c>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d59 	.word	0x08006d59
 8006d48:	08006d5f 	.word	0x08006d5f
 8006d4c:	08006d8f 	.word	0x08006d8f
 8006d50:	08006e03 	.word	0x08006e03
 8006d54:	08006e11 	.word	0x08006e11
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5c:	e06d      	b.n	8006e3a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f897 	bl	8006e98 <SetLineCoding>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d7c:	e058      	b.n	8006e30 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d055      	beq.n	8006e30 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2204      	movs	r2, #4
 8006d88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006d8c:	e050      	b.n	8006e30 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	3340      	adds	r3, #64	@ 0x40
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f860 	bl	8006e5a <GetLineCoding>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d126      	bne.n	8006df2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006db6:	791b      	ldrb	r3, [r3, #4]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d13b      	bne.n	8006e34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dc6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d133      	bne.n	8006e34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dd6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d12b      	bne.n	8006e34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006de4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d124      	bne.n	8006e34 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f958 	bl	80070a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006df0:	e020      	b.n	8006e34 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d01d      	beq.n	8006e34 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006e00:	e018      	b.n	8006e34 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f867 	bl	8006ed6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f8da 	bl	8006fc2 <CDC_ProcessReception>
      break;
 8006e0e:	e014      	b.n	8006e3a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e10:	2100      	movs	r1, #0
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 f81a 	bl	8007e4c <USBH_ClrFeature>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006e2a:	e005      	b.n	8006e38 <USBH_CDC_Process+0x120>

    default:
      break;
 8006e2c:	bf00      	nop
 8006e2e:	e004      	b.n	8006e3a <USBH_CDC_Process+0x122>
      break;
 8006e30:	bf00      	nop
 8006e32:	e002      	b.n	8006e3a <USBH_CDC_Process+0x122>
      break;
 8006e34:	bf00      	nop
 8006e36:	e000      	b.n	8006e3a <USBH_CDC_Process+0x122>
      break;
 8006e38:	bf00      	nop

  }

  return status;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b082      	sub	sp, #8
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	22a1      	movs	r2, #161	@ 0xa1
 8006e68:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2221      	movs	r2, #33	@ 0x21
 8006e6e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2207      	movs	r2, #7
 8006e80:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2207      	movs	r2, #7
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 fb14 	bl	80084b6 <USBH_CtlReq>
 8006e8e:	4603      	mov	r3, r0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2221      	movs	r2, #33	@ 0x21
 8006ea6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2207      	movs	r2, #7
 8006ebe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2207      	movs	r2, #7
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 faf5 	bl	80084b6 <USBH_CtlReq>
 8006ecc:	4603      	mov	r3, r0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b086      	sub	sp, #24
 8006eda:	af02      	add	r7, sp, #8
 8006edc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d002      	beq.n	8006efc <CDC_ProcessTransmission+0x26>
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d023      	beq.n	8006f42 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006efa:	e05e      	b.n	8006fba <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	8b12      	ldrh	r2, [r2, #24]
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d90b      	bls.n	8006f20 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	69d9      	ldr	r1, [r3, #28]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8b1a      	ldrh	r2, [r3, #24]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	7b5b      	ldrb	r3, [r3, #13]
 8006f14:	2001      	movs	r0, #1
 8006f16:	9000      	str	r0, [sp, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 fcda 	bl	80088d2 <USBH_BulkSendData>
 8006f1e:	e00b      	b.n	8006f38 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	7b5b      	ldrb	r3, [r3, #13]
 8006f2e:	2001      	movs	r0, #1
 8006f30:	9000      	str	r0, [sp, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f001 fccd 	bl	80088d2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006f40:	e03b      	b.n	8006fba <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	7b5b      	ldrb	r3, [r3, #13]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fff1 	bl	8008f30 <USBH_LL_GetURBState>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f52:	7afb      	ldrb	r3, [r7, #11]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d128      	bne.n	8006faa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	8b12      	ldrh	r2, [r2, #24]
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d90e      	bls.n	8006f82 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	8b12      	ldrh	r2, [r2, #24]
 8006f6c:	1a9a      	subs	r2, r3, r2
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	8b12      	ldrh	r2, [r2, #24]
 8006f7a:	441a      	add	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	61da      	str	r2, [r3, #28]
 8006f80:	e002      	b.n	8006f88 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d004      	beq.n	8006f9a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006f98:	e00e      	b.n	8006fb8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f868 	bl	8007078 <USBH_CDC_TransmitCallback>
      break;
 8006fa8:	e006      	b.n	8006fb8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006faa:	7afb      	ldrb	r3, [r7, #11]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d103      	bne.n	8006fb8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006fb8:	bf00      	nop
  }
}
 8006fba:	bf00      	nop
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b086      	sub	sp, #24
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d002      	beq.n	8006fe8 <CDC_ProcessReception+0x26>
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d00e      	beq.n	8007004 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006fe6:	e043      	b.n	8007070 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	6a19      	ldr	r1, [r3, #32]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	8b5a      	ldrh	r2, [r3, #26]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	7b1b      	ldrb	r3, [r3, #12]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fc91 	bl	800891c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2204      	movs	r2, #4
 8006ffe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007002:	e035      	b.n	8007070 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	7b1b      	ldrb	r3, [r3, #12]
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 ff90 	bl	8008f30 <USBH_LL_GetURBState>
 8007010:	4603      	mov	r3, r0
 8007012:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007014:	7cfb      	ldrb	r3, [r7, #19]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d129      	bne.n	800706e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	7b1b      	ldrb	r3, [r3, #12]
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f001 fef3 	bl	8008e0c <USBH_LL_GetLastXferSize>
 8007026:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	429a      	cmp	r2, r3
 8007030:	d016      	beq.n	8007060 <CDC_ProcessReception+0x9e>
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	8b5b      	ldrh	r3, [r3, #26]
 8007036:	461a      	mov	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4293      	cmp	r3, r2
 800703c:	d110      	bne.n	8007060 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1ad2      	subs	r2, r2, r3
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	6a1a      	ldr	r2, [r3, #32]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	441a      	add	r2, r3
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2203      	movs	r2, #3
 800705a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800705e:	e006      	b.n	800706e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f80f 	bl	800708c <USBH_CDC_ReceiveCallback>
      break;
 800706e:	bf00      	nop
  }
}
 8007070:	bf00      	nop
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80070c8:	2302      	movs	r3, #2
 80070ca:	e029      	b.n	8007120 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	79fa      	ldrb	r2, [r7, #7]
 80070d0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f81f 	bl	8007128 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f001 fdc3 	bl	8008ca4 <USBH_LL_Init>

  return USBH_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	e009      	b.n	800714e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	33e0      	adds	r3, #224	@ 0xe0
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	2200      	movs	r2, #0
 8007146:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3301      	adds	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b0f      	cmp	r3, #15
 8007152:	d9f2      	bls.n	800713a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007154:	2300      	movs	r3, #0
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	e009      	b.n	800716e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007164:	2200      	movs	r2, #0
 8007166:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	3301      	adds	r3, #1
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007174:	d3f1      	bcc.n	800715a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2240      	movs	r2, #64	@ 0x40
 800719a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	331c      	adds	r3, #28
 80071c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80071ca:	2100      	movs	r1, #0
 80071cc:	4618      	mov	r0, r3
 80071ce:	f002 f81d 	bl	800920c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80071d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071dc:	2100      	movs	r1, #0
 80071de:	4618      	mov	r0, r3
 80071e0:	f002 f814 	bl	800920c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80071ea:	2212      	movs	r2, #18
 80071ec:	2100      	movs	r1, #0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f002 f80c 	bl	800920c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80071fa:	223e      	movs	r2, #62	@ 0x3e
 80071fc:	2100      	movs	r1, #0
 80071fe:	4618      	mov	r0, r3
 8007200:	f002 f804 	bl	800920c <memset>

  return USBH_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800720e:	b480      	push	{r7}
 8007210:	b085      	sub	sp, #20
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d016      	beq.n	8007250 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10e      	bne.n	800724a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007232:	1c59      	adds	r1, r3, #1
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	33de      	adds	r3, #222	@ 0xde
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
 8007248:	e004      	b.n	8007254 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800724a:	2302      	movs	r3, #2
 800724c:	73fb      	strb	r3, [r7, #15]
 800724e:	e001      	b.n	8007254 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007250:	2302      	movs	r3, #2
 8007252:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	460b      	mov	r3, r1
 800726c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007278:	78fa      	ldrb	r2, [r7, #3]
 800727a:	429a      	cmp	r2, r3
 800727c:	d204      	bcs.n	8007288 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	78fa      	ldrb	r2, [r7, #3]
 8007282:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007286:	e001      	b.n	800728c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007288:	2302      	movs	r3, #2
 800728a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800729a:	b480      	push	{r7}
 800729c:	b087      	sub	sp, #28
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	4608      	mov	r0, r1
 80072a4:	4611      	mov	r1, r2
 80072a6:	461a      	mov	r2, r3
 80072a8:	4603      	mov	r3, r0
 80072aa:	70fb      	strb	r3, [r7, #3]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70bb      	strb	r3, [r7, #2]
 80072b0:	4613      	mov	r3, r2
 80072b2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80072b8:	2300      	movs	r3, #0
 80072ba:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80072c2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072c4:	e025      	b.n	8007312 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	221a      	movs	r2, #26
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	3308      	adds	r3, #8
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4413      	add	r3, r2
 80072d4:	3302      	adds	r3, #2
 80072d6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	795b      	ldrb	r3, [r3, #5]
 80072dc:	78fa      	ldrb	r2, [r7, #3]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d002      	beq.n	80072e8 <USBH_FindInterface+0x4e>
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	2bff      	cmp	r3, #255	@ 0xff
 80072e6:	d111      	bne.n	800730c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80072ec:	78ba      	ldrb	r2, [r7, #2]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d002      	beq.n	80072f8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072f2:	78bb      	ldrb	r3, [r7, #2]
 80072f4:	2bff      	cmp	r3, #255	@ 0xff
 80072f6:	d109      	bne.n	800730c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072fc:	787a      	ldrb	r2, [r7, #1]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d002      	beq.n	8007308 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007302:	787b      	ldrb	r3, [r7, #1]
 8007304:	2bff      	cmp	r3, #255	@ 0xff
 8007306:	d101      	bne.n	800730c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	e006      	b.n	800731a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800730c:	7dfb      	ldrb	r3, [r7, #23]
 800730e:	3301      	adds	r3, #1
 8007310:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007312:	7dfb      	ldrb	r3, [r7, #23]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d9d6      	bls.n	80072c6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007318:	23ff      	movs	r3, #255	@ 0xff
}
 800731a:	4618      	mov	r0, r3
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 fcf4 	bl	8008d1c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007334:	2101      	movs	r1, #1
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fe0d 	bl	8008f56 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b088      	sub	sp, #32
 800734c:	af04      	add	r7, sp, #16
 800734e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007350:	2302      	movs	r3, #2
 8007352:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	d102      	bne.n	800736a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2203      	movs	r2, #3
 8007368:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b0b      	cmp	r3, #11
 8007372:	f200 81bb 	bhi.w	80076ec <USBH_Process+0x3a4>
 8007376:	a201      	add	r2, pc, #4	@ (adr r2, 800737c <USBH_Process+0x34>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	080073ad 	.word	0x080073ad
 8007380:	080073df 	.word	0x080073df
 8007384:	08007447 	.word	0x08007447
 8007388:	08007687 	.word	0x08007687
 800738c:	080076ed 	.word	0x080076ed
 8007390:	080074e7 	.word	0x080074e7
 8007394:	0800762d 	.word	0x0800762d
 8007398:	0800751d 	.word	0x0800751d
 800739c:	0800753d 	.word	0x0800753d
 80073a0:	0800755b 	.word	0x0800755b
 80073a4:	0800759f 	.word	0x0800759f
 80073a8:	0800766f 	.word	0x0800766f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 819b 	beq.w	80076f0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80073c0:	20c8      	movs	r0, #200	@ 0xc8
 80073c2:	f001 fe12 	bl	8008fea <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 fd05 	bl	8008dd6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073dc:	e188      	b.n	80076f0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d107      	bne.n	80073f8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073f6:	e18a      	b.n	800770e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80073fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007402:	d914      	bls.n	800742e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800740a:	3301      	adds	r3, #1
 800740c:	b2da      	uxtb	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800741a:	2b03      	cmp	r3, #3
 800741c:	d903      	bls.n	8007426 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	220d      	movs	r2, #13
 8007422:	701a      	strb	r2, [r3, #0]
      break;
 8007424:	e173      	b.n	800770e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
      break;
 800742c:	e16f      	b.n	800770e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007434:	f103 020a 	add.w	r2, r3, #10
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800743e:	200a      	movs	r0, #10
 8007440:	f001 fdd3 	bl	8008fea <USBH_Delay>
      break;
 8007444:	e163      	b.n	800770e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007456:	2104      	movs	r1, #4
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800745c:	2064      	movs	r0, #100	@ 0x64
 800745e:	f001 fdc4 	bl	8008fea <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 fc90 	bl	8008d88 <USBH_LL_GetSpeed>
 8007468:	4603      	mov	r3, r0
 800746a:	461a      	mov	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2205      	movs	r2, #5
 8007476:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007478:	2100      	movs	r1, #0
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 fa9b 	bl	80089b6 <USBH_AllocPipe>
 8007480:	4603      	mov	r3, r0
 8007482:	461a      	mov	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007488:	2180      	movs	r1, #128	@ 0x80
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 fa93 	bl	80089b6 <USBH_AllocPipe>
 8007490:	4603      	mov	r3, r0
 8007492:	461a      	mov	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	7919      	ldrb	r1, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80074ac:	9202      	str	r2, [sp, #8]
 80074ae:	2200      	movs	r2, #0
 80074b0:	9201      	str	r2, [sp, #4]
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	4603      	mov	r3, r0
 80074b6:	2280      	movs	r2, #128	@ 0x80
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 fa4d 	bl	8008958 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	7959      	ldrb	r1, [r3, #5]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80074d2:	9202      	str	r2, [sp, #8]
 80074d4:	2200      	movs	r2, #0
 80074d6:	9201      	str	r2, [sp, #4]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	4603      	mov	r3, r0
 80074dc:	2200      	movs	r2, #0
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 fa3a 	bl	8008958 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074e4:	e113      	b.n	800770e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f916 	bl	8007718 <USBH_HandleEnum>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 80fd 	bne.w	80076f4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007508:	2b01      	cmp	r3, #1
 800750a:	d103      	bne.n	8007514 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2208      	movs	r2, #8
 8007510:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007512:	e0ef      	b.n	80076f4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2207      	movs	r2, #7
 8007518:	701a      	strb	r2, [r3, #0]
      break;
 800751a:	e0eb      	b.n	80076f4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80e8 	beq.w	80076f8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800752e:	2101      	movs	r1, #1
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2208      	movs	r2, #8
 8007538:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800753a:	e0dd      	b.n	80076f8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fc3a 	bl	8007dbe <USBH_SetCfg>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 80d5 	bne.w	80076fc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2209      	movs	r2, #9
 8007556:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007558:	e0d0      	b.n	80076fc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d016      	beq.n	8007596 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007568:	2101      	movs	r1, #1
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fc4a 	bl	8007e04 <USBH_SetFeature>
 8007570:	4603      	mov	r3, r0
 8007572:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d103      	bne.n	8007584 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	220a      	movs	r2, #10
 8007580:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007582:	e0bd      	b.n	8007700 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b03      	cmp	r3, #3
 800758a:	f040 80b9 	bne.w	8007700 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	220a      	movs	r2, #10
 8007592:	701a      	strb	r2, [r3, #0]
      break;
 8007594:	e0b4      	b.n	8007700 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	220a      	movs	r2, #10
 800759a:	701a      	strb	r2, [r3, #0]
      break;
 800759c:	e0b0      	b.n	8007700 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 80ad 	beq.w	8007704 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]
 80075b6:	e016      	b.n	80075e6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80075b8:	7bfa      	ldrb	r2, [r7, #15]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	32de      	adds	r2, #222	@ 0xde
 80075be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c2:	791a      	ldrb	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d108      	bne.n	80075e0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80075ce:	7bfa      	ldrb	r2, [r7, #15]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	32de      	adds	r2, #222	@ 0xde
 80075d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80075de:	e005      	b.n	80075ec <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	3301      	adds	r3, #1
 80075e4:	73fb      	strb	r3, [r7, #15]
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0e5      	beq.n	80075b8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d016      	beq.n	8007624 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	4798      	blx	r3
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d109      	bne.n	800761c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2206      	movs	r2, #6
 800760c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007614:	2103      	movs	r1, #3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800761a:	e073      	b.n	8007704 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	220d      	movs	r2, #13
 8007620:	701a      	strb	r2, [r3, #0]
      break;
 8007622:	e06f      	b.n	8007704 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	220d      	movs	r2, #13
 8007628:	701a      	strb	r2, [r3, #0]
      break;
 800762a:	e06b      	b.n	8007704 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007632:	2b00      	cmp	r3, #0
 8007634:	d017      	beq.n	8007666 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
 8007642:	4603      	mov	r3, r0
 8007644:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d103      	bne.n	8007656 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	220b      	movs	r2, #11
 8007652:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007654:	e058      	b.n	8007708 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d154      	bne.n	8007708 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	220d      	movs	r2, #13
 8007662:	701a      	strb	r2, [r3, #0]
      break;
 8007664:	e050      	b.n	8007708 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	220d      	movs	r2, #13
 800766a:	701a      	strb	r2, [r3, #0]
      break;
 800766c:	e04c      	b.n	8007708 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d049      	beq.n	800770c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
      }
      break;
 8007684:	e042      	b.n	800770c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff fd4a 	bl	8007128 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076c2:	2105      	movs	r1, #5
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d107      	bne.n	80076e4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff fe22 	bl	8007326 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076e2:	e014      	b.n	800770e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fb19 	bl	8008d1c <USBH_LL_Start>
      break;
 80076ea:	e010      	b.n	800770e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80076ec:	bf00      	nop
 80076ee:	e00e      	b.n	800770e <USBH_Process+0x3c6>
      break;
 80076f0:	bf00      	nop
 80076f2:	e00c      	b.n	800770e <USBH_Process+0x3c6>
      break;
 80076f4:	bf00      	nop
 80076f6:	e00a      	b.n	800770e <USBH_Process+0x3c6>
    break;
 80076f8:	bf00      	nop
 80076fa:	e008      	b.n	800770e <USBH_Process+0x3c6>
      break;
 80076fc:	bf00      	nop
 80076fe:	e006      	b.n	800770e <USBH_Process+0x3c6>
      break;
 8007700:	bf00      	nop
 8007702:	e004      	b.n	800770e <USBH_Process+0x3c6>
      break;
 8007704:	bf00      	nop
 8007706:	e002      	b.n	800770e <USBH_Process+0x3c6>
      break;
 8007708:	bf00      	nop
 800770a:	e000      	b.n	800770e <USBH_Process+0x3c6>
      break;
 800770c:	bf00      	nop
  }
  return USBH_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af04      	add	r7, sp, #16
 800771e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007720:	2301      	movs	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007724:	2301      	movs	r3, #1
 8007726:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	785b      	ldrb	r3, [r3, #1]
 800772c:	2b07      	cmp	r3, #7
 800772e:	f200 81bd 	bhi.w	8007aac <USBH_HandleEnum+0x394>
 8007732:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <USBH_HandleEnum+0x20>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	08007759 	.word	0x08007759
 800773c:	08007813 	.word	0x08007813
 8007740:	0800787d 	.word	0x0800787d
 8007744:	08007907 	.word	0x08007907
 8007748:	08007971 	.word	0x08007971
 800774c:	080079e1 	.word	0x080079e1
 8007750:	08007a27 	.word	0x08007a27
 8007754:	08007a6d 	.word	0x08007a6d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007758:	2108      	movs	r1, #8
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa4c 	bl	8007bf8 <USBH_Get_DevDesc>
 8007760:	4603      	mov	r3, r0
 8007762:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d12e      	bne.n	80077c8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	7919      	ldrb	r1, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800778e:	9202      	str	r2, [sp, #8]
 8007790:	2200      	movs	r2, #0
 8007792:	9201      	str	r2, [sp, #4]
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	4603      	mov	r3, r0
 8007798:	2280      	movs	r2, #128	@ 0x80
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 f8dc 	bl	8008958 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	7959      	ldrb	r1, [r3, #5]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077b4:	9202      	str	r2, [sp, #8]
 80077b6:	2200      	movs	r2, #0
 80077b8:	9201      	str	r2, [sp, #4]
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	4603      	mov	r3, r0
 80077be:	2200      	movs	r2, #0
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 f8c9 	bl	8008958 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077c6:	e173      	b.n	8007ab0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	f040 8170 	bne.w	8007ab0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80077d6:	3301      	adds	r3, #1
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d903      	bls.n	80077f2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	220d      	movs	r2, #13
 80077ee:	701a      	strb	r2, [r3, #0]
      break;
 80077f0:	e15e      	b.n	8007ab0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	795b      	ldrb	r3, [r3, #5]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 f8fd 	bl	80089f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	791b      	ldrb	r3, [r3, #4]
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f001 f8f7 	bl	80089f8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
      break;
 8007810:	e14e      	b.n	8007ab0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007812:	2112      	movs	r1, #18
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f9ef 	bl	8007bf8 <USBH_Get_DevDesc>
 800781a:	4603      	mov	r3, r0
 800781c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d103      	bne.n	800782c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800782a:	e143      	b.n	8007ab4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800782c:	7bbb      	ldrb	r3, [r7, #14]
 800782e:	2b03      	cmp	r3, #3
 8007830:	f040 8140 	bne.w	8007ab4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800783a:	3301      	adds	r3, #1
 800783c:	b2da      	uxtb	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800784a:	2b03      	cmp	r3, #3
 800784c:	d903      	bls.n	8007856 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	220d      	movs	r2, #13
 8007852:	701a      	strb	r2, [r3, #0]
      break;
 8007854:	e12e      	b.n	8007ab4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	795b      	ldrb	r3, [r3, #5]
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 f8cb 	bl	80089f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	791b      	ldrb	r3, [r3, #4]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 f8c5 	bl	80089f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	701a      	strb	r2, [r3, #0]
      break;
 800787a:	e11b      	b.n	8007ab4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800787c:	2101      	movs	r1, #1
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fa79 	bl	8007d76 <USBH_SetAddress>
 8007884:	4603      	mov	r3, r0
 8007886:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d130      	bne.n	80078f0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800788e:	2002      	movs	r0, #2
 8007890:	f001 fbab 	bl	8008fea <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2203      	movs	r2, #3
 80078a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	7919      	ldrb	r1, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80078b6:	9202      	str	r2, [sp, #8]
 80078b8:	2200      	movs	r2, #0
 80078ba:	9201      	str	r2, [sp, #4]
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	4603      	mov	r3, r0
 80078c0:	2280      	movs	r2, #128	@ 0x80
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 f848 	bl	8008958 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	7959      	ldrb	r1, [r3, #5]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078dc:	9202      	str	r2, [sp, #8]
 80078de:	2200      	movs	r2, #0
 80078e0:	9201      	str	r2, [sp, #4]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	4603      	mov	r3, r0
 80078e6:	2200      	movs	r2, #0
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f835 	bl	8008958 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078ee:	e0e3      	b.n	8007ab8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	f040 80e0 	bne.w	8007ab8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	220d      	movs	r2, #13
 80078fc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	705a      	strb	r2, [r3, #1]
      break;
 8007904:	e0d8      	b.n	8007ab8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007906:	2109      	movs	r1, #9
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f9a1 	bl	8007c50 <USBH_Get_CfgDesc>
 800790e:	4603      	mov	r3, r0
 8007910:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d103      	bne.n	8007920 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2204      	movs	r2, #4
 800791c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800791e:	e0cd      	b.n	8007abc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	2b03      	cmp	r3, #3
 8007924:	f040 80ca 	bne.w	8007abc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800792e:	3301      	adds	r3, #1
 8007930:	b2da      	uxtb	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800793e:	2b03      	cmp	r3, #3
 8007940:	d903      	bls.n	800794a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	220d      	movs	r2, #13
 8007946:	701a      	strb	r2, [r3, #0]
      break;
 8007948:	e0b8      	b.n	8007abc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	795b      	ldrb	r3, [r3, #5]
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 f851 	bl	80089f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	791b      	ldrb	r3, [r3, #4]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 f84b 	bl	80089f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
      break;
 800796e:	e0a5      	b.n	8007abc <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f969 	bl	8007c50 <USBH_Get_CfgDesc>
 800797e:	4603      	mov	r3, r0
 8007980:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d103      	bne.n	8007990 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2205      	movs	r2, #5
 800798c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800798e:	e097      	b.n	8007ac0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b03      	cmp	r3, #3
 8007994:	f040 8094 	bne.w	8007ac0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800799e:	3301      	adds	r3, #1
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d903      	bls.n	80079ba <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	220d      	movs	r2, #13
 80079b6:	701a      	strb	r2, [r3, #0]
      break;
 80079b8:	e082      	b.n	8007ac0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	795b      	ldrb	r3, [r3, #5]
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 f819 	bl	80089f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	791b      	ldrb	r3, [r3, #4]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 f813 	bl	80089f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	701a      	strb	r2, [r3, #0]
      break;
 80079de:	e06f      	b.n	8007ac0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d019      	beq.n	8007a1e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079f6:	23ff      	movs	r3, #255	@ 0xff
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f953 	bl	8007ca4 <USBH_Get_StringDesc>
 80079fe:	4603      	mov	r3, r0
 8007a00:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d103      	bne.n	8007a10 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2206      	movs	r2, #6
 8007a0c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a0e:	e059      	b.n	8007ac4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d156      	bne.n	8007ac4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2206      	movs	r2, #6
 8007a1a:	705a      	strb	r2, [r3, #1]
      break;
 8007a1c:	e052      	b.n	8007ac4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2206      	movs	r2, #6
 8007a22:	705a      	strb	r2, [r3, #1]
      break;
 8007a24:	e04e      	b.n	8007ac4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d019      	beq.n	8007a64 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a3c:	23ff      	movs	r3, #255	@ 0xff
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f930 	bl	8007ca4 <USBH_Get_StringDesc>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d103      	bne.n	8007a56 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2207      	movs	r2, #7
 8007a52:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a54:	e038      	b.n	8007ac8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d135      	bne.n	8007ac8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2207      	movs	r2, #7
 8007a60:	705a      	strb	r2, [r3, #1]
      break;
 8007a62:	e031      	b.n	8007ac8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2207      	movs	r2, #7
 8007a68:	705a      	strb	r2, [r3, #1]
      break;
 8007a6a:	e02d      	b.n	8007ac8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d017      	beq.n	8007aa6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a82:	23ff      	movs	r3, #255	@ 0xff
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f90d 	bl	8007ca4 <USBH_Get_StringDesc>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d102      	bne.n	8007a9a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a98:	e018      	b.n	8007acc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d115      	bne.n	8007acc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa4:	e012      	b.n	8007acc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8007aaa:	e00f      	b.n	8007acc <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007aac:	bf00      	nop
 8007aae:	e00e      	b.n	8007ace <USBH_HandleEnum+0x3b6>
      break;
 8007ab0:	bf00      	nop
 8007ab2:	e00c      	b.n	8007ace <USBH_HandleEnum+0x3b6>
      break;
 8007ab4:	bf00      	nop
 8007ab6:	e00a      	b.n	8007ace <USBH_HandleEnum+0x3b6>
      break;
 8007ab8:	bf00      	nop
 8007aba:	e008      	b.n	8007ace <USBH_HandleEnum+0x3b6>
      break;
 8007abc:	bf00      	nop
 8007abe:	e006      	b.n	8007ace <USBH_HandleEnum+0x3b6>
      break;
 8007ac0:	bf00      	nop
 8007ac2:	e004      	b.n	8007ace <USBH_HandleEnum+0x3b6>
      break;
 8007ac4:	bf00      	nop
 8007ac6:	e002      	b.n	8007ace <USBH_HandleEnum+0x3b6>
      break;
 8007ac8:	bf00      	nop
 8007aca:	e000      	b.n	8007ace <USBH_HandleEnum+0x3b6>
      break;
 8007acc:	bf00      	nop
  }
  return Status;
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f804 	bl	8007b1a <USBH_HandleSof>
}
 8007b12:	bf00      	nop
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b0b      	cmp	r3, #11
 8007b2a:	d10a      	bne.n	8007b42 <USBH_HandleSof+0x28>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	4798      	blx	r3
  }
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007b5a:	bf00      	nop
}
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007b76:	bf00      	nop
}
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 f8be 	bl	8008d52 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	791b      	ldrb	r3, [r3, #4]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 ff0b 	bl	80089f8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	795b      	ldrb	r3, [r3, #5]
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 ff05 	bl	80089f8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007c04:	887b      	ldrh	r3, [r7, #2]
 8007c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c0a:	d901      	bls.n	8007c10 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e01b      	b.n	8007c48 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007c16:	887b      	ldrh	r3, [r7, #2]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c20:	2100      	movs	r1, #0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f872 	bl	8007d0c <USBH_GetDescriptor>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007c38:	887a      	ldrh	r2, [r7, #2]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f929 	bl	8007e94 <USBH_ParseDevDesc>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af02      	add	r7, sp, #8
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	331c      	adds	r3, #28
 8007c60:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007c62:	887b      	ldrh	r3, [r7, #2]
 8007c64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c68:	d901      	bls.n	8007c6e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e016      	b.n	8007c9c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007c6e:	887b      	ldrh	r3, [r7, #2]
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c78:	2100      	movs	r1, #0
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f846 	bl	8007d0c <USBH_GetDescriptor>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d107      	bne.n	8007c9a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007c8a:	887b      	ldrh	r3, [r7, #2]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f9af 	bl	8007ff4 <USBH_ParseCfgDesc>
 8007c96:	4603      	mov	r3, r0
 8007c98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	607a      	str	r2, [r7, #4]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	72fb      	strb	r3, [r7, #11]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007cb8:	893b      	ldrh	r3, [r7, #8]
 8007cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cbe:	d802      	bhi.n	8007cc6 <USBH_Get_StringDesc+0x22>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e01c      	b.n	8007d04 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007cd2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007cda:	893b      	ldrh	r3, [r7, #8]
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 f812 	bl	8007d0c <USBH_GetDescriptor>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d107      	bne.n	8007d02 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007cf8:	893a      	ldrh	r2, [r7, #8]
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 fb8d 	bl	800841c <USBH_ParseStringDesc>
  }

  return status;
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	607b      	str	r3, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	72fb      	strb	r3, [r7, #11]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	789b      	ldrb	r3, [r3, #2]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d11c      	bne.n	8007d60 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007d26:	7afb      	ldrb	r3, [r7, #11]
 8007d28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2206      	movs	r2, #6
 8007d36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	893a      	ldrh	r2, [r7, #8]
 8007d3c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007d3e:	893b      	ldrh	r3, [r7, #8]
 8007d40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007d44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d48:	d104      	bne.n	8007d54 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f240 4209 	movw	r2, #1033	@ 0x409
 8007d50:	829a      	strh	r2, [r3, #20]
 8007d52:	e002      	b.n	8007d5a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8b3a      	ldrh	r2, [r7, #24]
 8007d5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007d60:	8b3b      	ldrh	r3, [r7, #24]
 8007d62:	461a      	mov	r2, r3
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 fba5 	bl	80084b6 <USBH_CtlReq>
 8007d6c:	4603      	mov	r3, r0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	789b      	ldrb	r3, [r3, #2]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d10f      	bne.n	8007daa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2205      	movs	r2, #5
 8007d94:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007daa:	2200      	movs	r2, #0
 8007dac:	2100      	movs	r1, #0
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fb81 	bl	80084b6 <USBH_CtlReq>
 8007db4:	4603      	mov	r3, r0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b082      	sub	sp, #8
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	789b      	ldrb	r3, [r3, #2]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d10e      	bne.n	8007df0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2209      	movs	r2, #9
 8007ddc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	887a      	ldrh	r2, [r7, #2]
 8007de2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007df0:	2200      	movs	r2, #0
 8007df2:	2100      	movs	r1, #0
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fb5e 	bl	80084b6 <USBH_CtlReq>
 8007dfa:	4603      	mov	r3, r0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	789b      	ldrb	r3, [r3, #2]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d10f      	bne.n	8007e38 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2203      	movs	r2, #3
 8007e22:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fb3a 	bl	80084b6 <USBH_CtlReq>
 8007e42:	4603      	mov	r3, r0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	789b      	ldrb	r3, [r3, #2]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d10f      	bne.n	8007e80 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e80:	2200      	movs	r2, #0
 8007e82:	2100      	movs	r1, #0
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fb16 	bl	80084b6 <USBH_CtlReq>
 8007e8a:	4603      	mov	r3, r0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007ea8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e094      	b.n	8007fe2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	781a      	ldrb	r2, [r3, #0]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	785a      	ldrb	r2, [r3, #1]
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	3302      	adds	r3, #2
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	3303      	adds	r3, #3
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	4313      	orrs	r3, r2
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	791a      	ldrb	r2, [r3, #4]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	795a      	ldrb	r2, [r3, #5]
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	799a      	ldrb	r2, [r3, #6]
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	79da      	ldrb	r2, [r3, #7]
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d11b      	bne.n	8007f4e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	79db      	ldrb	r3, [r3, #7]
 8007f1a:	2b20      	cmp	r3, #32
 8007f1c:	dc0f      	bgt.n	8007f3e <USBH_ParseDevDesc+0xaa>
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	db0f      	blt.n	8007f42 <USBH_ParseDevDesc+0xae>
 8007f22:	3b08      	subs	r3, #8
 8007f24:	4a32      	ldr	r2, [pc, #200]	@ (8007ff0 <USBH_ParseDevDesc+0x15c>)
 8007f26:	fa22 f303 	lsr.w	r3, r2, r3
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	bf14      	ite	ne
 8007f32:	2301      	movne	r3, #1
 8007f34:	2300      	moveq	r3, #0
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d106      	bne.n	8007f4a <USBH_ParseDevDesc+0xb6>
 8007f3c:	e001      	b.n	8007f42 <USBH_ParseDevDesc+0xae>
 8007f3e:	2b40      	cmp	r3, #64	@ 0x40
 8007f40:	d003      	beq.n	8007f4a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2208      	movs	r2, #8
 8007f46:	71da      	strb	r2, [r3, #7]
        break;
 8007f48:	e000      	b.n	8007f4c <USBH_ParseDevDesc+0xb8>
        break;
 8007f4a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007f4c:	e00e      	b.n	8007f6c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d107      	bne.n	8007f68 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	79db      	ldrb	r3, [r3, #7]
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d005      	beq.n	8007f6c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2208      	movs	r2, #8
 8007f64:	71da      	strb	r2, [r3, #7]
 8007f66:	e001      	b.n	8007f6c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	2b08      	cmp	r3, #8
 8007f70:	d936      	bls.n	8007fe0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	3308      	adds	r3, #8
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	3309      	adds	r3, #9
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	4313      	orrs	r3, r2
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	330a      	adds	r3, #10
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	330b      	adds	r3, #11
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	021b      	lsls	r3, r3, #8
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	330c      	adds	r3, #12
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	461a      	mov	r2, r3
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	330d      	adds	r3, #13
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	021b      	lsls	r3, r3, #8
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	7b9a      	ldrb	r2, [r3, #14]
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	7bda      	ldrb	r2, [r3, #15]
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	7c1a      	ldrb	r2, [r3, #16]
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	7c5a      	ldrb	r2, [r3, #17]
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	01000101 	.word	0x01000101

08007ff4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08c      	sub	sp, #48	@ 0x30
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008008:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008022:	2302      	movs	r3, #2
 8008024:	e0da      	b.n	80081dc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800802a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	2b09      	cmp	r3, #9
 8008030:	d002      	beq.n	8008038 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008034:	2209      	movs	r2, #9
 8008036:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	781a      	ldrb	r2, [r3, #0]
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	785a      	ldrb	r2, [r3, #1]
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	3302      	adds	r3, #2
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	3303      	adds	r3, #3
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	021b      	lsls	r3, r3, #8
 8008058:	b29b      	uxth	r3, r3
 800805a:	4313      	orrs	r3, r2
 800805c:	b29b      	uxth	r3, r3
 800805e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008062:	bf28      	it	cs
 8008064:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008068:	b29a      	uxth	r2, r3
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	791a      	ldrb	r2, [r3, #4]
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	795a      	ldrb	r2, [r3, #5]
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	799a      	ldrb	r2, [r3, #6]
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	79da      	ldrb	r2, [r3, #7]
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	7a1a      	ldrb	r2, [r3, #8]
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	2b09      	cmp	r3, #9
 800809a:	f240 809d 	bls.w	80081d8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800809e:	2309      	movs	r3, #9
 80080a0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080a6:	e081      	b.n	80081ac <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080a8:	f107 0316 	add.w	r3, r7, #22
 80080ac:	4619      	mov	r1, r3
 80080ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080b0:	f000 f9e7 	bl	8008482 <USBH_GetNextDesc>
 80080b4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80080b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b8:	785b      	ldrb	r3, [r3, #1]
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d176      	bne.n	80081ac <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80080be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b09      	cmp	r3, #9
 80080c4:	d002      	beq.n	80080cc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80080c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c8:	2209      	movs	r2, #9
 80080ca:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80080cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080d0:	221a      	movs	r2, #26
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	3308      	adds	r3, #8
 80080d8:	6a3a      	ldr	r2, [r7, #32]
 80080da:	4413      	add	r3, r2
 80080dc:	3302      	adds	r3, #2
 80080de:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80080e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080e2:	69f8      	ldr	r0, [r7, #28]
 80080e4:	f000 f87e 	bl	80081e4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080f2:	e043      	b.n	800817c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080f4:	f107 0316 	add.w	r3, r7, #22
 80080f8:	4619      	mov	r1, r3
 80080fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080fc:	f000 f9c1 	bl	8008482 <USBH_GetNextDesc>
 8008100:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008104:	785b      	ldrb	r3, [r3, #1]
 8008106:	2b05      	cmp	r3, #5
 8008108:	d138      	bne.n	800817c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	795b      	ldrb	r3, [r3, #5]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d113      	bne.n	800813a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008116:	2b02      	cmp	r3, #2
 8008118:	d003      	beq.n	8008122 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	799b      	ldrb	r3, [r3, #6]
 800811e:	2b03      	cmp	r3, #3
 8008120:	d10b      	bne.n	800813a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	79db      	ldrb	r3, [r3, #7]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10b      	bne.n	8008142 <USBH_ParseCfgDesc+0x14e>
 800812a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b09      	cmp	r3, #9
 8008130:	d007      	beq.n	8008142 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008134:	2209      	movs	r2, #9
 8008136:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008138:	e003      	b.n	8008142 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800813a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813c:	2207      	movs	r2, #7
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	e000      	b.n	8008144 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008142:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008148:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800814c:	3201      	adds	r2, #1
 800814e:	00d2      	lsls	r2, r2, #3
 8008150:	211a      	movs	r1, #26
 8008152:	fb01 f303 	mul.w	r3, r1, r3
 8008156:	4413      	add	r3, r2
 8008158:	3308      	adds	r3, #8
 800815a:	6a3a      	ldr	r2, [r7, #32]
 800815c:	4413      	add	r3, r2
 800815e:	3304      	adds	r3, #4
 8008160:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008162:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008164:	69b9      	ldr	r1, [r7, #24]
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 f870 	bl	800824c <USBH_ParseEPDesc>
 800816c:	4603      	mov	r3, r0
 800816e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008172:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008176:	3301      	adds	r3, #1
 8008178:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	791b      	ldrb	r3, [r3, #4]
 8008180:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008184:	429a      	cmp	r2, r3
 8008186:	d204      	bcs.n	8008192 <USBH_ParseCfgDesc+0x19e>
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	885a      	ldrh	r2, [r3, #2]
 800818c:	8afb      	ldrh	r3, [r7, #22]
 800818e:	429a      	cmp	r2, r3
 8008190:	d8b0      	bhi.n	80080f4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	791b      	ldrb	r3, [r3, #4]
 8008196:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800819a:	429a      	cmp	r2, r3
 800819c:	d201      	bcs.n	80081a2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800819e:	2303      	movs	r3, #3
 80081a0:	e01c      	b.n	80081dc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80081a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081a6:	3301      	adds	r3, #1
 80081a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d805      	bhi.n	80081c0 <USBH_ParseCfgDesc+0x1cc>
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	885a      	ldrh	r2, [r3, #2]
 80081b8:	8afb      	ldrh	r3, [r7, #22]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	f63f af74 	bhi.w	80080a8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	791b      	ldrb	r3, [r3, #4]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	bf28      	it	cs
 80081c8:	2302      	movcs	r3, #2
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d201      	bcs.n	80081d8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e001      	b.n	80081dc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80081d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3730      	adds	r7, #48	@ 0x30
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781a      	ldrb	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	785a      	ldrb	r2, [r3, #1]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	789a      	ldrb	r2, [r3, #2]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	78da      	ldrb	r2, [r3, #3]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	3304      	adds	r3, #4
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	2b02      	cmp	r3, #2
 8008216:	bf28      	it	cs
 8008218:	2302      	movcs	r3, #2
 800821a:	b2da      	uxtb	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	795a      	ldrb	r2, [r3, #5]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	799a      	ldrb	r2, [r3, #6]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	79da      	ldrb	r2, [r3, #7]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	7a1a      	ldrb	r2, [r3, #8]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	721a      	strb	r2, [r3, #8]
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	781a      	ldrb	r2, [r3, #0]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	785a      	ldrb	r2, [r3, #1]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	789a      	ldrb	r2, [r3, #2]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	78da      	ldrb	r2, [r3, #3]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3304      	adds	r3, #4
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3305      	adds	r3, #5
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	021b      	lsls	r3, r3, #8
 800828c:	b29b      	uxth	r3, r3
 800828e:	4313      	orrs	r3, r2
 8008290:	b29a      	uxth	r2, r3
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	799a      	ldrb	r2, [r3, #6]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	889b      	ldrh	r3, [r3, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d009      	beq.n	80082ba <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80082aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082ae:	d804      	bhi.n	80082ba <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80082b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082b8:	d901      	bls.n	80082be <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80082ba:	2303      	movs	r3, #3
 80082bc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d136      	bne.n	8008336 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	78db      	ldrb	r3, [r3, #3]
 80082cc:	f003 0303 	and.w	r3, r3, #3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d108      	bne.n	80082e6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	889b      	ldrh	r3, [r3, #4]
 80082d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082dc:	f240 8097 	bls.w	800840e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082e0:	2303      	movs	r3, #3
 80082e2:	75fb      	strb	r3, [r7, #23]
 80082e4:	e093      	b.n	800840e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	78db      	ldrb	r3, [r3, #3]
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d107      	bne.n	8008302 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	889b      	ldrh	r3, [r3, #4]
 80082f6:	2b40      	cmp	r3, #64	@ 0x40
 80082f8:	f240 8089 	bls.w	800840e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082fc:	2303      	movs	r3, #3
 80082fe:	75fb      	strb	r3, [r7, #23]
 8008300:	e085      	b.n	800840e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	78db      	ldrb	r3, [r3, #3]
 8008306:	f003 0303 	and.w	r3, r3, #3
 800830a:	2b01      	cmp	r3, #1
 800830c:	d005      	beq.n	800831a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	78db      	ldrb	r3, [r3, #3]
 8008312:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008316:	2b03      	cmp	r3, #3
 8008318:	d10a      	bne.n	8008330 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	799b      	ldrb	r3, [r3, #6]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <USBH_ParseEPDesc+0xde>
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	799b      	ldrb	r3, [r3, #6]
 8008326:	2b10      	cmp	r3, #16
 8008328:	d970      	bls.n	800840c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800832a:	2303      	movs	r3, #3
 800832c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800832e:	e06d      	b.n	800840c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008330:	2303      	movs	r3, #3
 8008332:	75fb      	strb	r3, [r7, #23]
 8008334:	e06b      	b.n	800840e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800833c:	2b01      	cmp	r3, #1
 800833e:	d13c      	bne.n	80083ba <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	78db      	ldrb	r3, [r3, #3]
 8008344:	f003 0303 	and.w	r3, r3, #3
 8008348:	2b02      	cmp	r3, #2
 800834a:	d005      	beq.n	8008358 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	78db      	ldrb	r3, [r3, #3]
 8008350:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008354:	2b00      	cmp	r3, #0
 8008356:	d106      	bne.n	8008366 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	889b      	ldrh	r3, [r3, #4]
 800835c:	2b40      	cmp	r3, #64	@ 0x40
 800835e:	d956      	bls.n	800840e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008360:	2303      	movs	r3, #3
 8008362:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008364:	e053      	b.n	800840e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	78db      	ldrb	r3, [r3, #3]
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	2b01      	cmp	r3, #1
 8008370:	d10e      	bne.n	8008390 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	799b      	ldrb	r3, [r3, #6]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d007      	beq.n	800838a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800837e:	2b10      	cmp	r3, #16
 8008380:	d803      	bhi.n	800838a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008386:	2b40      	cmp	r3, #64	@ 0x40
 8008388:	d941      	bls.n	800840e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800838a:	2303      	movs	r3, #3
 800838c:	75fb      	strb	r3, [r7, #23]
 800838e:	e03e      	b.n	800840e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	78db      	ldrb	r3, [r3, #3]
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	2b03      	cmp	r3, #3
 800839a:	d10b      	bne.n	80083b4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	799b      	ldrb	r3, [r3, #6]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d004      	beq.n	80083ae <USBH_ParseEPDesc+0x162>
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	889b      	ldrh	r3, [r3, #4]
 80083a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083ac:	d32f      	bcc.n	800840e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083ae:	2303      	movs	r3, #3
 80083b0:	75fb      	strb	r3, [r7, #23]
 80083b2:	e02c      	b.n	800840e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80083b4:	2303      	movs	r3, #3
 80083b6:	75fb      	strb	r3, [r7, #23]
 80083b8:	e029      	b.n	800840e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d120      	bne.n	8008406 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	78db      	ldrb	r3, [r3, #3]
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d106      	bne.n	80083de <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	889b      	ldrh	r3, [r3, #4]
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d01a      	beq.n	800840e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083d8:	2303      	movs	r3, #3
 80083da:	75fb      	strb	r3, [r7, #23]
 80083dc:	e017      	b.n	800840e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	78db      	ldrb	r3, [r3, #3]
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d10a      	bne.n	8008400 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	799b      	ldrb	r3, [r3, #6]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <USBH_ParseEPDesc+0x1ae>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	889b      	ldrh	r3, [r3, #4]
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	d909      	bls.n	800840e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083fa:	2303      	movs	r3, #3
 80083fc:	75fb      	strb	r3, [r7, #23]
 80083fe:	e006      	b.n	800840e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008400:	2303      	movs	r3, #3
 8008402:	75fb      	strb	r3, [r7, #23]
 8008404:	e003      	b.n	800840e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008406:	2303      	movs	r3, #3
 8008408:	75fb      	strb	r3, [r7, #23]
 800840a:	e000      	b.n	800840e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800840c:	bf00      	nop
  }

  return status;
 800840e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008410:	4618      	mov	r0, r3
 8008412:	371c      	adds	r7, #28
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3301      	adds	r3, #1
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2b03      	cmp	r3, #3
 8008432:	d120      	bne.n	8008476 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	1e9a      	subs	r2, r3, #2
 800843a:	88fb      	ldrh	r3, [r7, #6]
 800843c:	4293      	cmp	r3, r2
 800843e:	bf28      	it	cs
 8008440:	4613      	movcs	r3, r2
 8008442:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3302      	adds	r3, #2
 8008448:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800844a:	2300      	movs	r3, #0
 800844c:	82fb      	strh	r3, [r7, #22]
 800844e:	e00b      	b.n	8008468 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008450:	8afb      	ldrh	r3, [r7, #22]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	4413      	add	r3, r2
 8008456:	781a      	ldrb	r2, [r3, #0]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	3301      	adds	r3, #1
 8008460:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008462:	8afb      	ldrh	r3, [r7, #22]
 8008464:	3302      	adds	r3, #2
 8008466:	82fb      	strh	r3, [r7, #22]
 8008468:	8afa      	ldrh	r2, [r7, #22]
 800846a:	8abb      	ldrh	r3, [r7, #20]
 800846c:	429a      	cmp	r2, r3
 800846e:	d3ef      	bcc.n	8008450 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
  }
}
 8008476:	bf00      	nop
 8008478:	371c      	adds	r7, #28
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	7812      	ldrb	r2, [r2, #0]
 8008494:	4413      	add	r3, r2
 8008496:	b29a      	uxth	r2, r3
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4413      	add	r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084a8:	68fb      	ldr	r3, [r7, #12]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b086      	sub	sp, #24
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	4613      	mov	r3, r2
 80084c2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80084c4:	2301      	movs	r3, #1
 80084c6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	789b      	ldrb	r3, [r3, #2]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d002      	beq.n	80084d6 <USBH_CtlReq+0x20>
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d00f      	beq.n	80084f4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80084d4:	e027      	b.n	8008526 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	88fa      	ldrh	r2, [r7, #6]
 80084e0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2202      	movs	r2, #2
 80084ec:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80084ee:	2301      	movs	r3, #1
 80084f0:	75fb      	strb	r3, [r7, #23]
      break;
 80084f2:	e018      	b.n	8008526 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 f81b 	bl	8008530 <USBH_HandleControl>
 80084fa:	4603      	mov	r3, r0
 80084fc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80084fe:	7dfb      	ldrb	r3, [r7, #23]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <USBH_CtlReq+0x54>
 8008504:	7dfb      	ldrb	r3, [r7, #23]
 8008506:	2b03      	cmp	r3, #3
 8008508:	d106      	bne.n	8008518 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2201      	movs	r2, #1
 800850e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	761a      	strb	r2, [r3, #24]
      break;
 8008516:	e005      	b.n	8008524 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008518:	7dfb      	ldrb	r3, [r7, #23]
 800851a:	2b02      	cmp	r3, #2
 800851c:	d102      	bne.n	8008524 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	709a      	strb	r2, [r3, #2]
      break;
 8008524:	bf00      	nop
  }
  return status;
 8008526:	7dfb      	ldrb	r3, [r7, #23]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af02      	add	r7, sp, #8
 8008536:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800853c:	2300      	movs	r3, #0
 800853e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7e1b      	ldrb	r3, [r3, #24]
 8008544:	3b01      	subs	r3, #1
 8008546:	2b0a      	cmp	r3, #10
 8008548:	f200 8156 	bhi.w	80087f8 <USBH_HandleControl+0x2c8>
 800854c:	a201      	add	r2, pc, #4	@ (adr r2, 8008554 <USBH_HandleControl+0x24>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	08008581 	.word	0x08008581
 8008558:	0800859b 	.word	0x0800859b
 800855c:	08008605 	.word	0x08008605
 8008560:	0800862b 	.word	0x0800862b
 8008564:	08008663 	.word	0x08008663
 8008568:	0800868d 	.word	0x0800868d
 800856c:	080086df 	.word	0x080086df
 8008570:	08008701 	.word	0x08008701
 8008574:	0800873d 	.word	0x0800873d
 8008578:	08008763 	.word	0x08008763
 800857c:	080087a1 	.word	0x080087a1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f103 0110 	add.w	r1, r3, #16
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	795b      	ldrb	r3, [r3, #5]
 800858a:	461a      	mov	r2, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f943 	bl	8008818 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2202      	movs	r2, #2
 8008596:	761a      	strb	r2, [r3, #24]
      break;
 8008598:	e139      	b.n	800880e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	795b      	ldrb	r3, [r3, #5]
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fcc5 	bl	8008f30 <USBH_LL_GetURBState>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d11e      	bne.n	80085ee <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	7c1b      	ldrb	r3, [r3, #16]
 80085b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80085b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	8adb      	ldrh	r3, [r3, #22]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80085c2:	7b7b      	ldrb	r3, [r7, #13]
 80085c4:	2b80      	cmp	r3, #128	@ 0x80
 80085c6:	d103      	bne.n	80085d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2203      	movs	r2, #3
 80085cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085ce:	e115      	b.n	80087fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2205      	movs	r2, #5
 80085d4:	761a      	strb	r2, [r3, #24]
      break;
 80085d6:	e111      	b.n	80087fc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80085d8:	7b7b      	ldrb	r3, [r7, #13]
 80085da:	2b80      	cmp	r3, #128	@ 0x80
 80085dc:	d103      	bne.n	80085e6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2209      	movs	r2, #9
 80085e2:	761a      	strb	r2, [r3, #24]
      break;
 80085e4:	e10a      	b.n	80087fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2207      	movs	r2, #7
 80085ea:	761a      	strb	r2, [r3, #24]
      break;
 80085ec:	e106      	b.n	80087fc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	d003      	beq.n	80085fc <USBH_HandleControl+0xcc>
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	f040 8100 	bne.w	80087fc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	220b      	movs	r2, #11
 8008600:	761a      	strb	r2, [r3, #24]
      break;
 8008602:	e0fb      	b.n	80087fc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800860a:	b29a      	uxth	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6899      	ldr	r1, [r3, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	899a      	ldrh	r2, [r3, #12]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	791b      	ldrb	r3, [r3, #4]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f93a 	bl	8008896 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2204      	movs	r2, #4
 8008626:	761a      	strb	r2, [r3, #24]
      break;
 8008628:	e0f1      	b.n	800880e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	791b      	ldrb	r3, [r3, #4]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fc7d 	bl	8008f30 <USBH_LL_GetURBState>
 8008636:	4603      	mov	r3, r0
 8008638:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d102      	bne.n	8008646 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2209      	movs	r2, #9
 8008644:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	2b05      	cmp	r3, #5
 800864a:	d102      	bne.n	8008652 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800864c:	2303      	movs	r3, #3
 800864e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008650:	e0d6      	b.n	8008800 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008652:	7bbb      	ldrb	r3, [r7, #14]
 8008654:	2b04      	cmp	r3, #4
 8008656:	f040 80d3 	bne.w	8008800 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	220b      	movs	r2, #11
 800865e:	761a      	strb	r2, [r3, #24]
      break;
 8008660:	e0ce      	b.n	8008800 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6899      	ldr	r1, [r3, #8]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	899a      	ldrh	r2, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	795b      	ldrb	r3, [r3, #5]
 800866e:	2001      	movs	r0, #1
 8008670:	9000      	str	r0, [sp, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f8ea 	bl	800884c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800867e:	b29a      	uxth	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2206      	movs	r2, #6
 8008688:	761a      	strb	r2, [r3, #24]
      break;
 800868a:	e0c0      	b.n	800880e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	795b      	ldrb	r3, [r3, #5]
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fc4c 	bl	8008f30 <USBH_LL_GetURBState>
 8008698:	4603      	mov	r3, r0
 800869a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d103      	bne.n	80086aa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2207      	movs	r2, #7
 80086a6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086a8:	e0ac      	b.n	8008804 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b05      	cmp	r3, #5
 80086ae:	d105      	bne.n	80086bc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	220c      	movs	r2, #12
 80086b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80086b6:	2303      	movs	r3, #3
 80086b8:	73fb      	strb	r3, [r7, #15]
      break;
 80086ba:	e0a3      	b.n	8008804 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d103      	bne.n	80086ca <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2205      	movs	r2, #5
 80086c6:	761a      	strb	r2, [r3, #24]
      break;
 80086c8:	e09c      	b.n	8008804 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	f040 8099 	bne.w	8008804 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	220b      	movs	r2, #11
 80086d6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80086d8:	2302      	movs	r3, #2
 80086da:	73fb      	strb	r3, [r7, #15]
      break;
 80086dc:	e092      	b.n	8008804 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	791b      	ldrb	r3, [r3, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	2100      	movs	r1, #0
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f8d5 	bl	8008896 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2208      	movs	r2, #8
 80086fc:	761a      	strb	r2, [r3, #24]

      break;
 80086fe:	e086      	b.n	800880e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	791b      	ldrb	r3, [r3, #4]
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fc12 	bl	8008f30 <USBH_LL_GetURBState>
 800870c:	4603      	mov	r3, r0
 800870e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d105      	bne.n	8008722 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	220d      	movs	r2, #13
 800871a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008720:	e072      	b.n	8008808 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	2b04      	cmp	r3, #4
 8008726:	d103      	bne.n	8008730 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	220b      	movs	r2, #11
 800872c:	761a      	strb	r2, [r3, #24]
      break;
 800872e:	e06b      	b.n	8008808 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008730:	7bbb      	ldrb	r3, [r7, #14]
 8008732:	2b05      	cmp	r3, #5
 8008734:	d168      	bne.n	8008808 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008736:	2303      	movs	r3, #3
 8008738:	73fb      	strb	r3, [r7, #15]
      break;
 800873a:	e065      	b.n	8008808 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	795b      	ldrb	r3, [r3, #5]
 8008740:	2201      	movs	r2, #1
 8008742:	9200      	str	r2, [sp, #0]
 8008744:	2200      	movs	r2, #0
 8008746:	2100      	movs	r1, #0
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f87f 	bl	800884c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008754:	b29a      	uxth	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	220a      	movs	r2, #10
 800875e:	761a      	strb	r2, [r3, #24]
      break;
 8008760:	e055      	b.n	800880e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	795b      	ldrb	r3, [r3, #5]
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fbe1 	bl	8008f30 <USBH_LL_GetURBState>
 800876e:	4603      	mov	r3, r0
 8008770:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008772:	7bbb      	ldrb	r3, [r7, #14]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d105      	bne.n	8008784 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	220d      	movs	r2, #13
 8008780:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008782:	e043      	b.n	800880c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d103      	bne.n	8008792 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2209      	movs	r2, #9
 800878e:	761a      	strb	r2, [r3, #24]
      break;
 8008790:	e03c      	b.n	800880c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	2b04      	cmp	r3, #4
 8008796:	d139      	bne.n	800880c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	220b      	movs	r2, #11
 800879c:	761a      	strb	r2, [r3, #24]
      break;
 800879e:	e035      	b.n	800880c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	7e5b      	ldrb	r3, [r3, #25]
 80087a4:	3301      	adds	r3, #1
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	765a      	strb	r2, [r3, #25]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	7e5b      	ldrb	r3, [r3, #25]
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d806      	bhi.n	80087c2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80087c0:	e025      	b.n	800880e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087c8:	2106      	movs	r1, #6
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	795b      	ldrb	r3, [r3, #5]
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f90c 	bl	80089f8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	791b      	ldrb	r3, [r3, #4]
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f906 	bl	80089f8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80087f2:	2302      	movs	r3, #2
 80087f4:	73fb      	strb	r3, [r7, #15]
      break;
 80087f6:	e00a      	b.n	800880e <USBH_HandleControl+0x2de>

    default:
      break;
 80087f8:	bf00      	nop
 80087fa:	e008      	b.n	800880e <USBH_HandleControl+0x2de>
      break;
 80087fc:	bf00      	nop
 80087fe:	e006      	b.n	800880e <USBH_HandleControl+0x2de>
      break;
 8008800:	bf00      	nop
 8008802:	e004      	b.n	800880e <USBH_HandleControl+0x2de>
      break;
 8008804:	bf00      	nop
 8008806:	e002      	b.n	800880e <USBH_HandleControl+0x2de>
      break;
 8008808:	bf00      	nop
 800880a:	e000      	b.n	800880e <USBH_HandleControl+0x2de>
      break;
 800880c:	bf00      	nop
  }

  return status;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b088      	sub	sp, #32
 800881c:	af04      	add	r7, sp, #16
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	4613      	mov	r3, r2
 8008824:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008826:	79f9      	ldrb	r1, [r7, #7]
 8008828:	2300      	movs	r3, #0
 800882a:	9303      	str	r3, [sp, #12]
 800882c:	2308      	movs	r3, #8
 800882e:	9302      	str	r3, [sp, #8]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	9301      	str	r3, [sp, #4]
 8008834:	2300      	movs	r3, #0
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	2300      	movs	r3, #0
 800883a:	2200      	movs	r2, #0
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 fb46 	bl	8008ece <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af04      	add	r7, sp, #16
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	4611      	mov	r1, r2
 8008858:	461a      	mov	r2, r3
 800885a:	460b      	mov	r3, r1
 800885c:	80fb      	strh	r3, [r7, #6]
 800885e:	4613      	mov	r3, r2
 8008860:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800886c:	2300      	movs	r3, #0
 800886e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008870:	7979      	ldrb	r1, [r7, #5]
 8008872:	7e3b      	ldrb	r3, [r7, #24]
 8008874:	9303      	str	r3, [sp, #12]
 8008876:	88fb      	ldrh	r3, [r7, #6]
 8008878:	9302      	str	r3, [sp, #8]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	2301      	movs	r3, #1
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	2300      	movs	r3, #0
 8008884:	2200      	movs	r2, #0
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 fb21 	bl	8008ece <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b088      	sub	sp, #32
 800889a:	af04      	add	r7, sp, #16
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	4611      	mov	r1, r2
 80088a2:	461a      	mov	r2, r3
 80088a4:	460b      	mov	r3, r1
 80088a6:	80fb      	strh	r3, [r7, #6]
 80088a8:	4613      	mov	r3, r2
 80088aa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088ac:	7979      	ldrb	r1, [r7, #5]
 80088ae:	2300      	movs	r3, #0
 80088b0:	9303      	str	r3, [sp, #12]
 80088b2:	88fb      	ldrh	r3, [r7, #6]
 80088b4:	9302      	str	r3, [sp, #8]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	9301      	str	r3, [sp, #4]
 80088ba:	2301      	movs	r3, #1
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	2300      	movs	r3, #0
 80088c0:	2201      	movs	r2, #1
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f000 fb03 	bl	8008ece <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80088c8:	2300      	movs	r3, #0

}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b088      	sub	sp, #32
 80088d6:	af04      	add	r7, sp, #16
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	4611      	mov	r1, r2
 80088de:	461a      	mov	r2, r3
 80088e0:	460b      	mov	r3, r1
 80088e2:	80fb      	strh	r3, [r7, #6]
 80088e4:	4613      	mov	r3, r2
 80088e6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088f6:	7979      	ldrb	r1, [r7, #5]
 80088f8:	7e3b      	ldrb	r3, [r7, #24]
 80088fa:	9303      	str	r3, [sp, #12]
 80088fc:	88fb      	ldrh	r3, [r7, #6]
 80088fe:	9302      	str	r3, [sp, #8]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	9301      	str	r3, [sp, #4]
 8008904:	2301      	movs	r3, #1
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	2302      	movs	r3, #2
 800890a:	2200      	movs	r2, #0
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f000 fade 	bl	8008ece <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b088      	sub	sp, #32
 8008920:	af04      	add	r7, sp, #16
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	4611      	mov	r1, r2
 8008928:	461a      	mov	r2, r3
 800892a:	460b      	mov	r3, r1
 800892c:	80fb      	strh	r3, [r7, #6]
 800892e:	4613      	mov	r3, r2
 8008930:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008932:	7979      	ldrb	r1, [r7, #5]
 8008934:	2300      	movs	r3, #0
 8008936:	9303      	str	r3, [sp, #12]
 8008938:	88fb      	ldrh	r3, [r7, #6]
 800893a:	9302      	str	r3, [sp, #8]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	2301      	movs	r3, #1
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	2302      	movs	r3, #2
 8008946:	2201      	movs	r2, #1
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 fac0 	bl	8008ece <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af04      	add	r7, sp, #16
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	4608      	mov	r0, r1
 8008962:	4611      	mov	r1, r2
 8008964:	461a      	mov	r2, r3
 8008966:	4603      	mov	r3, r0
 8008968:	70fb      	strb	r3, [r7, #3]
 800896a:	460b      	mov	r3, r1
 800896c:	70bb      	strb	r3, [r7, #2]
 800896e:	4613      	mov	r3, r2
 8008970:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008972:	7878      	ldrb	r0, [r7, #1]
 8008974:	78ba      	ldrb	r2, [r7, #2]
 8008976:	78f9      	ldrb	r1, [r7, #3]
 8008978:	8b3b      	ldrh	r3, [r7, #24]
 800897a:	9302      	str	r3, [sp, #8]
 800897c:	7d3b      	ldrb	r3, [r7, #20]
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	7c3b      	ldrb	r3, [r7, #16]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	4603      	mov	r3, r0
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fa53 	bl	8008e32 <USBH_LL_OpenPipe>

  return USBH_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	460b      	mov	r3, r1
 80089a0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80089a2:	78fb      	ldrb	r3, [r7, #3]
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa72 	bl	8008e90 <USBH_LL_ClosePipe>

  return USBH_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	460b      	mov	r3, r1
 80089c0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f836 	bl	8008a34 <USBH_GetFreePipe>
 80089c8:	4603      	mov	r3, r0
 80089ca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80089cc:	89fb      	ldrh	r3, [r7, #14]
 80089ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d00a      	beq.n	80089ec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	89fb      	ldrh	r3, [r7, #14]
 80089da:	f003 030f 	and.w	r3, r3, #15
 80089de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	33e0      	adds	r3, #224	@ 0xe0
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80089ec:	89fb      	ldrh	r3, [r7, #14]
 80089ee:	b2db      	uxtb	r3, r3
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	2b0f      	cmp	r3, #15
 8008a08:	d80d      	bhi.n	8008a26 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a0a:	78fb      	ldrb	r3, [r7, #3]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	33e0      	adds	r3, #224	@ 0xe0
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	78fb      	ldrb	r3, [r7, #3]
 8008a18:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a1c:	6879      	ldr	r1, [r7, #4]
 8008a1e:	33e0      	adds	r3, #224	@ 0xe0
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	440b      	add	r3, r1
 8008a24:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
 8008a44:	e00f      	b.n	8008a66 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	33e0      	adds	r3, #224	@ 0xe0
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d102      	bne.n	8008a60 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	e007      	b.n	8008a70 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	3301      	adds	r3, #1
 8008a64:	73fb      	strb	r3, [r7, #15]
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b0f      	cmp	r3, #15
 8008a6a:	d9ec      	bls.n	8008a46 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008a80:	2201      	movs	r2, #1
 8008a82:	490e      	ldr	r1, [pc, #56]	@ (8008abc <MX_USB_HOST_Init+0x40>)
 8008a84:	480e      	ldr	r0, [pc, #56]	@ (8008ac0 <MX_USB_HOST_Init+0x44>)
 8008a86:	f7fe fb15 	bl	80070b4 <USBH_Init>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008a90:	f7f7 ffba 	bl	8000a08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008a94:	490b      	ldr	r1, [pc, #44]	@ (8008ac4 <MX_USB_HOST_Init+0x48>)
 8008a96:	480a      	ldr	r0, [pc, #40]	@ (8008ac0 <MX_USB_HOST_Init+0x44>)
 8008a98:	f7fe fbb9 	bl	800720e <USBH_RegisterClass>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008aa2:	f7f7 ffb1 	bl	8000a08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008aa6:	4806      	ldr	r0, [pc, #24]	@ (8008ac0 <MX_USB_HOST_Init+0x44>)
 8008aa8:	f7fe fc3d 	bl	8007326 <USBH_Start>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008ab2:	f7f7 ffa9 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008ab6:	bf00      	nop
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	08008add 	.word	0x08008add
 8008ac0:	200001dc 	.word	0x200001dc
 8008ac4:	2000000c 	.word	0x2000000c

08008ac8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008acc:	4802      	ldr	r0, [pc, #8]	@ (8008ad8 <MX_USB_HOST_Process+0x10>)
 8008ace:	f7fe fc3b 	bl	8007348 <USBH_Process>
}
 8008ad2:	bf00      	nop
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	200001dc 	.word	0x200001dc

08008adc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d819      	bhi.n	8008b24 <USBH_UserProcess+0x48>
 8008af0:	a201      	add	r2, pc, #4	@ (adr r2, 8008af8 <USBH_UserProcess+0x1c>)
 8008af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af6:	bf00      	nop
 8008af8:	08008b25 	.word	0x08008b25
 8008afc:	08008b15 	.word	0x08008b15
 8008b00:	08008b25 	.word	0x08008b25
 8008b04:	08008b1d 	.word	0x08008b1d
 8008b08:	08008b0d 	.word	0x08008b0d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008b0c:	4b09      	ldr	r3, [pc, #36]	@ (8008b34 <USBH_UserProcess+0x58>)
 8008b0e:	2203      	movs	r2, #3
 8008b10:	701a      	strb	r2, [r3, #0]
  break;
 8008b12:	e008      	b.n	8008b26 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008b14:	4b07      	ldr	r3, [pc, #28]	@ (8008b34 <USBH_UserProcess+0x58>)
 8008b16:	2202      	movs	r2, #2
 8008b18:	701a      	strb	r2, [r3, #0]
  break;
 8008b1a:	e004      	b.n	8008b26 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008b1c:	4b05      	ldr	r3, [pc, #20]	@ (8008b34 <USBH_UserProcess+0x58>)
 8008b1e:	2201      	movs	r2, #1
 8008b20:	701a      	strb	r2, [r3, #0]
  break;
 8008b22:	e000      	b.n	8008b26 <USBH_UserProcess+0x4a>

  default:
  break;
 8008b24:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	200005b4 	.word	0x200005b4

08008b38 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	@ 0x28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b40:	f107 0314 	add.w	r3, r7, #20
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	609a      	str	r2, [r3, #8]
 8008b4c:	60da      	str	r2, [r3, #12]
 8008b4e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b58:	d147      	bne.n	8008bea <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	613b      	str	r3, [r7, #16]
 8008b5e:	4b25      	ldr	r3, [pc, #148]	@ (8008bf4 <HAL_HCD_MspInit+0xbc>)
 8008b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b62:	4a24      	ldr	r2, [pc, #144]	@ (8008bf4 <HAL_HCD_MspInit+0xbc>)
 8008b64:	f043 0301 	orr.w	r3, r3, #1
 8008b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8008b6a:	4b22      	ldr	r3, [pc, #136]	@ (8008bf4 <HAL_HCD_MspInit+0xbc>)
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008b76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b80:	2300      	movs	r3, #0
 8008b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008b84:	f107 0314 	add.w	r3, r7, #20
 8008b88:	4619      	mov	r1, r3
 8008b8a:	481b      	ldr	r0, [pc, #108]	@ (8008bf8 <HAL_HCD_MspInit+0xc0>)
 8008b8c:	f7f8 fb16 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008b90:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b96:	2302      	movs	r3, #2
 8008b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ba2:	230a      	movs	r3, #10
 8008ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ba6:	f107 0314 	add.w	r3, r7, #20
 8008baa:	4619      	mov	r1, r3
 8008bac:	4812      	ldr	r0, [pc, #72]	@ (8008bf8 <HAL_HCD_MspInit+0xc0>)
 8008bae:	f7f8 fb05 	bl	80011bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008bb2:	4b10      	ldr	r3, [pc, #64]	@ (8008bf4 <HAL_HCD_MspInit+0xbc>)
 8008bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8008bf4 <HAL_HCD_MspInit+0xbc>)
 8008bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bbc:	6353      	str	r3, [r2, #52]	@ 0x34
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf4 <HAL_HCD_MspInit+0xbc>)
 8008bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8008bf4 <HAL_HCD_MspInit+0xbc>)
 8008bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8008bce:	4b09      	ldr	r3, [pc, #36]	@ (8008bf4 <HAL_HCD_MspInit+0xbc>)
 8008bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bd6:	60fb      	str	r3, [r7, #12]
 8008bd8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2100      	movs	r1, #0
 8008bde:	2043      	movs	r0, #67	@ 0x43
 8008be0:	f7f8 fab5 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008be4:	2043      	movs	r0, #67	@ 0x43
 8008be6:	f7f8 face 	bl	8001186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008bea:	bf00      	nop
 8008bec:	3728      	adds	r7, #40	@ 0x28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	40023800 	.word	0x40023800
 8008bf8:	40020000 	.word	0x40020000

08008bfc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe ff73 	bl	8007af6 <USBH_LL_IncTimer>
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe ffab 	bl	8007b82 <USBH_LL_Connect>
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe ffb4 	bl	8007bb0 <USBH_LL_Disconnect>
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe ff65 	bl	8007b4a <USBH_LL_PortEnabled>
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe ff65 	bl	8007b66 <USBH_LL_PortDisabled>
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d12a      	bne.n	8008d0c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008cb6:	4a18      	ldr	r2, [pc, #96]	@ (8008d18 <USBH_LL_Init+0x74>)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a15      	ldr	r2, [pc, #84]	@ (8008d18 <USBH_LL_Init+0x74>)
 8008cc2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cc6:	4b14      	ldr	r3, [pc, #80]	@ (8008d18 <USBH_LL_Init+0x74>)
 8008cc8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008ccc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008cce:	4b12      	ldr	r3, [pc, #72]	@ (8008d18 <USBH_LL_Init+0x74>)
 8008cd0:	2208      	movs	r2, #8
 8008cd2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008cd4:	4b10      	ldr	r3, [pc, #64]	@ (8008d18 <USBH_LL_Init+0x74>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008cda:	4b0f      	ldr	r3, [pc, #60]	@ (8008d18 <USBH_LL_Init+0x74>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8008d18 <USBH_LL_Init+0x74>)
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8008d18 <USBH_LL_Init+0x74>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008cec:	480a      	ldr	r0, [pc, #40]	@ (8008d18 <USBH_LL_Init+0x74>)
 8008cee:	f7f8 fc32 	bl	8001556 <HAL_HCD_Init>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008cf8:	f7f7 fe86 	bl	8000a08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008cfc:	4806      	ldr	r0, [pc, #24]	@ (8008d18 <USBH_LL_Init+0x74>)
 8008cfe:	f7f9 f893 	bl	8001e28 <HAL_HCD_GetCurrentFrame>
 8008d02:	4603      	mov	r3, r0
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7fe fee6 	bl	8007ad8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	200005b8 	.word	0x200005b8

08008d1c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7f9 f800 	bl	8001d38 <HAL_HCD_Start>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f95e 	bl	8009000 <USBH_Get_USB_Status>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7f9 f808 	bl	8001d7e <HAL_HCD_Stop>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 f943 	bl	8009000 <USBH_Get_USB_Status>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008d90:	2301      	movs	r3, #1
 8008d92:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7f9 f852 	bl	8001e44 <HAL_HCD_GetCurrentSpeed>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d00c      	beq.n	8008dc0 <USBH_LL_GetSpeed+0x38>
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d80d      	bhi.n	8008dc6 <USBH_LL_GetSpeed+0x3e>
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <USBH_LL_GetSpeed+0x2c>
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d003      	beq.n	8008dba <USBH_LL_GetSpeed+0x32>
 8008db2:	e008      	b.n	8008dc6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73fb      	strb	r3, [r7, #15]
    break;
 8008db8:	e008      	b.n	8008dcc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dbe:	e005      	b.n	8008dcc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc4:	e002      	b.n	8008dcc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dca:	bf00      	nop
  }
  return  speed;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7f8 ffe3 	bl	8001db8 <HAL_HCD_ResetPort>
 8008df2:	4603      	mov	r3, r0
 8008df4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 f901 	bl	8009000 <USBH_Get_USB_Status>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e1e:	78fa      	ldrb	r2, [r7, #3]
 8008e20:	4611      	mov	r1, r2
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7f8 ffeb 	bl	8001dfe <HAL_HCD_HC_GetXferCount>
 8008e28:	4603      	mov	r3, r0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e32:	b590      	push	{r4, r7, lr}
 8008e34:	b089      	sub	sp, #36	@ 0x24
 8008e36:	af04      	add	r7, sp, #16
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	4608      	mov	r0, r1
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	461a      	mov	r2, r3
 8008e40:	4603      	mov	r3, r0
 8008e42:	70fb      	strb	r3, [r7, #3]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70bb      	strb	r3, [r7, #2]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008e5a:	787c      	ldrb	r4, [r7, #1]
 8008e5c:	78ba      	ldrb	r2, [r7, #2]
 8008e5e:	78f9      	ldrb	r1, [r7, #3]
 8008e60:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008e62:	9302      	str	r3, [sp, #8]
 8008e64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e68:	9301      	str	r3, [sp, #4]
 8008e6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	4623      	mov	r3, r4
 8008e72:	f7f8 fbd7 	bl	8001624 <HAL_HCD_HC_Init>
 8008e76:	4603      	mov	r3, r0
 8008e78:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 f8bf 	bl	8009000 <USBH_Get_USB_Status>
 8008e82:	4603      	mov	r3, r0
 8008e84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd90      	pop	{r4, r7, pc}

08008e90 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008eaa:	78fa      	ldrb	r2, [r7, #3]
 8008eac:	4611      	mov	r1, r2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7f8 fc70 	bl	8001794 <HAL_HCD_HC_Halt>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 f8a0 	bl	8009000 <USBH_Get_USB_Status>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008ece:	b590      	push	{r4, r7, lr}
 8008ed0:	b089      	sub	sp, #36	@ 0x24
 8008ed2:	af04      	add	r7, sp, #16
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	4611      	mov	r1, r2
 8008eda:	461a      	mov	r2, r3
 8008edc:	4603      	mov	r3, r0
 8008ede:	70fb      	strb	r3, [r7, #3]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70bb      	strb	r3, [r7, #2]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008ef6:	787c      	ldrb	r4, [r7, #1]
 8008ef8:	78ba      	ldrb	r2, [r7, #2]
 8008efa:	78f9      	ldrb	r1, [r7, #3]
 8008efc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f00:	9303      	str	r3, [sp, #12]
 8008f02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008f04:	9302      	str	r3, [sp, #8]
 8008f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	4623      	mov	r3, r4
 8008f12:	f7f8 fc63 	bl	80017dc <HAL_HCD_HC_SubmitRequest>
 8008f16:	4603      	mov	r3, r0
 8008f18:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 f86f 	bl	8009000 <USBH_Get_USB_Status>
 8008f22:	4603      	mov	r3, r0
 8008f24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd90      	pop	{r4, r7, pc}

08008f30 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	4611      	mov	r1, r2
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7f8 ff44 	bl	8001dd4 <HAL_HCD_HC_GetURBState>
 8008f4c:	4603      	mov	r3, r0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d103      	bne.n	8008f74 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008f6c:	78fb      	ldrb	r3, [r7, #3]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 f872 	bl	8009058 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008f74:	20c8      	movs	r0, #200	@ 0xc8
 8008f76:	f7f7 ffeb 	bl	8000f50 <HAL_Delay>
  return USBH_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
 8008f90:	4613      	mov	r3, r2
 8008f92:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f9a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008f9c:	78fa      	ldrb	r2, [r7, #3]
 8008f9e:	68f9      	ldr	r1, [r7, #12]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	011b      	lsls	r3, r3, #4
 8008fa4:	1a9b      	subs	r3, r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	440b      	add	r3, r1
 8008faa:	3317      	adds	r3, #23
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008fb2:	78fa      	ldrb	r2, [r7, #3]
 8008fb4:	68f9      	ldr	r1, [r7, #12]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	1a9b      	subs	r3, r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	440b      	add	r3, r1
 8008fc0:	333c      	adds	r3, #60	@ 0x3c
 8008fc2:	78ba      	ldrb	r2, [r7, #2]
 8008fc4:	701a      	strb	r2, [r3, #0]
 8008fc6:	e009      	b.n	8008fdc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008fc8:	78fa      	ldrb	r2, [r7, #3]
 8008fca:	68f9      	ldr	r1, [r7, #12]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	011b      	lsls	r3, r3, #4
 8008fd0:	1a9b      	subs	r3, r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	440b      	add	r3, r1
 8008fd6:	333d      	adds	r3, #61	@ 0x3d
 8008fd8:	78ba      	ldrb	r2, [r7, #2]
 8008fda:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7f7 ffac 	bl	8000f50 <HAL_Delay>
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	4603      	mov	r3, r0
 8009008:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800900e:	79fb      	ldrb	r3, [r7, #7]
 8009010:	2b03      	cmp	r3, #3
 8009012:	d817      	bhi.n	8009044 <USBH_Get_USB_Status+0x44>
 8009014:	a201      	add	r2, pc, #4	@ (adr r2, 800901c <USBH_Get_USB_Status+0x1c>)
 8009016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901a:	bf00      	nop
 800901c:	0800902d 	.word	0x0800902d
 8009020:	08009033 	.word	0x08009033
 8009024:	08009039 	.word	0x08009039
 8009028:	0800903f 	.word	0x0800903f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	73fb      	strb	r3, [r7, #15]
    break;
 8009030:	e00b      	b.n	800904a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009032:	2302      	movs	r3, #2
 8009034:	73fb      	strb	r3, [r7, #15]
    break;
 8009036:	e008      	b.n	800904a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009038:	2301      	movs	r3, #1
 800903a:	73fb      	strb	r3, [r7, #15]
    break;
 800903c:	e005      	b.n	800904a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800903e:	2302      	movs	r3, #2
 8009040:	73fb      	strb	r3, [r7, #15]
    break;
 8009042:	e002      	b.n	800904a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009044:	2302      	movs	r3, #2
 8009046:	73fb      	strb	r3, [r7, #15]
    break;
 8009048:	bf00      	nop
  }
  return usb_status;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d102      	bne.n	8009072 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
 8009070:	e001      	b.n	8009076 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009072:	2301      	movs	r3, #1
 8009074:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	461a      	mov	r2, r3
 800907a:	2101      	movs	r1, #1
 800907c:	4803      	ldr	r0, [pc, #12]	@ (800908c <MX_DriverVbusFS+0x34>)
 800907e:	f7f8 fa51 	bl	8001524 <HAL_GPIO_WritePin>
}
 8009082:	bf00      	nop
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	40020800 	.word	0x40020800

08009090 <malloc>:
 8009090:	4b02      	ldr	r3, [pc, #8]	@ (800909c <malloc+0xc>)
 8009092:	4601      	mov	r1, r0
 8009094:	6818      	ldr	r0, [r3, #0]
 8009096:	f000 b82d 	b.w	80090f4 <_malloc_r>
 800909a:	bf00      	nop
 800909c:	2000002c 	.word	0x2000002c

080090a0 <free>:
 80090a0:	4b02      	ldr	r3, [pc, #8]	@ (80090ac <free+0xc>)
 80090a2:	4601      	mov	r1, r0
 80090a4:	6818      	ldr	r0, [r3, #0]
 80090a6:	f000 b8f5 	b.w	8009294 <_free_r>
 80090aa:	bf00      	nop
 80090ac:	2000002c 	.word	0x2000002c

080090b0 <sbrk_aligned>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	4e0f      	ldr	r6, [pc, #60]	@ (80090f0 <sbrk_aligned+0x40>)
 80090b4:	460c      	mov	r4, r1
 80090b6:	6831      	ldr	r1, [r6, #0]
 80090b8:	4605      	mov	r5, r0
 80090ba:	b911      	cbnz	r1, 80090c2 <sbrk_aligned+0x12>
 80090bc:	f000 f8ae 	bl	800921c <_sbrk_r>
 80090c0:	6030      	str	r0, [r6, #0]
 80090c2:	4621      	mov	r1, r4
 80090c4:	4628      	mov	r0, r5
 80090c6:	f000 f8a9 	bl	800921c <_sbrk_r>
 80090ca:	1c43      	adds	r3, r0, #1
 80090cc:	d103      	bne.n	80090d6 <sbrk_aligned+0x26>
 80090ce:	f04f 34ff 	mov.w	r4, #4294967295
 80090d2:	4620      	mov	r0, r4
 80090d4:	bd70      	pop	{r4, r5, r6, pc}
 80090d6:	1cc4      	adds	r4, r0, #3
 80090d8:	f024 0403 	bic.w	r4, r4, #3
 80090dc:	42a0      	cmp	r0, r4
 80090de:	d0f8      	beq.n	80090d2 <sbrk_aligned+0x22>
 80090e0:	1a21      	subs	r1, r4, r0
 80090e2:	4628      	mov	r0, r5
 80090e4:	f000 f89a 	bl	800921c <_sbrk_r>
 80090e8:	3001      	adds	r0, #1
 80090ea:	d1f2      	bne.n	80090d2 <sbrk_aligned+0x22>
 80090ec:	e7ef      	b.n	80090ce <sbrk_aligned+0x1e>
 80090ee:	bf00      	nop
 80090f0:	20000998 	.word	0x20000998

080090f4 <_malloc_r>:
 80090f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090f8:	1ccd      	adds	r5, r1, #3
 80090fa:	f025 0503 	bic.w	r5, r5, #3
 80090fe:	3508      	adds	r5, #8
 8009100:	2d0c      	cmp	r5, #12
 8009102:	bf38      	it	cc
 8009104:	250c      	movcc	r5, #12
 8009106:	2d00      	cmp	r5, #0
 8009108:	4606      	mov	r6, r0
 800910a:	db01      	blt.n	8009110 <_malloc_r+0x1c>
 800910c:	42a9      	cmp	r1, r5
 800910e:	d904      	bls.n	800911a <_malloc_r+0x26>
 8009110:	230c      	movs	r3, #12
 8009112:	6033      	str	r3, [r6, #0]
 8009114:	2000      	movs	r0, #0
 8009116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800911a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091f0 <_malloc_r+0xfc>
 800911e:	f000 f869 	bl	80091f4 <__malloc_lock>
 8009122:	f8d8 3000 	ldr.w	r3, [r8]
 8009126:	461c      	mov	r4, r3
 8009128:	bb44      	cbnz	r4, 800917c <_malloc_r+0x88>
 800912a:	4629      	mov	r1, r5
 800912c:	4630      	mov	r0, r6
 800912e:	f7ff ffbf 	bl	80090b0 <sbrk_aligned>
 8009132:	1c43      	adds	r3, r0, #1
 8009134:	4604      	mov	r4, r0
 8009136:	d158      	bne.n	80091ea <_malloc_r+0xf6>
 8009138:	f8d8 4000 	ldr.w	r4, [r8]
 800913c:	4627      	mov	r7, r4
 800913e:	2f00      	cmp	r7, #0
 8009140:	d143      	bne.n	80091ca <_malloc_r+0xd6>
 8009142:	2c00      	cmp	r4, #0
 8009144:	d04b      	beq.n	80091de <_malloc_r+0xea>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	4639      	mov	r1, r7
 800914a:	4630      	mov	r0, r6
 800914c:	eb04 0903 	add.w	r9, r4, r3
 8009150:	f000 f864 	bl	800921c <_sbrk_r>
 8009154:	4581      	cmp	r9, r0
 8009156:	d142      	bne.n	80091de <_malloc_r+0xea>
 8009158:	6821      	ldr	r1, [r4, #0]
 800915a:	1a6d      	subs	r5, r5, r1
 800915c:	4629      	mov	r1, r5
 800915e:	4630      	mov	r0, r6
 8009160:	f7ff ffa6 	bl	80090b0 <sbrk_aligned>
 8009164:	3001      	adds	r0, #1
 8009166:	d03a      	beq.n	80091de <_malloc_r+0xea>
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	442b      	add	r3, r5
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	f8d8 3000 	ldr.w	r3, [r8]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	bb62      	cbnz	r2, 80091d0 <_malloc_r+0xdc>
 8009176:	f8c8 7000 	str.w	r7, [r8]
 800917a:	e00f      	b.n	800919c <_malloc_r+0xa8>
 800917c:	6822      	ldr	r2, [r4, #0]
 800917e:	1b52      	subs	r2, r2, r5
 8009180:	d420      	bmi.n	80091c4 <_malloc_r+0xd0>
 8009182:	2a0b      	cmp	r2, #11
 8009184:	d917      	bls.n	80091b6 <_malloc_r+0xc2>
 8009186:	1961      	adds	r1, r4, r5
 8009188:	42a3      	cmp	r3, r4
 800918a:	6025      	str	r5, [r4, #0]
 800918c:	bf18      	it	ne
 800918e:	6059      	strne	r1, [r3, #4]
 8009190:	6863      	ldr	r3, [r4, #4]
 8009192:	bf08      	it	eq
 8009194:	f8c8 1000 	streq.w	r1, [r8]
 8009198:	5162      	str	r2, [r4, r5]
 800919a:	604b      	str	r3, [r1, #4]
 800919c:	4630      	mov	r0, r6
 800919e:	f000 f82f 	bl	8009200 <__malloc_unlock>
 80091a2:	f104 000b 	add.w	r0, r4, #11
 80091a6:	1d23      	adds	r3, r4, #4
 80091a8:	f020 0007 	bic.w	r0, r0, #7
 80091ac:	1ac2      	subs	r2, r0, r3
 80091ae:	bf1c      	itt	ne
 80091b0:	1a1b      	subne	r3, r3, r0
 80091b2:	50a3      	strne	r3, [r4, r2]
 80091b4:	e7af      	b.n	8009116 <_malloc_r+0x22>
 80091b6:	6862      	ldr	r2, [r4, #4]
 80091b8:	42a3      	cmp	r3, r4
 80091ba:	bf0c      	ite	eq
 80091bc:	f8c8 2000 	streq.w	r2, [r8]
 80091c0:	605a      	strne	r2, [r3, #4]
 80091c2:	e7eb      	b.n	800919c <_malloc_r+0xa8>
 80091c4:	4623      	mov	r3, r4
 80091c6:	6864      	ldr	r4, [r4, #4]
 80091c8:	e7ae      	b.n	8009128 <_malloc_r+0x34>
 80091ca:	463c      	mov	r4, r7
 80091cc:	687f      	ldr	r7, [r7, #4]
 80091ce:	e7b6      	b.n	800913e <_malloc_r+0x4a>
 80091d0:	461a      	mov	r2, r3
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	42a3      	cmp	r3, r4
 80091d6:	d1fb      	bne.n	80091d0 <_malloc_r+0xdc>
 80091d8:	2300      	movs	r3, #0
 80091da:	6053      	str	r3, [r2, #4]
 80091dc:	e7de      	b.n	800919c <_malloc_r+0xa8>
 80091de:	230c      	movs	r3, #12
 80091e0:	6033      	str	r3, [r6, #0]
 80091e2:	4630      	mov	r0, r6
 80091e4:	f000 f80c 	bl	8009200 <__malloc_unlock>
 80091e8:	e794      	b.n	8009114 <_malloc_r+0x20>
 80091ea:	6005      	str	r5, [r0, #0]
 80091ec:	e7d6      	b.n	800919c <_malloc_r+0xa8>
 80091ee:	bf00      	nop
 80091f0:	2000099c 	.word	0x2000099c

080091f4 <__malloc_lock>:
 80091f4:	4801      	ldr	r0, [pc, #4]	@ (80091fc <__malloc_lock+0x8>)
 80091f6:	f000 b84b 	b.w	8009290 <__retarget_lock_acquire_recursive>
 80091fa:	bf00      	nop
 80091fc:	20000adc 	.word	0x20000adc

08009200 <__malloc_unlock>:
 8009200:	4801      	ldr	r0, [pc, #4]	@ (8009208 <__malloc_unlock+0x8>)
 8009202:	f000 b846 	b.w	8009292 <__retarget_lock_release_recursive>
 8009206:	bf00      	nop
 8009208:	20000adc 	.word	0x20000adc

0800920c <memset>:
 800920c:	4402      	add	r2, r0
 800920e:	4603      	mov	r3, r0
 8009210:	4293      	cmp	r3, r2
 8009212:	d100      	bne.n	8009216 <memset+0xa>
 8009214:	4770      	bx	lr
 8009216:	f803 1b01 	strb.w	r1, [r3], #1
 800921a:	e7f9      	b.n	8009210 <memset+0x4>

0800921c <_sbrk_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4d06      	ldr	r5, [pc, #24]	@ (8009238 <_sbrk_r+0x1c>)
 8009220:	2300      	movs	r3, #0
 8009222:	4604      	mov	r4, r0
 8009224:	4608      	mov	r0, r1
 8009226:	602b      	str	r3, [r5, #0]
 8009228:	f7f7 fdae 	bl	8000d88 <_sbrk>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d102      	bne.n	8009236 <_sbrk_r+0x1a>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	b103      	cbz	r3, 8009236 <_sbrk_r+0x1a>
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	20000ad8 	.word	0x20000ad8

0800923c <__errno>:
 800923c:	4b01      	ldr	r3, [pc, #4]	@ (8009244 <__errno+0x8>)
 800923e:	6818      	ldr	r0, [r3, #0]
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	2000002c 	.word	0x2000002c

08009248 <__libc_init_array>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	4d0d      	ldr	r5, [pc, #52]	@ (8009280 <__libc_init_array+0x38>)
 800924c:	4c0d      	ldr	r4, [pc, #52]	@ (8009284 <__libc_init_array+0x3c>)
 800924e:	1b64      	subs	r4, r4, r5
 8009250:	10a4      	asrs	r4, r4, #2
 8009252:	2600      	movs	r6, #0
 8009254:	42a6      	cmp	r6, r4
 8009256:	d109      	bne.n	800926c <__libc_init_array+0x24>
 8009258:	4d0b      	ldr	r5, [pc, #44]	@ (8009288 <__libc_init_array+0x40>)
 800925a:	4c0c      	ldr	r4, [pc, #48]	@ (800928c <__libc_init_array+0x44>)
 800925c:	f000 f864 	bl	8009328 <_init>
 8009260:	1b64      	subs	r4, r4, r5
 8009262:	10a4      	asrs	r4, r4, #2
 8009264:	2600      	movs	r6, #0
 8009266:	42a6      	cmp	r6, r4
 8009268:	d105      	bne.n	8009276 <__libc_init_array+0x2e>
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009270:	4798      	blx	r3
 8009272:	3601      	adds	r6, #1
 8009274:	e7ee      	b.n	8009254 <__libc_init_array+0xc>
 8009276:	f855 3b04 	ldr.w	r3, [r5], #4
 800927a:	4798      	blx	r3
 800927c:	3601      	adds	r6, #1
 800927e:	e7f2      	b.n	8009266 <__libc_init_array+0x1e>
 8009280:	08009364 	.word	0x08009364
 8009284:	08009364 	.word	0x08009364
 8009288:	08009364 	.word	0x08009364
 800928c:	08009368 	.word	0x08009368

08009290 <__retarget_lock_acquire_recursive>:
 8009290:	4770      	bx	lr

08009292 <__retarget_lock_release_recursive>:
 8009292:	4770      	bx	lr

08009294 <_free_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	4605      	mov	r5, r0
 8009298:	2900      	cmp	r1, #0
 800929a:	d041      	beq.n	8009320 <_free_r+0x8c>
 800929c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092a0:	1f0c      	subs	r4, r1, #4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	bfb8      	it	lt
 80092a6:	18e4      	addlt	r4, r4, r3
 80092a8:	f7ff ffa4 	bl	80091f4 <__malloc_lock>
 80092ac:	4a1d      	ldr	r2, [pc, #116]	@ (8009324 <_free_r+0x90>)
 80092ae:	6813      	ldr	r3, [r2, #0]
 80092b0:	b933      	cbnz	r3, 80092c0 <_free_r+0x2c>
 80092b2:	6063      	str	r3, [r4, #4]
 80092b4:	6014      	str	r4, [r2, #0]
 80092b6:	4628      	mov	r0, r5
 80092b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092bc:	f7ff bfa0 	b.w	8009200 <__malloc_unlock>
 80092c0:	42a3      	cmp	r3, r4
 80092c2:	d908      	bls.n	80092d6 <_free_r+0x42>
 80092c4:	6820      	ldr	r0, [r4, #0]
 80092c6:	1821      	adds	r1, r4, r0
 80092c8:	428b      	cmp	r3, r1
 80092ca:	bf01      	itttt	eq
 80092cc:	6819      	ldreq	r1, [r3, #0]
 80092ce:	685b      	ldreq	r3, [r3, #4]
 80092d0:	1809      	addeq	r1, r1, r0
 80092d2:	6021      	streq	r1, [r4, #0]
 80092d4:	e7ed      	b.n	80092b2 <_free_r+0x1e>
 80092d6:	461a      	mov	r2, r3
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	b10b      	cbz	r3, 80092e0 <_free_r+0x4c>
 80092dc:	42a3      	cmp	r3, r4
 80092de:	d9fa      	bls.n	80092d6 <_free_r+0x42>
 80092e0:	6811      	ldr	r1, [r2, #0]
 80092e2:	1850      	adds	r0, r2, r1
 80092e4:	42a0      	cmp	r0, r4
 80092e6:	d10b      	bne.n	8009300 <_free_r+0x6c>
 80092e8:	6820      	ldr	r0, [r4, #0]
 80092ea:	4401      	add	r1, r0
 80092ec:	1850      	adds	r0, r2, r1
 80092ee:	4283      	cmp	r3, r0
 80092f0:	6011      	str	r1, [r2, #0]
 80092f2:	d1e0      	bne.n	80092b6 <_free_r+0x22>
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	6053      	str	r3, [r2, #4]
 80092fa:	4408      	add	r0, r1
 80092fc:	6010      	str	r0, [r2, #0]
 80092fe:	e7da      	b.n	80092b6 <_free_r+0x22>
 8009300:	d902      	bls.n	8009308 <_free_r+0x74>
 8009302:	230c      	movs	r3, #12
 8009304:	602b      	str	r3, [r5, #0]
 8009306:	e7d6      	b.n	80092b6 <_free_r+0x22>
 8009308:	6820      	ldr	r0, [r4, #0]
 800930a:	1821      	adds	r1, r4, r0
 800930c:	428b      	cmp	r3, r1
 800930e:	bf04      	itt	eq
 8009310:	6819      	ldreq	r1, [r3, #0]
 8009312:	685b      	ldreq	r3, [r3, #4]
 8009314:	6063      	str	r3, [r4, #4]
 8009316:	bf04      	itt	eq
 8009318:	1809      	addeq	r1, r1, r0
 800931a:	6021      	streq	r1, [r4, #0]
 800931c:	6054      	str	r4, [r2, #4]
 800931e:	e7ca      	b.n	80092b6 <_free_r+0x22>
 8009320:	bd38      	pop	{r3, r4, r5, pc}
 8009322:	bf00      	nop
 8009324:	2000099c 	.word	0x2000099c

08009328 <_init>:
 8009328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932a:	bf00      	nop
 800932c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932e:	bc08      	pop	{r3}
 8009330:	469e      	mov	lr, r3
 8009332:	4770      	bx	lr

08009334 <_fini>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr
