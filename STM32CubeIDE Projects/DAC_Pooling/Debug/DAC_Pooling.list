
DAC_Pooling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000905c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080091e4  080091e4  0000a1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009200  08009200  0000b080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009200  08009200  0000a200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009208  08009208  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009208  08009208  0000a208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800920c  0800920c  0000a20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009210  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b080  2**0
                  CONTENTS
 10 .bss          00000a34  20000080  20000080  0000b080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ab4  20000ab4  0000b080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017bd8  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038f5  00000000  00000000  00022c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  00026580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001098  00000000  00000000  00027af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e8d  00000000  00000000  00028b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b263  00000000  00000000  0004ca1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3a83  00000000  00000000  00067c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013b703  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000601c  00000000  00000000  0013b748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  00141764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080091cc 	.word	0x080091cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	080091cc 	.word	0x080091cc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b988 	b.w	8000d6c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	468e      	mov	lr, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4688      	mov	r8, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d962      	bls.n	8000b50 <__udivmoddi4+0xdc>
 8000a8a:	fab2 f682 	clz	r6, r2
 8000a8e:	b14e      	cbz	r6, 8000aa4 <__udivmoddi4+0x30>
 8000a90:	f1c6 0320 	rsb	r3, r6, #32
 8000a94:	fa01 f806 	lsl.w	r8, r1, r6
 8000a98:	fa20 f303 	lsr.w	r3, r0, r3
 8000a9c:	40b7      	lsls	r7, r6
 8000a9e:	ea43 0808 	orr.w	r8, r3, r8
 8000aa2:	40b4      	lsls	r4, r6
 8000aa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa8:	fa1f fc87 	uxth.w	ip, r7
 8000aac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab0:	0c23      	lsrs	r3, r4, #16
 8000ab2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ab6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aba:	fb01 f20c 	mul.w	r2, r1, ip
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ac8:	f080 80ea 	bcs.w	8000ca0 <__udivmoddi4+0x22c>
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f240 80e7 	bls.w	8000ca0 <__udivmoddi4+0x22c>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	443b      	add	r3, r7
 8000ad6:	1a9a      	subs	r2, r3, r2
 8000ad8:	b2a3      	uxth	r3, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aea:	459c      	cmp	ip, r3
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x8e>
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af4:	f080 80d6 	bcs.w	8000ca4 <__udivmoddi4+0x230>
 8000af8:	459c      	cmp	ip, r3
 8000afa:	f240 80d3 	bls.w	8000ca4 <__udivmoddi4+0x230>
 8000afe:	443b      	add	r3, r7
 8000b00:	3802      	subs	r0, #2
 8000b02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b06:	eba3 030c 	sub.w	r3, r3, ip
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11d      	cbz	r5, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40f3      	lsrs	r3, r6
 8000b10:	2200      	movs	r2, #0
 8000b12:	e9c5 3200 	strd	r3, r2, [r5]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d905      	bls.n	8000b2a <__udivmoddi4+0xb6>
 8000b1e:	b10d      	cbz	r5, 8000b24 <__udivmoddi4+0xb0>
 8000b20:	e9c5 0100 	strd	r0, r1, [r5]
 8000b24:	2100      	movs	r1, #0
 8000b26:	4608      	mov	r0, r1
 8000b28:	e7f5      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d146      	bne.n	8000bc0 <__udivmoddi4+0x14c>
 8000b32:	4573      	cmp	r3, lr
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xc8>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 8105 	bhi.w	8000d46 <__udivmoddi4+0x2d2>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	4690      	mov	r8, r2
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e5      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b4e:	e7e2      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f000 8090 	beq.w	8000c76 <__udivmoddi4+0x202>
 8000b56:	fab2 f682 	clz	r6, r2
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	f040 80a4 	bne.w	8000ca8 <__udivmoddi4+0x234>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	0c03      	lsrs	r3, r0, #16
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	b2bc      	uxth	r4, r7
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d907      	bls.n	8000b92 <__udivmoddi4+0x11e>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x11c>
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	f200 80e0 	bhi.w	8000d50 <__udivmoddi4+0x2dc>
 8000b90:	46c4      	mov	ip, r8
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba0:	fb02 f404 	mul.w	r4, r2, r4
 8000ba4:	429c      	cmp	r4, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x144>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x142>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f200 80ca 	bhi.w	8000d4a <__udivmoddi4+0x2d6>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	1b1b      	subs	r3, r3, r4
 8000bba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bca:	431f      	orrs	r7, r3
 8000bcc:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000bd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	fa1f fc87 	uxth.w	ip, r7
 8000be6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x1a0>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c06:	f080 809c 	bcs.w	8000d42 <__udivmoddi4+0x2ce>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8099 	bls.w	8000d42 <__udivmoddi4+0x2ce>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	fa1f fe83 	uxth.w	lr, r3
 8000c1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c20:	fb09 4413 	mls	r4, r9, r3, r4
 8000c24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x1ce>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c36:	f080 8082 	bcs.w	8000d3e <__udivmoddi4+0x2ca>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d97f      	bls.n	8000d3e <__udivmoddi4+0x2ca>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c46:	eba4 040c 	sub.w	r4, r4, ip
 8000c4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c4e:	4564      	cmp	r4, ip
 8000c50:	4673      	mov	r3, lr
 8000c52:	46e1      	mov	r9, ip
 8000c54:	d362      	bcc.n	8000d1c <__udivmoddi4+0x2a8>
 8000c56:	d05f      	beq.n	8000d18 <__udivmoddi4+0x2a4>
 8000c58:	b15d      	cbz	r5, 8000c72 <__udivmoddi4+0x1fe>
 8000c5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c62:	fa04 f606 	lsl.w	r6, r4, r6
 8000c66:	fa22 f301 	lsr.w	r3, r2, r1
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	40cc      	lsrs	r4, r1
 8000c6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c72:	2100      	movs	r1, #0
 8000c74:	e74f      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000c76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c7a:	0c01      	lsrs	r1, r0, #16
 8000c7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c80:	b280      	uxth	r0, r0
 8000c82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c86:	463b      	mov	r3, r7
 8000c88:	4638      	mov	r0, r7
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	46b8      	mov	r8, r7
 8000c8e:	46be      	mov	lr, r7
 8000c90:	2620      	movs	r6, #32
 8000c92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c96:	eba2 0208 	sub.w	r2, r2, r8
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	e766      	b.n	8000b6e <__udivmoddi4+0xfa>
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	e718      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	e72c      	b.n	8000b02 <__udivmoddi4+0x8e>
 8000ca8:	f1c6 0220 	rsb	r2, r6, #32
 8000cac:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	40b1      	lsls	r1, r6
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cc2:	b2bc      	uxth	r4, r7
 8000cc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb08 f904 	mul.w	r9, r8, r4
 8000cd2:	40b0      	lsls	r0, r6
 8000cd4:	4589      	cmp	r9, r1
 8000cd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cda:	b280      	uxth	r0, r0
 8000cdc:	d93e      	bls.n	8000d5c <__udivmoddi4+0x2e8>
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ce4:	d201      	bcs.n	8000cea <__udivmoddi4+0x276>
 8000ce6:	4589      	cmp	r9, r1
 8000ce8:	d81f      	bhi.n	8000d2a <__udivmoddi4+0x2b6>
 8000cea:	eba1 0109 	sub.w	r1, r1, r9
 8000cee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf2:	fb09 f804 	mul.w	r8, r9, r4
 8000cf6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d00:	4542      	cmp	r2, r8
 8000d02:	d229      	bcs.n	8000d58 <__udivmoddi4+0x2e4>
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d0a:	d2c4      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d0c:	4542      	cmp	r2, r8
 8000d0e:	d2c2      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d10:	f1a9 0102 	sub.w	r1, r9, #2
 8000d14:	443a      	add	r2, r7
 8000d16:	e7be      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d18:	45f0      	cmp	r8, lr
 8000d1a:	d29d      	bcs.n	8000c58 <__udivmoddi4+0x1e4>
 8000d1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d24:	3801      	subs	r0, #1
 8000d26:	46e1      	mov	r9, ip
 8000d28:	e796      	b.n	8000c58 <__udivmoddi4+0x1e4>
 8000d2a:	eba7 0909 	sub.w	r9, r7, r9
 8000d2e:	4449      	add	r1, r9
 8000d30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d38:	fb09 f804 	mul.w	r8, r9, r4
 8000d3c:	e7db      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d3e:	4673      	mov	r3, lr
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1ce>
 8000d42:	4650      	mov	r0, sl
 8000d44:	e766      	b.n	8000c14 <__udivmoddi4+0x1a0>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e6fd      	b.n	8000b46 <__udivmoddi4+0xd2>
 8000d4a:	443b      	add	r3, r7
 8000d4c:	3a02      	subs	r2, #2
 8000d4e:	e733      	b.n	8000bb8 <__udivmoddi4+0x144>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	443b      	add	r3, r7
 8000d56:	e71c      	b.n	8000b92 <__udivmoddi4+0x11e>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d5c:	eba1 0109 	sub.w	r1, r1, r9
 8000d60:	46c4      	mov	ip, r8
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fb09 f804 	mul.w	r8, r9, r4
 8000d6a:	e7c4      	b.n	8000cf6 <__udivmoddi4+0x282>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f000 fcca 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f868 	bl	8000e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 f9b4 	bl	80010e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d80:	f000 f8f8 	bl	8000f74 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d84:	f000 f924 	bl	8000fd0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d88:	f007 fdca 	bl	8008920 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000d8c:	f000 f956 	bl	800103c <MX_TIM1_Init>
  MX_DAC_Init();
 8000d90:	f000 f8c6 	bl	8000f20 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000d94:	2100      	movs	r1, #0
 8000d96:	4828      	ldr	r0, [pc, #160]	@ (8000e38 <main+0xc8>)
 8000d98:	f000 fe81 	bl	8001a9e <HAL_DAC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	gDOR = gValue*(4096)/3.3;
 8000d9c:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <main+0xcc>)
 8000d9e:	edd3 7a00 	vldr	s15, [r3]
 8000da2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000e40 <main+0xd0>
 8000da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000daa:	ee17 0a90 	vmov	r0, s15
 8000dae:	f7ff fb6f 	bl	8000490 <__aeabi_f2d>
 8000db2:	a31d      	add	r3, pc, #116	@ (adr r3, 8000e28 <main+0xb8>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fcec 	bl	8000794 <__aeabi_ddiv>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff fdce 	bl	8000964 <__aeabi_d2uiz>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a1e      	ldr	r2, [pc, #120]	@ (8000e44 <main+0xd4>)
 8000dcc:	6013      	str	r3, [r2, #0]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, gDOR);
 8000dce:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <main+0xd4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4818      	ldr	r0, [pc, #96]	@ (8000e38 <main+0xc8>)
 8000dd8:	f000 feb8 	bl	8001b4c <HAL_DAC_SetValue>

	gValue += 0.005;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <main+0xcc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fb55 	bl	8000490 <__aeabi_f2d>
 8000de6:	a312      	add	r3, pc, #72	@ (adr r3, 8000e30 <main+0xc0>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff f9f2 	bl	80001d4 <__adddf3>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4610      	mov	r0, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	f7ff fdd4 	bl	80009a4 <__aeabi_d2f>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000e3c <main+0xcc>)
 8000e00:	6013      	str	r3, [r2, #0]

	if(gValue > 3)
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <main+0xcc>)
 8000e04:	edd3 7a00 	vldr	s15, [r3]
 8000e08:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8000e0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e14:	dd02      	ble.n	8000e1c <main+0xac>
	{
		gValue = 0.2;
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <main+0xcc>)
 8000e18:	4a0b      	ldr	r2, [pc, #44]	@ (8000e48 <main+0xd8>)
 8000e1a:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f000 fce7 	bl	80017f0 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e22:	f007 fda3 	bl	800896c <MX_USB_HOST_Process>
	gDOR = gValue*(4096)/3.3;
 8000e26:	e7b9      	b.n	8000d9c <main+0x2c>
 8000e28:	66666666 	.word	0x66666666
 8000e2c:	400a6666 	.word	0x400a6666
 8000e30:	47ae147b 	.word	0x47ae147b
 8000e34:	3f747ae1 	.word	0x3f747ae1
 8000e38:	2000009c 	.word	0x2000009c
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	45800000 	.word	0x45800000
 8000e44:	200001a4 	.word	0x200001a4
 8000e48:	3e4ccccd 	.word	0x3e4ccccd

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b094      	sub	sp, #80	@ 0x50
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0320 	add.w	r3, r7, #32
 8000e56:	2230      	movs	r2, #48	@ 0x30
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f008 f928 	bl	80090b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <SystemClock_Config+0xcc>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e78:	4a27      	ldr	r2, [pc, #156]	@ (8000f18 <SystemClock_Config+0xcc>)
 8000e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e80:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <SystemClock_Config+0xcc>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <SystemClock_Config+0xd0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a21      	ldr	r2, [pc, #132]	@ (8000f1c <SystemClock_Config+0xd0>)
 8000e96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <SystemClock_Config+0xd0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ec0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ec4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 faec 	bl	80044b0 <HAL_RCC_OscConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ede:	f000 fa1f 	bl	8001320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ef2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	2105      	movs	r1, #5
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fd4d 	bl	80049a0 <HAL_RCC_ClockConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f0c:	f000 fa08 	bl	8001320 <Error_Handler>
  }
}
 8000f10:	bf00      	nop
 8000f12:	3750      	adds	r7, #80	@ 0x50
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40007000 	.word	0x40007000

08000f20 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <MX_DAC_Init+0x4c>)
 8000f30:	4a0f      	ldr	r2, [pc, #60]	@ (8000f70 <MX_DAC_Init+0x50>)
 8000f32:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f34:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <MX_DAC_Init+0x4c>)
 8000f36:	f000 fd90 	bl	8001a5a <HAL_DAC_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f40:	f000 f9ee 	bl	8001320 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <MX_DAC_Init+0x4c>)
 8000f54:	f000 fe24 	bl	8001ba0 <HAL_DAC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f5e:	f000 f9df 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000009c 	.word	0x2000009c
 8000f70:	40007400 	.word	0x40007400

08000f74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <MX_I2C1_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <MX_I2C1_Init+0x58>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000fb2:	f003 f939 	bl	8004228 <HAL_I2C_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f000 f9b0 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200000b0 	.word	0x200000b0
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	000186a0 	.word	0x000186a0

08000fd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fd6:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <MX_SPI1_Init+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fdc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fe0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001000:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_SPI1_Init+0x64>)
 800101c:	220a      	movs	r2, #10
 800101e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001022:	f003 fec9 	bl	8004db8 <HAL_SPI_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800102c:	f000 f978 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000104 	.word	0x20000104
 8001038:	40013000 	.word	0x40013000

0800103c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001058:	4b21      	ldr	r3, [pc, #132]	@ (80010e0 <MX_TIM1_Init+0xa4>)
 800105a:	4a22      	ldr	r2, [pc, #136]	@ (80010e4 <MX_TIM1_Init+0xa8>)
 800105c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <MX_TIM1_Init+0xa4>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <MX_TIM1_Init+0xa4>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800106a:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <MX_TIM1_Init+0xa4>)
 800106c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001070:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <MX_TIM1_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001078:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <MX_TIM1_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <MX_TIM1_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001084:	4816      	ldr	r0, [pc, #88]	@ (80010e0 <MX_TIM1_Init+0xa4>)
 8001086:	f003 ff20 	bl	8004eca <HAL_TIM_IC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001090:	f000 f946 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	4619      	mov	r1, r3
 80010a2:	480f      	ldr	r0, [pc, #60]	@ (80010e0 <MX_TIM1_Init+0xa4>)
 80010a4:	f004 f9d2 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80010ae:	f000 f937 	bl	8001320 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010b6:	2301      	movs	r3, #1
 80010b8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_TIM1_Init+0xa4>)
 80010ca:	f003 ff4d 	bl	8004f68 <HAL_TIM_IC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80010d4:	f000 f924 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000015c 	.word	0x2000015c
 80010e4:	40010000 	.word	0x40010000

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	@ 0x30
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	4b81      	ldr	r3, [pc, #516]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a80      	ldr	r2, [pc, #512]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001108:	f043 0310 	orr.w	r3, r3, #16
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b7e      	ldr	r3, [pc, #504]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	4b7a      	ldr	r3, [pc, #488]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a79      	ldr	r2, [pc, #484]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b77      	ldr	r3, [pc, #476]	@ (8001308 <MX_GPIO_Init+0x220>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b73      	ldr	r3, [pc, #460]	@ (8001308 <MX_GPIO_Init+0x220>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a72      	ldr	r2, [pc, #456]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b70      	ldr	r3, [pc, #448]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b6c      	ldr	r3, [pc, #432]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a6b      	ldr	r2, [pc, #428]	@ (8001308 <MX_GPIO_Init+0x220>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b69      	ldr	r3, [pc, #420]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4b65      	ldr	r3, [pc, #404]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a64      	ldr	r2, [pc, #400]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b62      	ldr	r3, [pc, #392]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b5e      	ldr	r3, [pc, #376]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a5d      	ldr	r2, [pc, #372]	@ (8001308 <MX_GPIO_Init+0x220>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b5b      	ldr	r3, [pc, #364]	@ (8001308 <MX_GPIO_Init+0x220>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2108      	movs	r1, #8
 80011aa:	4858      	ldr	r0, [pc, #352]	@ (800130c <MX_GPIO_Init+0x224>)
 80011ac:	f000 feee 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2101      	movs	r1, #1
 80011b4:	4856      	ldr	r0, [pc, #344]	@ (8001310 <MX_GPIO_Init+0x228>)
 80011b6:	f000 fee9 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011ba:	2200      	movs	r2, #0
 80011bc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80011c0:	4854      	ldr	r0, [pc, #336]	@ (8001314 <MX_GPIO_Init+0x22c>)
 80011c2:	f000 fee3 	bl	8001f8c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011c6:	2308      	movs	r3, #8
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	484b      	ldr	r0, [pc, #300]	@ (800130c <MX_GPIO_Init+0x224>)
 80011de:	f000 fd39 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	4845      	ldr	r0, [pc, #276]	@ (8001310 <MX_GPIO_Init+0x228>)
 80011fa:	f000 fd2b 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80011fe:	2308      	movs	r3, #8
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800120e:	2305      	movs	r3, #5
 8001210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	483d      	ldr	r0, [pc, #244]	@ (8001310 <MX_GPIO_Init+0x228>)
 800121a:	f000 fd1b 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800121e:	2301      	movs	r3, #1
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001222:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4839      	ldr	r0, [pc, #228]	@ (8001318 <MX_GPIO_Init+0x230>)
 8001234:	f000 fd0e 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001238:	2304      	movs	r3, #4
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4834      	ldr	r0, [pc, #208]	@ (800131c <MX_GPIO_Init+0x234>)
 800124c:	f000 fd02 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001262:	2305      	movs	r3, #5
 8001264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	482b      	ldr	r0, [pc, #172]	@ (800131c <MX_GPIO_Init+0x234>)
 800126e:	f000 fcf1 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800127c:	2302      	movs	r3, #2
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4823      	ldr	r0, [pc, #140]	@ (8001314 <MX_GPIO_Init+0x22c>)
 8001288:	f000 fce4 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800128c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001290:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	481b      	ldr	r0, [pc, #108]	@ (8001314 <MX_GPIO_Init+0x22c>)
 80012a6:	f000 fcd5 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012aa:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012bc:	2306      	movs	r3, #6
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	4812      	ldr	r0, [pc, #72]	@ (8001310 <MX_GPIO_Init+0x228>)
 80012c8:	f000 fcc4 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80012cc:	2320      	movs	r3, #32
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	480d      	ldr	r0, [pc, #52]	@ (8001314 <MX_GPIO_Init+0x22c>)
 80012e0:	f000 fcb8 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012e8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_GPIO_Init+0x224>)
 80012fa:	f000 fcab 	bl	8001c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012fe:	bf00      	nop
 8001300:	3730      	adds	r7, #48	@ 0x30
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40021000 	.word	0x40021000
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <Error_Handler+0x8>

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	4a0f      	ldr	r2, [pc, #60]	@ (8001378 <HAL_MspInit+0x4c>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001340:	6453      	str	r3, [r2, #68]	@ 0x44
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <HAL_MspInit+0x4c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	@ 0x40
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800136a:	2007      	movs	r0, #7
 800136c:	f000 fb34 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a17      	ldr	r2, [pc, #92]	@ (80013f8 <HAL_DAC_MspInit+0x7c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d127      	bne.n	80013ee <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <HAL_DAC_MspInit+0x80>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <HAL_DAC_MspInit+0x80>)
 80013a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ae:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <HAL_DAC_MspInit+0x80>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_DAC_MspInit+0x80>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a0e      	ldr	r2, [pc, #56]	@ (80013fc <HAL_DAC_MspInit+0x80>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <HAL_DAC_MspInit+0x80>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013d6:	2310      	movs	r3, #16
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013da:	2303      	movs	r3, #3
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	@ (8001400 <HAL_DAC_MspInit+0x84>)
 80013ea:	f000 fc33 	bl	8001c54 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	@ 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40007400 	.word	0x40007400
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020000 	.word	0x40020000

08001404 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	@ 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a19      	ldr	r2, [pc, #100]	@ (8001488 <HAL_I2C_MspInit+0x84>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d12c      	bne.n	8001480 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b18      	ldr	r3, [pc, #96]	@ (800148c <HAL_I2C_MspInit+0x88>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a17      	ldr	r2, [pc, #92]	@ (800148c <HAL_I2C_MspInit+0x88>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_I2C_MspInit+0x88>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001442:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001448:	2312      	movs	r3, #18
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144c:	2301      	movs	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001454:	2304      	movs	r3, #4
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	480c      	ldr	r0, [pc, #48]	@ (8001490 <HAL_I2C_MspInit+0x8c>)
 8001460:	f000 fbf8 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	4b08      	ldr	r3, [pc, #32]	@ (800148c <HAL_I2C_MspInit+0x88>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	4a07      	ldr	r2, [pc, #28]	@ (800148c <HAL_I2C_MspInit+0x88>)
 800146e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001472:	6413      	str	r3, [r2, #64]	@ 0x40
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_I2C_MspInit+0x88>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	@ 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40005400 	.word	0x40005400
 800148c:	40023800 	.word	0x40023800
 8001490:	40020400 	.word	0x40020400

08001494 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a19      	ldr	r2, [pc, #100]	@ (8001518 <HAL_SPI_MspInit+0x84>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12b      	bne.n	800150e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b18      	ldr	r3, [pc, #96]	@ (800151c <HAL_SPI_MspInit+0x88>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	4a17      	ldr	r2, [pc, #92]	@ (800151c <HAL_SPI_MspInit+0x88>)
 80014c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_SPI_MspInit+0x88>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <HAL_SPI_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a10      	ldr	r2, [pc, #64]	@ (800151c <HAL_SPI_MspInit+0x88>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <HAL_SPI_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014ee:	23e0      	movs	r3, #224	@ 0xe0
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014fe:	2305      	movs	r3, #5
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	@ (8001520 <HAL_SPI_MspInit+0x8c>)
 800150a:	f000 fba3 	bl	8001c54 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	@ 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40013000 	.word	0x40013000
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000

08001524 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a19      	ldr	r2, [pc, #100]	@ (80015a8 <HAL_TIM_IC_MspInit+0x84>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d12c      	bne.n	80015a0 <HAL_TIM_IC_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <HAL_TIM_IC_MspInit+0x88>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <HAL_TIM_IC_MspInit+0x88>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6453      	str	r3, [r2, #68]	@ 0x44
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <HAL_TIM_IC_MspInit+0x88>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <HAL_TIM_IC_MspInit+0x88>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a10      	ldr	r2, [pc, #64]	@ (80015ac <HAL_TIM_IC_MspInit+0x88>)
 800156c:	f043 0310 	orr.w	r3, r3, #16
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_TIM_IC_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800157e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001590:	2301      	movs	r3, #1
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <HAL_TIM_IC_MspInit+0x8c>)
 800159c:	f000 fb5a 	bl	8001c54 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	@ 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40021000 	.word	0x40021000

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <NMI_Handler+0x4>

080015bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <MemManage_Handler+0x4>

080015cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <UsageFault_Handler+0x4>

080015dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160a:	f000 f8d1 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <OTG_FS_IRQHandler+0x10>)
 800161a:	f000 ffb1 	bl	8002580 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000058c 	.word	0x2000058c

08001628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001630:	4a14      	ldr	r2, [pc, #80]	@ (8001684 <_sbrk+0x5c>)
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <_sbrk+0x60>)
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4b13      	ldr	r3, [pc, #76]	@ (800168c <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <_sbrk+0x64>)
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <_sbrk+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d207      	bcs.n	8001668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001658:	f007 fd42 	bl	80090e0 <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	e009      	b.n	800167c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b07      	ldr	r3, [pc, #28]	@ (800168c <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20020000 	.word	0x20020000
 8001688:	00000400 	.word	0x00000400
 800168c:	200001a8 	.word	0x200001a8
 8001690:	20000ab8 	.word	0x20000ab8

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016bc:	f7ff ffea 	bl	8001694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c0:	480c      	ldr	r0, [pc, #48]	@ (80016f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016c2:	490d      	ldr	r1, [pc, #52]	@ (80016f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c4:	4a0d      	ldr	r2, [pc, #52]	@ (80016fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001704 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e6:	f007 fd01 	bl	80090ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7ff fb41 	bl	8000d70 <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80016fc:	08009210 	.word	0x08009210
  ldr r2, =_sbss
 8001700:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001704:	20000ab4 	.word	0x20000ab4

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f94f 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fdf4 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f967 	bl	8001a42 <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f92f 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	@ (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000004 	.word	0x20000004
 80017a8:	2000000c 	.word	0x2000000c
 80017ac:	20000008 	.word	0x20000008

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000000c 	.word	0x2000000c
 80017d4:	200001ac 	.word	0x200001ac

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	@ (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200001ac 	.word	0x200001ac

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000000c 	.word	0x2000000c

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	@ (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	@ (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	@ (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e014      	b.n	8001a96 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	791b      	ldrb	r3, [r3, #4]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d105      	bne.n	8001a82 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff fc7d 	bl	800137c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2202      	movs	r2, #2
 8001a86:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e046      	b.n	8001b40 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	795b      	ldrb	r3, [r3, #5]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_DAC_Start+0x20>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e040      	b.n	8001b40 <HAL_DAC_Start+0xa2>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6819      	ldr	r1, [r3, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10f      	bne.n	8001b08 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001af2:	2b3c      	cmp	r3, #60	@ 0x3c
 8001af4:	d11d      	bne.n	8001b32 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	e014      	b.n	8001b32 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	213c      	movs	r1, #60	@ 0x3c
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d107      	bne.n	8001b32 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0202 	orr.w	r2, r2, #2
 8001b30:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e015      	b.n	8001b94 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	e004      	b.n	8001b8a <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	3314      	adds	r3, #20
 8001b88:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_DAC_ConfigChannel+0x1c>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e042      	b.n	8001c46 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	795b      	ldrb	r3, [r3, #5]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_DAC_ConfigChannel+0x2c>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e03c      	b.n	8001c46 <HAL_DAC_ConfigChannel+0xa6>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	22c0      	movs	r2, #192	@ 0xc0
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	400a      	ands	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001c44:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	@ 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	@ 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e16b      	b.n	8001f48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c70:	2201      	movs	r2, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f040 815a 	bne.w	8001f42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d005      	beq.n	8001ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d130      	bne.n	8001d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 0201 	and.w	r2, r3, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d017      	beq.n	8001d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d123      	bne.n	8001d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	69b9      	ldr	r1, [r7, #24]
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80b4 	beq.w	8001f42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b60      	ldr	r3, [pc, #384]	@ (8001f60 <HAL_GPIO_Init+0x30c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f60 <HAL_GPIO_Init+0x30c>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dea:	4b5d      	ldr	r3, [pc, #372]	@ (8001f60 <HAL_GPIO_Init+0x30c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f64 <HAL_GPIO_Init+0x310>)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	@ (8001f68 <HAL_GPIO_Init+0x314>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02b      	beq.n	8001e7a <HAL_GPIO_Init+0x226>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a51      	ldr	r2, [pc, #324]	@ (8001f6c <HAL_GPIO_Init+0x318>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d025      	beq.n	8001e76 <HAL_GPIO_Init+0x222>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a50      	ldr	r2, [pc, #320]	@ (8001f70 <HAL_GPIO_Init+0x31c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01f      	beq.n	8001e72 <HAL_GPIO_Init+0x21e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4f      	ldr	r2, [pc, #316]	@ (8001f74 <HAL_GPIO_Init+0x320>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x21a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001f78 <HAL_GPIO_Init+0x324>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x216>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4d      	ldr	r2, [pc, #308]	@ (8001f7c <HAL_GPIO_Init+0x328>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x212>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f80 <HAL_GPIO_Init+0x32c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x20e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4b      	ldr	r2, [pc, #300]	@ (8001f84 <HAL_GPIO_Init+0x330>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x20a>
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	e00e      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e5e:	2308      	movs	r3, #8
 8001e60:	e00c      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e62:	2306      	movs	r3, #6
 8001e64:	e00a      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e66:	2305      	movs	r3, #5
 8001e68:	e008      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e004      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e002      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	f002 0203 	and.w	r2, r2, #3
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	4093      	lsls	r3, r2
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e8c:	4935      	ldr	r1, [pc, #212]	@ (8001f64 <HAL_GPIO_Init+0x310>)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f88 <HAL_GPIO_Init+0x334>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ebe:	4a32      	ldr	r2, [pc, #200]	@ (8001f88 <HAL_GPIO_Init+0x334>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec4:	4b30      	ldr	r3, [pc, #192]	@ (8001f88 <HAL_GPIO_Init+0x334>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee8:	4a27      	ldr	r2, [pc, #156]	@ (8001f88 <HAL_GPIO_Init+0x334>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eee:	4b26      	ldr	r3, [pc, #152]	@ (8001f88 <HAL_GPIO_Init+0x334>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f12:	4a1d      	ldr	r2, [pc, #116]	@ (8001f88 <HAL_GPIO_Init+0x334>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_GPIO_Init+0x334>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f3c:	4a12      	ldr	r2, [pc, #72]	@ (8001f88 <HAL_GPIO_Init+0x334>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3301      	adds	r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b0f      	cmp	r3, #15
 8001f4c:	f67f ae90 	bls.w	8001c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3724      	adds	r7, #36	@ 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40020c00 	.word	0x40020c00
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40021400 	.word	0x40021400
 8001f80:	40021800 	.word	0x40021800
 8001f84:	40021c00 	.word	0x40021c00
 8001f88:	40013c00 	.word	0x40013c00

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f9c:	787b      	ldrb	r3, [r7, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa8:	e003      	b.n	8001fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	041a      	lsls	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	619a      	str	r2, [r3, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af02      	add	r7, sp, #8
 8001fc4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e059      	b.n	8002084 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f006 fcf6 	bl	80089dc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ffe:	d102      	bne.n	8002006 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f003 fb0f 	bl	800562e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7c1a      	ldrb	r2, [r3, #16]
 8002018:	f88d 2000 	strb.w	r2, [sp]
 800201c:	3304      	adds	r3, #4
 800201e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002020:	f003 fa90 	bl	8005544 <USB_CoreInit>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2202      	movs	r2, #2
 800202e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e026      	b.n	8002084 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2101      	movs	r1, #1
 800203c:	4618      	mov	r0, r3
 800203e:	f003 fb07 	bl	8005650 <USB_SetCurrentMode>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e017      	b.n	8002084 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7c1a      	ldrb	r2, [r3, #16]
 800205c:	f88d 2000 	strb.w	r2, [sp]
 8002060:	3304      	adds	r3, #4
 8002062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002064:	f003 fcaa 	bl	80059bc <USB_HostInit>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e004      	b.n	8002084 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b08b      	sub	sp, #44	@ 0x2c
 8002090:	af04      	add	r7, sp, #16
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	4608      	mov	r0, r1
 8002096:	4611      	mov	r1, r2
 8002098:	461a      	mov	r2, r3
 800209a:	4603      	mov	r3, r0
 800209c:	70fb      	strb	r3, [r7, #3]
 800209e:	460b      	mov	r3, r1
 80020a0:	70bb      	strb	r3, [r7, #2]
 80020a2:	4613      	mov	r3, r2
 80020a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80020a6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80020a8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_HCD_HC_Init+0x2c>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e09d      	b.n	80021f4 <HAL_HCD_HC_Init+0x168>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	3319      	adds	r3, #25
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3314      	adds	r3, #20
 80020e4:	787a      	ldrb	r2, [r7, #1]
 80020e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	3315      	adds	r3, #21
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	3326      	adds	r3, #38	@ 0x26
 800210c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002110:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	78bb      	ldrb	r3, [r7, #2]
 8002116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800211a:	b2d8      	uxtb	r0, r3
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3316      	adds	r3, #22
 800212a:	4602      	mov	r2, r0
 800212c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fbc8 	bl	80028c8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002138:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800213c:	2b00      	cmp	r3, #0
 800213e:	da0a      	bge.n	8002156 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	3317      	adds	r3, #23
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
 8002154:	e009      	b.n	800216a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3317      	adds	r3, #23
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f003 fd88 	bl	8005c84 <USB_GetHostSpeed>
 8002174:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002176:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10b      	bne.n	8002196 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800217e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002182:	2b01      	cmp	r3, #1
 8002184:	d107      	bne.n	8002196 <HAL_HCD_HC_Init+0x10a>
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d104      	bne.n	8002196 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2bbc      	cmp	r3, #188	@ 0xbc
 8002190:	d901      	bls.n	8002196 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002192:	23bc      	movs	r3, #188	@ 0xbc
 8002194:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	3318      	adds	r3, #24
 80021a6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80021aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	b298      	uxth	r0, r3
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	3328      	adds	r3, #40	@ 0x28
 80021c0:	4602      	mov	r2, r0
 80021c2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	787c      	ldrb	r4, [r7, #1]
 80021ce:	78ba      	ldrb	r2, [r7, #2]
 80021d0:	78f9      	ldrb	r1, [r7, #3]
 80021d2:	9302      	str	r3, [sp, #8]
 80021d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	4623      	mov	r3, r4
 80021e2:	f003 fd77 	bl	8005cd4 <USB_HC_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	371c      	adds	r7, #28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd90      	pop	{r4, r7, pc}

080021fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_HCD_HC_Halt+0x1e>
 8002216:	2302      	movs	r3, #2
 8002218:	e00f      	b.n	800223a <HAL_HCD_HC_Halt+0x3e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f004 f909 	bl	8006442 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	4608      	mov	r0, r1
 800224e:	4611      	mov	r1, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4603      	mov	r3, r0
 8002254:	70fb      	strb	r3, [r7, #3]
 8002256:	460b      	mov	r3, r1
 8002258:	70bb      	strb	r3, [r7, #2]
 800225a:	4613      	mov	r3, r2
 800225c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800225e:	78fa      	ldrb	r2, [r7, #3]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	3317      	adds	r3, #23
 800226e:	78ba      	ldrb	r2, [r7, #2]
 8002270:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	3326      	adds	r3, #38	@ 0x26
 8002282:	787a      	ldrb	r2, [r7, #1]
 8002284:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002286:	7c3b      	ldrb	r3, [r7, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d114      	bne.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	332a      	adds	r3, #42	@ 0x2a
 800229c:	2203      	movs	r2, #3
 800229e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	3319      	adds	r3, #25
 80022b0:	7f3a      	ldrb	r2, [r7, #28]
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	e009      	b.n	80022ca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	332a      	adds	r3, #42	@ 0x2a
 80022c6:	2202      	movs	r2, #2
 80022c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022ca:	787b      	ldrb	r3, [r7, #1]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	f200 8102 	bhi.w	80024d6 <HAL_HCD_HC_SubmitRequest+0x292>
 80022d2:	a201      	add	r2, pc, #4	@ (adr r2, 80022d8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80022d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d8:	080022e9 	.word	0x080022e9
 80022dc:	080024c1 	.word	0x080024c1
 80022e0:	080023ad 	.word	0x080023ad
 80022e4:	08002437 	.word	0x08002437
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80022e8:	7c3b      	ldrb	r3, [r7, #16]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	f040 80f5 	bne.w	80024da <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80022f0:	78bb      	ldrb	r3, [r7, #2]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d12d      	bne.n	8002352 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80022f6:	8b3b      	ldrh	r3, [r7, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	333d      	adds	r3, #61	@ 0x3d
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	333d      	adds	r3, #61	@ 0x3d
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10a      	bne.n	800233c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	332a      	adds	r3, #42	@ 0x2a
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800233a:	e0ce      	b.n	80024da <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	332a      	adds	r3, #42	@ 0x2a
 800234c:	2202      	movs	r2, #2
 800234e:	701a      	strb	r2, [r3, #0]
      break;
 8002350:	e0c3      	b.n	80024da <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	331a      	adds	r3, #26
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	f040 80b8 	bne.w	80024da <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	333c      	adds	r3, #60	@ 0x3c
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	332a      	adds	r3, #42	@ 0x2a
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
      break;
 8002394:	e0a1      	b.n	80024da <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	332a      	adds	r3, #42	@ 0x2a
 80023a6:	2202      	movs	r2, #2
 80023a8:	701a      	strb	r2, [r3, #0]
      break;
 80023aa:	e096      	b.n	80024da <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023ac:	78bb      	ldrb	r3, [r7, #2]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d120      	bne.n	80023f4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	333d      	adds	r3, #61	@ 0x3d
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	332a      	adds	r3, #42	@ 0x2a
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023dc:	e07e      	b.n	80024dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	332a      	adds	r3, #42	@ 0x2a
 80023ee:	2202      	movs	r2, #2
 80023f0:	701a      	strb	r2, [r3, #0]
      break;
 80023f2:	e073      	b.n	80024dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	333c      	adds	r3, #60	@ 0x3c
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10a      	bne.n	8002420 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	332a      	adds	r3, #42	@ 0x2a
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
      break;
 800241e:	e05d      	b.n	80024dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	332a      	adds	r3, #42	@ 0x2a
 8002430:	2202      	movs	r2, #2
 8002432:	701a      	strb	r2, [r3, #0]
      break;
 8002434:	e052      	b.n	80024dc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002436:	78bb      	ldrb	r3, [r7, #2]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d120      	bne.n	800247e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	333d      	adds	r3, #61	@ 0x3d
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	332a      	adds	r3, #42	@ 0x2a
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002466:	e039      	b.n	80024dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	332a      	adds	r3, #42	@ 0x2a
 8002478:	2202      	movs	r2, #2
 800247a:	701a      	strb	r2, [r3, #0]
      break;
 800247c:	e02e      	b.n	80024dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	333c      	adds	r3, #60	@ 0x3c
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	332a      	adds	r3, #42	@ 0x2a
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
      break;
 80024a8:	e018      	b.n	80024dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	332a      	adds	r3, #42	@ 0x2a
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]
      break;
 80024be:	e00d      	b.n	80024dc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	332a      	adds	r3, #42	@ 0x2a
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
      break;
 80024d4:	e002      	b.n	80024dc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80024d6:	bf00      	nop
 80024d8:	e000      	b.n	80024dc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80024da:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	332c      	adds	r3, #44	@ 0x2c
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	8b39      	ldrh	r1, [r7, #24]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4403      	add	r3, r0
 8002500:	3334      	adds	r3, #52	@ 0x34
 8002502:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	334c      	adds	r3, #76	@ 0x4c
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	3338      	adds	r3, #56	@ 0x38
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	3315      	adds	r3, #21
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	334d      	adds	r3, #77	@ 0x4d
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	4613      	mov	r3, r2
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	3310      	adds	r3, #16
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	1d19      	adds	r1, r3, #4
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	799b      	ldrb	r3, [r3, #6]
 800256e:	461a      	mov	r2, r3
 8002570:	f003 fcdc 	bl	8005f2c <USB_HC_StartXfer>
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop

08002580 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f003 f9d0 	bl	800593c <USB_GetMode>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f040 80fb 	bne.w	800279a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 f993 	bl	80058d4 <USB_ReadInterrupts>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80f1 	beq.w	8002798 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 f98a 	bl	80058d4 <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025ca:	d104      	bne.n	80025d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80025d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 f97a 	bl	80058d4 <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025ea:	d104      	bne.n	80025f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80025f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 f96a 	bl	80058d4 <USB_ReadInterrupts>
 8002600:	4603      	mov	r3, r0
 8002602:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002606:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800260a:	d104      	bne.n	8002616 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002614:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 f95a 	bl	80058d4 <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b02      	cmp	r3, #2
 8002628:	d103      	bne.n	8002632 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2202      	movs	r2, #2
 8002630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f003 f94c 	bl	80058d4 <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002642:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002646:	d120      	bne.n	800268a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002650:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d113      	bne.n	800268a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002662:	2110      	movs	r1, #16
 8002664:	6938      	ldr	r0, [r7, #16]
 8002666:	f003 f83f 	bl	80056e8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800266a:	6938      	ldr	r0, [r7, #16]
 800266c:	f003 f86e 	bl	800574c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7a5b      	ldrb	r3, [r3, #9]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d105      	bne.n	8002684 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	4618      	mov	r0, r3
 8002680:	f003 fa60 	bl	8005b44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f006 fa27 	bl	8008ad8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f003 f920 	bl	80058d4 <USB_ReadInterrupts>
 8002694:	4603      	mov	r3, r0
 8002696:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800269a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800269e:	d102      	bne.n	80026a6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f001 fd4d 	bl	8004140 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 f912 	bl	80058d4 <USB_ReadInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d106      	bne.n	80026c8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f006 f9f0 	bl	8008aa0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2208      	movs	r2, #8
 80026c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 f901 	bl	80058d4 <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026dc:	d139      	bne.n	8002752 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 fe9c 	bl	8006420 <USB_HC_ReadInterrupt>
 80026e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e025      	b.n	800273c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d018      	beq.n	8002736 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800271a:	d106      	bne.n	800272a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4619      	mov	r1, r3
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f905 	bl	8002932 <HCD_HC_IN_IRQHandler>
 8002728:	e005      	b.n	8002736 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 ff67 	bl	8003604 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3301      	adds	r3, #1
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	795b      	ldrb	r3, [r3, #5]
 8002740:	461a      	mov	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	4293      	cmp	r3, r2
 8002746:	d3d3      	bcc.n	80026f0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f003 f8bc 	bl	80058d4 <USB_ReadInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b10      	cmp	r3, #16
 8002764:	d101      	bne.n	800276a <HAL_HCD_IRQHandler+0x1ea>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_HCD_IRQHandler+0x1ec>
 800276a:	2300      	movs	r3, #0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d014      	beq.n	800279a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0210 	bic.w	r2, r2, #16
 800277e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f001 fbfe 	bl	8003f82 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0210 	orr.w	r2, r2, #16
 8002794:	619a      	str	r2, [r3, #24]
 8002796:	e000      	b.n	800279a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002798:	bf00      	nop
    }
  }
}
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_HCD_Start+0x16>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e013      	b.n	80027de <HAL_HCD_Start+0x3e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 fa24 	bl	8005c12 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 ff1c 	bl	800560c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_HCD_Stop+0x16>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e00d      	b.n	8002818 <HAL_HCD_Stop+0x32>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f003 ff77 	bl	80066fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f003 f9c6 	bl	8005bbe <USB_ResetPort>
 8002832:	4603      	mov	r3, r0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	334c      	adds	r3, #76	@ 0x4c
 8002858:	781b      	ldrb	r3, [r3, #0]
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	3338      	adds	r3, #56	@ 0x38
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f003 fa08 	bl	8005cb2 <USB_GetCurrentFrame>
 80028a2:	4603      	mov	r3, r0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f003 f9e3 	bl	8005c84 <USB_GetHostSpeed>
 80028be:	4603      	mov	r3, r0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	331a      	adds	r3, #26
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	331b      	adds	r3, #27
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	3325      	adds	r3, #37	@ 0x25
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	3324      	adds	r3, #36	@ 0x24
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f002 ffd2 	bl	80058fa <USB_ReadChInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b04      	cmp	r3, #4
 800295e:	d11a      	bne.n	8002996 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800296c:	461a      	mov	r2, r3
 800296e:	2304      	movs	r3, #4
 8002970:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	334d      	adds	r3, #77	@ 0x4d
 8002982:	2207      	movs	r2, #7
 8002984:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f003 fd57 	bl	8006442 <USB_HC_Halt>
 8002994:	e09e      	b.n	8002ad4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 ffab 	bl	80058fa <USB_ReadChInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ae:	d11b      	bne.n	80029e8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029bc:	461a      	mov	r2, r3
 80029be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	334d      	adds	r3, #77	@ 0x4d
 80029d4:	2208      	movs	r2, #8
 80029d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f003 fd2e 	bl	8006442 <USB_HC_Halt>
 80029e6:	e075      	b.n	8002ad4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f002 ff82 	bl	80058fa <USB_ReadChInterrupts>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d11a      	bne.n	8002a36 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2308      	movs	r3, #8
 8002a10:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	334d      	adds	r3, #77	@ 0x4d
 8002a22:	2206      	movs	r2, #6
 8002a24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fd07 	bl	8006442 <USB_HC_Halt>
 8002a34:	e04e      	b.n	8002ad4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 ff5b 	bl	80058fa <USB_ReadChInterrupts>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a4e:	d11b      	bne.n	8002a88 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	334d      	adds	r3, #77	@ 0x4d
 8002a74:	2209      	movs	r2, #9
 8002a76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 fcde 	bl	8006442 <USB_HC_Halt>
 8002a86:	e025      	b.n	8002ad4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f002 ff32 	bl	80058fa <USB_ReadChInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a9c:	2b80      	cmp	r3, #128	@ 0x80
 8002a9e:	d119      	bne.n	8002ad4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	334d      	adds	r3, #77	@ 0x4d
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fcb7 	bl	8006442 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f002 ff0c 	bl	80058fa <USB_ReadChInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aec:	d112      	bne.n	8002b14 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f003 fca3 	bl	8006442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b0e:	6093      	str	r3, [r2, #8]
 8002b10:	f000 bd75 	b.w	80035fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f002 feec 	bl	80058fa <USB_ReadChInterrupts>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	f040 8128 	bne.w	8002d7e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	331b      	adds	r3, #27
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d119      	bne.n	8002b8a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	331b      	adds	r3, #27
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	0151      	lsls	r1, r2, #5
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	440a      	add	r2, r1
 8002b80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b88:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	799b      	ldrb	r3, [r3, #6]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01b      	beq.n	8002bca <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3330      	adds	r3, #48	@ 0x30
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	1ac9      	subs	r1, r1, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4403      	add	r3, r0
 8002bc6:	3338      	adds	r3, #56	@ 0x38
 8002bc8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	334d      	adds	r3, #77	@ 0x4d
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3344      	adds	r3, #68	@ 0x44
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2301      	movs	r3, #1
 8002c02:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	3326      	adds	r3, #38	@ 0x26
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3326      	adds	r3, #38	@ 0x26
 8002c2a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d110      	bne.n	8002c52 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 fc02 	bl	8006442 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	6093      	str	r3, [r2, #8]
 8002c50:	e03d      	b.n	8002cce <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3326      	adds	r3, #38	@ 0x26
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d00a      	beq.n	8002c7e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3326      	adds	r3, #38	@ 0x26
 8002c78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d127      	bne.n	8002cce <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	0151      	lsls	r1, r2, #5
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	440a      	add	r2, r1
 8002c94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c9c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	334c      	adds	r3, #76	@ 0x4c
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	334c      	adds	r3, #76	@ 0x4c
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f005 ff13 	bl	8008af4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	799b      	ldrb	r3, [r3, #6]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d13b      	bne.n	8002d4e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3338      	adds	r3, #56	@ 0x38
 8002ce6:	6819      	ldr	r1, [r3, #0]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4403      	add	r3, r0
 8002cf6:	3328      	adds	r3, #40	@ 0x28
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	440b      	add	r3, r1
 8002cfc:	1e59      	subs	r1, r3, #1
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4403      	add	r3, r0
 8002d0c:	3328      	adds	r3, #40	@ 0x28
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8470 	beq.w	80035fe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	333c      	adds	r3, #60	@ 0x3c
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	f083 0301 	eor.w	r3, r3, #1
 8002d36:	b2d8      	uxtb	r0, r3
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	333c      	adds	r3, #60	@ 0x3c
 8002d46:	4602      	mov	r2, r0
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	f000 bc58 	b.w	80035fe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	333c      	adds	r3, #60	@ 0x3c
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	f083 0301 	eor.w	r3, r3, #1
 8002d66:	b2d8      	uxtb	r0, r3
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	333c      	adds	r3, #60	@ 0x3c
 8002d76:	4602      	mov	r2, r0
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	f000 bc40 	b.w	80035fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 fdb7 	bl	80058fa <USB_ReadChInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d131      	bne.n	8002dfa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da2:	461a      	mov	r2, r3
 8002da4:	2320      	movs	r3, #32
 8002da6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	331a      	adds	r3, #26
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	f040 841f 	bne.w	80035fe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	331b      	adds	r3, #27
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	334d      	adds	r3, #77	@ 0x4d
 8002de4:	2203      	movs	r2, #3
 8002de6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f003 fb26 	bl	8006442 <USB_HC_Halt>
 8002df6:	f000 bc02 	b.w	80035fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 fd79 	bl	80058fa <USB_ReadChInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	f040 8305 	bne.w	800341e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	2302      	movs	r3, #2
 8002e24:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	334d      	adds	r3, #77	@ 0x4d
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d114      	bne.n	8002e66 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	334d      	adds	r3, #77	@ 0x4d
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	334c      	adds	r3, #76	@ 0x4c
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e2cc      	b.n	8003400 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334d      	adds	r3, #77	@ 0x4d
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b06      	cmp	r3, #6
 8002e7a:	d114      	bne.n	8002ea6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	334d      	adds	r3, #77	@ 0x4d
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	334c      	adds	r3, #76	@ 0x4c
 8002ea0:	2205      	movs	r2, #5
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e2ac      	b.n	8003400 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	334d      	adds	r3, #77	@ 0x4d
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b07      	cmp	r3, #7
 8002eba:	d00b      	beq.n	8002ed4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	334d      	adds	r3, #77	@ 0x4d
 8002ecc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ece:	2b09      	cmp	r3, #9
 8002ed0:	f040 80a6 	bne.w	8003020 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	334d      	adds	r3, #77	@ 0x4d
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3344      	adds	r3, #68	@ 0x44
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	1c59      	adds	r1, r3, #1
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4403      	add	r3, r0
 8002f08:	3344      	adds	r3, #68	@ 0x44
 8002f0a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	3344      	adds	r3, #68	@ 0x44
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d943      	bls.n	8002faa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	3344      	adds	r3, #68	@ 0x44
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	331a      	adds	r3, #26
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d123      	bne.n	8002f94 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	331b      	adds	r3, #27
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	331c      	adds	r3, #28
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	0151      	lsls	r1, r2, #5
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	440a      	add	r2, r1
 8002f8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f92:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	334c      	adds	r3, #76	@ 0x4c
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fa8:	e229      	b.n	80033fe <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	334c      	adds	r3, #76	@ 0x4c
 8002fba:	2202      	movs	r2, #2
 8002fbc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3326      	adds	r3, #38	@ 0x26
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3326      	adds	r3, #38	@ 0x26
 8002fe4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	f040 8209 	bne.w	80033fe <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003002:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800300a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003018:	461a      	mov	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800301e:	e1ee      	b.n	80033fe <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334d      	adds	r3, #77	@ 0x4d
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b05      	cmp	r3, #5
 8003034:	f040 80c8 	bne.w	80031c8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	334d      	adds	r3, #77	@ 0x4d
 8003048:	2202      	movs	r2, #2
 800304a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	331b      	adds	r3, #27
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b01      	cmp	r3, #1
 8003060:	f040 81ce 	bne.w	8003400 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3326      	adds	r3, #38	@ 0x26
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d16b      	bne.n	8003152 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3348      	adds	r3, #72	@ 0x48
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1c59      	adds	r1, r3, #1
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4403      	add	r3, r0
 800309a:	3348      	adds	r3, #72	@ 0x48
 800309c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3348      	adds	r3, #72	@ 0x48
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d943      	bls.n	800313c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	3348      	adds	r3, #72	@ 0x48
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	331b      	adds	r3, #27
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	3344      	adds	r3, #68	@ 0x44
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d809      	bhi.n	8003106 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	331c      	adds	r3, #28
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	0151      	lsls	r1, r2, #5
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	440a      	add	r2, r1
 800311c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003124:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	334c      	adds	r3, #76	@ 0x4c
 8003136:	2204      	movs	r2, #4
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e014      	b.n	8003166 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	334c      	adds	r3, #76	@ 0x4c
 800314c:	2202      	movs	r2, #2
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e009      	b.n	8003166 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	334c      	adds	r3, #76	@ 0x4c
 8003162:	2202      	movs	r2, #2
 8003164:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3326      	adds	r3, #38	@ 0x26
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00b      	beq.n	8003194 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3326      	adds	r3, #38	@ 0x26
 800318c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800318e:	2b02      	cmp	r3, #2
 8003190:	f040 8136 	bne.w	8003400 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c0:	461a      	mov	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e11b      	b.n	8003400 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	334d      	adds	r3, #77	@ 0x4d
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	f040 8081 	bne.w	80032e2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	334d      	adds	r3, #77	@ 0x4d
 80031f0:	2202      	movs	r2, #2
 80031f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	331b      	adds	r3, #27
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b01      	cmp	r3, #1
 8003208:	f040 80fa 	bne.w	8003400 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	334c      	adds	r3, #76	@ 0x4c
 800321c:	2202      	movs	r2, #2
 800321e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	0151      	lsls	r1, r2, #5
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	440a      	add	r2, r1
 8003236:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800323a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	0151      	lsls	r1, r2, #5
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	440a      	add	r2, r1
 8003256:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800325a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800325e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	0151      	lsls	r1, r2, #5
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	440a      	add	r2, r1
 8003276:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800327a:	f023 0320 	bic.w	r3, r3, #32
 800327e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3326      	adds	r3, #38	@ 0x26
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	3326      	adds	r3, #38	@ 0x26
 80032a6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	f040 80a9 	bne.w	8003400 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	e08e      	b.n	8003400 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	334d      	adds	r3, #77	@ 0x4d
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d143      	bne.n	8003380 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	334d      	adds	r3, #77	@ 0x4d
 8003308:	2202      	movs	r2, #2
 800330a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	334c      	adds	r3, #76	@ 0x4c
 800331c:	2202      	movs	r2, #2
 800331e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3326      	adds	r3, #38	@ 0x26
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	3326      	adds	r3, #38	@ 0x26
 8003346:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003348:	2b02      	cmp	r3, #2
 800334a:	d159      	bne.n	8003400 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003362:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800336a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4413      	add	r3, r2
 8003374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003378:	461a      	mov	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e03f      	b.n	8003400 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	334d      	adds	r3, #77	@ 0x4d
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b08      	cmp	r3, #8
 8003394:	d126      	bne.n	80033e4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	334d      	adds	r3, #77	@ 0x4d
 80033a6:	2202      	movs	r2, #2
 80033a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	3344      	adds	r3, #68	@ 0x44
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	1c59      	adds	r1, r3, #1
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4403      	add	r3, r0
 80033ca:	3344      	adds	r3, #68	@ 0x44
 80033cc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	334c      	adds	r3, #76	@ 0x4c
 80033de:	2204      	movs	r2, #4
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e00d      	b.n	8003400 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334d      	adds	r3, #77	@ 0x4d
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	f000 8100 	beq.w	80035fc <HCD_HC_IN_IRQHandler+0xcca>
 80033fc:	e000      	b.n	8003400 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	334c      	adds	r3, #76	@ 0x4c
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	4619      	mov	r1, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f005 fb6c 	bl	8008af4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800341c:	e0ef      	b.n	80035fe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f002 fa67 	bl	80058fa <USB_ReadChInterrupts>
 800342c:	4603      	mov	r3, r0
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b40      	cmp	r3, #64	@ 0x40
 8003434:	d12f      	bne.n	8003496 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4413      	add	r3, r2
 800343e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003442:	461a      	mov	r2, r3
 8003444:	2340      	movs	r3, #64	@ 0x40
 8003446:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	334d      	adds	r3, #77	@ 0x4d
 8003458:	2205      	movs	r2, #5
 800345a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	331a      	adds	r3, #26
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	3344      	adds	r3, #68	@ 0x44
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	4611      	mov	r1, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f002 ffd7 	bl	8006442 <USB_HC_Halt>
 8003494:	e0b3      	b.n	80035fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f002 fa2b 	bl	80058fa <USB_ReadChInterrupts>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	f040 80a7 	bne.w	80035fe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	3326      	adds	r3, #38	@ 0x26
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d11b      	bne.n	80034fe <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	3344      	adds	r3, #68	@ 0x44
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	334d      	adds	r3, #77	@ 0x4d
 80034ea:	2204      	movs	r2, #4
 80034ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 ffa3 	bl	8006442 <USB_HC_Halt>
 80034fc:	e03f      	b.n	800357e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3326      	adds	r3, #38	@ 0x26
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	3326      	adds	r3, #38	@ 0x26
 8003524:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003526:	2b02      	cmp	r3, #2
 8003528:	d129      	bne.n	800357e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3344      	adds	r3, #68	@ 0x44
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	799b      	ldrb	r3, [r3, #6]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HCD_HC_IN_IRQHandler+0xc2a>
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	331b      	adds	r3, #27
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d110      	bne.n	800357e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	334d      	adds	r3, #77	@ 0x4d
 800356c:	2204      	movs	r2, #4
 800356e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f002 ff62 	bl	8006442 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	331b      	adds	r3, #27
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d129      	bne.n	80035e8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	331b      	adds	r3, #27
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	0151      	lsls	r1, r2, #5
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	440a      	add	r2, r1
 80035be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	0151      	lsls	r1, r2, #5
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	440a      	add	r2, r1
 80035de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035e2:	f043 0320 	orr.w	r3, r3, #32
 80035e6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f4:	461a      	mov	r2, r3
 80035f6:	2310      	movs	r3, #16
 80035f8:	6093      	str	r3, [r2, #8]
 80035fa:	e000      	b.n	80035fe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80035fc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f002 f969 	bl	80058fa <USB_ReadChInterrupts>
 8003628:	4603      	mov	r3, r0
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b04      	cmp	r3, #4
 8003630:	d11b      	bne.n	800366a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800363e:	461a      	mov	r2, r3
 8003640:	2304      	movs	r3, #4
 8003642:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	334d      	adds	r3, #77	@ 0x4d
 8003654:	2207      	movs	r2, #7
 8003656:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f002 feee 	bl	8006442 <USB_HC_Halt>
 8003666:	f000 bc89 	b.w	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f002 f941 	bl	80058fa <USB_ReadChInterrupts>
 8003678:	4603      	mov	r3, r0
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b20      	cmp	r3, #32
 8003680:	f040 8082 	bne.w	8003788 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003690:	461a      	mov	r2, r3
 8003692:	2320      	movs	r3, #32
 8003694:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3319      	adds	r3, #25
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d124      	bne.n	80036f6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	3319      	adds	r3, #25
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	334c      	adds	r3, #76	@ 0x4c
 80036d0:	2202      	movs	r2, #2
 80036d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	334d      	adds	r3, #77	@ 0x4d
 80036e4:	2203      	movs	r2, #3
 80036e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f002 fea6 	bl	8006442 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	331a      	adds	r3, #26
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	f040 8437 	bne.w	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	331b      	adds	r3, #27
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f040 842b 	bne.w	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	3326      	adds	r3, #38	@ 0x26
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d009      	beq.n	8003750 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	331b      	adds	r3, #27
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	334d      	adds	r3, #77	@ 0x4d
 8003760:	2203      	movs	r2, #3
 8003762:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f002 fe68 	bl	8006442 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3344      	adds	r3, #68	@ 0x44
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e3f9      	b.n	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f002 f8b2 	bl	80058fa <USB_ReadChInterrupts>
 8003796:	4603      	mov	r3, r0
 8003798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800379c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037a0:	d111      	bne.n	80037c6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ae:	461a      	mov	r2, r3
 80037b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f002 fe3f 	bl	8006442 <USB_HC_Halt>
 80037c4:	e3da      	b.n	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f002 f893 	bl	80058fa <USB_ReadChInterrupts>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d168      	bne.n	80038b0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	3344      	adds	r3, #68	@ 0x44
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f002 f87d 	bl	80058fa <USB_ReadChInterrupts>
 8003800:	4603      	mov	r3, r0
 8003802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003806:	2b40      	cmp	r3, #64	@ 0x40
 8003808:	d112      	bne.n	8003830 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	3319      	adds	r3, #25
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382a:	461a      	mov	r2, r3
 800382c:	2340      	movs	r3, #64	@ 0x40
 800382e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	331b      	adds	r3, #27
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d019      	beq.n	800387a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	331b      	adds	r3, #27
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4413      	add	r3, r2
 8003862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	0151      	lsls	r1, r2, #5
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	440a      	add	r2, r1
 8003870:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003878:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4413      	add	r3, r2
 8003882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003886:	461a      	mov	r2, r3
 8003888:	2301      	movs	r3, #1
 800388a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	334d      	adds	r3, #77	@ 0x4d
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f002 fdca 	bl	8006442 <USB_HC_Halt>
 80038ae:	e365      	b.n	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f002 f81e 	bl	80058fa <USB_ReadChInterrupts>
 80038be:	4603      	mov	r3, r0
 80038c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c4:	2b40      	cmp	r3, #64	@ 0x40
 80038c6:	d139      	bne.n	800393c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	334d      	adds	r3, #77	@ 0x4d
 80038d8:	2205      	movs	r2, #5
 80038da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	331a      	adds	r3, #26
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	3319      	adds	r3, #25
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	3344      	adds	r3, #68	@ 0x44
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f002 fd8d 	bl	8006442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4413      	add	r3, r2
 8003930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003934:	461a      	mov	r2, r3
 8003936:	2340      	movs	r3, #64	@ 0x40
 8003938:	6093      	str	r3, [r2, #8]
 800393a:	e31f      	b.n	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f001 ffd8 	bl	80058fa <USB_ReadChInterrupts>
 800394a:	4603      	mov	r3, r0
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b08      	cmp	r3, #8
 8003952:	d11a      	bne.n	800398a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003960:	461a      	mov	r2, r3
 8003962:	2308      	movs	r3, #8
 8003964:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	334d      	adds	r3, #77	@ 0x4d
 8003976:	2206      	movs	r2, #6
 8003978:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f002 fd5d 	bl	8006442 <USB_HC_Halt>
 8003988:	e2f8      	b.n	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f001 ffb1 	bl	80058fa <USB_ReadChInterrupts>
 8003998:	4603      	mov	r3, r0
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	2b10      	cmp	r3, #16
 80039a0:	d144      	bne.n	8003a2c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	3344      	adds	r3, #68	@ 0x44
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	334d      	adds	r3, #77	@ 0x4d
 80039c6:	2204      	movs	r2, #4
 80039c8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	3319      	adds	r3, #25
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d114      	bne.n	8003a0a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	3318      	adds	r3, #24
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3319      	adds	r3, #25
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	4611      	mov	r1, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f002 fd15 	bl	8006442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a24:	461a      	mov	r2, r3
 8003a26:	2310      	movs	r3, #16
 8003a28:	6093      	str	r3, [r2, #8]
 8003a2a:	e2a7      	b.n	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 ff60 	bl	80058fa <USB_ReadChInterrupts>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a40:	2b80      	cmp	r3, #128	@ 0x80
 8003a42:	f040 8083 	bne.w	8003b4c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	799b      	ldrb	r3, [r3, #6]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d111      	bne.n	8003a72 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	334d      	adds	r3, #77	@ 0x4d
 8003a5e:	2207      	movs	r2, #7
 8003a60:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f002 fce9 	bl	8006442 <USB_HC_Halt>
 8003a70:	e062      	b.n	8003b38 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3344      	adds	r3, #68	@ 0x44
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1c59      	adds	r1, r3, #1
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4403      	add	r3, r0
 8003a92:	3344      	adds	r3, #68	@ 0x44
 8003a94:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3344      	adds	r3, #68	@ 0x44
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d922      	bls.n	8003af2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	3344      	adds	r3, #68	@ 0x44
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	334c      	adds	r3, #76	@ 0x4c
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	334c      	adds	r3, #76	@ 0x4c
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f005 f802 	bl	8008af4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003af0:	e022      	b.n	8003b38 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	334c      	adds	r3, #76	@ 0x4c
 8003b02:	2202      	movs	r2, #2
 8003b04:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b1c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b24:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b44:	461a      	mov	r2, r3
 8003b46:	2380      	movs	r3, #128	@ 0x80
 8003b48:	6093      	str	r3, [r2, #8]
 8003b4a:	e217      	b.n	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 fed0 	bl	80058fa <USB_ReadChInterrupts>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b64:	d11b      	bne.n	8003b9e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	334d      	adds	r3, #77	@ 0x4d
 8003b76:	2209      	movs	r2, #9
 8003b78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f002 fc5d 	bl	8006442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b94:	461a      	mov	r2, r3
 8003b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b9a:	6093      	str	r3, [r2, #8]
 8003b9c:	e1ee      	b.n	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 fea7 	bl	80058fa <USB_ReadChInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	f040 81df 	bne.w	8003f76 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	334d      	adds	r3, #77	@ 0x4d
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f040 8093 	bne.w	8003d08 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	334d      	adds	r3, #77	@ 0x4d
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	334c      	adds	r3, #76	@ 0x4c
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	3326      	adds	r3, #38	@ 0x26
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d00b      	beq.n	8003c38 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	3326      	adds	r3, #38	@ 0x26
 8003c30:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	f040 8190 	bne.w	8003f58 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	799b      	ldrb	r3, [r3, #6]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d115      	bne.n	8003c6c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	333d      	adds	r3, #61	@ 0x3d
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	f083 0301 	eor.w	r3, r3, #1
 8003c58:	b2d8      	uxtb	r0, r3
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	333d      	adds	r3, #61	@ 0x3d
 8003c68:	4602      	mov	r2, r0
 8003c6a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	799b      	ldrb	r3, [r3, #6]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	f040 8171 	bne.w	8003f58 <HCD_HC_OUT_IRQHandler+0x954>
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	3334      	adds	r3, #52	@ 0x34
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8165 	beq.w	8003f58 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3334      	adds	r3, #52	@ 0x34
 8003c9e:	6819      	ldr	r1, [r3, #0]
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4403      	add	r3, r0
 8003cae:	3328      	adds	r3, #40	@ 0x28
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	440b      	add	r3, r1
 8003cb4:	1e59      	subs	r1, r3, #1
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4403      	add	r3, r0
 8003cc4:	3328      	adds	r3, #40	@ 0x28
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ccc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 813f 	beq.w	8003f58 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	333d      	adds	r3, #61	@ 0x3d
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	f083 0301 	eor.w	r3, r3, #1
 8003cf2:	b2d8      	uxtb	r0, r3
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	333d      	adds	r3, #61	@ 0x3d
 8003d02:	4602      	mov	r2, r0
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	e127      	b.n	8003f58 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	334d      	adds	r3, #77	@ 0x4d
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d120      	bne.n	8003d60 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	334d      	adds	r3, #77	@ 0x4d
 8003d2e:	2202      	movs	r2, #2
 8003d30:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	331b      	adds	r3, #27
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	f040 8107 	bne.w	8003f58 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	334c      	adds	r3, #76	@ 0x4c
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e0fb      	b.n	8003f58 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	334d      	adds	r3, #77	@ 0x4d
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d13a      	bne.n	8003dec <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	334d      	adds	r3, #77	@ 0x4d
 8003d86:	2202      	movs	r2, #2
 8003d88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	334c      	adds	r3, #76	@ 0x4c
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	331b      	adds	r3, #27
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	f040 80d1 	bne.w	8003f58 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	331b      	adds	r3, #27
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	0151      	lsls	r1, r2, #5
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	440a      	add	r2, r1
 8003de0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de8:	6053      	str	r3, [r2, #4]
 8003dea:	e0b5      	b.n	8003f58 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	334d      	adds	r3, #77	@ 0x4d
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d114      	bne.n	8003e2c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	334d      	adds	r3, #77	@ 0x4d
 8003e12:	2202      	movs	r2, #2
 8003e14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	334c      	adds	r3, #76	@ 0x4c
 8003e26:	2202      	movs	r2, #2
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	e095      	b.n	8003f58 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	334d      	adds	r3, #77	@ 0x4d
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b06      	cmp	r3, #6
 8003e40:	d114      	bne.n	8003e6c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	334d      	adds	r3, #77	@ 0x4d
 8003e52:	2202      	movs	r2, #2
 8003e54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	334c      	adds	r3, #76	@ 0x4c
 8003e66:	2205      	movs	r2, #5
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	e075      	b.n	8003f58 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	334d      	adds	r3, #77	@ 0x4d
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b07      	cmp	r3, #7
 8003e80:	d00a      	beq.n	8003e98 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	334d      	adds	r3, #77	@ 0x4d
 8003e92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e94:	2b09      	cmp	r3, #9
 8003e96:	d170      	bne.n	8003f7a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	334d      	adds	r3, #77	@ 0x4d
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3344      	adds	r3, #68	@ 0x44
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	1c59      	adds	r1, r3, #1
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4403      	add	r3, r0
 8003ecc:	3344      	adds	r3, #68	@ 0x44
 8003ece:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3344      	adds	r3, #68	@ 0x44
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d914      	bls.n	8003f10 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3344      	adds	r3, #68	@ 0x44
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	334c      	adds	r3, #76	@ 0x4c
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f0e:	e022      	b.n	8003f56 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	334c      	adds	r3, #76	@ 0x4c
 8003f20:	2202      	movs	r2, #2
 8003f22:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f3a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f42:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f50:	461a      	mov	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f56:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334c      	adds	r3, #76	@ 0x4c
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f004 fdc0 	bl	8008af4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f74:	e002      	b.n	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003f7a:	bf00      	nop
  }
}
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b08a      	sub	sp, #40	@ 0x28
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	0c5b      	lsrs	r3, r3, #17
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fb6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d004      	beq.n	8003fc8 <HCD_RXQLVL_IRQHandler+0x46>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	f000 80b6 	beq.w	8004132 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003fc6:	e0b7      	b.n	8004138 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80b3 	beq.w	8004136 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	332c      	adds	r3, #44	@ 0x2c
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 80a7 	beq.w	8004136 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3338      	adds	r3, #56	@ 0x38
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	18d1      	adds	r1, r2, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4403      	add	r3, r0
 800400c:	3334      	adds	r3, #52	@ 0x34
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4299      	cmp	r1, r3
 8004012:	f200 8083 	bhi.w	800411c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4613      	mov	r3, r2
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	332c      	adds	r3, #44	@ 0x2c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	b292      	uxth	r2, r2
 8004030:	4619      	mov	r1, r3
 8004032:	f001 fbf7 	bl	8005824 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	332c      	adds	r3, #44	@ 0x2c
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	18d1      	adds	r1, r2, r3
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4403      	add	r3, r0
 800405a:	332c      	adds	r3, #44	@ 0x2c
 800405c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	3338      	adds	r3, #56	@ 0x38
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	18d1      	adds	r1, r2, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4403      	add	r3, r0
 8004082:	3338      	adds	r3, #56	@ 0x38
 8004084:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	4413      	add	r3, r2
 800408e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	0cdb      	lsrs	r3, r3, #19
 8004096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800409a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	3328      	adds	r3, #40	@ 0x28
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d13f      	bne.n	8004136 <HCD_RXQLVL_IRQHandler+0x1b4>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d03c      	beq.n	8004136 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040d2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040da:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040e8:	461a      	mov	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	333c      	adds	r3, #60	@ 0x3c
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	f083 0301 	eor.w	r3, r3, #1
 8004104:	b2d8      	uxtb	r0, r3
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	333c      	adds	r3, #60	@ 0x3c
 8004116:	4602      	mov	r2, r0
 8004118:	701a      	strb	r2, [r3, #0]
      break;
 800411a:	e00c      	b.n	8004136 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	334c      	adds	r3, #76	@ 0x4c
 800412c:	2204      	movs	r2, #4
 800412e:	701a      	strb	r2, [r3, #0]
      break;
 8004130:	e001      	b.n	8004136 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004136:	bf00      	nop
  }
}
 8004138:	bf00      	nop
 800413a:	3728      	adds	r7, #40	@ 0x28
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800416c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b02      	cmp	r3, #2
 8004176:	d10b      	bne.n	8004190 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d102      	bne.n	8004188 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f004 fc9a 	bl	8008abc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f043 0302 	orr.w	r3, r3, #2
 800418e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b08      	cmp	r3, #8
 8004198:	d132      	bne.n	8004200 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f043 0308 	orr.w	r3, r3, #8
 80041a0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d126      	bne.n	80041fa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	7a5b      	ldrb	r3, [r3, #9]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d113      	bne.n	80041dc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80041ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041be:	d106      	bne.n	80041ce <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2102      	movs	r1, #2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f001 fcbc 	bl	8005b44 <USB_InitFSLSPClkSel>
 80041cc:	e011      	b.n	80041f2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2101      	movs	r1, #1
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 fcb5 	bl	8005b44 <USB_InitFSLSPClkSel>
 80041da:	e00a      	b.n	80041f2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	79db      	ldrb	r3, [r3, #7]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d106      	bne.n	80041f2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041ea:	461a      	mov	r2, r3
 80041ec:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80041f0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f004 fc8c 	bl	8008b10 <HAL_HCD_PortEnabled_Callback>
 80041f8:	e002      	b.n	8004200 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f004 fc96 	bl	8008b2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b20      	cmp	r3, #32
 8004208:	d103      	bne.n	8004212 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f043 0320 	orr.w	r3, r3, #32
 8004210:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004218:	461a      	mov	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6013      	str	r3, [r2, #0]
}
 800421e:	bf00      	nop
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e12b      	b.n	8004492 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fd f8d8 	bl	8001404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	@ 0x24
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800427a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800428a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800428c:	f000 fd80 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8004290:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4a81      	ldr	r2, [pc, #516]	@ (800449c <HAL_I2C_Init+0x274>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d807      	bhi.n	80042ac <HAL_I2C_Init+0x84>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a80      	ldr	r2, [pc, #512]	@ (80044a0 <HAL_I2C_Init+0x278>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	bf94      	ite	ls
 80042a4:	2301      	movls	r3, #1
 80042a6:	2300      	movhi	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	e006      	b.n	80042ba <HAL_I2C_Init+0x92>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4a7d      	ldr	r2, [pc, #500]	@ (80044a4 <HAL_I2C_Init+0x27c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	bf94      	ite	ls
 80042b4:	2301      	movls	r3, #1
 80042b6:	2300      	movhi	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e0e7      	b.n	8004492 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a78      	ldr	r2, [pc, #480]	@ (80044a8 <HAL_I2C_Init+0x280>)
 80042c6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ca:	0c9b      	lsrs	r3, r3, #18
 80042cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4a6a      	ldr	r2, [pc, #424]	@ (800449c <HAL_I2C_Init+0x274>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d802      	bhi.n	80042fc <HAL_I2C_Init+0xd4>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	3301      	adds	r3, #1
 80042fa:	e009      	b.n	8004310 <HAL_I2C_Init+0xe8>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004302:	fb02 f303 	mul.w	r3, r2, r3
 8004306:	4a69      	ldr	r2, [pc, #420]	@ (80044ac <HAL_I2C_Init+0x284>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	3301      	adds	r3, #1
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	430b      	orrs	r3, r1
 8004316:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004322:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	495c      	ldr	r1, [pc, #368]	@ (800449c <HAL_I2C_Init+0x274>)
 800432c:	428b      	cmp	r3, r1
 800432e:	d819      	bhi.n	8004364 <HAL_I2C_Init+0x13c>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1e59      	subs	r1, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	fbb1 f3f3 	udiv	r3, r1, r3
 800433e:	1c59      	adds	r1, r3, #1
 8004340:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004344:	400b      	ands	r3, r1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_I2C_Init+0x138>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1e59      	subs	r1, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fbb1 f3f3 	udiv	r3, r1, r3
 8004358:	3301      	adds	r3, #1
 800435a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435e:	e051      	b.n	8004404 <HAL_I2C_Init+0x1dc>
 8004360:	2304      	movs	r3, #4
 8004362:	e04f      	b.n	8004404 <HAL_I2C_Init+0x1dc>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d111      	bne.n	8004390 <HAL_I2C_Init+0x168>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1e58      	subs	r0, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	440b      	add	r3, r1
 800437a:	fbb0 f3f3 	udiv	r3, r0, r3
 800437e:	3301      	adds	r3, #1
 8004380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	e012      	b.n	80043b6 <HAL_I2C_Init+0x18e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1e58      	subs	r0, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	0099      	lsls	r1, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a6:	3301      	adds	r3, #1
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_I2C_Init+0x196>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e022      	b.n	8004404 <HAL_I2C_Init+0x1dc>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10e      	bne.n	80043e4 <HAL_I2C_Init+0x1bc>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1e58      	subs	r0, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6859      	ldr	r1, [r3, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	440b      	add	r3, r1
 80043d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80043d8:	3301      	adds	r3, #1
 80043da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043e2:	e00f      	b.n	8004404 <HAL_I2C_Init+0x1dc>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1e58      	subs	r0, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6859      	ldr	r1, [r3, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	0099      	lsls	r1, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fa:	3301      	adds	r3, #1
 80043fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004400:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	6809      	ldr	r1, [r1, #0]
 8004408:	4313      	orrs	r3, r2
 800440a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004432:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6911      	ldr	r1, [r2, #16]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68d2      	ldr	r2, [r2, #12]
 800443e:	4311      	orrs	r1, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	430b      	orrs	r3, r1
 8004446:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	000186a0 	.word	0x000186a0
 80044a0:	001e847f 	.word	0x001e847f
 80044a4:	003d08ff 	.word	0x003d08ff
 80044a8:	431bde83 	.word	0x431bde83
 80044ac:	10624dd3 	.word	0x10624dd3

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e267      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d075      	beq.n	80045ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ce:	4b88      	ldr	r3, [pc, #544]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d00c      	beq.n	80044f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044da:	4b85      	ldr	r3, [pc, #532]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d112      	bne.n	800450c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e6:	4b82      	ldr	r3, [pc, #520]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044f2:	d10b      	bne.n	800450c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	4b7e      	ldr	r3, [pc, #504]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d05b      	beq.n	80045b8 <HAL_RCC_OscConfig+0x108>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d157      	bne.n	80045b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e242      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004514:	d106      	bne.n	8004524 <HAL_RCC_OscConfig+0x74>
 8004516:	4b76      	ldr	r3, [pc, #472]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a75      	ldr	r2, [pc, #468]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e01d      	b.n	8004560 <HAL_RCC_OscConfig+0xb0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x98>
 800452e:	4b70      	ldr	r3, [pc, #448]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a6f      	ldr	r2, [pc, #444]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b6d      	ldr	r3, [pc, #436]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a6c      	ldr	r2, [pc, #432]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0xb0>
 8004548:	4b69      	ldr	r3, [pc, #420]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a68      	ldr	r2, [pc, #416]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800454e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b66      	ldr	r3, [pc, #408]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a65      	ldr	r2, [pc, #404]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800455a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800455e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fd f936 	bl	80017d8 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7fd f932 	bl	80017d8 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	@ 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e207      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	4b5b      	ldr	r3, [pc, #364]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0xc0>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fd f922 	bl	80017d8 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004598:	f7fd f91e 	bl	80017d8 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	@ 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e1f3      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045aa:	4b51      	ldr	r3, [pc, #324]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0xe8>
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d063      	beq.n	800468e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045c6:	4b4a      	ldr	r3, [pc, #296]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d2:	4b47      	ldr	r3, [pc, #284]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d11c      	bne.n	8004618 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045de:	4b44      	ldr	r3, [pc, #272]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d116      	bne.n	8004618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ea:	4b41      	ldr	r3, [pc, #260]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_RCC_OscConfig+0x152>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e1c7      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004602:	4b3b      	ldr	r3, [pc, #236]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4937      	ldr	r1, [pc, #220]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004616:	e03a      	b.n	800468e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d020      	beq.n	8004662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004620:	4b34      	ldr	r3, [pc, #208]	@ (80046f4 <HAL_RCC_OscConfig+0x244>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004626:	f7fd f8d7 	bl	80017d8 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462e:	f7fd f8d3 	bl	80017d8 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e1a8      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004640:	4b2b      	ldr	r3, [pc, #172]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464c:	4b28      	ldr	r3, [pc, #160]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4925      	ldr	r1, [pc, #148]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]
 8004660:	e015      	b.n	800468e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004662:	4b24      	ldr	r3, [pc, #144]	@ (80046f4 <HAL_RCC_OscConfig+0x244>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fd f8b6 	bl	80017d8 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004670:	f7fd f8b2 	bl	80017d8 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e187      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004682:	4b1b      	ldr	r3, [pc, #108]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d036      	beq.n	8004708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d016      	beq.n	80046d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a2:	4b15      	ldr	r3, [pc, #84]	@ (80046f8 <HAL_RCC_OscConfig+0x248>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fd f896 	bl	80017d8 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b0:	f7fd f892 	bl	80017d8 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e167      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c2:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <HAL_RCC_OscConfig+0x240>)
 80046c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x200>
 80046ce:	e01b      	b.n	8004708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d0:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <HAL_RCC_OscConfig+0x248>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d6:	f7fd f87f 	bl	80017d8 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046dc:	e00e      	b.n	80046fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046de:	f7fd f87b 	bl	80017d8 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d907      	bls.n	80046fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e150      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
 80046f0:	40023800 	.word	0x40023800
 80046f4:	42470000 	.word	0x42470000
 80046f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046fc:	4b88      	ldr	r3, [pc, #544]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80046fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1ea      	bne.n	80046de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8097 	beq.w	8004844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004716:	2300      	movs	r3, #0
 8004718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471a:	4b81      	ldr	r3, [pc, #516]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10f      	bne.n	8004746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	4b7d      	ldr	r3, [pc, #500]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	4a7c      	ldr	r2, [pc, #496]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004734:	6413      	str	r3, [r2, #64]	@ 0x40
 8004736:	4b7a      	ldr	r3, [pc, #488]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004746:	4b77      	ldr	r3, [pc, #476]	@ (8004924 <HAL_RCC_OscConfig+0x474>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d118      	bne.n	8004784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004752:	4b74      	ldr	r3, [pc, #464]	@ (8004924 <HAL_RCC_OscConfig+0x474>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a73      	ldr	r2, [pc, #460]	@ (8004924 <HAL_RCC_OscConfig+0x474>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800475c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475e:	f7fd f83b 	bl	80017d8 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004766:	f7fd f837 	bl	80017d8 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e10c      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004778:	4b6a      	ldr	r3, [pc, #424]	@ (8004924 <HAL_RCC_OscConfig+0x474>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x2ea>
 800478c:	4b64      	ldr	r3, [pc, #400]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004790:	4a63      	ldr	r2, [pc, #396]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6713      	str	r3, [r2, #112]	@ 0x70
 8004798:	e01c      	b.n	80047d4 <HAL_RCC_OscConfig+0x324>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b05      	cmp	r3, #5
 80047a0:	d10c      	bne.n	80047bc <HAL_RCC_OscConfig+0x30c>
 80047a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047a8:	f043 0304 	orr.w	r3, r3, #4
 80047ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ba:	e00b      	b.n	80047d4 <HAL_RCC_OscConfig+0x324>
 80047bc:	4b58      	ldr	r3, [pc, #352]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c0:	4a57      	ldr	r2, [pc, #348]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c8:	4b55      	ldr	r3, [pc, #340]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047cc:	4a54      	ldr	r2, [pc, #336]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047ce:	f023 0304 	bic.w	r3, r3, #4
 80047d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d015      	beq.n	8004808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7fc fffc 	bl	80017d8 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e4:	f7fc fff8 	bl	80017d8 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e0cb      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fa:	4b49      	ldr	r3, [pc, #292]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ee      	beq.n	80047e4 <HAL_RCC_OscConfig+0x334>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004808:	f7fc ffe6 	bl	80017d8 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480e:	e00a      	b.n	8004826 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004810:	f7fc ffe2 	bl	80017d8 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e0b5      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004826:	4b3e      	ldr	r3, [pc, #248]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1ee      	bne.n	8004810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004832:	7dfb      	ldrb	r3, [r7, #23]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004838:	4b39      	ldr	r3, [pc, #228]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	4a38      	ldr	r2, [pc, #224]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 800483e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004842:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80a1 	beq.w	8004990 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800484e:	4b34      	ldr	r3, [pc, #208]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b08      	cmp	r3, #8
 8004858:	d05c      	beq.n	8004914 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d141      	bne.n	80048e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004862:	4b31      	ldr	r3, [pc, #196]	@ (8004928 <HAL_RCC_OscConfig+0x478>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fc ffb6 	bl	80017d8 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004870:	f7fc ffb2 	bl	80017d8 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e087      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004882:	4b27      	ldr	r3, [pc, #156]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69da      	ldr	r2, [r3, #28]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	019b      	lsls	r3, r3, #6
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	3b01      	subs	r3, #1
 80048a8:	041b      	lsls	r3, r3, #16
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	061b      	lsls	r3, r3, #24
 80048b2:	491b      	ldr	r1, [pc, #108]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004928 <HAL_RCC_OscConfig+0x478>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048be:	f7fc ff8b 	bl	80017d8 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c6:	f7fc ff87 	bl	80017d8 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e05c      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d8:	4b11      	ldr	r3, [pc, #68]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x416>
 80048e4:	e054      	b.n	8004990 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e6:	4b10      	ldr	r3, [pc, #64]	@ (8004928 <HAL_RCC_OscConfig+0x478>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ec:	f7fc ff74 	bl	80017d8 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f4:	f7fc ff70 	bl	80017d8 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e045      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004906:	4b06      	ldr	r3, [pc, #24]	@ (8004920 <HAL_RCC_OscConfig+0x470>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x444>
 8004912:	e03d      	b.n	8004990 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d107      	bne.n	800492c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e038      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
 8004920:	40023800 	.word	0x40023800
 8004924:	40007000 	.word	0x40007000
 8004928:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800492c:	4b1b      	ldr	r3, [pc, #108]	@ (800499c <HAL_RCC_OscConfig+0x4ec>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d028      	beq.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d121      	bne.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004952:	429a      	cmp	r2, r3
 8004954:	d11a      	bne.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800495c:	4013      	ands	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004962:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004964:	4293      	cmp	r3, r2
 8004966:	d111      	bne.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	3b01      	subs	r3, #1
 8004976:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d107      	bne.n	800498c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004986:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800

080049a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0cc      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b4:	4b68      	ldr	r3, [pc, #416]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d90c      	bls.n	80049dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b65      	ldr	r3, [pc, #404]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b63      	ldr	r3, [pc, #396]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0b8      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d020      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f4:	4b59      	ldr	r3, [pc, #356]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a58      	ldr	r2, [pc, #352]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a0c:	4b53      	ldr	r3, [pc, #332]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a52      	ldr	r2, [pc, #328]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a18:	4b50      	ldr	r3, [pc, #320]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	494d      	ldr	r1, [pc, #308]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d044      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3e:	4b47      	ldr	r3, [pc, #284]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d119      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e07f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d003      	beq.n	8004a5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e06f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e067      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a7e:	4b37      	ldr	r3, [pc, #220]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f023 0203 	bic.w	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4934      	ldr	r1, [pc, #208]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a90:	f7fc fea2 	bl	80017d8 <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a98:	f7fc fe9e 	bl	80017d8 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e04f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	4b2b      	ldr	r3, [pc, #172]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 020c 	and.w	r2, r3, #12
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d1eb      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b25      	ldr	r3, [pc, #148]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d20c      	bcs.n	8004ae8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b22      	ldr	r3, [pc, #136]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad6:	4b20      	ldr	r3, [pc, #128]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e032      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af4:	4b19      	ldr	r3, [pc, #100]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4916      	ldr	r1, [pc, #88]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b12:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	490e      	ldr	r1, [pc, #56]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b26:	f000 f821 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	490a      	ldr	r1, [pc, #40]	@ (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 8004b38:	5ccb      	ldrb	r3, [r1, r3]
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	4a09      	ldr	r2, [pc, #36]	@ (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b42:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fc fe02 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023c00 	.word	0x40023c00
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	080091e8 	.word	0x080091e8
 8004b64:	20000004 	.word	0x20000004
 8004b68:	20000008 	.word	0x20000008

08004b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b70:	b094      	sub	sp, #80	@ 0x50
 8004b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b84:	4b79      	ldr	r3, [pc, #484]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d00d      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x40>
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	f200 80e1 	bhi.w	8004d58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b9e:	e0db      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4b73      	ldr	r3, [pc, #460]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ba4:	e0db      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ba6:	4b73      	ldr	r3, [pc, #460]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004baa:	e0d8      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bac:	4b6f      	ldr	r3, [pc, #444]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d063      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	2200      	movs	r2, #0
 8004bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bde:	4622      	mov	r2, r4
 8004be0:	462b      	mov	r3, r5
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	0159      	lsls	r1, r3, #5
 8004bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf0:	0150      	lsls	r0, r2, #5
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	1a51      	subs	r1, r2, r1
 8004bfa:	6139      	str	r1, [r7, #16]
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c10:	4659      	mov	r1, fp
 8004c12:	018b      	lsls	r3, r1, #6
 8004c14:	4651      	mov	r1, sl
 8004c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	018a      	lsls	r2, r1, #6
 8004c1e:	4651      	mov	r1, sl
 8004c20:	ebb2 0801 	subs.w	r8, r2, r1
 8004c24:	4659      	mov	r1, fp
 8004c26:	eb63 0901 	sbc.w	r9, r3, r1
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c3e:	4690      	mov	r8, r2
 8004c40:	4699      	mov	r9, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	eb18 0303 	adds.w	r3, r8, r3
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	462b      	mov	r3, r5
 8004c4c:	eb49 0303 	adc.w	r3, r9, r3
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c5e:	4629      	mov	r1, r5
 8004c60:	024b      	lsls	r3, r1, #9
 8004c62:	4621      	mov	r1, r4
 8004c64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c68:	4621      	mov	r1, r4
 8004c6a:	024a      	lsls	r2, r1, #9
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c72:	2200      	movs	r2, #0
 8004c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c7c:	f7fb fee2 	bl	8000a44 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4613      	mov	r3, r2
 8004c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c88:	e058      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8a:	4b38      	ldr	r3, [pc, #224]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	099b      	lsrs	r3, r3, #6
 8004c90:	2200      	movs	r2, #0
 8004c92:	4618      	mov	r0, r3
 8004c94:	4611      	mov	r1, r2
 8004c96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	f04f 0000 	mov.w	r0, #0
 8004cac:	f04f 0100 	mov.w	r1, #0
 8004cb0:	0159      	lsls	r1, r3, #5
 8004cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb6:	0150      	lsls	r0, r2, #5
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cdc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ce0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	00eb      	lsls	r3, r5, #3
 8004cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cf2:	00e2      	lsls	r2, r4, #3
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	4643      	mov	r3, r8
 8004cfa:	18e3      	adds	r3, r4, r3
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	464b      	mov	r3, r9
 8004d00:	eb45 0303 	adc.w	r3, r5, r3
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d12:	4629      	mov	r1, r5
 8004d14:	028b      	lsls	r3, r1, #10
 8004d16:	4621      	mov	r1, r4
 8004d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	028a      	lsls	r2, r1, #10
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d26:	2200      	movs	r2, #0
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	61fa      	str	r2, [r7, #28]
 8004d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d30:	f7fb fe88 	bl	8000a44 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	3301      	adds	r3, #1
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d56:	e002      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d58:	4b05      	ldr	r3, [pc, #20]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3750      	adds	r7, #80	@ 0x50
 8004d64:	46bd      	mov	sp, r7
 8004d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	00f42400 	.word	0x00f42400
 8004d74:	007a1200 	.word	0x007a1200

08004d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d7c:	4b03      	ldr	r3, [pc, #12]	@ (8004d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20000004 	.word	0x20000004

08004d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d94:	f7ff fff0 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	0a9b      	lsrs	r3, r3, #10
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	4903      	ldr	r1, [pc, #12]	@ (8004db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da6:	5ccb      	ldrb	r3, [r1, r3]
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40023800 	.word	0x40023800
 8004db4:	080091f8 	.word	0x080091f8

08004db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e07b      	b.n	8004ec2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d108      	bne.n	8004de4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dda:	d009      	beq.n	8004df0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	61da      	str	r2, [r3, #28]
 8004de2:	e005      	b.n	8004df0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fc fb42 	bl	8001494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e74:	ea42 0103 	orr.w	r1, r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	f003 0104 	and.w	r1, r3, #4
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	f003 0210 	and.w	r2, r3, #16
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e041      	b.n	8004f60 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7fc fb17 	bl	8001524 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f000 f8c9 	bl	80050a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e088      	b.n	8005098 <HAL_TIM_IC_ConfigChannel+0x130>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d11b      	bne.n	8004fcc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004fa4:	f000 f928 	bl	80051f8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 020c 	bic.w	r2, r2, #12
 8004fb6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6999      	ldr	r1, [r3, #24]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	619a      	str	r2, [r3, #24]
 8004fca:	e060      	b.n	800508e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d11c      	bne.n	800500c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004fe2:	f000 f97d 	bl	80052e0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004ff4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6999      	ldr	r1, [r3, #24]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	021a      	lsls	r2, r3, #8
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	619a      	str	r2, [r3, #24]
 800500a:	e040      	b.n	800508e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b08      	cmp	r3, #8
 8005010:	d11b      	bne.n	800504a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005022:	f000 f99a 	bl	800535a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 020c 	bic.w	r2, r2, #12
 8005034:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69d9      	ldr	r1, [r3, #28]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	61da      	str	r2, [r3, #28]
 8005048:	e021      	b.n	800508e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b0c      	cmp	r3, #12
 800504e:	d11c      	bne.n	800508a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005060:	f000 f9b7 	bl	80053d2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005072:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69d9      	ldr	r1, [r3, #28]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	61da      	str	r2, [r3, #28]
 8005088:	e001      	b.n	800508e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005096:	7dfb      	ldrb	r3, [r7, #23]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a46      	ldr	r2, [pc, #280]	@ (80051cc <TIM_Base_SetConfig+0x12c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <TIM_Base_SetConfig+0x40>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050be:	d00f      	beq.n	80050e0 <TIM_Base_SetConfig+0x40>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a43      	ldr	r2, [pc, #268]	@ (80051d0 <TIM_Base_SetConfig+0x130>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00b      	beq.n	80050e0 <TIM_Base_SetConfig+0x40>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a42      	ldr	r2, [pc, #264]	@ (80051d4 <TIM_Base_SetConfig+0x134>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <TIM_Base_SetConfig+0x40>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a41      	ldr	r2, [pc, #260]	@ (80051d8 <TIM_Base_SetConfig+0x138>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_Base_SetConfig+0x40>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a40      	ldr	r2, [pc, #256]	@ (80051dc <TIM_Base_SetConfig+0x13c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d108      	bne.n	80050f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a35      	ldr	r2, [pc, #212]	@ (80051cc <TIM_Base_SetConfig+0x12c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d02b      	beq.n	8005152 <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005100:	d027      	beq.n	8005152 <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a32      	ldr	r2, [pc, #200]	@ (80051d0 <TIM_Base_SetConfig+0x130>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d023      	beq.n	8005152 <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a31      	ldr	r2, [pc, #196]	@ (80051d4 <TIM_Base_SetConfig+0x134>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01f      	beq.n	8005152 <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a30      	ldr	r2, [pc, #192]	@ (80051d8 <TIM_Base_SetConfig+0x138>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01b      	beq.n	8005152 <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a2f      	ldr	r2, [pc, #188]	@ (80051dc <TIM_Base_SetConfig+0x13c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d017      	beq.n	8005152 <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a2e      	ldr	r2, [pc, #184]	@ (80051e0 <TIM_Base_SetConfig+0x140>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a2d      	ldr	r2, [pc, #180]	@ (80051e4 <TIM_Base_SetConfig+0x144>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00f      	beq.n	8005152 <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a2c      	ldr	r2, [pc, #176]	@ (80051e8 <TIM_Base_SetConfig+0x148>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00b      	beq.n	8005152 <TIM_Base_SetConfig+0xb2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a2b      	ldr	r2, [pc, #172]	@ (80051ec <TIM_Base_SetConfig+0x14c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a2a      	ldr	r2, [pc, #168]	@ (80051f0 <TIM_Base_SetConfig+0x150>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d003      	beq.n	8005152 <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a29      	ldr	r2, [pc, #164]	@ (80051f4 <TIM_Base_SetConfig+0x154>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d108      	bne.n	8005164 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a10      	ldr	r2, [pc, #64]	@ (80051cc <TIM_Base_SetConfig+0x12c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_Base_SetConfig+0xf8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a12      	ldr	r2, [pc, #72]	@ (80051dc <TIM_Base_SetConfig+0x13c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d103      	bne.n	80051a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d105      	bne.n	80051be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f023 0201 	bic.w	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	611a      	str	r2, [r3, #16]
  }
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40010400 	.word	0x40010400
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800
 80051ec:	40001800 	.word	0x40001800
 80051f0:	40001c00 	.word	0x40001c00
 80051f4:	40002000 	.word	0x40002000

080051f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f023 0201 	bic.w	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4a28      	ldr	r2, [pc, #160]	@ (80052c4 <TIM_TI1_SetConfig+0xcc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01b      	beq.n	800525e <TIM_TI1_SetConfig+0x66>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522c:	d017      	beq.n	800525e <TIM_TI1_SetConfig+0x66>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4a25      	ldr	r2, [pc, #148]	@ (80052c8 <TIM_TI1_SetConfig+0xd0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <TIM_TI1_SetConfig+0x66>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4a24      	ldr	r2, [pc, #144]	@ (80052cc <TIM_TI1_SetConfig+0xd4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00f      	beq.n	800525e <TIM_TI1_SetConfig+0x66>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a23      	ldr	r2, [pc, #140]	@ (80052d0 <TIM_TI1_SetConfig+0xd8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_TI1_SetConfig+0x66>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4a22      	ldr	r2, [pc, #136]	@ (80052d4 <TIM_TI1_SetConfig+0xdc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <TIM_TI1_SetConfig+0x66>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4a21      	ldr	r2, [pc, #132]	@ (80052d8 <TIM_TI1_SetConfig+0xe0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_TI1_SetConfig+0x66>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a20      	ldr	r2, [pc, #128]	@ (80052dc <TIM_TI1_SetConfig+0xe4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d101      	bne.n	8005262 <TIM_TI1_SetConfig+0x6a>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <TIM_TI1_SetConfig+0x6c>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d008      	beq.n	800527a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e003      	b.n	8005282 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	b2db      	uxtb	r3, r3
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f023 030a 	bic.w	r3, r3, #10
 800529c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f003 030a 	and.w	r3, r3, #10
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800
 80052d0:	40000c00 	.word	0x40000c00
 80052d4:	40010400 	.word	0x40010400
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40001800 	.word	0x40001800

080052e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f023 0210 	bic.w	r2, r3, #16
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800530c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800531e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	031b      	lsls	r3, r3, #12
 8005324:	b29b      	uxth	r3, r3
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005332:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800535a:	b480      	push	{r7}
 800535c:	b087      	sub	sp, #28
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
 8005366:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f023 0303 	bic.w	r3, r3, #3
 8005386:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005396:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	b2db      	uxtb	r3, r3
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80053aa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	621a      	str	r2, [r3, #32]
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b087      	sub	sp, #28
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005410:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	031b      	lsls	r3, r3, #12
 8005416:	b29b      	uxth	r3, r3
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005424:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	031b      	lsls	r3, r3, #12
 800542a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	621a      	str	r2, [r3, #32]
}
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005460:	2302      	movs	r3, #2
 8005462:	e05a      	b.n	800551a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a21      	ldr	r2, [pc, #132]	@ (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d022      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b0:	d01d      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1d      	ldr	r2, [pc, #116]	@ (800552c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d018      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00e      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a18      	ldr	r2, [pc, #96]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d009      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a17      	ldr	r2, [pc, #92]	@ (800553c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d004      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a15      	ldr	r2, [pc, #84]	@ (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d10c      	bne.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40010000 	.word	0x40010000
 800552c:	40000400 	.word	0x40000400
 8005530:	40000800 	.word	0x40000800
 8005534:	40000c00 	.word	0x40000c00
 8005538:	40010400 	.word	0x40010400
 800553c:	40014000 	.word	0x40014000
 8005540:	40001800 	.word	0x40001800

08005544 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005544:	b084      	sub	sp, #16
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	f107 001c 	add.w	r0, r7, #28
 8005552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005556:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800555a:	2b01      	cmp	r3, #1
 800555c:	d123      	bne.n	80055a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005562:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005586:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800558a:	2b01      	cmp	r3, #1
 800558c:	d105      	bne.n	800559a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f9dc 	bl	8005958 <USB_CoreReset>
 80055a0:	4603      	mov	r3, r0
 80055a2:	73fb      	strb	r3, [r7, #15]
 80055a4:	e01b      	b.n	80055de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9d0 	bl	8005958 <USB_CoreReset>
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80055d0:	e005      	b.n	80055de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055de:	7fbb      	ldrb	r3, [r7, #30]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d10b      	bne.n	80055fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f043 0206 	orr.w	r2, r3, #6
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005608:	b004      	add	sp, #16
 800560a:	4770      	bx	lr

0800560c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f043 0201 	orr.w	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f023 0201 	bic.w	r2, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d115      	bne.n	800569e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800567e:	200a      	movs	r0, #10
 8005680:	f7fc f8b6 	bl	80017f0 <HAL_Delay>
      ms += 10U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	330a      	adds	r3, #10
 8005688:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f956 	bl	800593c <USB_GetMode>
 8005690:	4603      	mov	r3, r0
 8005692:	2b01      	cmp	r3, #1
 8005694:	d01e      	beq.n	80056d4 <USB_SetCurrentMode+0x84>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2bc7      	cmp	r3, #199	@ 0xc7
 800569a:	d9f0      	bls.n	800567e <USB_SetCurrentMode+0x2e>
 800569c:	e01a      	b.n	80056d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d115      	bne.n	80056d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056b0:	200a      	movs	r0, #10
 80056b2:	f7fc f89d 	bl	80017f0 <HAL_Delay>
      ms += 10U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	330a      	adds	r3, #10
 80056ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f93d 	bl	800593c <USB_GetMode>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <USB_SetCurrentMode+0x84>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80056cc:	d9f0      	bls.n	80056b0 <USB_SetCurrentMode+0x60>
 80056ce:	e001      	b.n	80056d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e005      	b.n	80056e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2bc8      	cmp	r3, #200	@ 0xc8
 80056d8:	d101      	bne.n	80056de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3301      	adds	r3, #1
 80056fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005702:	d901      	bls.n	8005708 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e01b      	b.n	8005740 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	daf2      	bge.n	80056f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	019b      	lsls	r3, r3, #6
 8005718:	f043 0220 	orr.w	r2, r3, #32
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3301      	adds	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800572c:	d901      	bls.n	8005732 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e006      	b.n	8005740 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b20      	cmp	r3, #32
 800573c:	d0f0      	beq.n	8005720 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005764:	d901      	bls.n	800576a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e018      	b.n	800579c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	daf2      	bge.n	8005758 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2210      	movs	r2, #16
 800577a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3301      	adds	r3, #1
 8005780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005788:	d901      	bls.n	800578e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e006      	b.n	800579c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	2b10      	cmp	r3, #16
 8005798:	d0f0      	beq.n	800577c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b089      	sub	sp, #36	@ 0x24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	4611      	mov	r1, r2
 80057b4:	461a      	mov	r2, r3
 80057b6:	460b      	mov	r3, r1
 80057b8:	71fb      	strb	r3, [r7, #7]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d123      	bne.n	8005816 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057ce:	88bb      	ldrh	r3, [r7, #4]
 80057d0:	3303      	adds	r3, #3
 80057d2:	089b      	lsrs	r3, r3, #2
 80057d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	e018      	b.n	800580e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	031a      	lsls	r2, r3, #12
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057e8:	461a      	mov	r2, r3
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	3301      	adds	r3, #1
 80057f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	3301      	adds	r3, #1
 80057fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3301      	adds	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	3301      	adds	r3, #1
 8005806:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	3301      	adds	r3, #1
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	429a      	cmp	r2, r3
 8005814:	d3e2      	bcc.n	80057dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3724      	adds	r7, #36	@ 0x24
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005824:	b480      	push	{r7}
 8005826:	b08b      	sub	sp, #44	@ 0x2c
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	4613      	mov	r3, r2
 8005830:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	089b      	lsrs	r3, r3, #2
 800583e:	b29b      	uxth	r3, r3
 8005840:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	f003 0303 	and.w	r3, r3, #3
 8005848:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800584a:	2300      	movs	r3, #0
 800584c:	623b      	str	r3, [r7, #32]
 800584e:	e014      	b.n	800587a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585a:	601a      	str	r2, [r3, #0]
    pDest++;
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	3301      	adds	r3, #1
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	3301      	adds	r3, #1
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	3301      	adds	r3, #1
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	3301      	adds	r3, #1
 8005872:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	3301      	adds	r3, #1
 8005878:	623b      	str	r3, [r7, #32]
 800587a:	6a3a      	ldr	r2, [r7, #32]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	429a      	cmp	r2, r3
 8005880:	d3e6      	bcc.n	8005850 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005882:	8bfb      	ldrh	r3, [r7, #30]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01e      	beq.n	80058c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005892:	461a      	mov	r2, r3
 8005894:	f107 0310 	add.w	r3, r7, #16
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	fa22 f303 	lsr.w	r3, r2, r3
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	701a      	strb	r2, [r3, #0]
      i++;
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	3301      	adds	r3, #1
 80058b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	3301      	adds	r3, #1
 80058b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80058ba:	8bfb      	ldrh	r3, [r7, #30]
 80058bc:	3b01      	subs	r3, #1
 80058be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058c0:	8bfb      	ldrh	r3, [r7, #30]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1ea      	bne.n	800589c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	372c      	adds	r7, #44	@ 0x2c
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4013      	ands	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058ec:	68fb      	ldr	r3, [r7, #12]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	460b      	mov	r3, r1
 8005904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	4013      	ands	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800592e:	68bb      	ldr	r3, [r7, #8]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	f003 0301 	and.w	r3, r3, #1
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3301      	adds	r3, #1
 8005968:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005970:	d901      	bls.n	8005976 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e01b      	b.n	80059ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	daf2      	bge.n	8005964 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f043 0201 	orr.w	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3301      	adds	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800599a:	d901      	bls.n	80059a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e006      	b.n	80059ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d0f0      	beq.n	800598e <USB_CoreReset+0x36>

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059bc:	b084      	sub	sp, #16
 80059be:	b580      	push	{r7, lr}
 80059c0:	b086      	sub	sp, #24
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059dc:	461a      	mov	r2, r3
 80059de:	2300      	movs	r3, #0
 80059e0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d119      	bne.n	8005a46 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d10a      	bne.n	8005a30 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a28:	f043 0304 	orr.w	r3, r3, #4
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	e014      	b.n	8005a5a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a3e:	f023 0304 	bic.w	r3, r3, #4
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	e009      	b.n	8005a5a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a54:	f023 0304 	bic.w	r3, r3, #4
 8005a58:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a5a:	2110      	movs	r1, #16
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff fe43 	bl	80056e8 <USB_FlushTxFifo>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff fe6d 	bl	800574c <USB_FlushRxFifo>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	e015      	b.n	8005aae <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f04f 33ff 	mov.w	r3, #4294967295
 8005a94:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d3e3      	bcc.n	8005a82 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a18      	ldr	r2, [pc, #96]	@ (8005b2c <USB_HostInit+0x170>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d10b      	bne.n	8005ae8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ad6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a15      	ldr	r2, [pc, #84]	@ (8005b30 <USB_HostInit+0x174>)
 8005adc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a14      	ldr	r2, [pc, #80]	@ (8005b34 <USB_HostInit+0x178>)
 8005ae2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005ae6:	e009      	b.n	8005afc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2280      	movs	r2, #128	@ 0x80
 8005aec:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a11      	ldr	r2, [pc, #68]	@ (8005b38 <USB_HostInit+0x17c>)
 8005af2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a11      	ldr	r2, [pc, #68]	@ (8005b3c <USB_HostInit+0x180>)
 8005af8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005afc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d105      	bne.n	8005b10 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f043 0210 	orr.w	r2, r3, #16
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	4b0a      	ldr	r3, [pc, #40]	@ (8005b40 <USB_HostInit+0x184>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b28:	b004      	add	sp, #16
 8005b2a:	4770      	bx	lr
 8005b2c:	40040000 	.word	0x40040000
 8005b30:	01000200 	.word	0x01000200
 8005b34:	00e00300 	.word	0x00e00300
 8005b38:	00600080 	.word	0x00600080
 8005b3c:	004000e0 	.word	0x004000e0
 8005b40:	a3200008 	.word	0xa3200008

08005b44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d107      	bne.n	8005b96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005b92:	6053      	str	r3, [r2, #4]
 8005b94:	e00c      	b.n	8005bb0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d107      	bne.n	8005bac <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005ba8:	6053      	str	r3, [r2, #4]
 8005baa:	e001      	b.n	8005bb0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005bde:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bec:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005bee:	2064      	movs	r0, #100	@ 0x64
 8005bf0:	f7fb fdfe 	bl	80017f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c00:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c02:	200a      	movs	r0, #10
 8005c04:	f7fb fdf4 	bl	80017f0 <HAL_Delay>

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005c36:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <USB_DriveVbus+0x44>
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d106      	bne.n	8005c56 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c54:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c60:	d109      	bne.n	8005c76 <USB_DriveVbus+0x64>
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c74:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	0c5b      	lsrs	r3, r3, #17
 8005ca2:	f003 0303 	and.w	r3, r3, #3
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	b29b      	uxth	r3, r3
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	4608      	mov	r0, r1
 8005cde:	4611      	mov	r1, r2
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	70fb      	strb	r3, [r7, #3]
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	70bb      	strb	r3, [r7, #2]
 8005cea:	4613      	mov	r3, r2
 8005cec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d02:	461a      	mov	r2, r3
 8005d04:	f04f 33ff 	mov.w	r3, #4294967295
 8005d08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d0a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d87c      	bhi.n	8005e0c <USB_HC_Init+0x138>
 8005d12:	a201      	add	r2, pc, #4	@ (adr r2, 8005d18 <USB_HC_Init+0x44>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d29 	.word	0x08005d29
 8005d1c:	08005dcf 	.word	0x08005dcf
 8005d20:	08005d29 	.word	0x08005d29
 8005d24:	08005d91 	.word	0x08005d91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d34:	461a      	mov	r2, r3
 8005d36:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005d3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	da10      	bge.n	8005d66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	78fa      	ldrb	r2, [r7, #3]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d62:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005d64:	e055      	b.n	8005e12 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a6f      	ldr	r2, [pc, #444]	@ (8005f28 <USB_HC_Init+0x254>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d151      	bne.n	8005e12 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	78fa      	ldrb	r2, [r7, #3]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d88:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005d8c:	60d3      	str	r3, [r2, #12]
      break;
 8005d8e:	e040      	b.n	8005e12 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005da2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005da4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da34      	bge.n	8005e16 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	78fa      	ldrb	r2, [r7, #3]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005dcc:	e023      	b.n	8005e16 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f240 2325 	movw	r3, #549	@ 0x225
 8005de0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005de2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	da17      	bge.n	8005e1a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	78fa      	ldrb	r2, [r7, #3]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e04:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005e08:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e0a:	e006      	b.n	8005e1a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	77fb      	strb	r3, [r7, #31]
      break;
 8005e10:	e004      	b.n	8005e1c <USB_HC_Init+0x148>
      break;
 8005e12:	bf00      	nop
 8005e14:	e002      	b.n	8005e1c <USB_HC_Init+0x148>
      break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <USB_HC_Init+0x148>
      break;
 8005e1a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e28:	461a      	mov	r2, r3
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	78fa      	ldrb	r2, [r7, #3]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e48:	f043 0302 	orr.w	r3, r3, #2
 8005e4c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e62:	6939      	ldr	r1, [r7, #16]
 8005e64:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	da03      	bge.n	8005e88 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e84:	61bb      	str	r3, [r7, #24]
 8005e86:	e001      	b.n	8005e8c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff fef9 	bl	8005c84 <USB_GetHostSpeed>
 8005e92:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005e94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d106      	bne.n	8005eaa <USB_HC_Init+0x1d6>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d003      	beq.n	8005eaa <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ea2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e001      	b.n	8005eae <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005eae:	787b      	ldrb	r3, [r7, #1]
 8005eb0:	059b      	lsls	r3, r3, #22
 8005eb2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005eb6:	78bb      	ldrb	r3, [r7, #2]
 8005eb8:	02db      	lsls	r3, r3, #11
 8005eba:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ebe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ec0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005ec4:	049b      	lsls	r3, r3, #18
 8005ec6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005eca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005ecc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ed2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005ee8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005eec:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005eee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d003      	beq.n	8005efe <USB_HC_Init+0x22a>
 8005ef6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d10f      	bne.n	8005f1e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	78fa      	ldrb	r2, [r7, #3]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f1c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3720      	adds	r7, #32
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40040000 	.word	0x40040000

08005f2c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08c      	sub	sp, #48	@ 0x30
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	4613      	mov	r3, r2
 8005f38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005f44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f48:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80060c4 <USB_HC_StartXfer+0x198>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d12f      	bne.n	8005fb2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d11c      	bne.n	8005f92 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	7c9b      	ldrb	r3, [r3, #18]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <USB_HC_StartXfer+0x3c>
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	7c9b      	ldrb	r3, [r3, #18]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d124      	bne.n	8005fb2 <USB_HC_StartXfer+0x86>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	799b      	ldrb	r3, [r3, #6]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d120      	bne.n	8005fb2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	6a3a      	ldr	r2, [r7, #32]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8e:	60d3      	str	r3, [r2, #12]
 8005f90:	e00f      	b.n	8005fb2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	791b      	ldrb	r3, [r3, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10b      	bne.n	8005fb2 <USB_HC_StartXfer+0x86>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	795b      	ldrb	r3, [r3, #5]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d107      	bne.n	8005fb2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	785b      	ldrb	r3, [r3, #1]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 fb6b 	bl	8006684 <USB_DoPing>
        return HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	e232      	b.n	8006418 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	799b      	ldrb	r3, [r3, #6]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d158      	bne.n	800606c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	78db      	ldrb	r3, [r3, #3]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005fc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	8a92      	ldrh	r2, [r2, #20]
 8005fcc:	fb03 f202 	mul.w	r2, r3, r2
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	61da      	str	r2, [r3, #28]
 8005fd4:	e07c      	b.n	80060d0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	7c9b      	ldrb	r3, [r3, #18]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d130      	bne.n	8006040 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	2bbc      	cmp	r3, #188	@ 0xbc
 8005fe4:	d918      	bls.n	8006018 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	8a9b      	ldrh	r3, [r3, #20]
 8005fea:	461a      	mov	r2, r3
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d003      	beq.n	8006008 <USB_HC_StartXfer+0xdc>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d103      	bne.n	8006010 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2202      	movs	r2, #2
 800600c:	60da      	str	r2, [r3, #12]
 800600e:	e05f      	b.n	80060d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2201      	movs	r2, #1
 8006014:	60da      	str	r2, [r3, #12]
 8006016:	e05b      	b.n	80060d0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	6a1a      	ldr	r2, [r3, #32]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d007      	beq.n	8006038 <USB_HC_StartXfer+0x10c>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d003      	beq.n	8006038 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2204      	movs	r2, #4
 8006034:	60da      	str	r2, [r3, #12]
 8006036:	e04b      	b.n	80060d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2203      	movs	r2, #3
 800603c:	60da      	str	r2, [r3, #12]
 800603e:	e047      	b.n	80060d0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d10d      	bne.n	8006062 <USB_HC_StartXfer+0x136>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	8a92      	ldrh	r2, [r2, #20]
 800604e:	4293      	cmp	r3, r2
 8006050:	d907      	bls.n	8006062 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006052:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	8a92      	ldrh	r2, [r2, #20]
 8006058:	fb03 f202 	mul.w	r2, r3, r2
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	61da      	str	r2, [r3, #28]
 8006060:	e036      	b.n	80060d0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	61da      	str	r2, [r3, #28]
 800606a:	e031      	b.n	80060d0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d018      	beq.n	80060a6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	8a92      	ldrh	r2, [r2, #20]
 800607c:	4413      	add	r3, r2
 800607e:	3b01      	subs	r3, #1
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	8a92      	ldrh	r2, [r2, #20]
 8006084:	fbb3 f3f2 	udiv	r3, r3, r2
 8006088:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800608a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800608c:	8b7b      	ldrh	r3, [r7, #26]
 800608e:	429a      	cmp	r2, r3
 8006090:	d90b      	bls.n	80060aa <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006092:	8b7b      	ldrh	r3, [r7, #26]
 8006094:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006096:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	8a92      	ldrh	r2, [r2, #20]
 800609c:	fb03 f202 	mul.w	r2, r3, r2
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	61da      	str	r2, [r3, #28]
 80060a4:	e001      	b.n	80060aa <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80060a6:	2301      	movs	r3, #1
 80060a8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	78db      	ldrb	r3, [r3, #3]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	8a92      	ldrh	r2, [r2, #20]
 80060b8:	fb03 f202 	mul.w	r2, r3, r2
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	61da      	str	r2, [r3, #28]
 80060c0:	e006      	b.n	80060d0 <USB_HC_StartXfer+0x1a4>
 80060c2:	bf00      	nop
 80060c4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	6a1a      	ldr	r2, [r3, #32]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060da:	04d9      	lsls	r1, r3, #19
 80060dc:	4ba3      	ldr	r3, [pc, #652]	@ (800636c <USB_HC_StartXfer+0x440>)
 80060de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	7d9b      	ldrb	r3, [r3, #22]
 80060e6:	075b      	lsls	r3, r3, #29
 80060e8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060ec:	69f9      	ldr	r1, [r7, #28]
 80060ee:	0148      	lsls	r0, r1, #5
 80060f0:	6a39      	ldr	r1, [r7, #32]
 80060f2:	4401      	add	r1, r0
 80060f4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	6999      	ldr	r1, [r3, #24]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006112:	460a      	mov	r2, r1
 8006114:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	bf0c      	ite	eq
 8006126:	2301      	moveq	r3, #1
 8006128:	2300      	movne	r3, #0
 800612a:	b2db      	uxtb	r3, r3
 800612c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	4413      	add	r3, r2
 8006136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69fa      	ldr	r2, [r7, #28]
 800613e:	0151      	lsls	r1, r2, #5
 8006140:	6a3a      	ldr	r2, [r7, #32]
 8006142:	440a      	add	r2, r1
 8006144:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006148:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800614c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	4413      	add	r3, r2
 8006156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	7e7b      	ldrb	r3, [r7, #25]
 800615e:	075b      	lsls	r3, r3, #29
 8006160:	69f9      	ldr	r1, [r7, #28]
 8006162:	0148      	lsls	r0, r1, #5
 8006164:	6a39      	ldr	r1, [r7, #32]
 8006166:	4401      	add	r1, r0
 8006168:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800616c:	4313      	orrs	r3, r2
 800616e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	799b      	ldrb	r3, [r3, #6]
 8006174:	2b01      	cmp	r3, #1
 8006176:	f040 80c3 	bne.w	8006300 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	7c5b      	ldrb	r3, [r3, #17]
 800617e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006184:	4313      	orrs	r3, r2
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	6a3a      	ldr	r2, [r7, #32]
 800618c:	440a      	add	r2, r1
 800618e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006192:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006196:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	6a3a      	ldr	r2, [r7, #32]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80061b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	79db      	ldrb	r3, [r3, #7]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d123      	bne.n	8006208 <USB_HC_StartXfer+0x2dc>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	78db      	ldrb	r3, [r3, #3]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d11f      	bne.n	8006208 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	6a3a      	ldr	r2, [r7, #32]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061e6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	6a3a      	ldr	r2, [r7, #32]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006206:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	7c9b      	ldrb	r3, [r3, #18]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d003      	beq.n	8006218 <USB_HC_StartXfer+0x2ec>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	7c9b      	ldrb	r3, [r3, #18]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d117      	bne.n	8006248 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800621c:	2b01      	cmp	r3, #1
 800621e:	d113      	bne.n	8006248 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	78db      	ldrb	r3, [r3, #3]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d10f      	bne.n	8006248 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	6a3a      	ldr	r2, [r7, #32]
 800623c:	440a      	add	r2, r1
 800623e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006246:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	7c9b      	ldrb	r3, [r3, #18]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d162      	bne.n	8006316 <USB_HC_StartXfer+0x3ea>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	78db      	ldrb	r3, [r3, #3]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d15e      	bne.n	8006316 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	3b01      	subs	r3, #1
 800625e:	2b03      	cmp	r3, #3
 8006260:	d858      	bhi.n	8006314 <USB_HC_StartXfer+0x3e8>
 8006262:	a201      	add	r2, pc, #4	@ (adr r2, 8006268 <USB_HC_StartXfer+0x33c>)
 8006264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006268:	08006279 	.word	0x08006279
 800626c:	0800629b 	.word	0x0800629b
 8006270:	080062bd 	.word	0x080062bd
 8006274:	080062df 	.word	0x080062df
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	4413      	add	r3, r2
 8006280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	6a3a      	ldr	r2, [r7, #32]
 800628c:	440a      	add	r2, r1
 800628e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006296:	6053      	str	r3, [r2, #4]
          break;
 8006298:	e03d      	b.n	8006316 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	6a3a      	ldr	r2, [r7, #32]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062b4:	f043 030e 	orr.w	r3, r3, #14
 80062b8:	6053      	str	r3, [r2, #4]
          break;
 80062ba:	e02c      	b.n	8006316 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	6a3a      	ldr	r2, [r7, #32]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062da:	6053      	str	r3, [r2, #4]
          break;
 80062dc:	e01b      	b.n	8006316 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	69fa      	ldr	r2, [r7, #28]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	6a3a      	ldr	r2, [r7, #32]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062fc:	6053      	str	r3, [r2, #4]
          break;
 80062fe:	e00a      	b.n	8006316 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	4413      	add	r3, r2
 8006308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800630c:	461a      	mov	r2, r3
 800630e:	2300      	movs	r3, #0
 8006310:	6053      	str	r3, [r2, #4]
 8006312:	e000      	b.n	8006316 <USB_HC_StartXfer+0x3ea>
          break;
 8006314:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800632c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	78db      	ldrb	r3, [r3, #3]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d004      	beq.n	8006340 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	e003      	b.n	8006348 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006346:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800634e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	4413      	add	r3, r2
 8006358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800635c:	461a      	mov	r2, r3
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	e055      	b.n	8006418 <USB_HC_StartXfer+0x4ec>
 800636c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	78db      	ldrb	r3, [r3, #3]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d14e      	bne.n	8006416 <USB_HC_StartXfer+0x4ea>
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d04a      	beq.n	8006416 <USB_HC_StartXfer+0x4ea>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	79db      	ldrb	r3, [r3, #7]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d146      	bne.n	8006416 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	7c9b      	ldrb	r3, [r3, #18]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d831      	bhi.n	80063f4 <USB_HC_StartXfer+0x4c8>
 8006390:	a201      	add	r2, pc, #4	@ (adr r2, 8006398 <USB_HC_StartXfer+0x46c>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063a9 	.word	0x080063a9
 800639c:	080063cd 	.word	0x080063cd
 80063a0:	080063a9 	.word	0x080063a9
 80063a4:	080063cd 	.word	0x080063cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	3303      	adds	r3, #3
 80063ae:	089b      	lsrs	r3, r3, #2
 80063b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063b2:	8afa      	ldrh	r2, [r7, #22]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d91c      	bls.n	80063f8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f043 0220 	orr.w	r2, r3, #32
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80063ca:	e015      	b.n	80063f8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	3303      	adds	r3, #3
 80063d2:	089b      	lsrs	r3, r3, #2
 80063d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80063d6:	8afa      	ldrh	r2, [r7, #22]
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d90a      	bls.n	80063fc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80063f2:	e003      	b.n	80063fc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80063f4:	bf00      	nop
 80063f6:	e002      	b.n	80063fe <USB_HC_StartXfer+0x4d2>
        break;
 80063f8:	bf00      	nop
 80063fa:	e000      	b.n	80063fe <USB_HC_StartXfer+0x4d2>
        break;
 80063fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	6999      	ldr	r1, [r3, #24]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	785a      	ldrb	r2, [r3, #1]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	b29b      	uxth	r3, r3
 800640c:	2000      	movs	r0, #0
 800640e:	9000      	str	r0, [sp, #0]
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7ff f9c9 	bl	80057a8 <USB_WritePacket>
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3728      	adds	r7, #40	@ 0x28
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	b29b      	uxth	r3, r3
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006442:	b480      	push	{r7}
 8006444:	b089      	sub	sp, #36	@ 0x24
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	460b      	mov	r3, r1
 800644c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4413      	add	r3, r2
 8006462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	0c9b      	lsrs	r3, r3, #18
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	4413      	add	r3, r2
 8006478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	0fdb      	lsrs	r3, r3, #31
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4413      	add	r3, r2
 800648e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	0fdb      	lsrs	r3, r3, #31
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d10d      	bne.n	80064c4 <USB_HC_Halt+0x82>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <USB_HC_Halt+0x82>
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d002      	beq.n	80064c0 <USB_HC_Halt+0x7e>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d101      	bne.n	80064c4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	e0d8      	b.n	8006676 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <USB_HC_Halt+0x8e>
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d173      	bne.n	80065b8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d14a      	bne.n	8006592 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006500:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d133      	bne.n	8006570 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	440a      	add	r2, r1
 800651e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006522:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006526:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	0151      	lsls	r1, r2, #5
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	440a      	add	r2, r1
 800653e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006542:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006546:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	3301      	adds	r3, #1
 800654c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006554:	d82e      	bhi.n	80065b4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	4413      	add	r3, r2
 800655e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800656c:	d0ec      	beq.n	8006548 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800656e:	e081      	b.n	8006674 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	4413      	add	r3, r2
 8006578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	440a      	add	r2, r1
 8006586:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800658a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800658e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006590:	e070      	b.n	8006674 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065b2:	e05f      	b.n	8006674 <USB_HC_Halt+0x232>
            break;
 80065b4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065b6:	e05d      	b.n	8006674 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	0151      	lsls	r1, r2, #5
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	440a      	add	r2, r1
 80065ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065d6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d133      	bne.n	8006650 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	0151      	lsls	r1, r2, #5
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	440a      	add	r2, r1
 80065fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006602:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006606:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	4413      	add	r3, r2
 8006610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	0151      	lsls	r1, r2, #5
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	440a      	add	r2, r1
 800661e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006622:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006626:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	3301      	adds	r3, #1
 800662c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006634:	d81d      	bhi.n	8006672 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800664c:	d0ec      	beq.n	8006628 <USB_HC_Halt+0x1e6>
 800664e:	e011      	b.n	8006674 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	4413      	add	r3, r2
 8006658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	440a      	add	r2, r1
 8006666:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800666a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	e000      	b.n	8006674 <USB_HC_Halt+0x232>
          break;
 8006672:	bf00      	nop
    }
  }

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3724      	adds	r7, #36	@ 0x24
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006698:	2301      	movs	r3, #1
 800669a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	04da      	lsls	r2, r3, #19
 80066a0:	4b15      	ldr	r3, [pc, #84]	@ (80066f8 <USB_DoPing+0x74>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066b4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066cc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066d4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066e2:	461a      	mov	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	1ff80000 	.word	0x1ff80000

080066fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7fe ff8c 	bl	800562e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006716:	2110      	movs	r1, #16
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7fe ffe5 	bl	80056e8 <USB_FlushTxFifo>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff f80f 	bl	800574c <USB_FlushRxFifo>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006738:	2300      	movs	r3, #0
 800673a:	61bb      	str	r3, [r7, #24]
 800673c:	e01f      	b.n	800677e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006754:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800675c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006764:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	4413      	add	r3, r2
 800676e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006772:	461a      	mov	r2, r3
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	3301      	adds	r3, #1
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b0f      	cmp	r3, #15
 8006782:	d9dc      	bls.n	800673e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006784:	2300      	movs	r3, #0
 8006786:	61bb      	str	r3, [r7, #24]
 8006788:	e034      	b.n	80067f4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	4413      	add	r3, r2
 8006792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067be:	461a      	mov	r2, r3
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067d0:	d80c      	bhi.n	80067ec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067e8:	d0ec      	beq.n	80067c4 <USB_StopHost+0xc8>
 80067ea:	e000      	b.n	80067ee <USB_StopHost+0xf2>
        break;
 80067ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	3301      	adds	r3, #1
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	d9c7      	bls.n	800678a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006800:	461a      	mov	r2, r3
 8006802:	f04f 33ff 	mov.w	r3, #4294967295
 8006806:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f04f 32ff 	mov.w	r2, #4294967295
 800680e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7fe fefb 	bl	800560c <USB_EnableGlobalInt>

  return ret;
 8006816:	7ffb      	ldrb	r3, [r7, #31]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b089      	sub	sp, #36	@ 0x24
 8006824:	af04      	add	r7, sp, #16
 8006826:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006828:	2301      	movs	r3, #1
 800682a:	2202      	movs	r2, #2
 800682c:	2102      	movs	r1, #2
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fc85 	bl	800713e <USBH_FindInterface>
 8006834:	4603      	mov	r3, r0
 8006836:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	2bff      	cmp	r3, #255	@ 0xff
 800683c:	d002      	beq.n	8006844 <USBH_CDC_InterfaceInit+0x24>
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d901      	bls.n	8006848 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006844:	2302      	movs	r3, #2
 8006846:	e13d      	b.n	8006ac4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fc5a 	bl	8007106 <USBH_SelectInterface>
 8006852:	4603      	mov	r3, r0
 8006854:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006856:	7bbb      	ldrb	r3, [r7, #14]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800685c:	2302      	movs	r3, #2
 800685e:	e131      	b.n	8006ac4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006866:	2050      	movs	r0, #80	@ 0x50
 8006868:	f002 fb64 	bl	8008f34 <malloc>
 800686c:	4603      	mov	r3, r0
 800686e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006880:	2302      	movs	r3, #2
 8006882:	e11f      	b.n	8006ac4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006884:	2250      	movs	r2, #80	@ 0x50
 8006886:	2100      	movs	r1, #0
 8006888:	68b8      	ldr	r0, [r7, #8]
 800688a:	f002 fc11 	bl	80090b0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	211a      	movs	r1, #26
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	4413      	add	r3, r2
 800689a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b25b      	sxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	da15      	bge.n	80068d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	211a      	movs	r1, #26
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	4413      	add	r3, r2
 80068b2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	211a      	movs	r1, #26
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80068cc:	881a      	ldrh	r2, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	785b      	ldrb	r3, [r3, #1]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 ffbe 	bl	800885a <USBH_AllocPipe>
 80068de:	4603      	mov	r3, r0
 80068e0:	461a      	mov	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	7819      	ldrb	r1, [r3, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	7858      	ldrb	r0, [r3, #1]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	8952      	ldrh	r2, [r2, #10]
 80068fe:	9202      	str	r2, [sp, #8]
 8006900:	2203      	movs	r2, #3
 8006902:	9201      	str	r2, [sp, #4]
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	4623      	mov	r3, r4
 8006908:	4602      	mov	r2, r0
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 ff76 	bl	80087fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2200      	movs	r2, #0
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f002 fa85 	bl	8008e28 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800691e:	2300      	movs	r3, #0
 8006920:	2200      	movs	r2, #0
 8006922:	210a      	movs	r1, #10
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fc0a 	bl	800713e <USBH_FindInterface>
 800692a:	4603      	mov	r3, r0
 800692c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	2bff      	cmp	r3, #255	@ 0xff
 8006932:	d002      	beq.n	800693a <USBH_CDC_InterfaceInit+0x11a>
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d901      	bls.n	800693e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800693a:	2302      	movs	r3, #2
 800693c:	e0c2      	b.n	8006ac4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	211a      	movs	r1, #26
 8006944:	fb01 f303 	mul.w	r3, r1, r3
 8006948:	4413      	add	r3, r2
 800694a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	b25b      	sxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	da16      	bge.n	8006984 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	211a      	movs	r1, #26
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	4413      	add	r3, r2
 8006962:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006966:	781a      	ldrb	r2, [r3, #0]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	211a      	movs	r1, #26
 8006972:	fb01 f303 	mul.w	r3, r1, r3
 8006976:	4413      	add	r3, r2
 8006978:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800697c:	881a      	ldrh	r2, [r3, #0]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	835a      	strh	r2, [r3, #26]
 8006982:	e015      	b.n	80069b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	211a      	movs	r1, #26
 800698a:	fb01 f303 	mul.w	r3, r1, r3
 800698e:	4413      	add	r3, r2
 8006990:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006994:	781a      	ldrb	r2, [r3, #0]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	211a      	movs	r1, #26
 80069a0:	fb01 f303 	mul.w	r3, r1, r3
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80069aa:	881a      	ldrh	r2, [r3, #0]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	211a      	movs	r1, #26
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	b25b      	sxtb	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	da16      	bge.n	80069f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	211a      	movs	r1, #26
 80069ce:	fb01 f303 	mul.w	r3, r1, r3
 80069d2:	4413      	add	r3, r2
 80069d4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80069d8:	781a      	ldrb	r2, [r3, #0]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	211a      	movs	r1, #26
 80069e4:	fb01 f303 	mul.w	r3, r1, r3
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80069ee:	881a      	ldrh	r2, [r3, #0]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	835a      	strh	r2, [r3, #26]
 80069f4:	e015      	b.n	8006a22 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	211a      	movs	r1, #26
 80069fc:	fb01 f303 	mul.w	r3, r1, r3
 8006a00:	4413      	add	r3, r2
 8006a02:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	211a      	movs	r1, #26
 8006a12:	fb01 f303 	mul.w	r3, r1, r3
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006a1c:	881a      	ldrh	r2, [r3, #0]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	7b9b      	ldrb	r3, [r3, #14]
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 ff16 	bl	800885a <USBH_AllocPipe>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	461a      	mov	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	7bdb      	ldrb	r3, [r3, #15]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 ff0c 	bl	800885a <USBH_AllocPipe>
 8006a42:	4603      	mov	r3, r0
 8006a44:	461a      	mov	r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	7b59      	ldrb	r1, [r3, #13]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	7b98      	ldrb	r0, [r3, #14]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	8b12      	ldrh	r2, [r2, #24]
 8006a62:	9202      	str	r2, [sp, #8]
 8006a64:	2202      	movs	r2, #2
 8006a66:	9201      	str	r2, [sp, #4]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	4623      	mov	r3, r4
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 fec4 	bl	80087fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	7b19      	ldrb	r1, [r3, #12]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	7bd8      	ldrb	r0, [r3, #15]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	8b52      	ldrh	r2, [r2, #26]
 8006a8c:	9202      	str	r2, [sp, #8]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	9201      	str	r2, [sp, #4]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4623      	mov	r3, r4
 8006a96:	4602      	mov	r2, r0
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 feaf 	bl	80087fc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	7b5b      	ldrb	r3, [r3, #13]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f002 f9ba 	bl	8008e28 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	7b1b      	ldrb	r3, [r3, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f002 f9b3 	bl	8008e28 <USBH_LL_SetToggle>

  return USBH_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd90      	pop	{r4, r7, pc}

08006acc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00e      	beq.n	8006b04 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 fea4 	bl	800883a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 fecf 	bl	800889c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	7b1b      	ldrb	r3, [r3, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00e      	beq.n	8006b2a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	7b1b      	ldrb	r3, [r3, #12]
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 fe91 	bl	800883a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	7b1b      	ldrb	r3, [r3, #12]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f001 febc 	bl	800889c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	7b5b      	ldrb	r3, [r3, #13]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00e      	beq.n	8006b50 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	7b5b      	ldrb	r3, [r3, #13]
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 fe7e 	bl	800883a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	7b5b      	ldrb	r3, [r3, #13]
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 fea9 	bl	800889c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f002 f9ed 	bl	8008f44 <free>
    phost->pActiveClass->pData = 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b70:	2200      	movs	r2, #0
 8006b72:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3340      	adds	r3, #64	@ 0x40
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f8b1 	bl	8006cfe <GetLineCoding>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ba0:	7afb      	ldrb	r3, [r7, #11]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d105      	bne.n	8006bb2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006bac:	2102      	movs	r1, #2
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006bb2:	7afb      	ldrb	r3, [r7, #11]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d877      	bhi.n	8006cd0 <USBH_CDC_Process+0x114>
 8006be0:	a201      	add	r2, pc, #4	@ (adr r2, 8006be8 <USBH_CDC_Process+0x2c>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006bfd 	.word	0x08006bfd
 8006bec:	08006c03 	.word	0x08006c03
 8006bf0:	08006c33 	.word	0x08006c33
 8006bf4:	08006ca7 	.word	0x08006ca7
 8006bf8:	08006cb5 	.word	0x08006cb5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006c00:	e06d      	b.n	8006cde <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c06:	4619      	mov	r1, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f897 	bl	8006d3c <SetLineCoding>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c20:	e058      	b.n	8006cd4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d055      	beq.n	8006cd4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2204      	movs	r2, #4
 8006c2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006c30:	e050      	b.n	8006cd4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	3340      	adds	r3, #64	@ 0x40
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f860 	bl	8006cfe <GetLineCoding>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d126      	bne.n	8006c96 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c5a:	791b      	ldrb	r3, [r3, #4]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d13b      	bne.n	8006cd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c6a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d133      	bne.n	8006cd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c7a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d12b      	bne.n	8006cd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c88:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d124      	bne.n	8006cd8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f958 	bl	8006f44 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c94:	e020      	b.n	8006cd8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d01d      	beq.n	8006cd8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2204      	movs	r2, #4
 8006ca0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006ca4:	e018      	b.n	8006cd8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f867 	bl	8006d7a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f8da 	bl	8006e66 <CDC_ProcessReception>
      break;
 8006cb2:	e014      	b.n	8006cde <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 f81a 	bl	8007cf0 <USBH_ClrFeature>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cc0:	7bbb      	ldrb	r3, [r7, #14]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10a      	bne.n	8006cdc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006cce:	e005      	b.n	8006cdc <USBH_CDC_Process+0x120>

    default:
      break;
 8006cd0:	bf00      	nop
 8006cd2:	e004      	b.n	8006cde <USBH_CDC_Process+0x122>
      break;
 8006cd4:	bf00      	nop
 8006cd6:	e002      	b.n	8006cde <USBH_CDC_Process+0x122>
      break;
 8006cd8:	bf00      	nop
 8006cda:	e000      	b.n	8006cde <USBH_CDC_Process+0x122>
      break;
 8006cdc:	bf00      	nop

  }

  return status;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	22a1      	movs	r2, #161	@ 0xa1
 8006d0c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2221      	movs	r2, #33	@ 0x21
 8006d12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2207      	movs	r2, #7
 8006d24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2207      	movs	r2, #7
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 fb14 	bl	800835a <USBH_CtlReq>
 8006d32:	4603      	mov	r3, r0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2221      	movs	r2, #33	@ 0x21
 8006d4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2207      	movs	r2, #7
 8006d62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2207      	movs	r2, #7
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 faf5 	bl	800835a <USBH_CtlReq>
 8006d70:	4603      	mov	r3, r0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b086      	sub	sp, #24
 8006d7e:	af02      	add	r7, sp, #8
 8006d80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d002      	beq.n	8006da0 <CDC_ProcessTransmission+0x26>
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d023      	beq.n	8006de6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d9e:	e05e      	b.n	8006e5e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	8b12      	ldrh	r2, [r2, #24]
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d90b      	bls.n	8006dc4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	69d9      	ldr	r1, [r3, #28]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8b1a      	ldrh	r2, [r3, #24]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	7b5b      	ldrb	r3, [r3, #13]
 8006db8:	2001      	movs	r0, #1
 8006dba:	9000      	str	r0, [sp, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 fcda 	bl	8008776 <USBH_BulkSendData>
 8006dc2:	e00b      	b.n	8006ddc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	7b5b      	ldrb	r3, [r3, #13]
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	9000      	str	r0, [sp, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 fccd 	bl	8008776 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006de4:	e03b      	b.n	8006e5e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	7b5b      	ldrb	r3, [r3, #13]
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fff1 	bl	8008dd4 <USBH_LL_GetURBState>
 8006df2:	4603      	mov	r3, r0
 8006df4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006df6:	7afb      	ldrb	r3, [r7, #11]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d128      	bne.n	8006e4e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	8b12      	ldrh	r2, [r2, #24]
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d90e      	bls.n	8006e26 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	8b12      	ldrh	r2, [r2, #24]
 8006e10:	1a9a      	subs	r2, r3, r2
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	8b12      	ldrh	r2, [r2, #24]
 8006e1e:	441a      	add	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	61da      	str	r2, [r3, #28]
 8006e24:	e002      	b.n	8006e2c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d004      	beq.n	8006e3e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006e3c:	e00e      	b.n	8006e5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f868 	bl	8006f1c <USBH_CDC_TransmitCallback>
      break;
 8006e4c:	e006      	b.n	8006e5c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e4e:	7afb      	ldrb	r3, [r7, #11]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d103      	bne.n	8006e5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006e5c:	bf00      	nop
  }
}
 8006e5e:	bf00      	nop
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d002      	beq.n	8006e8c <CDC_ProcessReception+0x26>
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d00e      	beq.n	8006ea8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e8a:	e043      	b.n	8006f14 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	6a19      	ldr	r1, [r3, #32]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	8b5a      	ldrh	r2, [r3, #26]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	7b1b      	ldrb	r3, [r3, #12]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fc91 	bl	80087c0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2204      	movs	r2, #4
 8006ea2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006ea6:	e035      	b.n	8006f14 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	7b1b      	ldrb	r3, [r3, #12]
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 ff90 	bl	8008dd4 <USBH_LL_GetURBState>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006eb8:	7cfb      	ldrb	r3, [r7, #19]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d129      	bne.n	8006f12 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	7b1b      	ldrb	r3, [r3, #12]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fef3 	bl	8008cb0 <USBH_LL_GetLastXferSize>
 8006eca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d016      	beq.n	8006f04 <CDC_ProcessReception+0x9e>
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	8b5b      	ldrh	r3, [r3, #26]
 8006eda:	461a      	mov	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d110      	bne.n	8006f04 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	1ad2      	subs	r2, r2, r3
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	6a1a      	ldr	r2, [r3, #32]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	441a      	add	r2, r3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2203      	movs	r2, #3
 8006efe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006f02:	e006      	b.n	8006f12 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f80f 	bl	8006f30 <USBH_CDC_ReceiveCallback>
      break;
 8006f12:	bf00      	nop
  }
}
 8006f14:	bf00      	nop
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	4613      	mov	r3, r2
 8006f64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e029      	b.n	8006fc4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	79fa      	ldrb	r2, [r7, #7]
 8006f74:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f81f 	bl	8006fcc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f001 fdc3 	bl	8008b48 <USBH_LL_Init>

  return USBH_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	e009      	b.n	8006ff2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	33e0      	adds	r3, #224	@ 0xe0
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	2200      	movs	r2, #0
 8006fea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b0f      	cmp	r3, #15
 8006ff6:	d9f2      	bls.n	8006fde <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e009      	b.n	8007012 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3301      	adds	r3, #1
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007018:	d3f1      	bcc.n	8006ffe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2240      	movs	r2, #64	@ 0x40
 800703e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	331c      	adds	r3, #28
 800706a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800706e:	2100      	movs	r1, #0
 8007070:	4618      	mov	r0, r3
 8007072:	f002 f81d 	bl	80090b0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800707c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f002 f814 	bl	80090b0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800708e:	2212      	movs	r2, #18
 8007090:	2100      	movs	r1, #0
 8007092:	4618      	mov	r0, r3
 8007094:	f002 f80c 	bl	80090b0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800709e:	223e      	movs	r2, #62	@ 0x3e
 80070a0:	2100      	movs	r1, #0
 80070a2:	4618      	mov	r0, r3
 80070a4:	f002 f804 	bl	80090b0 <memset>

  return USBH_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d016      	beq.n	80070f4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10e      	bne.n	80070ee <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80070d6:	1c59      	adds	r1, r3, #1
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	33de      	adds	r3, #222	@ 0xde
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]
 80070ec:	e004      	b.n	80070f8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070ee:	2302      	movs	r3, #2
 80070f0:	73fb      	strb	r3, [r7, #15]
 80070f2:	e001      	b.n	80070f8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070f4:	2302      	movs	r3, #2
 80070f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	460b      	mov	r3, r1
 8007110:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	429a      	cmp	r2, r3
 8007120:	d204      	bcs.n	800712c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	78fa      	ldrb	r2, [r7, #3]
 8007126:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800712a:	e001      	b.n	8007130 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800712c:	2302      	movs	r3, #2
 800712e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007130:	7bfb      	ldrb	r3, [r7, #15]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800713e:	b480      	push	{r7}
 8007140:	b087      	sub	sp, #28
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	4608      	mov	r0, r1
 8007148:	4611      	mov	r1, r2
 800714a:	461a      	mov	r2, r3
 800714c:	4603      	mov	r3, r0
 800714e:	70fb      	strb	r3, [r7, #3]
 8007150:	460b      	mov	r3, r1
 8007152:	70bb      	strb	r3, [r7, #2]
 8007154:	4613      	mov	r3, r2
 8007156:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800715c:	2300      	movs	r3, #0
 800715e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007166:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007168:	e025      	b.n	80071b6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	221a      	movs	r2, #26
 800716e:	fb02 f303 	mul.w	r3, r2, r3
 8007172:	3308      	adds	r3, #8
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	3302      	adds	r3, #2
 800717a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	795b      	ldrb	r3, [r3, #5]
 8007180:	78fa      	ldrb	r2, [r7, #3]
 8007182:	429a      	cmp	r2, r3
 8007184:	d002      	beq.n	800718c <USBH_FindInterface+0x4e>
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	2bff      	cmp	r3, #255	@ 0xff
 800718a:	d111      	bne.n	80071b0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007190:	78ba      	ldrb	r2, [r7, #2]
 8007192:	429a      	cmp	r2, r3
 8007194:	d002      	beq.n	800719c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007196:	78bb      	ldrb	r3, [r7, #2]
 8007198:	2bff      	cmp	r3, #255	@ 0xff
 800719a:	d109      	bne.n	80071b0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071a0:	787a      	ldrb	r2, [r7, #1]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d002      	beq.n	80071ac <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071a6:	787b      	ldrb	r3, [r7, #1]
 80071a8:	2bff      	cmp	r3, #255	@ 0xff
 80071aa:	d101      	bne.n	80071b0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	e006      	b.n	80071be <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	3301      	adds	r3, #1
 80071b4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d9d6      	bls.n	800716a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80071bc:	23ff      	movs	r3, #255	@ 0xff
}
 80071be:	4618      	mov	r0, r3
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 fcf4 	bl	8008bc0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80071d8:	2101      	movs	r1, #1
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 fe0d 	bl	8008dfa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af04      	add	r7, sp, #16
 80071f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071f4:	2302      	movs	r3, #2
 80071f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b01      	cmp	r3, #1
 8007206:	d102      	bne.n	800720e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2203      	movs	r2, #3
 800720c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b0b      	cmp	r3, #11
 8007216:	f200 81bb 	bhi.w	8007590 <USBH_Process+0x3a4>
 800721a:	a201      	add	r2, pc, #4	@ (adr r2, 8007220 <USBH_Process+0x34>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	08007251 	.word	0x08007251
 8007224:	08007283 	.word	0x08007283
 8007228:	080072eb 	.word	0x080072eb
 800722c:	0800752b 	.word	0x0800752b
 8007230:	08007591 	.word	0x08007591
 8007234:	0800738b 	.word	0x0800738b
 8007238:	080074d1 	.word	0x080074d1
 800723c:	080073c1 	.word	0x080073c1
 8007240:	080073e1 	.word	0x080073e1
 8007244:	080073ff 	.word	0x080073ff
 8007248:	08007443 	.word	0x08007443
 800724c:	08007513 	.word	0x08007513
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 819b 	beq.w	8007594 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007264:	20c8      	movs	r0, #200	@ 0xc8
 8007266:	f001 fe12 	bl	8008e8e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fd05 	bl	8008c7a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007280:	e188      	b.n	8007594 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007288:	2b01      	cmp	r3, #1
 800728a:	d107      	bne.n	800729c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800729a:	e18a      	b.n	80075b2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80072a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072a6:	d914      	bls.n	80072d2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80072ae:	3301      	adds	r3, #1
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d903      	bls.n	80072ca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	220d      	movs	r2, #13
 80072c6:	701a      	strb	r2, [r3, #0]
      break;
 80072c8:	e173      	b.n	80075b2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	701a      	strb	r2, [r3, #0]
      break;
 80072d0:	e16f      	b.n	80075b2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80072d8:	f103 020a 	add.w	r2, r3, #10
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80072e2:	200a      	movs	r0, #10
 80072e4:	f001 fdd3 	bl	8008e8e <USBH_Delay>
      break;
 80072e8:	e163      	b.n	80075b2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80072fa:	2104      	movs	r1, #4
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007300:	2064      	movs	r0, #100	@ 0x64
 8007302:	f001 fdc4 	bl	8008e8e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 fc90 	bl	8008c2c <USBH_LL_GetSpeed>
 800730c:	4603      	mov	r3, r0
 800730e:	461a      	mov	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2205      	movs	r2, #5
 800731a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800731c:	2100      	movs	r1, #0
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 fa9b 	bl	800885a <USBH_AllocPipe>
 8007324:	4603      	mov	r3, r0
 8007326:	461a      	mov	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800732c:	2180      	movs	r1, #128	@ 0x80
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 fa93 	bl	800885a <USBH_AllocPipe>
 8007334:	4603      	mov	r3, r0
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	7919      	ldrb	r1, [r3, #4]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007350:	9202      	str	r2, [sp, #8]
 8007352:	2200      	movs	r2, #0
 8007354:	9201      	str	r2, [sp, #4]
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	4603      	mov	r3, r0
 800735a:	2280      	movs	r2, #128	@ 0x80
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 fa4d 	bl	80087fc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	7959      	ldrb	r1, [r3, #5]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007376:	9202      	str	r2, [sp, #8]
 8007378:	2200      	movs	r2, #0
 800737a:	9201      	str	r2, [sp, #4]
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	4603      	mov	r3, r0
 8007380:	2200      	movs	r2, #0
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 fa3a 	bl	80087fc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007388:	e113      	b.n	80075b2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f916 	bl	80075bc <USBH_HandleEnum>
 8007390:	4603      	mov	r3, r0
 8007392:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	f040 80fd 	bne.w	8007598 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d103      	bne.n	80073b8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2208      	movs	r2, #8
 80073b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073b6:	e0ef      	b.n	8007598 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2207      	movs	r2, #7
 80073bc:	701a      	strb	r2, [r3, #0]
      break;
 80073be:	e0eb      	b.n	8007598 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 80e8 	beq.w	800759c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073d2:	2101      	movs	r1, #1
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2208      	movs	r2, #8
 80073dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80073de:	e0dd      	b.n	800759c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fc3a 	bl	8007c62 <USBH_SetCfg>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f040 80d5 	bne.w	80075a0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2209      	movs	r2, #9
 80073fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073fc:	e0d0      	b.n	80075a0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	2b00      	cmp	r3, #0
 800740a:	d016      	beq.n	800743a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800740c:	2101      	movs	r1, #1
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fc4a 	bl	8007ca8 <USBH_SetFeature>
 8007414:	4603      	mov	r3, r0
 8007416:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d103      	bne.n	8007428 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	220a      	movs	r2, #10
 8007424:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007426:	e0bd      	b.n	80075a4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b03      	cmp	r3, #3
 800742e:	f040 80b9 	bne.w	80075a4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	220a      	movs	r2, #10
 8007436:	701a      	strb	r2, [r3, #0]
      break;
 8007438:	e0b4      	b.n	80075a4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	220a      	movs	r2, #10
 800743e:	701a      	strb	r2, [r3, #0]
      break;
 8007440:	e0b0      	b.n	80075a4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 80ad 	beq.w	80075a8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]
 800745a:	e016      	b.n	800748a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800745c:	7bfa      	ldrb	r2, [r7, #15]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	32de      	adds	r2, #222	@ 0xde
 8007462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007466:	791a      	ldrb	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800746e:	429a      	cmp	r2, r3
 8007470:	d108      	bne.n	8007484 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007472:	7bfa      	ldrb	r2, [r7, #15]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	32de      	adds	r2, #222	@ 0xde
 8007478:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007482:	e005      	b.n	8007490 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	3301      	adds	r3, #1
 8007488:	73fb      	strb	r3, [r7, #15]
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0e5      	beq.n	800745c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d016      	beq.n	80074c8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	4798      	blx	r3
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d109      	bne.n	80074c0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2206      	movs	r2, #6
 80074b0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80074b8:	2103      	movs	r1, #3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074be:	e073      	b.n	80075a8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	220d      	movs	r2, #13
 80074c4:	701a      	strb	r2, [r3, #0]
      break;
 80074c6:	e06f      	b.n	80075a8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	220d      	movs	r2, #13
 80074cc:	701a      	strb	r2, [r3, #0]
      break;
 80074ce:	e06b      	b.n	80075a8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d017      	beq.n	800750a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
 80074e6:	4603      	mov	r3, r0
 80074e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d103      	bne.n	80074fa <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	220b      	movs	r2, #11
 80074f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074f8:	e058      	b.n	80075ac <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d154      	bne.n	80075ac <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	220d      	movs	r2, #13
 8007506:	701a      	strb	r2, [r3, #0]
      break;
 8007508:	e050      	b.n	80075ac <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	220d      	movs	r2, #13
 800750e:	701a      	strb	r2, [r3, #0]
      break;
 8007510:	e04c      	b.n	80075ac <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d049      	beq.n	80075b0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
      }
      break;
 8007528:	e042      	b.n	80075b0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff fd4a 	bl	8006fcc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d009      	beq.n	8007556 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007566:	2105      	movs	r1, #5
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b01      	cmp	r3, #1
 8007576:	d107      	bne.n	8007588 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff fe22 	bl	80071ca <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007586:	e014      	b.n	80075b2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 fb19 	bl	8008bc0 <USBH_LL_Start>
      break;
 800758e:	e010      	b.n	80075b2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007590:	bf00      	nop
 8007592:	e00e      	b.n	80075b2 <USBH_Process+0x3c6>
      break;
 8007594:	bf00      	nop
 8007596:	e00c      	b.n	80075b2 <USBH_Process+0x3c6>
      break;
 8007598:	bf00      	nop
 800759a:	e00a      	b.n	80075b2 <USBH_Process+0x3c6>
    break;
 800759c:	bf00      	nop
 800759e:	e008      	b.n	80075b2 <USBH_Process+0x3c6>
      break;
 80075a0:	bf00      	nop
 80075a2:	e006      	b.n	80075b2 <USBH_Process+0x3c6>
      break;
 80075a4:	bf00      	nop
 80075a6:	e004      	b.n	80075b2 <USBH_Process+0x3c6>
      break;
 80075a8:	bf00      	nop
 80075aa:	e002      	b.n	80075b2 <USBH_Process+0x3c6>
      break;
 80075ac:	bf00      	nop
 80075ae:	e000      	b.n	80075b2 <USBH_Process+0x3c6>
      break;
 80075b0:	bf00      	nop
  }
  return USBH_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af04      	add	r7, sp, #16
 80075c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075c4:	2301      	movs	r3, #1
 80075c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075c8:	2301      	movs	r3, #1
 80075ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	785b      	ldrb	r3, [r3, #1]
 80075d0:	2b07      	cmp	r3, #7
 80075d2:	f200 81bd 	bhi.w	8007950 <USBH_HandleEnum+0x394>
 80075d6:	a201      	add	r2, pc, #4	@ (adr r2, 80075dc <USBH_HandleEnum+0x20>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	080075fd 	.word	0x080075fd
 80075e0:	080076b7 	.word	0x080076b7
 80075e4:	08007721 	.word	0x08007721
 80075e8:	080077ab 	.word	0x080077ab
 80075ec:	08007815 	.word	0x08007815
 80075f0:	08007885 	.word	0x08007885
 80075f4:	080078cb 	.word	0x080078cb
 80075f8:	08007911 	.word	0x08007911
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075fc:	2108      	movs	r1, #8
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa4c 	bl	8007a9c <USBH_Get_DevDesc>
 8007604:	4603      	mov	r3, r0
 8007606:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d12e      	bne.n	800766c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7919      	ldrb	r1, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007632:	9202      	str	r2, [sp, #8]
 8007634:	2200      	movs	r2, #0
 8007636:	9201      	str	r2, [sp, #4]
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	4603      	mov	r3, r0
 800763c:	2280      	movs	r2, #128	@ 0x80
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 f8dc 	bl	80087fc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	7959      	ldrb	r1, [r3, #5]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007658:	9202      	str	r2, [sp, #8]
 800765a:	2200      	movs	r2, #0
 800765c:	9201      	str	r2, [sp, #4]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	4603      	mov	r3, r0
 8007662:	2200      	movs	r2, #0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f8c9 	bl	80087fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800766a:	e173      	b.n	8007954 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b03      	cmp	r3, #3
 8007670:	f040 8170 	bne.w	8007954 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800767a:	3301      	adds	r3, #1
 800767c:	b2da      	uxtb	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800768a:	2b03      	cmp	r3, #3
 800768c:	d903      	bls.n	8007696 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	220d      	movs	r2, #13
 8007692:	701a      	strb	r2, [r3, #0]
      break;
 8007694:	e15e      	b.n	8007954 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	795b      	ldrb	r3, [r3, #5]
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 f8fd 	bl	800889c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	791b      	ldrb	r3, [r3, #4]
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 f8f7 	bl	800889c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	701a      	strb	r2, [r3, #0]
      break;
 80076b4:	e14e      	b.n	8007954 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076b6:	2112      	movs	r1, #18
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f9ef 	bl	8007a9c <USBH_Get_DevDesc>
 80076be:	4603      	mov	r3, r0
 80076c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d103      	bne.n	80076d0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ce:	e143      	b.n	8007958 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	f040 8140 	bne.w	8007958 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076de:	3301      	adds	r3, #1
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d903      	bls.n	80076fa <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	220d      	movs	r2, #13
 80076f6:	701a      	strb	r2, [r3, #0]
      break;
 80076f8:	e12e      	b.n	8007958 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	795b      	ldrb	r3, [r3, #5]
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 f8cb 	bl	800889c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	791b      	ldrb	r3, [r3, #4]
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 f8c5 	bl	800889c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
      break;
 800771e:	e11b      	b.n	8007958 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007720:	2101      	movs	r1, #1
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa79 	bl	8007c1a <USBH_SetAddress>
 8007728:	4603      	mov	r3, r0
 800772a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d130      	bne.n	8007794 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007732:	2002      	movs	r0, #2
 8007734:	f001 fbab 	bl	8008e8e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2203      	movs	r2, #3
 8007744:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	7919      	ldrb	r1, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800775a:	9202      	str	r2, [sp, #8]
 800775c:	2200      	movs	r2, #0
 800775e:	9201      	str	r2, [sp, #4]
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	4603      	mov	r3, r0
 8007764:	2280      	movs	r2, #128	@ 0x80
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 f848 	bl	80087fc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	7959      	ldrb	r1, [r3, #5]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007780:	9202      	str	r2, [sp, #8]
 8007782:	2200      	movs	r2, #0
 8007784:	9201      	str	r2, [sp, #4]
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	4603      	mov	r3, r0
 800778a:	2200      	movs	r2, #0
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 f835 	bl	80087fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007792:	e0e3      	b.n	800795c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	2b03      	cmp	r3, #3
 8007798:	f040 80e0 	bne.w	800795c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	220d      	movs	r2, #13
 80077a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	705a      	strb	r2, [r3, #1]
      break;
 80077a8:	e0d8      	b.n	800795c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80077aa:	2109      	movs	r1, #9
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f9a1 	bl	8007af4 <USBH_Get_CfgDesc>
 80077b2:	4603      	mov	r3, r0
 80077b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d103      	bne.n	80077c4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2204      	movs	r2, #4
 80077c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077c2:	e0cd      	b.n	8007960 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	f040 80ca 	bne.w	8007960 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80077d2:	3301      	adds	r3, #1
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d903      	bls.n	80077ee <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	220d      	movs	r2, #13
 80077ea:	701a      	strb	r2, [r3, #0]
      break;
 80077ec:	e0b8      	b.n	8007960 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	795b      	ldrb	r3, [r3, #5]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 f851 	bl	800889c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	791b      	ldrb	r3, [r3, #4]
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 f84b 	bl	800889c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	701a      	strb	r2, [r3, #0]
      break;
 8007812:	e0a5      	b.n	8007960 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f969 	bl	8007af4 <USBH_Get_CfgDesc>
 8007822:	4603      	mov	r3, r0
 8007824:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d103      	bne.n	8007834 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2205      	movs	r2, #5
 8007830:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007832:	e097      	b.n	8007964 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	2b03      	cmp	r3, #3
 8007838:	f040 8094 	bne.w	8007964 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007842:	3301      	adds	r3, #1
 8007844:	b2da      	uxtb	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007852:	2b03      	cmp	r3, #3
 8007854:	d903      	bls.n	800785e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	220d      	movs	r2, #13
 800785a:	701a      	strb	r2, [r3, #0]
      break;
 800785c:	e082      	b.n	8007964 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	795b      	ldrb	r3, [r3, #5]
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 f819 	bl	800889c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	791b      	ldrb	r3, [r3, #4]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 f813 	bl	800889c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	701a      	strb	r2, [r3, #0]
      break;
 8007882:	e06f      	b.n	8007964 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800788a:	2b00      	cmp	r3, #0
 800788c:	d019      	beq.n	80078c2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800789a:	23ff      	movs	r3, #255	@ 0xff
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f953 	bl	8007b48 <USBH_Get_StringDesc>
 80078a2:	4603      	mov	r3, r0
 80078a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d103      	bne.n	80078b4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2206      	movs	r2, #6
 80078b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078b2:	e059      	b.n	8007968 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d156      	bne.n	8007968 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2206      	movs	r2, #6
 80078be:	705a      	strb	r2, [r3, #1]
      break;
 80078c0:	e052      	b.n	8007968 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2206      	movs	r2, #6
 80078c6:	705a      	strb	r2, [r3, #1]
      break;
 80078c8:	e04e      	b.n	8007968 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d019      	beq.n	8007908 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078e0:	23ff      	movs	r3, #255	@ 0xff
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f930 	bl	8007b48 <USBH_Get_StringDesc>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d103      	bne.n	80078fa <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2207      	movs	r2, #7
 80078f6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078f8:	e038      	b.n	800796c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d135      	bne.n	800796c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2207      	movs	r2, #7
 8007904:	705a      	strb	r2, [r3, #1]
      break;
 8007906:	e031      	b.n	800796c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2207      	movs	r2, #7
 800790c:	705a      	strb	r2, [r3, #1]
      break;
 800790e:	e02d      	b.n	800796c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007916:	2b00      	cmp	r3, #0
 8007918:	d017      	beq.n	800794a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007926:	23ff      	movs	r3, #255	@ 0xff
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f90d 	bl	8007b48 <USBH_Get_StringDesc>
 800792e:	4603      	mov	r3, r0
 8007930:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d102      	bne.n	800793e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800793c:	e018      	b.n	8007970 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b03      	cmp	r3, #3
 8007942:	d115      	bne.n	8007970 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
      break;
 8007948:	e012      	b.n	8007970 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]
      break;
 800794e:	e00f      	b.n	8007970 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007950:	bf00      	nop
 8007952:	e00e      	b.n	8007972 <USBH_HandleEnum+0x3b6>
      break;
 8007954:	bf00      	nop
 8007956:	e00c      	b.n	8007972 <USBH_HandleEnum+0x3b6>
      break;
 8007958:	bf00      	nop
 800795a:	e00a      	b.n	8007972 <USBH_HandleEnum+0x3b6>
      break;
 800795c:	bf00      	nop
 800795e:	e008      	b.n	8007972 <USBH_HandleEnum+0x3b6>
      break;
 8007960:	bf00      	nop
 8007962:	e006      	b.n	8007972 <USBH_HandleEnum+0x3b6>
      break;
 8007964:	bf00      	nop
 8007966:	e004      	b.n	8007972 <USBH_HandleEnum+0x3b6>
      break;
 8007968:	bf00      	nop
 800796a:	e002      	b.n	8007972 <USBH_HandleEnum+0x3b6>
      break;
 800796c:	bf00      	nop
 800796e:	e000      	b.n	8007972 <USBH_HandleEnum+0x3b6>
      break;
 8007970:	bf00      	nop
  }
  return Status;
 8007972:	7bfb      	ldrb	r3, [r7, #15]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f804 	bl	80079be <USBH_HandleSof>
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b0b      	cmp	r3, #11
 80079ce:	d10a      	bne.n	80079e6 <USBH_HandleSof+0x28>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	4798      	blx	r3
  }
}
 80079e6:	bf00      	nop
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80079fe:	bf00      	nop
}
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007a1a:	bf00      	nop
}
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 f8be 	bl	8008bf6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	791b      	ldrb	r3, [r3, #4]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 ff0b 	bl	800889c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	795b      	ldrb	r3, [r3, #5]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 ff05 	bl	800889c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af02      	add	r7, sp, #8
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007aa8:	887b      	ldrh	r3, [r7, #2]
 8007aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aae:	d901      	bls.n	8007ab4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e01b      	b.n	8007aec <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007aba:	887b      	ldrh	r3, [r7, #2]
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f872 	bl	8007bb0 <USBH_GetDescriptor>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007adc:	887a      	ldrh	r2, [r7, #2]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f929 	bl	8007d38 <USBH_ParseDevDesc>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	331c      	adds	r3, #28
 8007b04:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007b06:	887b      	ldrh	r3, [r7, #2]
 8007b08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b0c:	d901      	bls.n	8007b12 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e016      	b.n	8007b40 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b12:	887b      	ldrh	r3, [r7, #2]
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f846 	bl	8007bb0 <USBH_GetDescriptor>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d107      	bne.n	8007b3e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007b2e:	887b      	ldrh	r3, [r7, #2]
 8007b30:	461a      	mov	r2, r3
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9af 	bl	8007e98 <USBH_ParseCfgDesc>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	607a      	str	r2, [r7, #4]
 8007b52:	461a      	mov	r2, r3
 8007b54:	460b      	mov	r3, r1
 8007b56:	72fb      	strb	r3, [r7, #11]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007b5c:	893b      	ldrh	r3, [r7, #8]
 8007b5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b62:	d802      	bhi.n	8007b6a <USBH_Get_StringDesc+0x22>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e01c      	b.n	8007ba8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007b6e:	7afb      	ldrb	r3, [r7, #11]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007b76:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007b7e:	893b      	ldrh	r3, [r7, #8]
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	460b      	mov	r3, r1
 8007b84:	2100      	movs	r1, #0
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 f812 	bl	8007bb0 <USBH_GetDescriptor>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d107      	bne.n	8007ba6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b9c:	893a      	ldrh	r2, [r7, #8]
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 fb8d 	bl	80082c0 <USBH_ParseStringDesc>
  }

  return status;
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	607b      	str	r3, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	72fb      	strb	r3, [r7, #11]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	789b      	ldrb	r3, [r3, #2]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d11c      	bne.n	8007c04 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007bca:	7afb      	ldrb	r3, [r7, #11]
 8007bcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2206      	movs	r2, #6
 8007bda:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	893a      	ldrh	r2, [r7, #8]
 8007be0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007be2:	893b      	ldrh	r3, [r7, #8]
 8007be4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007be8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bec:	d104      	bne.n	8007bf8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f240 4209 	movw	r2, #1033	@ 0x409
 8007bf4:	829a      	strh	r2, [r3, #20]
 8007bf6:	e002      	b.n	8007bfe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	8b3a      	ldrh	r2, [r7, #24]
 8007c02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c04:	8b3b      	ldrh	r3, [r7, #24]
 8007c06:	461a      	mov	r2, r3
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 fba5 	bl	800835a <USBH_CtlReq>
 8007c10:	4603      	mov	r3, r0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	789b      	ldrb	r3, [r3, #2]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d10f      	bne.n	8007c4e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2205      	movs	r2, #5
 8007c38:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2100      	movs	r1, #0
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fb81 	bl	800835a <USBH_CtlReq>
 8007c58:	4603      	mov	r3, r0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	789b      	ldrb	r3, [r3, #2]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d10e      	bne.n	8007c94 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2209      	movs	r2, #9
 8007c80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	887a      	ldrh	r2, [r7, #2]
 8007c86:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c94:	2200      	movs	r2, #0
 8007c96:	2100      	movs	r1, #0
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fb5e 	bl	800835a <USBH_CtlReq>
 8007c9e:	4603      	mov	r3, r0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	789b      	ldrb	r3, [r3, #2]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d10f      	bne.n	8007cdc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2203      	movs	r2, #3
 8007cc6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2100      	movs	r1, #0
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fb3a 	bl	800835a <USBH_CtlReq>
 8007ce6:	4603      	mov	r3, r0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	789b      	ldrb	r3, [r3, #2]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d10f      	bne.n	8007d24 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d16:	78fb      	ldrb	r3, [r7, #3]
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d24:	2200      	movs	r2, #0
 8007d26:	2100      	movs	r1, #0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fb16 	bl	800835a <USBH_CtlReq>
 8007d2e:	4603      	mov	r3, r0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	4613      	mov	r3, r2
 8007d44:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007d4c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e094      	b.n	8007e86 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	781a      	ldrb	r2, [r3, #0]
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	785a      	ldrb	r2, [r3, #1]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	3302      	adds	r3, #2
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	3303      	adds	r3, #3
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	021b      	lsls	r3, r3, #8
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	791a      	ldrb	r2, [r3, #4]
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	795a      	ldrb	r2, [r3, #5]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	799a      	ldrb	r2, [r3, #6]
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	79da      	ldrb	r2, [r3, #7]
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d11b      	bne.n	8007df2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	79db      	ldrb	r3, [r3, #7]
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	dc0f      	bgt.n	8007de2 <USBH_ParseDevDesc+0xaa>
 8007dc2:	2b08      	cmp	r3, #8
 8007dc4:	db0f      	blt.n	8007de6 <USBH_ParseDevDesc+0xae>
 8007dc6:	3b08      	subs	r3, #8
 8007dc8:	4a32      	ldr	r2, [pc, #200]	@ (8007e94 <USBH_ParseDevDesc+0x15c>)
 8007dca:	fa22 f303 	lsr.w	r3, r2, r3
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	bf14      	ite	ne
 8007dd6:	2301      	movne	r3, #1
 8007dd8:	2300      	moveq	r3, #0
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <USBH_ParseDevDesc+0xb6>
 8007de0:	e001      	b.n	8007de6 <USBH_ParseDevDesc+0xae>
 8007de2:	2b40      	cmp	r3, #64	@ 0x40
 8007de4:	d003      	beq.n	8007dee <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	2208      	movs	r2, #8
 8007dea:	71da      	strb	r2, [r3, #7]
        break;
 8007dec:	e000      	b.n	8007df0 <USBH_ParseDevDesc+0xb8>
        break;
 8007dee:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007df0:	e00e      	b.n	8007e10 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d107      	bne.n	8007e0c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	79db      	ldrb	r3, [r3, #7]
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	d005      	beq.n	8007e10 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2208      	movs	r2, #8
 8007e08:	71da      	strb	r2, [r3, #7]
 8007e0a:	e001      	b.n	8007e10 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007e10:	88fb      	ldrh	r3, [r7, #6]
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	d936      	bls.n	8007e84 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	3308      	adds	r3, #8
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	3309      	adds	r3, #9
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	021b      	lsls	r3, r3, #8
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	330a      	adds	r3, #10
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	330b      	adds	r3, #11
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	021b      	lsls	r3, r3, #8
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	4313      	orrs	r3, r2
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	461a      	mov	r2, r3
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	330d      	adds	r3, #13
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	021b      	lsls	r3, r3, #8
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	7b9a      	ldrb	r2, [r3, #14]
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	7bda      	ldrb	r2, [r3, #15]
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	7c1a      	ldrb	r2, [r3, #16]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	7c5a      	ldrb	r2, [r3, #17]
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	01000101 	.word	0x01000101

08007e98 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08c      	sub	sp, #48	@ 0x30
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007eac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	e0da      	b.n	8008080 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	2b09      	cmp	r3, #9
 8007ed4:	d002      	beq.n	8007edc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed8:	2209      	movs	r2, #9
 8007eda:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	781a      	ldrb	r2, [r3, #0]
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	785a      	ldrb	r2, [r3, #1]
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	3302      	adds	r3, #2
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	3303      	adds	r3, #3
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	021b      	lsls	r3, r3, #8
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	4313      	orrs	r3, r2
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f06:	bf28      	it	cs
 8007f08:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	791a      	ldrb	r2, [r3, #4]
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	795a      	ldrb	r2, [r3, #5]
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	799a      	ldrb	r2, [r3, #6]
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	79da      	ldrb	r2, [r3, #7]
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	7a1a      	ldrb	r2, [r3, #8]
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f3a:	88fb      	ldrh	r3, [r7, #6]
 8007f3c:	2b09      	cmp	r3, #9
 8007f3e:	f240 809d 	bls.w	800807c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f42:	2309      	movs	r3, #9
 8007f44:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f4a:	e081      	b.n	8008050 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f4c:	f107 0316 	add.w	r3, r7, #22
 8007f50:	4619      	mov	r1, r3
 8007f52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f54:	f000 f9e7 	bl	8008326 <USBH_GetNextDesc>
 8007f58:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5c:	785b      	ldrb	r3, [r3, #1]
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d176      	bne.n	8008050 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b09      	cmp	r3, #9
 8007f68:	d002      	beq.n	8007f70 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6c:	2209      	movs	r2, #9
 8007f6e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f74:	221a      	movs	r2, #26
 8007f76:	fb02 f303 	mul.w	r3, r2, r3
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	6a3a      	ldr	r2, [r7, #32]
 8007f7e:	4413      	add	r3, r2
 8007f80:	3302      	adds	r3, #2
 8007f82:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f86:	69f8      	ldr	r0, [r7, #28]
 8007f88:	f000 f87e 	bl	8008088 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f96:	e043      	b.n	8008020 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f98:	f107 0316 	add.w	r3, r7, #22
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fa0:	f000 f9c1 	bl	8008326 <USBH_GetNextDesc>
 8007fa4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa8:	785b      	ldrb	r3, [r3, #1]
 8007faa:	2b05      	cmp	r3, #5
 8007fac:	d138      	bne.n	8008020 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	795b      	ldrb	r3, [r3, #5]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d113      	bne.n	8007fde <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d003      	beq.n	8007fc6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	799b      	ldrb	r3, [r3, #6]
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d10b      	bne.n	8007fde <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	79db      	ldrb	r3, [r3, #7]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10b      	bne.n	8007fe6 <USBH_ParseCfgDesc+0x14e>
 8007fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b09      	cmp	r3, #9
 8007fd4:	d007      	beq.n	8007fe6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd8:	2209      	movs	r2, #9
 8007fda:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fdc:	e003      	b.n	8007fe6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe0:	2207      	movs	r2, #7
 8007fe2:	701a      	strb	r2, [r3, #0]
 8007fe4:	e000      	b.n	8007fe8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fe6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007ff0:	3201      	adds	r2, #1
 8007ff2:	00d2      	lsls	r2, r2, #3
 8007ff4:	211a      	movs	r1, #26
 8007ff6:	fb01 f303 	mul.w	r3, r1, r3
 8007ffa:	4413      	add	r3, r2
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	6a3a      	ldr	r2, [r7, #32]
 8008000:	4413      	add	r3, r2
 8008002:	3304      	adds	r3, #4
 8008004:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008008:	69b9      	ldr	r1, [r7, #24]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 f870 	bl	80080f0 <USBH_ParseEPDesc>
 8008010:	4603      	mov	r3, r0
 8008012:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008016:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800801a:	3301      	adds	r3, #1
 800801c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	791b      	ldrb	r3, [r3, #4]
 8008024:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008028:	429a      	cmp	r2, r3
 800802a:	d204      	bcs.n	8008036 <USBH_ParseCfgDesc+0x19e>
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	885a      	ldrh	r2, [r3, #2]
 8008030:	8afb      	ldrh	r3, [r7, #22]
 8008032:	429a      	cmp	r2, r3
 8008034:	d8b0      	bhi.n	8007f98 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	791b      	ldrb	r3, [r3, #4]
 800803a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800803e:	429a      	cmp	r2, r3
 8008040:	d201      	bcs.n	8008046 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008042:	2303      	movs	r3, #3
 8008044:	e01c      	b.n	8008080 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008046:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800804a:	3301      	adds	r3, #1
 800804c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008054:	2b01      	cmp	r3, #1
 8008056:	d805      	bhi.n	8008064 <USBH_ParseCfgDesc+0x1cc>
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	885a      	ldrh	r2, [r3, #2]
 800805c:	8afb      	ldrh	r3, [r7, #22]
 800805e:	429a      	cmp	r2, r3
 8008060:	f63f af74 	bhi.w	8007f4c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	791b      	ldrb	r3, [r3, #4]
 8008068:	2b02      	cmp	r3, #2
 800806a:	bf28      	it	cs
 800806c:	2302      	movcs	r3, #2
 800806e:	b2db      	uxtb	r3, r3
 8008070:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008074:	429a      	cmp	r2, r3
 8008076:	d201      	bcs.n	800807c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008078:	2303      	movs	r3, #3
 800807a:	e001      	b.n	8008080 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800807c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008080:	4618      	mov	r0, r3
 8008082:	3730      	adds	r7, #48	@ 0x30
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781a      	ldrb	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	785a      	ldrb	r2, [r3, #1]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	789a      	ldrb	r2, [r3, #2]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	78da      	ldrb	r2, [r3, #3]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	3304      	adds	r3, #4
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	bf28      	it	cs
 80080bc:	2302      	movcs	r3, #2
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	795a      	ldrb	r2, [r3, #5]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	799a      	ldrb	r2, [r3, #6]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	79da      	ldrb	r2, [r3, #7]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	7a1a      	ldrb	r2, [r3, #8]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	721a      	strb	r2, [r3, #8]
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	781a      	ldrb	r2, [r3, #0]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	785a      	ldrb	r2, [r3, #1]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	789a      	ldrb	r2, [r3, #2]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	78da      	ldrb	r2, [r3, #3]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3304      	adds	r3, #4
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3305      	adds	r3, #5
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	021b      	lsls	r3, r3, #8
 8008130:	b29b      	uxth	r3, r3
 8008132:	4313      	orrs	r3, r2
 8008134:	b29a      	uxth	r2, r3
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	799a      	ldrb	r2, [r3, #6]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	889b      	ldrh	r3, [r3, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d009      	beq.n	800815e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800814e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008152:	d804      	bhi.n	800815e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800815c:	d901      	bls.n	8008162 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800815e:	2303      	movs	r3, #3
 8008160:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008168:	2b00      	cmp	r3, #0
 800816a:	d136      	bne.n	80081da <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	78db      	ldrb	r3, [r3, #3]
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	2b02      	cmp	r3, #2
 8008176:	d108      	bne.n	800818a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	889b      	ldrh	r3, [r3, #4]
 800817c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008180:	f240 8097 	bls.w	80082b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008184:	2303      	movs	r3, #3
 8008186:	75fb      	strb	r3, [r7, #23]
 8008188:	e093      	b.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	78db      	ldrb	r3, [r3, #3]
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d107      	bne.n	80081a6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	889b      	ldrh	r3, [r3, #4]
 800819a:	2b40      	cmp	r3, #64	@ 0x40
 800819c:	f240 8089 	bls.w	80082b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80081a0:	2303      	movs	r3, #3
 80081a2:	75fb      	strb	r3, [r7, #23]
 80081a4:	e085      	b.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	78db      	ldrb	r3, [r3, #3]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d005      	beq.n	80081be <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	78db      	ldrb	r3, [r3, #3]
 80081b6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d10a      	bne.n	80081d4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	799b      	ldrb	r3, [r3, #6]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <USBH_ParseEPDesc+0xde>
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	799b      	ldrb	r3, [r3, #6]
 80081ca:	2b10      	cmp	r3, #16
 80081cc:	d970      	bls.n	80082b0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80081ce:	2303      	movs	r3, #3
 80081d0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80081d2:	e06d      	b.n	80082b0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80081d4:	2303      	movs	r3, #3
 80081d6:	75fb      	strb	r3, [r7, #23]
 80081d8:	e06b      	b.n	80082b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d13c      	bne.n	800825e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	78db      	ldrb	r3, [r3, #3]
 80081e8:	f003 0303 	and.w	r3, r3, #3
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d005      	beq.n	80081fc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	78db      	ldrb	r3, [r3, #3]
 80081f4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d106      	bne.n	800820a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	889b      	ldrh	r3, [r3, #4]
 8008200:	2b40      	cmp	r3, #64	@ 0x40
 8008202:	d956      	bls.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008204:	2303      	movs	r3, #3
 8008206:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008208:	e053      	b.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	78db      	ldrb	r3, [r3, #3]
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	2b01      	cmp	r3, #1
 8008214:	d10e      	bne.n	8008234 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	799b      	ldrb	r3, [r3, #6]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d007      	beq.n	800822e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008222:	2b10      	cmp	r3, #16
 8008224:	d803      	bhi.n	800822e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800822a:	2b40      	cmp	r3, #64	@ 0x40
 800822c:	d941      	bls.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800822e:	2303      	movs	r3, #3
 8008230:	75fb      	strb	r3, [r7, #23]
 8008232:	e03e      	b.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	78db      	ldrb	r3, [r3, #3]
 8008238:	f003 0303 	and.w	r3, r3, #3
 800823c:	2b03      	cmp	r3, #3
 800823e:	d10b      	bne.n	8008258 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	799b      	ldrb	r3, [r3, #6]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d004      	beq.n	8008252 <USBH_ParseEPDesc+0x162>
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	889b      	ldrh	r3, [r3, #4]
 800824c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008250:	d32f      	bcc.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008252:	2303      	movs	r3, #3
 8008254:	75fb      	strb	r3, [r7, #23]
 8008256:	e02c      	b.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008258:	2303      	movs	r3, #3
 800825a:	75fb      	strb	r3, [r7, #23]
 800825c:	e029      	b.n	80082b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008264:	2b02      	cmp	r3, #2
 8008266:	d120      	bne.n	80082aa <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	78db      	ldrb	r3, [r3, #3]
 800826c:	f003 0303 	and.w	r3, r3, #3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d106      	bne.n	8008282 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	889b      	ldrh	r3, [r3, #4]
 8008278:	2b08      	cmp	r3, #8
 800827a:	d01a      	beq.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800827c:	2303      	movs	r3, #3
 800827e:	75fb      	strb	r3, [r7, #23]
 8008280:	e017      	b.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	78db      	ldrb	r3, [r3, #3]
 8008286:	f003 0303 	and.w	r3, r3, #3
 800828a:	2b03      	cmp	r3, #3
 800828c:	d10a      	bne.n	80082a4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	799b      	ldrb	r3, [r3, #6]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <USBH_ParseEPDesc+0x1ae>
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	889b      	ldrh	r3, [r3, #4]
 800829a:	2b08      	cmp	r3, #8
 800829c:	d909      	bls.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800829e:	2303      	movs	r3, #3
 80082a0:	75fb      	strb	r3, [r7, #23]
 80082a2:	e006      	b.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80082a4:	2303      	movs	r3, #3
 80082a6:	75fb      	strb	r3, [r7, #23]
 80082a8:	e003      	b.n	80082b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80082aa:	2303      	movs	r3, #3
 80082ac:	75fb      	strb	r3, [r7, #23]
 80082ae:	e000      	b.n	80082b2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80082b0:	bf00      	nop
  }

  return status;
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3301      	adds	r3, #1
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d120      	bne.n	800831a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	1e9a      	subs	r2, r3, #2
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	4293      	cmp	r3, r2
 80082e2:	bf28      	it	cs
 80082e4:	4613      	movcs	r3, r2
 80082e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3302      	adds	r3, #2
 80082ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80082ee:	2300      	movs	r3, #0
 80082f0:	82fb      	strh	r3, [r7, #22]
 80082f2:	e00b      	b.n	800830c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80082f4:	8afb      	ldrh	r3, [r7, #22]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	4413      	add	r3, r2
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3301      	adds	r3, #1
 8008304:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008306:	8afb      	ldrh	r3, [r7, #22]
 8008308:	3302      	adds	r3, #2
 800830a:	82fb      	strh	r3, [r7, #22]
 800830c:	8afa      	ldrh	r2, [r7, #22]
 800830e:	8abb      	ldrh	r3, [r7, #20]
 8008310:	429a      	cmp	r2, r3
 8008312:	d3ef      	bcc.n	80082f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
  }
}
 800831a:	bf00      	nop
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	7812      	ldrb	r2, [r2, #0]
 8008338:	4413      	add	r3, r2
 800833a:	b29a      	uxth	r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800834c:	68fb      	ldr	r3, [r7, #12]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b086      	sub	sp, #24
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	4613      	mov	r3, r2
 8008366:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008368:	2301      	movs	r3, #1
 800836a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	789b      	ldrb	r3, [r3, #2]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d002      	beq.n	800837a <USBH_CtlReq+0x20>
 8008374:	2b02      	cmp	r3, #2
 8008376:	d00f      	beq.n	8008398 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008378:	e027      	b.n	80083ca <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	88fa      	ldrh	r2, [r7, #6]
 8008384:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2201      	movs	r2, #1
 800838a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2202      	movs	r2, #2
 8008390:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008392:	2301      	movs	r3, #1
 8008394:	75fb      	strb	r3, [r7, #23]
      break;
 8008396:	e018      	b.n	80083ca <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 f81b 	bl	80083d4 <USBH_HandleControl>
 800839e:	4603      	mov	r3, r0
 80083a0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <USBH_CtlReq+0x54>
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d106      	bne.n	80083bc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	761a      	strb	r2, [r3, #24]
      break;
 80083ba:	e005      	b.n	80083c8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d102      	bne.n	80083c8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2201      	movs	r2, #1
 80083c6:	709a      	strb	r2, [r3, #2]
      break;
 80083c8:	bf00      	nop
  }
  return status;
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af02      	add	r7, sp, #8
 80083da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80083dc:	2301      	movs	r3, #1
 80083de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	7e1b      	ldrb	r3, [r3, #24]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	2b0a      	cmp	r3, #10
 80083ec:	f200 8156 	bhi.w	800869c <USBH_HandleControl+0x2c8>
 80083f0:	a201      	add	r2, pc, #4	@ (adr r2, 80083f8 <USBH_HandleControl+0x24>)
 80083f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f6:	bf00      	nop
 80083f8:	08008425 	.word	0x08008425
 80083fc:	0800843f 	.word	0x0800843f
 8008400:	080084a9 	.word	0x080084a9
 8008404:	080084cf 	.word	0x080084cf
 8008408:	08008507 	.word	0x08008507
 800840c:	08008531 	.word	0x08008531
 8008410:	08008583 	.word	0x08008583
 8008414:	080085a5 	.word	0x080085a5
 8008418:	080085e1 	.word	0x080085e1
 800841c:	08008607 	.word	0x08008607
 8008420:	08008645 	.word	0x08008645
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f103 0110 	add.w	r1, r3, #16
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	795b      	ldrb	r3, [r3, #5]
 800842e:	461a      	mov	r2, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f943 	bl	80086bc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2202      	movs	r2, #2
 800843a:	761a      	strb	r2, [r3, #24]
      break;
 800843c:	e139      	b.n	80086b2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	795b      	ldrb	r3, [r3, #5]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fcc5 	bl	8008dd4 <USBH_LL_GetURBState>
 800844a:	4603      	mov	r3, r0
 800844c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d11e      	bne.n	8008492 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7c1b      	ldrb	r3, [r3, #16]
 8008458:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800845c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	8adb      	ldrh	r3, [r3, #22]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008466:	7b7b      	ldrb	r3, [r7, #13]
 8008468:	2b80      	cmp	r3, #128	@ 0x80
 800846a:	d103      	bne.n	8008474 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2203      	movs	r2, #3
 8008470:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008472:	e115      	b.n	80086a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2205      	movs	r2, #5
 8008478:	761a      	strb	r2, [r3, #24]
      break;
 800847a:	e111      	b.n	80086a0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800847c:	7b7b      	ldrb	r3, [r7, #13]
 800847e:	2b80      	cmp	r3, #128	@ 0x80
 8008480:	d103      	bne.n	800848a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2209      	movs	r2, #9
 8008486:	761a      	strb	r2, [r3, #24]
      break;
 8008488:	e10a      	b.n	80086a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2207      	movs	r2, #7
 800848e:	761a      	strb	r2, [r3, #24]
      break;
 8008490:	e106      	b.n	80086a0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	2b04      	cmp	r3, #4
 8008496:	d003      	beq.n	80084a0 <USBH_HandleControl+0xcc>
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	2b02      	cmp	r3, #2
 800849c:	f040 8100 	bne.w	80086a0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	220b      	movs	r2, #11
 80084a4:	761a      	strb	r2, [r3, #24]
      break;
 80084a6:	e0fb      	b.n	80086a0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6899      	ldr	r1, [r3, #8]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	899a      	ldrh	r2, [r3, #12]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	791b      	ldrb	r3, [r3, #4]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f93a 	bl	800873a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2204      	movs	r2, #4
 80084ca:	761a      	strb	r2, [r3, #24]
      break;
 80084cc:	e0f1      	b.n	80086b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	791b      	ldrb	r3, [r3, #4]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fc7d 	bl	8008dd4 <USBH_LL_GetURBState>
 80084da:	4603      	mov	r3, r0
 80084dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d102      	bne.n	80084ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2209      	movs	r2, #9
 80084e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b05      	cmp	r3, #5
 80084ee:	d102      	bne.n	80084f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80084f0:	2303      	movs	r3, #3
 80084f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084f4:	e0d6      	b.n	80086a4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	f040 80d3 	bne.w	80086a4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	220b      	movs	r2, #11
 8008502:	761a      	strb	r2, [r3, #24]
      break;
 8008504:	e0ce      	b.n	80086a4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6899      	ldr	r1, [r3, #8]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	899a      	ldrh	r2, [r3, #12]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	795b      	ldrb	r3, [r3, #5]
 8008512:	2001      	movs	r0, #1
 8008514:	9000      	str	r0, [sp, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f8ea 	bl	80086f0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008522:	b29a      	uxth	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2206      	movs	r2, #6
 800852c:	761a      	strb	r2, [r3, #24]
      break;
 800852e:	e0c0      	b.n	80086b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	795b      	ldrb	r3, [r3, #5]
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fc4c 	bl	8008dd4 <USBH_LL_GetURBState>
 800853c:	4603      	mov	r3, r0
 800853e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d103      	bne.n	800854e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2207      	movs	r2, #7
 800854a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800854c:	e0ac      	b.n	80086a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800854e:	7bbb      	ldrb	r3, [r7, #14]
 8008550:	2b05      	cmp	r3, #5
 8008552:	d105      	bne.n	8008560 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	220c      	movs	r2, #12
 8008558:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800855a:	2303      	movs	r3, #3
 800855c:	73fb      	strb	r3, [r7, #15]
      break;
 800855e:	e0a3      	b.n	80086a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b02      	cmp	r3, #2
 8008564:	d103      	bne.n	800856e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2205      	movs	r2, #5
 800856a:	761a      	strb	r2, [r3, #24]
      break;
 800856c:	e09c      	b.n	80086a8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b04      	cmp	r3, #4
 8008572:	f040 8099 	bne.w	80086a8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	220b      	movs	r2, #11
 800857a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800857c:	2302      	movs	r3, #2
 800857e:	73fb      	strb	r3, [r7, #15]
      break;
 8008580:	e092      	b.n	80086a8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	791b      	ldrb	r3, [r3, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	2100      	movs	r1, #0
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f8d5 	bl	800873a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008596:	b29a      	uxth	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2208      	movs	r2, #8
 80085a0:	761a      	strb	r2, [r3, #24]

      break;
 80085a2:	e086      	b.n	80086b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	791b      	ldrb	r3, [r3, #4]
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fc12 	bl	8008dd4 <USBH_LL_GetURBState>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d105      	bne.n	80085c6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	220d      	movs	r2, #13
 80085be:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085c4:	e072      	b.n	80086ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d103      	bne.n	80085d4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	220b      	movs	r2, #11
 80085d0:	761a      	strb	r2, [r3, #24]
      break;
 80085d2:	e06b      	b.n	80086ac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	d168      	bne.n	80086ac <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80085da:	2303      	movs	r3, #3
 80085dc:	73fb      	strb	r3, [r7, #15]
      break;
 80085de:	e065      	b.n	80086ac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	795b      	ldrb	r3, [r3, #5]
 80085e4:	2201      	movs	r2, #1
 80085e6:	9200      	str	r2, [sp, #0]
 80085e8:	2200      	movs	r2, #0
 80085ea:	2100      	movs	r1, #0
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f87f 	bl	80086f0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	220a      	movs	r2, #10
 8008602:	761a      	strb	r2, [r3, #24]
      break;
 8008604:	e055      	b.n	80086b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	795b      	ldrb	r3, [r3, #5]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fbe1 	bl	8008dd4 <USBH_LL_GetURBState>
 8008612:	4603      	mov	r3, r0
 8008614:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d105      	bne.n	8008628 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	220d      	movs	r2, #13
 8008624:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008626:	e043      	b.n	80086b0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d103      	bne.n	8008636 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2209      	movs	r2, #9
 8008632:	761a      	strb	r2, [r3, #24]
      break;
 8008634:	e03c      	b.n	80086b0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	2b04      	cmp	r3, #4
 800863a:	d139      	bne.n	80086b0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	220b      	movs	r2, #11
 8008640:	761a      	strb	r2, [r3, #24]
      break;
 8008642:	e035      	b.n	80086b0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	7e5b      	ldrb	r3, [r3, #25]
 8008648:	3301      	adds	r3, #1
 800864a:	b2da      	uxtb	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	765a      	strb	r2, [r3, #25]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	7e5b      	ldrb	r3, [r3, #25]
 8008654:	2b02      	cmp	r3, #2
 8008656:	d806      	bhi.n	8008666 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008664:	e025      	b.n	80086b2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800866c:	2106      	movs	r1, #6
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	795b      	ldrb	r3, [r3, #5]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f90c 	bl	800889c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	791b      	ldrb	r3, [r3, #4]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f906 	bl	800889c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008696:	2302      	movs	r3, #2
 8008698:	73fb      	strb	r3, [r7, #15]
      break;
 800869a:	e00a      	b.n	80086b2 <USBH_HandleControl+0x2de>

    default:
      break;
 800869c:	bf00      	nop
 800869e:	e008      	b.n	80086b2 <USBH_HandleControl+0x2de>
      break;
 80086a0:	bf00      	nop
 80086a2:	e006      	b.n	80086b2 <USBH_HandleControl+0x2de>
      break;
 80086a4:	bf00      	nop
 80086a6:	e004      	b.n	80086b2 <USBH_HandleControl+0x2de>
      break;
 80086a8:	bf00      	nop
 80086aa:	e002      	b.n	80086b2 <USBH_HandleControl+0x2de>
      break;
 80086ac:	bf00      	nop
 80086ae:	e000      	b.n	80086b2 <USBH_HandleControl+0x2de>
      break;
 80086b0:	bf00      	nop
  }

  return status;
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af04      	add	r7, sp, #16
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086ca:	79f9      	ldrb	r1, [r7, #7]
 80086cc:	2300      	movs	r3, #0
 80086ce:	9303      	str	r3, [sp, #12]
 80086d0:	2308      	movs	r3, #8
 80086d2:	9302      	str	r3, [sp, #8]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	2300      	movs	r3, #0
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	2300      	movs	r3, #0
 80086de:	2200      	movs	r2, #0
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 fb46 	bl	8008d72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af04      	add	r7, sp, #16
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4611      	mov	r1, r2
 80086fc:	461a      	mov	r2, r3
 80086fe:	460b      	mov	r3, r1
 8008700:	80fb      	strh	r3, [r7, #6]
 8008702:	4613      	mov	r3, r2
 8008704:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008714:	7979      	ldrb	r1, [r7, #5]
 8008716:	7e3b      	ldrb	r3, [r7, #24]
 8008718:	9303      	str	r3, [sp, #12]
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	2301      	movs	r3, #1
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	2300      	movs	r3, #0
 8008728:	2200      	movs	r2, #0
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 fb21 	bl	8008d72 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b088      	sub	sp, #32
 800873e:	af04      	add	r7, sp, #16
 8008740:	60f8      	str	r0, [r7, #12]
 8008742:	60b9      	str	r1, [r7, #8]
 8008744:	4611      	mov	r1, r2
 8008746:	461a      	mov	r2, r3
 8008748:	460b      	mov	r3, r1
 800874a:	80fb      	strh	r3, [r7, #6]
 800874c:	4613      	mov	r3, r2
 800874e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008750:	7979      	ldrb	r1, [r7, #5]
 8008752:	2300      	movs	r3, #0
 8008754:	9303      	str	r3, [sp, #12]
 8008756:	88fb      	ldrh	r3, [r7, #6]
 8008758:	9302      	str	r3, [sp, #8]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	2301      	movs	r3, #1
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	2300      	movs	r3, #0
 8008764:	2201      	movs	r2, #1
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 fb03 	bl	8008d72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800876c:	2300      	movs	r3, #0

}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b088      	sub	sp, #32
 800877a:	af04      	add	r7, sp, #16
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	4611      	mov	r1, r2
 8008782:	461a      	mov	r2, r3
 8008784:	460b      	mov	r3, r1
 8008786:	80fb      	strh	r3, [r7, #6]
 8008788:	4613      	mov	r3, r2
 800878a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800879a:	7979      	ldrb	r1, [r7, #5]
 800879c:	7e3b      	ldrb	r3, [r7, #24]
 800879e:	9303      	str	r3, [sp, #12]
 80087a0:	88fb      	ldrh	r3, [r7, #6]
 80087a2:	9302      	str	r3, [sp, #8]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	2301      	movs	r3, #1
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	2302      	movs	r3, #2
 80087ae:	2200      	movs	r2, #0
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 fade 	bl	8008d72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af04      	add	r7, sp, #16
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	4611      	mov	r1, r2
 80087cc:	461a      	mov	r2, r3
 80087ce:	460b      	mov	r3, r1
 80087d0:	80fb      	strh	r3, [r7, #6]
 80087d2:	4613      	mov	r3, r2
 80087d4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087d6:	7979      	ldrb	r1, [r7, #5]
 80087d8:	2300      	movs	r3, #0
 80087da:	9303      	str	r3, [sp, #12]
 80087dc:	88fb      	ldrh	r3, [r7, #6]
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	2301      	movs	r3, #1
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	2302      	movs	r3, #2
 80087ea:	2201      	movs	r2, #1
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 fac0 	bl	8008d72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af04      	add	r7, sp, #16
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	4608      	mov	r0, r1
 8008806:	4611      	mov	r1, r2
 8008808:	461a      	mov	r2, r3
 800880a:	4603      	mov	r3, r0
 800880c:	70fb      	strb	r3, [r7, #3]
 800880e:	460b      	mov	r3, r1
 8008810:	70bb      	strb	r3, [r7, #2]
 8008812:	4613      	mov	r3, r2
 8008814:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008816:	7878      	ldrb	r0, [r7, #1]
 8008818:	78ba      	ldrb	r2, [r7, #2]
 800881a:	78f9      	ldrb	r1, [r7, #3]
 800881c:	8b3b      	ldrh	r3, [r7, #24]
 800881e:	9302      	str	r3, [sp, #8]
 8008820:	7d3b      	ldrb	r3, [r7, #20]
 8008822:	9301      	str	r3, [sp, #4]
 8008824:	7c3b      	ldrb	r3, [r7, #16]
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	4603      	mov	r3, r0
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fa53 	bl	8008cd6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fa72 	bl	8008d34 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f836 	bl	80088d8 <USBH_GetFreePipe>
 800886c:	4603      	mov	r3, r0
 800886e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008870:	89fb      	ldrh	r3, [r7, #14]
 8008872:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008876:	4293      	cmp	r3, r2
 8008878:	d00a      	beq.n	8008890 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800887a:	78fa      	ldrb	r2, [r7, #3]
 800887c:	89fb      	ldrh	r3, [r7, #14]
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	33e0      	adds	r3, #224	@ 0xe0
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	440b      	add	r3, r1
 800888e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008890:	89fb      	ldrh	r3, [r7, #14]
 8008892:	b2db      	uxtb	r3, r3
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	2b0f      	cmp	r3, #15
 80088ac:	d80d      	bhi.n	80088ca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	33e0      	adds	r3, #224	@ 0xe0
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	78fb      	ldrb	r3, [r7, #3]
 80088bc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	33e0      	adds	r3, #224	@ 0xe0
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
 80088e8:	e00f      	b.n	800890a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	33e0      	adds	r3, #224	@ 0xe0
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d102      	bne.n	8008904 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	b29b      	uxth	r3, r3
 8008902:	e007      	b.n	8008914 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	3301      	adds	r3, #1
 8008908:	73fb      	strb	r3, [r7, #15]
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	2b0f      	cmp	r3, #15
 800890e:	d9ec      	bls.n	80088ea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008910:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008924:	2201      	movs	r2, #1
 8008926:	490e      	ldr	r1, [pc, #56]	@ (8008960 <MX_USB_HOST_Init+0x40>)
 8008928:	480e      	ldr	r0, [pc, #56]	@ (8008964 <MX_USB_HOST_Init+0x44>)
 800892a:	f7fe fb15 	bl	8006f58 <USBH_Init>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008934:	f7f8 fcf4 	bl	8001320 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008938:	490b      	ldr	r1, [pc, #44]	@ (8008968 <MX_USB_HOST_Init+0x48>)
 800893a:	480a      	ldr	r0, [pc, #40]	@ (8008964 <MX_USB_HOST_Init+0x44>)
 800893c:	f7fe fbb9 	bl	80070b2 <USBH_RegisterClass>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008946:	f7f8 fceb 	bl	8001320 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800894a:	4806      	ldr	r0, [pc, #24]	@ (8008964 <MX_USB_HOST_Init+0x44>)
 800894c:	f7fe fc3d 	bl	80071ca <USBH_Start>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008956:	f7f8 fce3 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800895a:	bf00      	nop
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	08008981 	.word	0x08008981
 8008964:	200001b0 	.word	0x200001b0
 8008968:	20000010 	.word	0x20000010

0800896c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008970:	4802      	ldr	r0, [pc, #8]	@ (800897c <MX_USB_HOST_Process+0x10>)
 8008972:	f7fe fc3b 	bl	80071ec <USBH_Process>
}
 8008976:	bf00      	nop
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	200001b0 	.word	0x200001b0

08008980 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800898c:	78fb      	ldrb	r3, [r7, #3]
 800898e:	3b01      	subs	r3, #1
 8008990:	2b04      	cmp	r3, #4
 8008992:	d819      	bhi.n	80089c8 <USBH_UserProcess+0x48>
 8008994:	a201      	add	r2, pc, #4	@ (adr r2, 800899c <USBH_UserProcess+0x1c>)
 8008996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899a:	bf00      	nop
 800899c:	080089c9 	.word	0x080089c9
 80089a0:	080089b9 	.word	0x080089b9
 80089a4:	080089c9 	.word	0x080089c9
 80089a8:	080089c1 	.word	0x080089c1
 80089ac:	080089b1 	.word	0x080089b1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80089b0:	4b09      	ldr	r3, [pc, #36]	@ (80089d8 <USBH_UserProcess+0x58>)
 80089b2:	2203      	movs	r2, #3
 80089b4:	701a      	strb	r2, [r3, #0]
  break;
 80089b6:	e008      	b.n	80089ca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80089b8:	4b07      	ldr	r3, [pc, #28]	@ (80089d8 <USBH_UserProcess+0x58>)
 80089ba:	2202      	movs	r2, #2
 80089bc:	701a      	strb	r2, [r3, #0]
  break;
 80089be:	e004      	b.n	80089ca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80089c0:	4b05      	ldr	r3, [pc, #20]	@ (80089d8 <USBH_UserProcess+0x58>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	701a      	strb	r2, [r3, #0]
  break;
 80089c6:	e000      	b.n	80089ca <USBH_UserProcess+0x4a>

  default:
  break;
 80089c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	20000588 	.word	0x20000588

080089dc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08a      	sub	sp, #40	@ 0x28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089e4:	f107 0314 	add.w	r3, r7, #20
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	605a      	str	r2, [r3, #4]
 80089ee:	609a      	str	r2, [r3, #8]
 80089f0:	60da      	str	r2, [r3, #12]
 80089f2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089fc:	d147      	bne.n	8008a8e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089fe:	2300      	movs	r3, #0
 8008a00:	613b      	str	r3, [r7, #16]
 8008a02:	4b25      	ldr	r3, [pc, #148]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a06:	4a24      	ldr	r2, [pc, #144]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a08:	f043 0301 	orr.w	r3, r3, #1
 8008a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a0e:	4b22      	ldr	r3, [pc, #136]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	613b      	str	r3, [r7, #16]
 8008a18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a20:	2300      	movs	r3, #0
 8008a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a28:	f107 0314 	add.w	r3, r7, #20
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	481b      	ldr	r0, [pc, #108]	@ (8008a9c <HAL_HCD_MspInit+0xc0>)
 8008a30:	f7f9 f910 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a34:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a42:	2300      	movs	r3, #0
 8008a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a46:	230a      	movs	r3, #10
 8008a48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a4a:	f107 0314 	add.w	r3, r7, #20
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4812      	ldr	r0, [pc, #72]	@ (8008a9c <HAL_HCD_MspInit+0xc0>)
 8008a52:	f7f9 f8ff 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a56:	4b10      	ldr	r3, [pc, #64]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a60:	6353      	str	r3, [r2, #52]	@ 0x34
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]
 8008a66:	4b0c      	ldr	r3, [pc, #48]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a72:	4b09      	ldr	r3, [pc, #36]	@ (8008a98 <HAL_HCD_MspInit+0xbc>)
 8008a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2100      	movs	r1, #0
 8008a82:	2043      	movs	r0, #67	@ 0x43
 8008a84:	f7f8 ffb3 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a88:	2043      	movs	r0, #67	@ 0x43
 8008a8a:	f7f8 ffcc 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a8e:	bf00      	nop
 8008a90:	3728      	adds	r7, #40	@ 0x28
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	40023800 	.word	0x40023800
 8008a9c:	40020000 	.word	0x40020000

08008aa0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe ff73 	bl	800799a <USBH_LL_IncTimer>
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe ffab 	bl	8007a26 <USBH_LL_Connect>
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fe ffb4 	bl	8007a54 <USBH_LL_Disconnect>
}
 8008aec:	bf00      	nop
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
 8008b00:	4613      	mov	r3, r2
 8008b02:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe ff65 	bl	80079ee <USBH_LL_PortEnabled>
}
 8008b24:	bf00      	nop
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe ff65 	bl	8007a0a <USBH_LL_PortDisabled>
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d12a      	bne.n	8008bb0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008b5a:	4a18      	ldr	r2, [pc, #96]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a15      	ldr	r2, [pc, #84]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b66:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b6a:	4b14      	ldr	r3, [pc, #80]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008b70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008b72:	4b12      	ldr	r3, [pc, #72]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b74:	2208      	movs	r2, #8
 8008b76:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008b78:	4b10      	ldr	r3, [pc, #64]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008b84:	4b0d      	ldr	r3, [pc, #52]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b86:	2202      	movs	r2, #2
 8008b88:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008b90:	480a      	ldr	r0, [pc, #40]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008b92:	f7f9 fa14 	bl	8001fbe <HAL_HCD_Init>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008b9c:	f7f8 fbc0 	bl	8001320 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ba0:	4806      	ldr	r0, [pc, #24]	@ (8008bbc <USBH_LL_Init+0x74>)
 8008ba2:	f7f9 fe75 	bl	8002890 <HAL_HCD_GetCurrentFrame>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7fe fee6 	bl	800797c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	2000058c 	.word	0x2000058c

08008bc0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7f9 fde2 	bl	80027a0 <HAL_HCD_Start>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 f95e 	bl	8008ea4 <USBH_Get_USB_Status>
 8008be8:	4603      	mov	r3, r0
 8008bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7f9 fdea 	bl	80027e6 <HAL_HCD_Stop>
 8008c12:	4603      	mov	r3, r0
 8008c14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 f943 	bl	8008ea4 <USBH_Get_USB_Status>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008c34:	2301      	movs	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f9 fe34 	bl	80028ac <HAL_HCD_GetCurrentSpeed>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d00c      	beq.n	8008c64 <USBH_LL_GetSpeed+0x38>
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d80d      	bhi.n	8008c6a <USBH_LL_GetSpeed+0x3e>
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d002      	beq.n	8008c58 <USBH_LL_GetSpeed+0x2c>
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d003      	beq.n	8008c5e <USBH_LL_GetSpeed+0x32>
 8008c56:	e008      	b.n	8008c6a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5c:	e008      	b.n	8008c70 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	73fb      	strb	r3, [r7, #15]
    break;
 8008c62:	e005      	b.n	8008c70 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008c64:	2302      	movs	r3, #2
 8008c66:	73fb      	strb	r3, [r7, #15]
    break;
 8008c68:	e002      	b.n	8008c70 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6e:	bf00      	nop
  }
  return  speed;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7f9 fdc5 	bl	8002820 <HAL_HCD_ResetPort>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 f901 	bl	8008ea4 <USBH_Get_USB_Status>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008cc2:	78fa      	ldrb	r2, [r7, #3]
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7f9 fdcd 	bl	8002866 <HAL_HCD_HC_GetXferCount>
 8008ccc:	4603      	mov	r3, r0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cd6:	b590      	push	{r4, r7, lr}
 8008cd8:	b089      	sub	sp, #36	@ 0x24
 8008cda:	af04      	add	r7, sp, #16
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	4608      	mov	r0, r1
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	70fb      	strb	r3, [r7, #3]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70bb      	strb	r3, [r7, #2]
 8008cec:	4613      	mov	r3, r2
 8008cee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008cfe:	787c      	ldrb	r4, [r7, #1]
 8008d00:	78ba      	ldrb	r2, [r7, #2]
 8008d02:	78f9      	ldrb	r1, [r7, #3]
 8008d04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008d06:	9302      	str	r3, [sp, #8]
 8008d08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	4623      	mov	r3, r4
 8008d16:	f7f9 f9b9 	bl	800208c <HAL_HCD_HC_Init>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 f8bf 	bl	8008ea4 <USBH_Get_USB_Status>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd90      	pop	{r4, r7, pc}

08008d34 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d4e:	78fa      	ldrb	r2, [r7, #3]
 8008d50:	4611      	mov	r1, r2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7f9 fa52 	bl	80021fc <HAL_HCD_HC_Halt>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 f8a0 	bl	8008ea4 <USBH_Get_USB_Status>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008d72:	b590      	push	{r4, r7, lr}
 8008d74:	b089      	sub	sp, #36	@ 0x24
 8008d76:	af04      	add	r7, sp, #16
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	4608      	mov	r0, r1
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	461a      	mov	r2, r3
 8008d80:	4603      	mov	r3, r0
 8008d82:	70fb      	strb	r3, [r7, #3]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70bb      	strb	r3, [r7, #2]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008d9a:	787c      	ldrb	r4, [r7, #1]
 8008d9c:	78ba      	ldrb	r2, [r7, #2]
 8008d9e:	78f9      	ldrb	r1, [r7, #3]
 8008da0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008da4:	9303      	str	r3, [sp, #12]
 8008da6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008da8:	9302      	str	r3, [sp, #8]
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	4623      	mov	r3, r4
 8008db6:	f7f9 fa45 	bl	8002244 <HAL_HCD_HC_SubmitRequest>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 f86f 	bl	8008ea4 <USBH_Get_USB_Status>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd90      	pop	{r4, r7, pc}

08008dd4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008de6:	78fa      	ldrb	r2, [r7, #3]
 8008de8:	4611      	mov	r1, r2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7f9 fd26 	bl	800283c <HAL_HCD_HC_GetURBState>
 8008df0:	4603      	mov	r3, r0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	460b      	mov	r3, r1
 8008e04:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d103      	bne.n	8008e18 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 f872 	bl	8008efc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008e18:	20c8      	movs	r0, #200	@ 0xc8
 8008e1a:	f7f8 fce9 	bl	80017f0 <HAL_Delay>
  return USBH_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
 8008e34:	4613      	mov	r3, r2
 8008e36:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e3e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008e40:	78fa      	ldrb	r2, [r7, #3]
 8008e42:	68f9      	ldr	r1, [r7, #12]
 8008e44:	4613      	mov	r3, r2
 8008e46:	011b      	lsls	r3, r3, #4
 8008e48:	1a9b      	subs	r3, r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	440b      	add	r3, r1
 8008e4e:	3317      	adds	r3, #23
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008e56:	78fa      	ldrb	r2, [r7, #3]
 8008e58:	68f9      	ldr	r1, [r7, #12]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	011b      	lsls	r3, r3, #4
 8008e5e:	1a9b      	subs	r3, r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	333c      	adds	r3, #60	@ 0x3c
 8008e66:	78ba      	ldrb	r2, [r7, #2]
 8008e68:	701a      	strb	r2, [r3, #0]
 8008e6a:	e009      	b.n	8008e80 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008e6c:	78fa      	ldrb	r2, [r7, #3]
 8008e6e:	68f9      	ldr	r1, [r7, #12]
 8008e70:	4613      	mov	r3, r2
 8008e72:	011b      	lsls	r3, r3, #4
 8008e74:	1a9b      	subs	r3, r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	440b      	add	r3, r1
 8008e7a:	333d      	adds	r3, #61	@ 0x3d
 8008e7c:	78ba      	ldrb	r2, [r7, #2]
 8008e7e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7f8 fcaa 	bl	80017f0 <HAL_Delay>
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d817      	bhi.n	8008ee8 <USBH_Get_USB_Status+0x44>
 8008eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec0 <USBH_Get_USB_Status+0x1c>)
 8008eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebe:	bf00      	nop
 8008ec0:	08008ed1 	.word	0x08008ed1
 8008ec4:	08008ed7 	.word	0x08008ed7
 8008ec8:	08008edd 	.word	0x08008edd
 8008ecc:	08008ee3 	.word	0x08008ee3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed4:	e00b      	b.n	8008eee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eda:	e008      	b.n	8008eee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008edc:	2301      	movs	r3, #1
 8008ede:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee0:	e005      	b.n	8008eee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee6:	e002      	b.n	8008eee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ee8:	2302      	movs	r3, #2
 8008eea:	73fb      	strb	r3, [r7, #15]
    break;
 8008eec:	bf00      	nop
  }
  return usb_status;
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
 8008f14:	e001      	b.n	8008f1a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008f16:	2301      	movs	r3, #1
 8008f18:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	2101      	movs	r1, #1
 8008f20:	4803      	ldr	r0, [pc, #12]	@ (8008f30 <MX_DriverVbusFS+0x34>)
 8008f22:	f7f9 f833 	bl	8001f8c <HAL_GPIO_WritePin>
}
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	40020800 	.word	0x40020800

08008f34 <malloc>:
 8008f34:	4b02      	ldr	r3, [pc, #8]	@ (8008f40 <malloc+0xc>)
 8008f36:	4601      	mov	r1, r0
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	f000 b82d 	b.w	8008f98 <_malloc_r>
 8008f3e:	bf00      	nop
 8008f40:	20000030 	.word	0x20000030

08008f44 <free>:
 8008f44:	4b02      	ldr	r3, [pc, #8]	@ (8008f50 <free+0xc>)
 8008f46:	4601      	mov	r1, r0
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	f000 b8f5 	b.w	8009138 <_free_r>
 8008f4e:	bf00      	nop
 8008f50:	20000030 	.word	0x20000030

08008f54 <sbrk_aligned>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	4e0f      	ldr	r6, [pc, #60]	@ (8008f94 <sbrk_aligned+0x40>)
 8008f58:	460c      	mov	r4, r1
 8008f5a:	6831      	ldr	r1, [r6, #0]
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	b911      	cbnz	r1, 8008f66 <sbrk_aligned+0x12>
 8008f60:	f000 f8ae 	bl	80090c0 <_sbrk_r>
 8008f64:	6030      	str	r0, [r6, #0]
 8008f66:	4621      	mov	r1, r4
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f000 f8a9 	bl	80090c0 <_sbrk_r>
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	d103      	bne.n	8008f7a <sbrk_aligned+0x26>
 8008f72:	f04f 34ff 	mov.w	r4, #4294967295
 8008f76:	4620      	mov	r0, r4
 8008f78:	bd70      	pop	{r4, r5, r6, pc}
 8008f7a:	1cc4      	adds	r4, r0, #3
 8008f7c:	f024 0403 	bic.w	r4, r4, #3
 8008f80:	42a0      	cmp	r0, r4
 8008f82:	d0f8      	beq.n	8008f76 <sbrk_aligned+0x22>
 8008f84:	1a21      	subs	r1, r4, r0
 8008f86:	4628      	mov	r0, r5
 8008f88:	f000 f89a 	bl	80090c0 <_sbrk_r>
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d1f2      	bne.n	8008f76 <sbrk_aligned+0x22>
 8008f90:	e7ef      	b.n	8008f72 <sbrk_aligned+0x1e>
 8008f92:	bf00      	nop
 8008f94:	2000096c 	.word	0x2000096c

08008f98 <_malloc_r>:
 8008f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f9c:	1ccd      	adds	r5, r1, #3
 8008f9e:	f025 0503 	bic.w	r5, r5, #3
 8008fa2:	3508      	adds	r5, #8
 8008fa4:	2d0c      	cmp	r5, #12
 8008fa6:	bf38      	it	cc
 8008fa8:	250c      	movcc	r5, #12
 8008faa:	2d00      	cmp	r5, #0
 8008fac:	4606      	mov	r6, r0
 8008fae:	db01      	blt.n	8008fb4 <_malloc_r+0x1c>
 8008fb0:	42a9      	cmp	r1, r5
 8008fb2:	d904      	bls.n	8008fbe <_malloc_r+0x26>
 8008fb4:	230c      	movs	r3, #12
 8008fb6:	6033      	str	r3, [r6, #0]
 8008fb8:	2000      	movs	r0, #0
 8008fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009094 <_malloc_r+0xfc>
 8008fc2:	f000 f869 	bl	8009098 <__malloc_lock>
 8008fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8008fca:	461c      	mov	r4, r3
 8008fcc:	bb44      	cbnz	r4, 8009020 <_malloc_r+0x88>
 8008fce:	4629      	mov	r1, r5
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	f7ff ffbf 	bl	8008f54 <sbrk_aligned>
 8008fd6:	1c43      	adds	r3, r0, #1
 8008fd8:	4604      	mov	r4, r0
 8008fda:	d158      	bne.n	800908e <_malloc_r+0xf6>
 8008fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8008fe0:	4627      	mov	r7, r4
 8008fe2:	2f00      	cmp	r7, #0
 8008fe4:	d143      	bne.n	800906e <_malloc_r+0xd6>
 8008fe6:	2c00      	cmp	r4, #0
 8008fe8:	d04b      	beq.n	8009082 <_malloc_r+0xea>
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	4639      	mov	r1, r7
 8008fee:	4630      	mov	r0, r6
 8008ff0:	eb04 0903 	add.w	r9, r4, r3
 8008ff4:	f000 f864 	bl	80090c0 <_sbrk_r>
 8008ff8:	4581      	cmp	r9, r0
 8008ffa:	d142      	bne.n	8009082 <_malloc_r+0xea>
 8008ffc:	6821      	ldr	r1, [r4, #0]
 8008ffe:	1a6d      	subs	r5, r5, r1
 8009000:	4629      	mov	r1, r5
 8009002:	4630      	mov	r0, r6
 8009004:	f7ff ffa6 	bl	8008f54 <sbrk_aligned>
 8009008:	3001      	adds	r0, #1
 800900a:	d03a      	beq.n	8009082 <_malloc_r+0xea>
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	442b      	add	r3, r5
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	f8d8 3000 	ldr.w	r3, [r8]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	bb62      	cbnz	r2, 8009074 <_malloc_r+0xdc>
 800901a:	f8c8 7000 	str.w	r7, [r8]
 800901e:	e00f      	b.n	8009040 <_malloc_r+0xa8>
 8009020:	6822      	ldr	r2, [r4, #0]
 8009022:	1b52      	subs	r2, r2, r5
 8009024:	d420      	bmi.n	8009068 <_malloc_r+0xd0>
 8009026:	2a0b      	cmp	r2, #11
 8009028:	d917      	bls.n	800905a <_malloc_r+0xc2>
 800902a:	1961      	adds	r1, r4, r5
 800902c:	42a3      	cmp	r3, r4
 800902e:	6025      	str	r5, [r4, #0]
 8009030:	bf18      	it	ne
 8009032:	6059      	strne	r1, [r3, #4]
 8009034:	6863      	ldr	r3, [r4, #4]
 8009036:	bf08      	it	eq
 8009038:	f8c8 1000 	streq.w	r1, [r8]
 800903c:	5162      	str	r2, [r4, r5]
 800903e:	604b      	str	r3, [r1, #4]
 8009040:	4630      	mov	r0, r6
 8009042:	f000 f82f 	bl	80090a4 <__malloc_unlock>
 8009046:	f104 000b 	add.w	r0, r4, #11
 800904a:	1d23      	adds	r3, r4, #4
 800904c:	f020 0007 	bic.w	r0, r0, #7
 8009050:	1ac2      	subs	r2, r0, r3
 8009052:	bf1c      	itt	ne
 8009054:	1a1b      	subne	r3, r3, r0
 8009056:	50a3      	strne	r3, [r4, r2]
 8009058:	e7af      	b.n	8008fba <_malloc_r+0x22>
 800905a:	6862      	ldr	r2, [r4, #4]
 800905c:	42a3      	cmp	r3, r4
 800905e:	bf0c      	ite	eq
 8009060:	f8c8 2000 	streq.w	r2, [r8]
 8009064:	605a      	strne	r2, [r3, #4]
 8009066:	e7eb      	b.n	8009040 <_malloc_r+0xa8>
 8009068:	4623      	mov	r3, r4
 800906a:	6864      	ldr	r4, [r4, #4]
 800906c:	e7ae      	b.n	8008fcc <_malloc_r+0x34>
 800906e:	463c      	mov	r4, r7
 8009070:	687f      	ldr	r7, [r7, #4]
 8009072:	e7b6      	b.n	8008fe2 <_malloc_r+0x4a>
 8009074:	461a      	mov	r2, r3
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	42a3      	cmp	r3, r4
 800907a:	d1fb      	bne.n	8009074 <_malloc_r+0xdc>
 800907c:	2300      	movs	r3, #0
 800907e:	6053      	str	r3, [r2, #4]
 8009080:	e7de      	b.n	8009040 <_malloc_r+0xa8>
 8009082:	230c      	movs	r3, #12
 8009084:	6033      	str	r3, [r6, #0]
 8009086:	4630      	mov	r0, r6
 8009088:	f000 f80c 	bl	80090a4 <__malloc_unlock>
 800908c:	e794      	b.n	8008fb8 <_malloc_r+0x20>
 800908e:	6005      	str	r5, [r0, #0]
 8009090:	e7d6      	b.n	8009040 <_malloc_r+0xa8>
 8009092:	bf00      	nop
 8009094:	20000970 	.word	0x20000970

08009098 <__malloc_lock>:
 8009098:	4801      	ldr	r0, [pc, #4]	@ (80090a0 <__malloc_lock+0x8>)
 800909a:	f000 b84b 	b.w	8009134 <__retarget_lock_acquire_recursive>
 800909e:	bf00      	nop
 80090a0:	20000ab0 	.word	0x20000ab0

080090a4 <__malloc_unlock>:
 80090a4:	4801      	ldr	r0, [pc, #4]	@ (80090ac <__malloc_unlock+0x8>)
 80090a6:	f000 b846 	b.w	8009136 <__retarget_lock_release_recursive>
 80090aa:	bf00      	nop
 80090ac:	20000ab0 	.word	0x20000ab0

080090b0 <memset>:
 80090b0:	4402      	add	r2, r0
 80090b2:	4603      	mov	r3, r0
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d100      	bne.n	80090ba <memset+0xa>
 80090b8:	4770      	bx	lr
 80090ba:	f803 1b01 	strb.w	r1, [r3], #1
 80090be:	e7f9      	b.n	80090b4 <memset+0x4>

080090c0 <_sbrk_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d06      	ldr	r5, [pc, #24]	@ (80090dc <_sbrk_r+0x1c>)
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	f7f8 faac 	bl	8001628 <_sbrk>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_sbrk_r+0x1a>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_sbrk_r+0x1a>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	20000aac 	.word	0x20000aac

080090e0 <__errno>:
 80090e0:	4b01      	ldr	r3, [pc, #4]	@ (80090e8 <__errno+0x8>)
 80090e2:	6818      	ldr	r0, [r3, #0]
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	20000030 	.word	0x20000030

080090ec <__libc_init_array>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009124 <__libc_init_array+0x38>)
 80090f0:	4c0d      	ldr	r4, [pc, #52]	@ (8009128 <__libc_init_array+0x3c>)
 80090f2:	1b64      	subs	r4, r4, r5
 80090f4:	10a4      	asrs	r4, r4, #2
 80090f6:	2600      	movs	r6, #0
 80090f8:	42a6      	cmp	r6, r4
 80090fa:	d109      	bne.n	8009110 <__libc_init_array+0x24>
 80090fc:	4d0b      	ldr	r5, [pc, #44]	@ (800912c <__libc_init_array+0x40>)
 80090fe:	4c0c      	ldr	r4, [pc, #48]	@ (8009130 <__libc_init_array+0x44>)
 8009100:	f000 f864 	bl	80091cc <_init>
 8009104:	1b64      	subs	r4, r4, r5
 8009106:	10a4      	asrs	r4, r4, #2
 8009108:	2600      	movs	r6, #0
 800910a:	42a6      	cmp	r6, r4
 800910c:	d105      	bne.n	800911a <__libc_init_array+0x2e>
 800910e:	bd70      	pop	{r4, r5, r6, pc}
 8009110:	f855 3b04 	ldr.w	r3, [r5], #4
 8009114:	4798      	blx	r3
 8009116:	3601      	adds	r6, #1
 8009118:	e7ee      	b.n	80090f8 <__libc_init_array+0xc>
 800911a:	f855 3b04 	ldr.w	r3, [r5], #4
 800911e:	4798      	blx	r3
 8009120:	3601      	adds	r6, #1
 8009122:	e7f2      	b.n	800910a <__libc_init_array+0x1e>
 8009124:	08009208 	.word	0x08009208
 8009128:	08009208 	.word	0x08009208
 800912c:	08009208 	.word	0x08009208
 8009130:	0800920c 	.word	0x0800920c

08009134 <__retarget_lock_acquire_recursive>:
 8009134:	4770      	bx	lr

08009136 <__retarget_lock_release_recursive>:
 8009136:	4770      	bx	lr

08009138 <_free_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4605      	mov	r5, r0
 800913c:	2900      	cmp	r1, #0
 800913e:	d041      	beq.n	80091c4 <_free_r+0x8c>
 8009140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009144:	1f0c      	subs	r4, r1, #4
 8009146:	2b00      	cmp	r3, #0
 8009148:	bfb8      	it	lt
 800914a:	18e4      	addlt	r4, r4, r3
 800914c:	f7ff ffa4 	bl	8009098 <__malloc_lock>
 8009150:	4a1d      	ldr	r2, [pc, #116]	@ (80091c8 <_free_r+0x90>)
 8009152:	6813      	ldr	r3, [r2, #0]
 8009154:	b933      	cbnz	r3, 8009164 <_free_r+0x2c>
 8009156:	6063      	str	r3, [r4, #4]
 8009158:	6014      	str	r4, [r2, #0]
 800915a:	4628      	mov	r0, r5
 800915c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009160:	f7ff bfa0 	b.w	80090a4 <__malloc_unlock>
 8009164:	42a3      	cmp	r3, r4
 8009166:	d908      	bls.n	800917a <_free_r+0x42>
 8009168:	6820      	ldr	r0, [r4, #0]
 800916a:	1821      	adds	r1, r4, r0
 800916c:	428b      	cmp	r3, r1
 800916e:	bf01      	itttt	eq
 8009170:	6819      	ldreq	r1, [r3, #0]
 8009172:	685b      	ldreq	r3, [r3, #4]
 8009174:	1809      	addeq	r1, r1, r0
 8009176:	6021      	streq	r1, [r4, #0]
 8009178:	e7ed      	b.n	8009156 <_free_r+0x1e>
 800917a:	461a      	mov	r2, r3
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	b10b      	cbz	r3, 8009184 <_free_r+0x4c>
 8009180:	42a3      	cmp	r3, r4
 8009182:	d9fa      	bls.n	800917a <_free_r+0x42>
 8009184:	6811      	ldr	r1, [r2, #0]
 8009186:	1850      	adds	r0, r2, r1
 8009188:	42a0      	cmp	r0, r4
 800918a:	d10b      	bne.n	80091a4 <_free_r+0x6c>
 800918c:	6820      	ldr	r0, [r4, #0]
 800918e:	4401      	add	r1, r0
 8009190:	1850      	adds	r0, r2, r1
 8009192:	4283      	cmp	r3, r0
 8009194:	6011      	str	r1, [r2, #0]
 8009196:	d1e0      	bne.n	800915a <_free_r+0x22>
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	6053      	str	r3, [r2, #4]
 800919e:	4408      	add	r0, r1
 80091a0:	6010      	str	r0, [r2, #0]
 80091a2:	e7da      	b.n	800915a <_free_r+0x22>
 80091a4:	d902      	bls.n	80091ac <_free_r+0x74>
 80091a6:	230c      	movs	r3, #12
 80091a8:	602b      	str	r3, [r5, #0]
 80091aa:	e7d6      	b.n	800915a <_free_r+0x22>
 80091ac:	6820      	ldr	r0, [r4, #0]
 80091ae:	1821      	adds	r1, r4, r0
 80091b0:	428b      	cmp	r3, r1
 80091b2:	bf04      	itt	eq
 80091b4:	6819      	ldreq	r1, [r3, #0]
 80091b6:	685b      	ldreq	r3, [r3, #4]
 80091b8:	6063      	str	r3, [r4, #4]
 80091ba:	bf04      	itt	eq
 80091bc:	1809      	addeq	r1, r1, r0
 80091be:	6021      	streq	r1, [r4, #0]
 80091c0:	6054      	str	r4, [r2, #4]
 80091c2:	e7ca      	b.n	800915a <_free_r+0x22>
 80091c4:	bd38      	pop	{r3, r4, r5, pc}
 80091c6:	bf00      	nop
 80091c8:	20000970 	.word	0x20000970

080091cc <_init>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	bf00      	nop
 80091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d2:	bc08      	pop	{r3}
 80091d4:	469e      	mov	lr, r3
 80091d6:	4770      	bx	lr

080091d8 <_fini>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	bf00      	nop
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr
