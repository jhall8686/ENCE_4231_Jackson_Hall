
ADC_with_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009418  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080095a0  080095a0  0000a5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095bc  080095bc  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080095bc  080095bc  0000a5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095c4  080095c4  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c4  080095c4  0000a5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095c8  080095c8  0000a5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080095cc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a68  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ae4  20000ae4  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f52  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003da4  00000000  00000000  00021ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  00025da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e65  00000000  00000000  00027088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024dd1  00000000  00000000  00027eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aacf  00000000  00000000  0004ccbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8644  00000000  00000000  0006778d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fdd1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051bc  00000000  00000000  0013fe14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  00144fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009588 	.word	0x08009588

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009588 	.word	0x08009588

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fcc2 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f814 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f962 	bl	80007c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f8cc 	bl	80006a0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8f8 	bl	80006fc <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f926 	bl	800075c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f008 fbe4 	bl	8008cdc <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000514:	f000 f872 	bl	80005fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000518:	4802      	ldr	r0, [pc, #8]	@ (8000524 <main+0x30>)
 800051a:	f000 fd8b 	bl	8001034 <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800051e:	f008 fc03 	bl	8008d28 <MX_USB_HOST_Process>
 8000522:	e7fc      	b.n	800051e <main+0x2a>
 8000524:	20000098 	.word	0x20000098

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	@ 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	@ 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f008 ff98 	bl	800946c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b28      	ldr	r3, [pc, #160]	@ (80005f4 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	4a27      	ldr	r2, [pc, #156]	@ (80005f4 <SystemClock_Config+0xcc>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	@ 0x40
 800055c:	4b25      	ldr	r3, [pc, #148]	@ (80005f4 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b22      	ldr	r3, [pc, #136]	@ (80005f8 <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a21      	ldr	r2, [pc, #132]	@ (80005f8 <SystemClock_Config+0xd0>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800059c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 fb58 	bl	8004c64 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ba:	f000 fa21 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2105      	movs	r1, #5
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 fdb9 	bl	8005154 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e8:	f000 fa0a 	bl	8000a00 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	@ 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060e:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <MX_ADC1_Init+0x98>)
 8000610:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <MX_ADC1_Init+0x9c>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <MX_ADC1_Init+0x98>)
 8000616:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800061a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000622:	4b1c      	ldr	r3, [pc, #112]	@ (8000694 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000628:	4b1a      	ldr	r3, [pc, #104]	@ (8000694 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000636:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063c:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <MX_ADC1_Init+0x98>)
 800063e:	4a17      	ldr	r2, [pc, #92]	@ (800069c <MX_ADC1_Init+0xa0>)
 8000640:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_ADC1_Init+0x98>)
 800064a:	2201      	movs	r2, #1
 800064c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_ADC1_Init+0x98>)
 8000658:	2201      	movs	r2, #1
 800065a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065c:	480d      	ldr	r0, [pc, #52]	@ (8000694 <MX_ADC1_Init+0x98>)
 800065e:	f000 fca5 	bl	8000fac <HAL_ADC_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000668:	f000 f9ca 	bl	8000a00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066c:	2301      	movs	r3, #1
 800066e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000674:	2307      	movs	r3, #7
 8000676:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_ADC1_Init+0x98>)
 800067e:	f000 fee9 	bl	8001454 <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000688:	f000 f9ba 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000098 	.word	0x20000098
 8000698:	40012000 	.word	0x40012000
 800069c:	0f000001 	.word	0x0f000001

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	@ (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f003 fcdd 	bl	800409c <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 f98a 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000e0 	.word	0x200000e0
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0

080006fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_I2S3_Init+0x54>)
 8000702:	4a14      	ldr	r2, [pc, #80]	@ (8000754 <MX_I2S3_Init+0x58>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_I2S3_Init+0x54>)
 8000708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800070c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_I2S3_Init+0x54>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000714:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_I2S3_Init+0x54>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <MX_I2S3_Init+0x54>)
 800071c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000720:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_I2S3_Init+0x54>)
 8000724:	4a0c      	ldr	r2, [pc, #48]	@ (8000758 <MX_I2S3_Init+0x5c>)
 8000726:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_I2S3_Init+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_I2S3_Init+0x54>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_I2S3_Init+0x54>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_I2S3_Init+0x54>)
 800073c:	f003 fdf2 	bl	8004324 <HAL_I2S_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000746:	f000 f95b 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000134 	.word	0x20000134
 8000754:	40003c00 	.word	0x40003c00
 8000758:	00017700 	.word	0x00017700

0800075c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <MX_SPI1_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000768:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800078c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_SPI1_Init+0x64>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_SPI1_Init+0x64>)
 80007ae:	f005 f81f 	bl	80057f0 <HAL_SPI_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b8:	f000 f922 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000017c 	.word	0x2000017c
 80007c4:	40013000 	.word	0x40013000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	@ 0x30
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	4b78      	ldr	r3, [pc, #480]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a77      	ldr	r2, [pc, #476]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 80007e8:	f043 0310 	orr.w	r3, r3, #16
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b75      	ldr	r3, [pc, #468]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	4b71      	ldr	r3, [pc, #452]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a70      	ldr	r2, [pc, #448]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b6e      	ldr	r3, [pc, #440]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b6a      	ldr	r3, [pc, #424]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a69      	ldr	r2, [pc, #420]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b67      	ldr	r3, [pc, #412]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b63      	ldr	r3, [pc, #396]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a62      	ldr	r2, [pc, #392]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b60      	ldr	r3, [pc, #384]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b5c      	ldr	r3, [pc, #368]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a5b      	ldr	r2, [pc, #364]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b59      	ldr	r3, [pc, #356]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b55      	ldr	r3, [pc, #340]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a54      	ldr	r2, [pc, #336]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b52      	ldr	r3, [pc, #328]	@ (80009c4 <MX_GPIO_Init+0x1fc>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2108      	movs	r1, #8
 800088a:	484f      	ldr	r0, [pc, #316]	@ (80009c8 <MX_GPIO_Init+0x200>)
 800088c:	f001 fab8 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2101      	movs	r1, #1
 8000894:	484d      	ldr	r0, [pc, #308]	@ (80009cc <MX_GPIO_Init+0x204>)
 8000896:	f001 fab3 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089a:	2200      	movs	r2, #0
 800089c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008a0:	484b      	ldr	r0, [pc, #300]	@ (80009d0 <MX_GPIO_Init+0x208>)
 80008a2:	f001 faad 	bl	8001e00 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4842      	ldr	r0, [pc, #264]	@ (80009c8 <MX_GPIO_Init+0x200>)
 80008be:	f001 f903 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	483c      	ldr	r0, [pc, #240]	@ (80009cc <MX_GPIO_Init+0x204>)
 80008da:	f001 f8f5 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008de:	2308      	movs	r3, #8
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ee:	2305      	movs	r3, #5
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4834      	ldr	r0, [pc, #208]	@ (80009cc <MX_GPIO_Init+0x204>)
 80008fa:	f001 f8e5 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000902:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4830      	ldr	r0, [pc, #192]	@ (80009d4 <MX_GPIO_Init+0x20c>)
 8000914:	f001 f8d8 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000918:	2304      	movs	r3, #4
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	482b      	ldr	r0, [pc, #172]	@ (80009d8 <MX_GPIO_Init+0x210>)
 800092c:	f001 f8cc 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000942:	2305      	movs	r3, #5
 8000944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4822      	ldr	r0, [pc, #136]	@ (80009d8 <MX_GPIO_Init+0x210>)
 800094e:	f001 f8bb 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000952:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800095c:	2302      	movs	r3, #2
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	481a      	ldr	r0, [pc, #104]	@ (80009d0 <MX_GPIO_Init+0x208>)
 8000968:	f001 f8ae 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800096c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000970:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4812      	ldr	r0, [pc, #72]	@ (80009d0 <MX_GPIO_Init+0x208>)
 8000986:	f001 f89f 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800098a:	2320      	movs	r3, #32
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <MX_GPIO_Init+0x208>)
 800099e:	f001 f893 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_GPIO_Init+0x200>)
 80009b8:	f001 f886 	bl	8001ac8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009bc:	bf00      	nop
 80009be:	3730      	adds	r7, #48	@ 0x30
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400

080009dc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	gADC_Value = HAL_ADC_GetValue(hadc);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 fd13 	bl	8001410 <HAL_ADC_GetValue>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b03      	ldr	r3, [pc, #12]	@ (80009fc <HAL_ADC_ConvCpltCallback+0x20>)
 80009f0:	801a      	strh	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200001d4 	.word	0x200001d4

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f000 fffa 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae8 <HAL_ADC_MspInit+0x8c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12f      	bne.n	8000ade <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <HAL_ADC_MspInit+0x90>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <HAL_ADC_MspInit+0x90>)
 8000a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8e:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <HAL_ADC_MspInit+0x90>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <HAL_ADC_MspInit+0x90>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <HAL_ADC_MspInit+0x90>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <HAL_ADC_MspInit+0x90>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aba:	2303      	movs	r3, #3
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4809      	ldr	r0, [pc, #36]	@ (8000af0 <HAL_ADC_MspInit+0x94>)
 8000aca:	f000 fffd 	bl	8001ac8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2012      	movs	r0, #18
 8000ad4:	f000 ffc1 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ad8:	2012      	movs	r0, #18
 8000ada:	f000 ffda 	bl	8001a92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	@ 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40012000 	.word	0x40012000
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000

08000af4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	@ (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12c      	bne.n	8000b70 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b32:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b38:	2312      	movs	r3, #18
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b44:	2304      	movs	r3, #4
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <HAL_I2C_MspInit+0x8c>)
 8000b50:	f000 ffba 	bl	8001ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5c:	4a07      	ldr	r2, [pc, #28]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	@ 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	@ 0x38
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a31      	ldr	r2, [pc, #196]	@ (8000c74 <HAL_I2S_MspInit+0xf0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d15a      	bne.n	8000c6a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bb8:	23c0      	movs	r3, #192	@ 0xc0
 8000bba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fcd1 	bl	800556c <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bd0:	f7ff ff16 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bdc:	4a26      	ldr	r2, [pc, #152]	@ (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be4:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	4a18      	ldr	r2, [pc, #96]	@ (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1c:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c38:	2306      	movs	r3, #6
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	480e      	ldr	r0, [pc, #56]	@ (8000c7c <HAL_I2S_MspInit+0xf8>)
 8000c44:	f000 ff40 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c48:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <HAL_I2S_MspInit+0xfc>)
 8000c66:	f000 ff2f 	bl	8001ac8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3738      	adds	r7, #56	@ 0x38
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40003c00 	.word	0x40003c00
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020800 	.word	0x40020800

08000c84 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	@ (8000d08 <HAL_SPI_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12b      	bne.n	8000cfe <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	4a17      	ldr	r2, [pc, #92]	@ (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	@ (8000d0c <HAL_SPI_MspInit+0x88>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cde:	23e0      	movs	r3, #224	@ 0xe0
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cee:	2305      	movs	r3, #5
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <HAL_SPI_MspInit+0x8c>)
 8000cfa:	f000 fee5 	bl	8001ac8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	@ 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <NMI_Handler+0x4>

08000d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6a:	f000 f8db 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <ADC_IRQHandler+0x10>)
 8000d7a:	f000 fa39 	bl	80011f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000098 	.word	0x20000098

08000d88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <OTG_FS_IRQHandler+0x10>)
 8000d8e:	f001 fb31 	bl	80023f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200005bc 	.word	0x200005bc

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f008 fb66 	bl	800949c <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20020000 	.word	0x20020000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	200001d8 	.word	0x200001d8
 8000e04:	20000ae8 	.word	0x20000ae8

08000e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e30:	f7ff ffea 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f008 fb25 	bl	80094a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fb49 	bl	80004f4 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e70:	080095cc 	.word	0x080095cc
  ldr r2, =_sbss
 8000e74:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e78:	20000ae4 	.word	0x20000ae4

08000e7c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <CAN1_RX0_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fdcb 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fdaa 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fde3 	bl	8001aae <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 fdab 	bl	8001a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	200001dc 	.word	0x200001dc

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200001dc 	.word	0x200001dc

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008

08000fac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e033      	b.n	800102a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d109      	bne.n	8000fde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fd46 	bl	8000a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d118      	bne.n	800101c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ff2:	f023 0302 	bic.w	r3, r3, #2
 8000ff6:	f043 0202 	orr.w	r2, r3, #2
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 fb4a 	bl	8001698 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f023 0303 	bic.w	r3, r3, #3
 8001012:	f043 0201 	orr.w	r2, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	641a      	str	r2, [r3, #64]	@ 0x40
 800101a:	e001      	b.n	8001020 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001046:	2b01      	cmp	r3, #1
 8001048:	d101      	bne.n	800104e <HAL_ADC_Start_IT+0x1a>
 800104a:	2302      	movs	r3, #2
 800104c:	e0bd      	b.n	80011ca <HAL_ADC_Start_IT+0x196>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	d018      	beq.n	8001096 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001074:	4b58      	ldr	r3, [pc, #352]	@ (80011d8 <HAL_ADC_Start_IT+0x1a4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a58      	ldr	r2, [pc, #352]	@ (80011dc <HAL_ADC_Start_IT+0x1a8>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	0c9a      	lsrs	r2, r3, #18
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001088:	e002      	b.n	8001090 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	3b01      	subs	r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f9      	bne.n	800108a <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	f040 8085 	bne.w	80011b0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010aa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d007      	beq.n	80010d8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010e4:	d106      	bne.n	80010f4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ea:	f023 0206 	bic.w	r2, r3, #6
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80010f2:	e002      	b.n	80010fa <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001102:	4b37      	ldr	r3, [pc, #220]	@ (80011e0 <HAL_ADC_Start_IT+0x1ac>)
 8001104:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800110e:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800111e:	f043 0320 	orr.w	r3, r3, #32
 8001122:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	2b00      	cmp	r3, #0
 800112e:	d12a      	bne.n	8001186 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a2b      	ldr	r2, [pc, #172]	@ (80011e4 <HAL_ADC_Start_IT+0x1b0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d015      	beq.n	8001166 <HAL_ADC_Start_IT+0x132>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a2a      	ldr	r2, [pc, #168]	@ (80011e8 <HAL_ADC_Start_IT+0x1b4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d105      	bne.n	8001150 <HAL_ADC_Start_IT+0x11c>
 8001144:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <HAL_ADC_Start_IT+0x1ac>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00a      	beq.n	8001166 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a25      	ldr	r2, [pc, #148]	@ (80011ec <HAL_ADC_Start_IT+0x1b8>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d136      	bne.n	80011c8 <HAL_ADC_Start_IT+0x194>
 800115a:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <HAL_ADC_Start_IT+0x1ac>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b00      	cmp	r3, #0
 8001164:	d130      	bne.n	80011c8 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d129      	bne.n	80011c8 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	e020      	b.n	80011c8 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <HAL_ADC_Start_IT+0x1b0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d11b      	bne.n	80011c8 <HAL_ADC_Start_IT+0x194>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d114      	bne.n	80011c8 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	e00b      	b.n	80011c8 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	f043 0210 	orr.w	r2, r3, #16
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000000 	.word	0x20000000
 80011dc:	431bde83 	.word	0x431bde83
 80011e0:	40012300 	.word	0x40012300
 80011e4:	40012000 	.word	0x40012000
 80011e8:	40012100 	.word	0x40012100
 80011ec:	40012200 	.word	0x40012200

080011f0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f003 0320 	and.w	r3, r3, #32
 800121e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d049      	beq.n	80012ba <HAL_ADC_IRQHandler+0xca>
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d046      	beq.n	80012ba <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	2b00      	cmp	r3, #0
 8001236:	d105      	bne.n	8001244 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d12b      	bne.n	80012aa <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001256:	2b00      	cmp	r3, #0
 8001258:	d127      	bne.n	80012aa <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001260:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001272:	2b00      	cmp	r3, #0
 8001274:	d119      	bne.n	80012aa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0220 	bic.w	r2, r2, #32
 8001284:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d105      	bne.n	80012aa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	f043 0201 	orr.w	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fb96 	bl	80009dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f06f 0212 	mvn.w	r2, #18
 80012b8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d057      	beq.n	8001380 <HAL_ADC_IRQHandler+0x190>
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d054      	beq.n	8001380 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d105      	bne.n	80012ee <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d139      	bne.n	8001370 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001302:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001314:	2b00      	cmp	r3, #0
 8001316:	d12b      	bne.n	8001370 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001322:	2b00      	cmp	r3, #0
 8001324:	d124      	bne.n	8001370 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001330:	2b00      	cmp	r3, #0
 8001332:	d11d      	bne.n	8001370 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001338:	2b00      	cmp	r3, #0
 800133a:	d119      	bne.n	8001370 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800134a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001360:	2b00      	cmp	r3, #0
 8001362:	d105      	bne.n	8001370 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	f043 0201 	orr.w	r2, r3, #1
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 fa8d 	bl	8001890 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f06f 020c 	mvn.w	r2, #12
 800137e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800138e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d017      	beq.n	80013c6 <HAL_ADC_IRQHandler+0x1d6>
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d014      	beq.n	80013c6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d10d      	bne.n	80013c6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f837 	bl	800142a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f06f 0201 	mvn.w	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013d4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d015      	beq.n	8001408 <HAL_ADC_IRQHandler+0x218>
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d012      	beq.n	8001408 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f043 0202 	orr.w	r2, r3, #2
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f06f 0220 	mvn.w	r2, #32
 80013f6:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f820 	bl	800143e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f06f 0220 	mvn.w	r2, #32
 8001406:	601a      	str	r2, [r3, #0]
  }
}
 8001408:	bf00      	nop
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x1c>
 800146c:	2302      	movs	r3, #2
 800146e:	e105      	b.n	800167c <HAL_ADC_ConfigChannel+0x228>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b09      	cmp	r3, #9
 800147e:	d925      	bls.n	80014cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68d9      	ldr	r1, [r3, #12]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	3b1e      	subs	r3, #30
 8001496:	2207      	movs	r2, #7
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43da      	mvns	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	400a      	ands	r2, r1
 80014a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68d9      	ldr	r1, [r3, #12]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	4603      	mov	r3, r0
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4403      	add	r3, r0
 80014be:	3b1e      	subs	r3, #30
 80014c0:	409a      	lsls	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	e022      	b.n	8001512 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6919      	ldr	r1, [r3, #16]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	2207      	movs	r2, #7
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	400a      	ands	r2, r1
 80014ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6919      	ldr	r1, [r3, #16]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	4603      	mov	r3, r0
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4403      	add	r3, r0
 8001508:	409a      	lsls	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b06      	cmp	r3, #6
 8001518:	d824      	bhi.n	8001564 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b05      	subs	r3, #5
 800152c:	221f      	movs	r2, #31
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	400a      	ands	r2, r1
 800153a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b05      	subs	r3, #5
 8001556:	fa00 f203 	lsl.w	r2, r0, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	635a      	str	r2, [r3, #52]	@ 0x34
 8001562:	e04c      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b0c      	cmp	r3, #12
 800156a:	d824      	bhi.n	80015b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	3b23      	subs	r3, #35	@ 0x23
 800157e:	221f      	movs	r2, #31
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43da      	mvns	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	400a      	ands	r2, r1
 800158c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	b29b      	uxth	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	3b23      	subs	r3, #35	@ 0x23
 80015a8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80015b4:	e023      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	3b41      	subs	r3, #65	@ 0x41
 80015c8:	221f      	movs	r2, #31
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	400a      	ands	r2, r1
 80015d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	3b41      	subs	r3, #65	@ 0x41
 80015f2:	fa00 f203 	lsl.w	r2, r0, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015fe:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <HAL_ADC_ConfigChannel+0x234>)
 8001600:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a21      	ldr	r2, [pc, #132]	@ (800168c <HAL_ADC_ConfigChannel+0x238>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d109      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x1cc>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b12      	cmp	r3, #18
 8001612:	d105      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a19      	ldr	r2, [pc, #100]	@ (800168c <HAL_ADC_ConfigChannel+0x238>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d123      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x21e>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b10      	cmp	r3, #16
 8001630:	d003      	beq.n	800163a <HAL_ADC_ConfigChannel+0x1e6>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b11      	cmp	r3, #17
 8001638:	d11b      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b10      	cmp	r3, #16
 800164c:	d111      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <HAL_ADC_ConfigChannel+0x23c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a10      	ldr	r2, [pc, #64]	@ (8001694 <HAL_ADC_ConfigChannel+0x240>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	0c9a      	lsrs	r2, r3, #18
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001664:	e002      	b.n	800166c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3b01      	subs	r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f9      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40012300 	.word	0x40012300
 800168c:	40012000 	.word	0x40012000
 8001690:	20000000 	.word	0x20000000
 8001694:	431bde83 	.word	0x431bde83

08001698 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016a0:	4b79      	ldr	r3, [pc, #484]	@ (8001888 <ADC_Init+0x1f0>)
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	021a      	lsls	r2, r3, #8
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6899      	ldr	r1, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172a:	4a58      	ldr	r2, [pc, #352]	@ (800188c <ADC_Init+0x1f4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d022      	beq.n	8001776 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800173e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6899      	ldr	r1, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6899      	ldr	r1, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	e00f      	b.n	8001796 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001794:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0202 	bic.w	r2, r2, #2
 80017a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6899      	ldr	r1, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7e1b      	ldrb	r3, [r3, #24]
 80017b0:	005a      	lsls	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01b      	beq.n	80017fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017d2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ee:	3b01      	subs	r3, #1
 80017f0:	035a      	lsls	r2, r3, #13
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	e007      	b.n	800180c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800180a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	3b01      	subs	r3, #1
 8001828:	051a      	lsls	r2, r3, #20
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6899      	ldr	r1, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800184e:	025a      	lsls	r2, r3, #9
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6899      	ldr	r1, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	029a      	lsls	r2, r3, #10
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	609a      	str	r2, [r3, #8]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	40012300 	.word	0x40012300
 800188c:	0f000001 	.word	0x0f000001

08001890 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db0b      	blt.n	8001932 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	4907      	ldr	r1, [pc, #28]	@ (8001940 <__NVIC_EnableIRQ+0x38>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	2001      	movs	r0, #1
 800192a:	fa00 f202 	lsl.w	r2, r0, r2
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	@ (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	@ (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
         );
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a10:	d301      	bcc.n	8001a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <SysTick_Config+0x40>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1e:	210f      	movs	r1, #15
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f7ff ff8e 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <SysTick_Config+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <SysTick_Config+0x40>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff29 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6c:	f7ff ff3e 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff ff8e 	bl	8001998 <NVIC_EncodePriority>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff5d 	bl	8001944 <__NVIC_SetPriority>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff31 	bl	8001908 <__NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffa2 	bl	8001a00 <SysTick_Config>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	e16b      	b.n	8001dbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	f040 815a 	bne.w	8001db6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d005      	beq.n	8001b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d130      	bne.n	8001b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 0201 	and.w	r2, r3, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d017      	beq.n	8001bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d123      	bne.n	8001c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	69b9      	ldr	r1, [r7, #24]
 8001c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80b4 	beq.w	8001db6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b60      	ldr	r3, [pc, #384]	@ (8001dd4 <HAL_GPIO_Init+0x30c>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	4a5f      	ldr	r2, [pc, #380]	@ (8001dd4 <HAL_GPIO_Init+0x30c>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd4 <HAL_GPIO_Init+0x30c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001dd8 <HAL_GPIO_Init+0x310>)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a52      	ldr	r2, [pc, #328]	@ (8001ddc <HAL_GPIO_Init+0x314>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d02b      	beq.n	8001cee <HAL_GPIO_Init+0x226>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a51      	ldr	r2, [pc, #324]	@ (8001de0 <HAL_GPIO_Init+0x318>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d025      	beq.n	8001cea <HAL_GPIO_Init+0x222>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a50      	ldr	r2, [pc, #320]	@ (8001de4 <HAL_GPIO_Init+0x31c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01f      	beq.n	8001ce6 <HAL_GPIO_Init+0x21e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4f      	ldr	r2, [pc, #316]	@ (8001de8 <HAL_GPIO_Init+0x320>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d019      	beq.n	8001ce2 <HAL_GPIO_Init+0x21a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4e      	ldr	r2, [pc, #312]	@ (8001dec <HAL_GPIO_Init+0x324>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_GPIO_Init+0x216>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4d      	ldr	r2, [pc, #308]	@ (8001df0 <HAL_GPIO_Init+0x328>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00d      	beq.n	8001cda <HAL_GPIO_Init+0x212>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4c      	ldr	r2, [pc, #304]	@ (8001df4 <HAL_GPIO_Init+0x32c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <HAL_GPIO_Init+0x20e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	@ (8001df8 <HAL_GPIO_Init+0x330>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_GPIO_Init+0x20a>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	e00e      	b.n	8001cf0 <HAL_GPIO_Init+0x228>
 8001cd2:	2308      	movs	r3, #8
 8001cd4:	e00c      	b.n	8001cf0 <HAL_GPIO_Init+0x228>
 8001cd6:	2306      	movs	r3, #6
 8001cd8:	e00a      	b.n	8001cf0 <HAL_GPIO_Init+0x228>
 8001cda:	2305      	movs	r3, #5
 8001cdc:	e008      	b.n	8001cf0 <HAL_GPIO_Init+0x228>
 8001cde:	2304      	movs	r3, #4
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x228>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e004      	b.n	8001cf0 <HAL_GPIO_Init+0x228>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <HAL_GPIO_Init+0x228>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x228>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f002 0203 	and.w	r2, r2, #3
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d00:	4935      	ldr	r1, [pc, #212]	@ (8001dd8 <HAL_GPIO_Init+0x310>)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001dfc <HAL_GPIO_Init+0x334>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d32:	4a32      	ldr	r2, [pc, #200]	@ (8001dfc <HAL_GPIO_Init+0x334>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d38:	4b30      	ldr	r3, [pc, #192]	@ (8001dfc <HAL_GPIO_Init+0x334>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d5c:	4a27      	ldr	r2, [pc, #156]	@ (8001dfc <HAL_GPIO_Init+0x334>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d62:	4b26      	ldr	r3, [pc, #152]	@ (8001dfc <HAL_GPIO_Init+0x334>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d86:	4a1d      	ldr	r2, [pc, #116]	@ (8001dfc <HAL_GPIO_Init+0x334>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <HAL_GPIO_Init+0x334>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db0:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <HAL_GPIO_Init+0x334>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b0f      	cmp	r3, #15
 8001dc0:	f67f ae90 	bls.w	8001ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40013800 	.word	0x40013800
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	40020400 	.word	0x40020400
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40021400 	.word	0x40021400
 8001df4:	40021800 	.word	0x40021800
 8001df8:	40021c00 	.word	0x40021c00
 8001dfc:	40013c00 	.word	0x40013c00

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e1c:	e003      	b.n	8001e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	041a      	lsls	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	619a      	str	r2, [r3, #24]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af02      	add	r7, sp, #8
 8001e38:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e059      	b.n	8001ef8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f006 ff9a 	bl	8008d98 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2203      	movs	r2, #3
 8001e68:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e72:	d102      	bne.n	8001e7a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fdb4 	bl	80059ec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7c1a      	ldrb	r2, [r3, #16]
 8001e8c:	f88d 2000 	strb.w	r2, [sp]
 8001e90:	3304      	adds	r3, #4
 8001e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e94:	f003 fd35 	bl	8005902 <USB_CoreInit>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e026      	b.n	8001ef8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 fdac 	bl	8005a0e <USB_SetCurrentMode>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e017      	b.n	8001ef8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7c1a      	ldrb	r2, [r3, #16]
 8001ed0:	f88d 2000 	strb.w	r2, [sp]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ed8:	f003 ff4e 	bl	8005d78 <USB_HostInit>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e004      	b.n	8001ef8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b08b      	sub	sp, #44	@ 0x2c
 8001f04:	af04      	add	r7, sp, #16
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4603      	mov	r3, r0
 8001f10:	70fb      	strb	r3, [r7, #3]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70bb      	strb	r3, [r7, #2]
 8001f16:	4613      	mov	r3, r2
 8001f18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001f1a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001f1c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_HCD_HC_Init+0x2c>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e09d      	b.n	8002068 <HAL_HCD_HC_Init+0x168>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	3319      	adds	r3, #25
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	3314      	adds	r3, #20
 8001f58:	787a      	ldrb	r2, [r7, #1]
 8001f5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	3315      	adds	r3, #21
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3326      	adds	r3, #38	@ 0x26
 8001f80:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001f84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	78bb      	ldrb	r3, [r7, #2]
 8001f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f8e:	b2d8      	uxtb	r0, r3
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3316      	adds	r3, #22
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fbc8 	bl	800273c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001fac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	da0a      	bge.n	8001fca <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3317      	adds	r3, #23
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
 8001fc8:	e009      	b.n	8001fde <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3317      	adds	r3, #23
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 f82c 	bl	8006040 <USB_GetHostSpeed>
 8001fe8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001fea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d10b      	bne.n	800200a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001ff2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d107      	bne.n	800200a <HAL_HCD_HC_Init+0x10a>
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d104      	bne.n	800200a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2bbc      	cmp	r3, #188	@ 0xbc
 8002004:	d901      	bls.n	800200a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002006:	23bc      	movs	r3, #188	@ 0xbc
 8002008:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	3318      	adds	r3, #24
 800201a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800201e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	b298      	uxth	r0, r3
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	3328      	adds	r3, #40	@ 0x28
 8002034:	4602      	mov	r2, r0
 8002036:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	b29b      	uxth	r3, r3
 8002040:	787c      	ldrb	r4, [r7, #1]
 8002042:	78ba      	ldrb	r2, [r7, #2]
 8002044:	78f9      	ldrb	r1, [r7, #3]
 8002046:	9302      	str	r3, [sp, #8]
 8002048:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	4623      	mov	r3, r4
 8002056:	f004 f81b 	bl	8006090 <USB_HC_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd90      	pop	{r4, r7, pc}

08002070 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_HCD_HC_Halt+0x1e>
 800208a:	2302      	movs	r3, #2
 800208c:	e00f      	b.n	80020ae <HAL_HCD_HC_Halt+0x3e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f004 fbad 	bl	80067fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	70fb      	strb	r3, [r7, #3]
 80020ca:	460b      	mov	r3, r1
 80020cc:	70bb      	strb	r3, [r7, #2]
 80020ce:	4613      	mov	r3, r2
 80020d0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3317      	adds	r3, #23
 80020e2:	78ba      	ldrb	r2, [r7, #2]
 80020e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	3326      	adds	r3, #38	@ 0x26
 80020f6:	787a      	ldrb	r2, [r7, #1]
 80020f8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80020fa:	7c3b      	ldrb	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d114      	bne.n	800212a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	332a      	adds	r3, #42	@ 0x2a
 8002110:	2203      	movs	r2, #3
 8002112:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3319      	adds	r3, #25
 8002124:	7f3a      	ldrb	r2, [r7, #28]
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	e009      	b.n	800213e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	332a      	adds	r3, #42	@ 0x2a
 800213a:	2202      	movs	r2, #2
 800213c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800213e:	787b      	ldrb	r3, [r7, #1]
 8002140:	2b03      	cmp	r3, #3
 8002142:	f200 8102 	bhi.w	800234a <HAL_HCD_HC_SubmitRequest+0x292>
 8002146:	a201      	add	r2, pc, #4	@ (adr r2, 800214c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214c:	0800215d 	.word	0x0800215d
 8002150:	08002335 	.word	0x08002335
 8002154:	08002221 	.word	0x08002221
 8002158:	080022ab 	.word	0x080022ab
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800215c:	7c3b      	ldrb	r3, [r7, #16]
 800215e:	2b01      	cmp	r3, #1
 8002160:	f040 80f5 	bne.w	800234e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002164:	78bb      	ldrb	r3, [r7, #2]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d12d      	bne.n	80021c6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800216a:	8b3b      	ldrh	r3, [r7, #24]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	333d      	adds	r3, #61	@ 0x3d
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	333d      	adds	r3, #61	@ 0x3d
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10a      	bne.n	80021b0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	332a      	adds	r3, #42	@ 0x2a
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80021ae:	e0ce      	b.n	800234e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	332a      	adds	r3, #42	@ 0x2a
 80021c0:	2202      	movs	r2, #2
 80021c2:	701a      	strb	r2, [r3, #0]
      break;
 80021c4:	e0c3      	b.n	800234e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	331a      	adds	r3, #26
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f040 80b8 	bne.w	800234e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	333c      	adds	r3, #60	@ 0x3c
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10a      	bne.n	800220a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	332a      	adds	r3, #42	@ 0x2a
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
      break;
 8002208:	e0a1      	b.n	800234e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	332a      	adds	r3, #42	@ 0x2a
 800221a:	2202      	movs	r2, #2
 800221c:	701a      	strb	r2, [r3, #0]
      break;
 800221e:	e096      	b.n	800234e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002220:	78bb      	ldrb	r3, [r7, #2]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d120      	bne.n	8002268 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	333d      	adds	r3, #61	@ 0x3d
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10a      	bne.n	8002252 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	332a      	adds	r3, #42	@ 0x2a
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002250:	e07e      	b.n	8002350 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	332a      	adds	r3, #42	@ 0x2a
 8002262:	2202      	movs	r2, #2
 8002264:	701a      	strb	r2, [r3, #0]
      break;
 8002266:	e073      	b.n	8002350 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	333c      	adds	r3, #60	@ 0x3c
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10a      	bne.n	8002294 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	332a      	adds	r3, #42	@ 0x2a
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
      break;
 8002292:	e05d      	b.n	8002350 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	332a      	adds	r3, #42	@ 0x2a
 80022a4:	2202      	movs	r2, #2
 80022a6:	701a      	strb	r2, [r3, #0]
      break;
 80022a8:	e052      	b.n	8002350 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80022aa:	78bb      	ldrb	r3, [r7, #2]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d120      	bne.n	80022f2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	333d      	adds	r3, #61	@ 0x3d
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10a      	bne.n	80022dc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	332a      	adds	r3, #42	@ 0x2a
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022da:	e039      	b.n	8002350 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	332a      	adds	r3, #42	@ 0x2a
 80022ec:	2202      	movs	r2, #2
 80022ee:	701a      	strb	r2, [r3, #0]
      break;
 80022f0:	e02e      	b.n	8002350 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	333c      	adds	r3, #60	@ 0x3c
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	332a      	adds	r3, #42	@ 0x2a
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
      break;
 800231c:	e018      	b.n	8002350 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	332a      	adds	r3, #42	@ 0x2a
 800232e:	2202      	movs	r2, #2
 8002330:	701a      	strb	r2, [r3, #0]
      break;
 8002332:	e00d      	b.n	8002350 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	332a      	adds	r3, #42	@ 0x2a
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
      break;
 8002348:	e002      	b.n	8002350 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800234a:	bf00      	nop
 800234c:	e000      	b.n	8002350 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800234e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	332c      	adds	r3, #44	@ 0x2c
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	8b39      	ldrh	r1, [r7, #24]
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4403      	add	r3, r0
 8002374:	3334      	adds	r3, #52	@ 0x34
 8002376:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	334c      	adds	r3, #76	@ 0x4c
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	3338      	adds	r3, #56	@ 0x38
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	3315      	adds	r3, #21
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	334d      	adds	r3, #77	@ 0x4d
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	3310      	adds	r3, #16
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	1d19      	adds	r1, r3, #4
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	799b      	ldrb	r3, [r3, #6]
 80023e2:	461a      	mov	r2, r3
 80023e4:	f003 ff80 	bl	80062e8 <USB_HC_StartXfer>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop

080023f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f003 fc75 	bl	8005cfa <USB_GetMode>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	f040 80fb 	bne.w	800260e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f003 fc38 	bl	8005c92 <USB_ReadInterrupts>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80f1 	beq.w	800260c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f003 fc2f 	bl	8005c92 <USB_ReadInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800243a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800243e:	d104      	bne.n	800244a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002448:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f003 fc1f 	bl	8005c92 <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800245e:	d104      	bne.n	800246a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002468:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f003 fc0f 	bl	8005c92 <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800247a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800247e:	d104      	bne.n	800248a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002488:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f003 fbff 	bl	8005c92 <USB_ReadInterrupts>
 8002494:	4603      	mov	r3, r0
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d103      	bne.n	80024a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2202      	movs	r2, #2
 80024a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 fbf1 	bl	8005c92 <USB_ReadInterrupts>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024ba:	d120      	bne.n	80024fe <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80024c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d113      	bne.n	80024fe <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80024d6:	2110      	movs	r1, #16
 80024d8:	6938      	ldr	r0, [r7, #16]
 80024da:	f003 fae4 	bl	8005aa6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80024de:	6938      	ldr	r0, [r7, #16]
 80024e0:	f003 fb13 	bl	8005b0a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7a5b      	ldrb	r3, [r3, #9]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d105      	bne.n	80024f8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2101      	movs	r1, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 fd04 	bl	8005f00 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f006 fccb 	bl	8008e94 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fbc5 	bl	8005c92 <USB_ReadInterrupts>
 8002508:	4603      	mov	r3, r0
 800250a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800250e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002512:	d102      	bne.n	800251a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f001 fd4d 	bl	8003fb4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fbb7 	bl	8005c92 <USB_ReadInterrupts>
 8002524:	4603      	mov	r3, r0
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b08      	cmp	r3, #8
 800252c:	d106      	bne.n	800253c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f006 fc94 	bl	8008e5c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2208      	movs	r2, #8
 800253a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f003 fba6 	bl	8005c92 <USB_ReadInterrupts>
 8002546:	4603      	mov	r3, r0
 8002548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002550:	d139      	bne.n	80025c6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f004 f940 	bl	80067dc <USB_HC_ReadInterrupt>
 800255c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e025      	b.n	80025b0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d018      	beq.n	80025aa <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800258a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800258e:	d106      	bne.n	800259e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f905 	bl	80027a6 <HCD_HC_IN_IRQHandler>
 800259c:	e005      	b.n	80025aa <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	4619      	mov	r1, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 ff67 	bl	8003478 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	795b      	ldrb	r3, [r3, #5]
 80025b4:	461a      	mov	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d3d3      	bcc.n	8002564 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 fb61 	bl	8005c92 <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d101      	bne.n	80025de <HAL_HCD_IRQHandler+0x1ea>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_HCD_IRQHandler+0x1ec>
 80025de:	2300      	movs	r3, #0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d014      	beq.n	800260e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0210 	bic.w	r2, r2, #16
 80025f2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f001 fbfe 	bl	8003df6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0210 	orr.w	r2, r2, #16
 8002608:	619a      	str	r2, [r3, #24]
 800260a:	e000      	b.n	800260e <HAL_HCD_IRQHandler+0x21a>
      return;
 800260c:	bf00      	nop
    }
  }
}
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_HCD_Start+0x16>
 8002626:	2302      	movs	r3, #2
 8002628:	e013      	b.n	8002652 <HAL_HCD_Start+0x3e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2101      	movs	r1, #1
 8002638:	4618      	mov	r0, r3
 800263a:	f003 fcc8 	bl	8005fce <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 f9c1 	bl	80059ca <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_HCD_Stop+0x16>
 800266c:	2302      	movs	r3, #2
 800266e:	e00d      	b.n	800268c <HAL_HCD_Stop+0x32>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f004 fa1b 	bl	8006ab8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f003 fc6a 	bl	8005f7a <USB_ResetPort>
 80026a6:	4603      	mov	r3, r0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	334c      	adds	r3, #76	@ 0x4c
 80026cc:	781b      	ldrb	r3, [r3, #0]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3338      	adds	r3, #56	@ 0x38
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f003 fcac 	bl	800606e <USB_GetCurrentFrame>
 8002716:	4603      	mov	r3, r0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f003 fc87 	bl	8006040 <USB_GetHostSpeed>
 8002732:	4603      	mov	r3, r0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	331a      	adds	r3, #26
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	331b      	adds	r3, #27
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3325      	adds	r3, #37	@ 0x25
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	3324      	adds	r3, #36	@ 0x24
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 fa77 	bl	8005cb8 <USB_ReadChInterrupts>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d11a      	bne.n	800280a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e0:	461a      	mov	r2, r3
 80027e2:	2304      	movs	r3, #4
 80027e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	334d      	adds	r3, #77	@ 0x4d
 80027f6:	2207      	movs	r2, #7
 80027f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f003 fffb 	bl	80067fe <USB_HC_Halt>
 8002808:	e09e      	b.n	8002948 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f003 fa50 	bl	8005cb8 <USB_ReadChInterrupts>
 8002818:	4603      	mov	r3, r0
 800281a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002822:	d11b      	bne.n	800285c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002836:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	334d      	adds	r3, #77	@ 0x4d
 8002848:	2208      	movs	r2, #8
 800284a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f003 ffd2 	bl	80067fe <USB_HC_Halt>
 800285a:	e075      	b.n	8002948 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f003 fa27 	bl	8005cb8 <USB_ReadChInterrupts>
 800286a:	4603      	mov	r3, r0
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b08      	cmp	r3, #8
 8002872:	d11a      	bne.n	80028aa <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002880:	461a      	mov	r2, r3
 8002882:	2308      	movs	r3, #8
 8002884:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	334d      	adds	r3, #77	@ 0x4d
 8002896:	2206      	movs	r2, #6
 8002898:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 ffab 	bl	80067fe <USB_HC_Halt>
 80028a8:	e04e      	b.n	8002948 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f003 fa00 	bl	8005cb8 <USB_ReadChInterrupts>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c2:	d11b      	bne.n	80028fc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	334d      	adds	r3, #77	@ 0x4d
 80028e8:	2209      	movs	r2, #9
 80028ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 ff82 	bl	80067fe <USB_HC_Halt>
 80028fa:	e025      	b.n	8002948 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f003 f9d7 	bl	8005cb8 <USB_ReadChInterrupts>
 800290a:	4603      	mov	r3, r0
 800290c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002910:	2b80      	cmp	r3, #128	@ 0x80
 8002912:	d119      	bne.n	8002948 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002920:	461a      	mov	r2, r3
 8002922:	2380      	movs	r3, #128	@ 0x80
 8002924:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	334d      	adds	r3, #77	@ 0x4d
 8002936:	2207      	movs	r2, #7
 8002938:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f003 ff5b 	bl	80067fe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f003 f9b1 	bl	8005cb8 <USB_ReadChInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800295c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002960:	d112      	bne.n	8002988 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f003 ff47 	bl	80067fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297c:	461a      	mov	r2, r3
 800297e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002982:	6093      	str	r3, [r2, #8]
 8002984:	f000 bd75 	b.w	8003472 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f003 f991 	bl	8005cb8 <USB_ReadChInterrupts>
 8002996:	4603      	mov	r3, r0
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	f040 8128 	bne.w	8002bf2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ae:	461a      	mov	r2, r3
 80029b0:	2320      	movs	r3, #32
 80029b2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	331b      	adds	r3, #27
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d119      	bne.n	80029fe <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	331b      	adds	r3, #27
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	0151      	lsls	r1, r2, #5
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	440a      	add	r2, r1
 80029f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	799b      	ldrb	r3, [r3, #6]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01b      	beq.n	8002a3e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3330      	adds	r3, #48	@ 0x30
 8002a16:	6819      	ldr	r1, [r3, #0]
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	1ac9      	subs	r1, r1, r3
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4403      	add	r3, r0
 8002a3a:	3338      	adds	r3, #56	@ 0x38
 8002a3c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	334d      	adds	r3, #77	@ 0x4d
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	3344      	adds	r3, #68	@ 0x44
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a72:	461a      	mov	r2, r3
 8002a74:	2301      	movs	r3, #1
 8002a76:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	3326      	adds	r3, #38	@ 0x26
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3326      	adds	r3, #38	@ 0x26
 8002a9e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d110      	bne.n	8002ac6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 fea6 	bl	80067fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ab2:	78fb      	ldrb	r3, [r7, #3]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	6093      	str	r3, [r2, #8]
 8002ac4:	e03d      	b.n	8002b42 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3326      	adds	r3, #38	@ 0x26
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d00a      	beq.n	8002af2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	3326      	adds	r3, #38	@ 0x26
 8002aec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d127      	bne.n	8002b42 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	0151      	lsls	r1, r2, #5
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	440a      	add	r2, r1
 8002b08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b10:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	334c      	adds	r3, #76	@ 0x4c
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	334c      	adds	r3, #76	@ 0x4c
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f006 f9b7 	bl	8008eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	799b      	ldrb	r3, [r3, #6]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d13b      	bne.n	8002bc2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	3338      	adds	r3, #56	@ 0x38
 8002b5a:	6819      	ldr	r1, [r3, #0]
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4403      	add	r3, r0
 8002b6a:	3328      	adds	r3, #40	@ 0x28
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	440b      	add	r3, r1
 8002b70:	1e59      	subs	r1, r3, #1
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4403      	add	r3, r0
 8002b80:	3328      	adds	r3, #40	@ 0x28
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8470 	beq.w	8003472 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	333c      	adds	r3, #60	@ 0x3c
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	f083 0301 	eor.w	r3, r3, #1
 8002baa:	b2d8      	uxtb	r0, r3
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	333c      	adds	r3, #60	@ 0x3c
 8002bba:	4602      	mov	r2, r0
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	f000 bc58 	b.w	8003472 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	333c      	adds	r3, #60	@ 0x3c
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	f083 0301 	eor.w	r3, r3, #1
 8002bda:	b2d8      	uxtb	r0, r3
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	333c      	adds	r3, #60	@ 0x3c
 8002bea:	4602      	mov	r2, r0
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	f000 bc40 	b.w	8003472 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 f85c 	bl	8005cb8 <USB_ReadChInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d131      	bne.n	8002c6e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c16:	461a      	mov	r2, r3
 8002c18:	2320      	movs	r3, #32
 8002c1a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	331a      	adds	r3, #26
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	f040 841f 	bne.w	8003472 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	331b      	adds	r3, #27
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	334d      	adds	r3, #77	@ 0x4d
 8002c58:	2203      	movs	r2, #3
 8002c5a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f003 fdca 	bl	80067fe <USB_HC_Halt>
 8002c6a:	f000 bc02 	b.w	8003472 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 f81e 	bl	8005cb8 <USB_ReadChInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	f040 8305 	bne.w	8003292 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	2302      	movs	r3, #2
 8002c98:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	334d      	adds	r3, #77	@ 0x4d
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d114      	bne.n	8002cda <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	334d      	adds	r3, #77	@ 0x4d
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	334c      	adds	r3, #76	@ 0x4c
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e2cc      	b.n	8003274 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	334d      	adds	r3, #77	@ 0x4d
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b06      	cmp	r3, #6
 8002cee:	d114      	bne.n	8002d1a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	334d      	adds	r3, #77	@ 0x4d
 8002d00:	2202      	movs	r2, #2
 8002d02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	334c      	adds	r3, #76	@ 0x4c
 8002d14:	2205      	movs	r2, #5
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	e2ac      	b.n	8003274 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	334d      	adds	r3, #77	@ 0x4d
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b07      	cmp	r3, #7
 8002d2e:	d00b      	beq.n	8002d48 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	334d      	adds	r3, #77	@ 0x4d
 8002d40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d42:	2b09      	cmp	r3, #9
 8002d44:	f040 80a6 	bne.w	8002e94 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	334d      	adds	r3, #77	@ 0x4d
 8002d58:	2202      	movs	r2, #2
 8002d5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	3344      	adds	r3, #68	@ 0x44
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	1c59      	adds	r1, r3, #1
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4403      	add	r3, r0
 8002d7c:	3344      	adds	r3, #68	@ 0x44
 8002d7e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3344      	adds	r3, #68	@ 0x44
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d943      	bls.n	8002e1e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3344      	adds	r3, #68	@ 0x44
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	331a      	adds	r3, #26
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d123      	bne.n	8002e08 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	331b      	adds	r3, #27
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	331c      	adds	r3, #28
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	0151      	lsls	r1, r2, #5
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	440a      	add	r2, r1
 8002dfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e06:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	334c      	adds	r3, #76	@ 0x4c
 8002e18:	2204      	movs	r2, #4
 8002e1a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e1c:	e229      	b.n	8003272 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	334c      	adds	r3, #76	@ 0x4c
 8002e2e:	2202      	movs	r2, #2
 8002e30:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	3326      	adds	r3, #38	@ 0x26
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	3326      	adds	r3, #38	@ 0x26
 8002e58:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	f040 8209 	bne.w	8003272 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e76:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e7e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e92:	e1ee      	b.n	8003272 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	334d      	adds	r3, #77	@ 0x4d
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	f040 80c8 	bne.w	800303c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	334d      	adds	r3, #77	@ 0x4d
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	331b      	adds	r3, #27
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	f040 81ce 	bne.w	8003274 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3326      	adds	r3, #38	@ 0x26
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d16b      	bne.n	8002fc6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3348      	adds	r3, #72	@ 0x48
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	1c59      	adds	r1, r3, #1
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4403      	add	r3, r0
 8002f0e:	3348      	adds	r3, #72	@ 0x48
 8002f10:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	3348      	adds	r3, #72	@ 0x48
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d943      	bls.n	8002fb0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	3348      	adds	r3, #72	@ 0x48
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	331b      	adds	r3, #27
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3344      	adds	r3, #68	@ 0x44
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d809      	bhi.n	8002f7a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	331c      	adds	r3, #28
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	0151      	lsls	r1, r2, #5
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	440a      	add	r2, r1
 8002f90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f98:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	334c      	adds	r3, #76	@ 0x4c
 8002faa:	2204      	movs	r2, #4
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	e014      	b.n	8002fda <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	334c      	adds	r3, #76	@ 0x4c
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	e009      	b.n	8002fda <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	334c      	adds	r3, #76	@ 0x4c
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3326      	adds	r3, #38	@ 0x26
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3326      	adds	r3, #38	@ 0x26
 8003000:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003002:	2b02      	cmp	r3, #2
 8003004:	f040 8136 	bne.w	8003274 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4413      	add	r3, r2
 8003010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800301e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003026:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4413      	add	r3, r2
 8003030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003034:	461a      	mov	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e11b      	b.n	8003274 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	334d      	adds	r3, #77	@ 0x4d
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b03      	cmp	r3, #3
 8003050:	f040 8081 	bne.w	8003156 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	334d      	adds	r3, #77	@ 0x4d
 8003064:	2202      	movs	r2, #2
 8003066:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	331b      	adds	r3, #27
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b01      	cmp	r3, #1
 800307c:	f040 80fa 	bne.w	8003274 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	334c      	adds	r3, #76	@ 0x4c
 8003090:	2202      	movs	r2, #2
 8003092:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	0151      	lsls	r1, r2, #5
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	440a      	add	r2, r1
 80030aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	0151      	lsls	r1, r2, #5
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	440a      	add	r2, r1
 80030ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030d2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	0151      	lsls	r1, r2, #5
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	440a      	add	r2, r1
 80030ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030ee:	f023 0320 	bic.w	r3, r3, #32
 80030f2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3326      	adds	r3, #38	@ 0x26
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3326      	adds	r3, #38	@ 0x26
 800311a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800311c:	2b02      	cmp	r3, #2
 800311e:	f040 80a9 	bne.w	8003274 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003138:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003140:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	e08e      	b.n	8003274 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	334d      	adds	r3, #77	@ 0x4d
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d143      	bne.n	80031f4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334d      	adds	r3, #77	@ 0x4d
 800317c:	2202      	movs	r2, #2
 800317e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	334c      	adds	r3, #76	@ 0x4c
 8003190:	2202      	movs	r2, #2
 8003192:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3326      	adds	r3, #38	@ 0x26
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	3326      	adds	r3, #38	@ 0x26
 80031ba:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d159      	bne.n	8003274 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031d6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031de:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ec:	461a      	mov	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e03f      	b.n	8003274 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	334d      	adds	r3, #77	@ 0x4d
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b08      	cmp	r3, #8
 8003208:	d126      	bne.n	8003258 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	334d      	adds	r3, #77	@ 0x4d
 800321a:	2202      	movs	r2, #2
 800321c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3344      	adds	r3, #68	@ 0x44
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	1c59      	adds	r1, r3, #1
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4403      	add	r3, r0
 800323e:	3344      	adds	r3, #68	@ 0x44
 8003240:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334c      	adds	r3, #76	@ 0x4c
 8003252:	2204      	movs	r2, #4
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e00d      	b.n	8003274 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	334d      	adds	r3, #77	@ 0x4d
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b02      	cmp	r3, #2
 800326c:	f000 8100 	beq.w	8003470 <HCD_HC_IN_IRQHandler+0xcca>
 8003270:	e000      	b.n	8003274 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003272:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	334c      	adds	r3, #76	@ 0x4c
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f005 fe10 	bl	8008eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003290:	e0ef      	b.n	8003472 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f002 fd0c 	bl	8005cb8 <USB_ReadChInterrupts>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a6:	2b40      	cmp	r3, #64	@ 0x40
 80032a8:	d12f      	bne.n	800330a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b6:	461a      	mov	r2, r3
 80032b8:	2340      	movs	r3, #64	@ 0x40
 80032ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	334d      	adds	r3, #77	@ 0x4d
 80032cc:	2205      	movs	r2, #5
 80032ce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	331a      	adds	r3, #26
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3344      	adds	r3, #68	@ 0x44
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f003 fa7b 	bl	80067fe <USB_HC_Halt>
 8003308:	e0b3      	b.n	8003472 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f002 fcd0 	bl	8005cb8 <USB_ReadChInterrupts>
 8003318:	4603      	mov	r3, r0
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b10      	cmp	r3, #16
 8003320:	f040 80a7 	bne.w	8003472 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3326      	adds	r3, #38	@ 0x26
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d11b      	bne.n	8003372 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3344      	adds	r3, #68	@ 0x44
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334d      	adds	r3, #77	@ 0x4d
 800335e:	2204      	movs	r2, #4
 8003360:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f003 fa47 	bl	80067fe <USB_HC_Halt>
 8003370:	e03f      	b.n	80033f2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3326      	adds	r3, #38	@ 0x26
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3326      	adds	r3, #38	@ 0x26
 8003398:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800339a:	2b02      	cmp	r3, #2
 800339c:	d129      	bne.n	80033f2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3344      	adds	r3, #68	@ 0x44
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	799b      	ldrb	r3, [r3, #6]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HCD_HC_IN_IRQHandler+0xc2a>
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	331b      	adds	r3, #27
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d110      	bne.n	80033f2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	334d      	adds	r3, #77	@ 0x4d
 80033e0:	2204      	movs	r2, #4
 80033e2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 fa06 	bl	80067fe <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	331b      	adds	r3, #27
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d129      	bne.n	800345c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	331b      	adds	r3, #27
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	0151      	lsls	r1, r2, #5
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	440a      	add	r2, r1
 8003432:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800343a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	0151      	lsls	r1, r2, #5
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	440a      	add	r2, r1
 8003452:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003456:	f043 0320 	orr.w	r3, r3, #32
 800345a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003468:	461a      	mov	r2, r3
 800346a:	2310      	movs	r3, #16
 800346c:	6093      	str	r3, [r2, #8]
 800346e:	e000      	b.n	8003472 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003470:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	4611      	mov	r1, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f002 fc0e 	bl	8005cb8 <USB_ReadChInterrupts>
 800349c:	4603      	mov	r3, r0
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d11b      	bne.n	80034de <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b2:	461a      	mov	r2, r3
 80034b4:	2304      	movs	r3, #4
 80034b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	334d      	adds	r3, #77	@ 0x4d
 80034c8:	2207      	movs	r2, #7
 80034ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f003 f992 	bl	80067fe <USB_HC_Halt>
 80034da:	f000 bc89 	b.w	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f002 fbe6 	bl	8005cb8 <USB_ReadChInterrupts>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	f040 8082 	bne.w	80035fc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003504:	461a      	mov	r2, r3
 8003506:	2320      	movs	r3, #32
 8003508:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3319      	adds	r3, #25
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d124      	bne.n	800356a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	3319      	adds	r3, #25
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	334c      	adds	r3, #76	@ 0x4c
 8003544:	2202      	movs	r2, #2
 8003546:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	334d      	adds	r3, #77	@ 0x4d
 8003558:	2203      	movs	r2, #3
 800355a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f003 f94a 	bl	80067fe <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	331a      	adds	r3, #26
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	f040 8437 	bne.w	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	331b      	adds	r3, #27
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f040 842b 	bne.w	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	3326      	adds	r3, #38	@ 0x26
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d009      	beq.n	80035c4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	331b      	adds	r3, #27
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	334d      	adds	r3, #77	@ 0x4d
 80035d4:	2203      	movs	r2, #3
 80035d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f003 f90c 	bl	80067fe <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3344      	adds	r3, #68	@ 0x44
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e3f9      	b.n	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f002 fb57 	bl	8005cb8 <USB_ReadChInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003614:	d111      	bne.n	800363a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003622:	461a      	mov	r2, r3
 8003624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003628:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f003 f8e3 	bl	80067fe <USB_HC_Halt>
 8003638:	e3da      	b.n	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f002 fb38 	bl	8005cb8 <USB_ReadChInterrupts>
 8003648:	4603      	mov	r3, r0
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d168      	bne.n	8003724 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3344      	adds	r3, #68	@ 0x44
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f002 fb22 	bl	8005cb8 <USB_ReadChInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367a:	2b40      	cmp	r3, #64	@ 0x40
 800367c:	d112      	bne.n	80036a4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3319      	adds	r3, #25
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4413      	add	r3, r2
 800369a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800369e:	461a      	mov	r2, r3
 80036a0:	2340      	movs	r3, #64	@ 0x40
 80036a2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	331b      	adds	r3, #27
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d019      	beq.n	80036ee <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	331b      	adds	r3, #27
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	0151      	lsls	r1, r2, #5
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	440a      	add	r2, r1
 80036e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ec:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036fa:	461a      	mov	r2, r3
 80036fc:	2301      	movs	r3, #1
 80036fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	334d      	adds	r3, #77	@ 0x4d
 8003710:	2201      	movs	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f003 f86e 	bl	80067fe <USB_HC_Halt>
 8003722:	e365      	b.n	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f002 fac3 	bl	8005cb8 <USB_ReadChInterrupts>
 8003732:	4603      	mov	r3, r0
 8003734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003738:	2b40      	cmp	r3, #64	@ 0x40
 800373a:	d139      	bne.n	80037b0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334d      	adds	r3, #77	@ 0x4d
 800374c:	2205      	movs	r2, #5
 800374e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	331a      	adds	r3, #26
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	3319      	adds	r3, #25
 8003776:	2201      	movs	r2, #1
 8003778:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	3344      	adds	r3, #68	@ 0x44
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f003 f831 	bl	80067fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a8:	461a      	mov	r2, r3
 80037aa:	2340      	movs	r3, #64	@ 0x40
 80037ac:	6093      	str	r3, [r2, #8]
 80037ae:	e31f      	b.n	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f002 fa7d 	bl	8005cb8 <USB_ReadChInterrupts>
 80037be:	4603      	mov	r3, r0
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d11a      	bne.n	80037fe <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d4:	461a      	mov	r2, r3
 80037d6:	2308      	movs	r3, #8
 80037d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	334d      	adds	r3, #77	@ 0x4d
 80037ea:	2206      	movs	r2, #6
 80037ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f003 f801 	bl	80067fe <USB_HC_Halt>
 80037fc:	e2f8      	b.n	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f002 fa56 	bl	8005cb8 <USB_ReadChInterrupts>
 800380c:	4603      	mov	r3, r0
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b10      	cmp	r3, #16
 8003814:	d144      	bne.n	80038a0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3344      	adds	r3, #68	@ 0x44
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	334d      	adds	r3, #77	@ 0x4d
 800383a:	2204      	movs	r2, #4
 800383c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3319      	adds	r3, #25
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d114      	bne.n	800387e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	3318      	adds	r3, #24
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	3319      	adds	r3, #25
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f002 ffb9 	bl	80067fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003898:	461a      	mov	r2, r3
 800389a:	2310      	movs	r3, #16
 800389c:	6093      	str	r3, [r2, #8]
 800389e:	e2a7      	b.n	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f002 fa05 	bl	8005cb8 <USB_ReadChInterrupts>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b4:	2b80      	cmp	r3, #128	@ 0x80
 80038b6:	f040 8083 	bne.w	80039c0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	799b      	ldrb	r3, [r3, #6]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d111      	bne.n	80038e6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	334d      	adds	r3, #77	@ 0x4d
 80038d2:	2207      	movs	r2, #7
 80038d4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	4611      	mov	r1, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f002 ff8d 	bl	80067fe <USB_HC_Halt>
 80038e4:	e062      	b.n	80039ac <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	3344      	adds	r3, #68	@ 0x44
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	1c59      	adds	r1, r3, #1
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4403      	add	r3, r0
 8003906:	3344      	adds	r3, #68	@ 0x44
 8003908:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	3344      	adds	r3, #68	@ 0x44
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d922      	bls.n	8003966 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	3344      	adds	r3, #68	@ 0x44
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	334c      	adds	r3, #76	@ 0x4c
 8003944:	2204      	movs	r2, #4
 8003946:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	334c      	adds	r3, #76	@ 0x4c
 8003958:	781a      	ldrb	r2, [r3, #0]
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	4619      	mov	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f005 faa6 	bl	8008eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003964:	e022      	b.n	80039ac <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	334c      	adds	r3, #76	@ 0x4c
 8003976:	2202      	movs	r2, #2
 8003978:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4413      	add	r3, r2
 8003982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003990:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003998:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039b8:	461a      	mov	r2, r3
 80039ba:	2380      	movs	r3, #128	@ 0x80
 80039bc:	6093      	str	r3, [r2, #8]
 80039be:	e217      	b.n	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 f975 	bl	8005cb8 <USB_ReadChInterrupts>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d8:	d11b      	bne.n	8003a12 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	334d      	adds	r3, #77	@ 0x4d
 80039ea:	2209      	movs	r2, #9
 80039ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f002 ff01 	bl	80067fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a0e:	6093      	str	r3, [r2, #8]
 8003a10:	e1ee      	b.n	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f002 f94c 	bl	8005cb8 <USB_ReadChInterrupts>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	f040 81df 	bne.w	8003dea <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a38:	461a      	mov	r2, r3
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	334d      	adds	r3, #77	@ 0x4d
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	f040 8093 	bne.w	8003b7c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	334d      	adds	r3, #77	@ 0x4d
 8003a66:	2202      	movs	r2, #2
 8003a68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	334c      	adds	r3, #76	@ 0x4c
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3326      	adds	r3, #38	@ 0x26
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d00b      	beq.n	8003aac <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3326      	adds	r3, #38	@ 0x26
 8003aa4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	f040 8190 	bne.w	8003dcc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	799b      	ldrb	r3, [r3, #6]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d115      	bne.n	8003ae0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	333d      	adds	r3, #61	@ 0x3d
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	f083 0301 	eor.w	r3, r3, #1
 8003acc:	b2d8      	uxtb	r0, r3
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	333d      	adds	r3, #61	@ 0x3d
 8003adc:	4602      	mov	r2, r0
 8003ade:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	799b      	ldrb	r3, [r3, #6]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	f040 8171 	bne.w	8003dcc <HCD_HC_OUT_IRQHandler+0x954>
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	3334      	adds	r3, #52	@ 0x34
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 8165 	beq.w	8003dcc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	3334      	adds	r3, #52	@ 0x34
 8003b12:	6819      	ldr	r1, [r3, #0]
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4403      	add	r3, r0
 8003b22:	3328      	adds	r3, #40	@ 0x28
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	440b      	add	r3, r1
 8003b28:	1e59      	subs	r1, r3, #1
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4403      	add	r3, r0
 8003b38:	3328      	adds	r3, #40	@ 0x28
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b40:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 813f 	beq.w	8003dcc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	333d      	adds	r3, #61	@ 0x3d
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	f083 0301 	eor.w	r3, r3, #1
 8003b66:	b2d8      	uxtb	r0, r3
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	333d      	adds	r3, #61	@ 0x3d
 8003b76:	4602      	mov	r2, r0
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e127      	b.n	8003dcc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	334d      	adds	r3, #77	@ 0x4d
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d120      	bne.n	8003bd4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	334d      	adds	r3, #77	@ 0x4d
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	331b      	adds	r3, #27
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	f040 8107 	bne.w	8003dcc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	334c      	adds	r3, #76	@ 0x4c
 8003bce:	2202      	movs	r2, #2
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	e0fb      	b.n	8003dcc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	334d      	adds	r3, #77	@ 0x4d
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d13a      	bne.n	8003c60 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	334d      	adds	r3, #77	@ 0x4d
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	334c      	adds	r3, #76	@ 0x4c
 8003c0e:	2202      	movs	r2, #2
 8003c10:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	331b      	adds	r3, #27
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	f040 80d1 	bne.w	8003dcc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	331b      	adds	r3, #27
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c5c:	6053      	str	r3, [r2, #4]
 8003c5e:	e0b5      	b.n	8003dcc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334d      	adds	r3, #77	@ 0x4d
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d114      	bne.n	8003ca0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	334d      	adds	r3, #77	@ 0x4d
 8003c86:	2202      	movs	r2, #2
 8003c88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	334c      	adds	r3, #76	@ 0x4c
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e095      	b.n	8003dcc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	334d      	adds	r3, #77	@ 0x4d
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b06      	cmp	r3, #6
 8003cb4:	d114      	bne.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	334d      	adds	r3, #77	@ 0x4d
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	334c      	adds	r3, #76	@ 0x4c
 8003cda:	2205      	movs	r2, #5
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e075      	b.n	8003dcc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	334d      	adds	r3, #77	@ 0x4d
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b07      	cmp	r3, #7
 8003cf4:	d00a      	beq.n	8003d0c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	334d      	adds	r3, #77	@ 0x4d
 8003d06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003d08:	2b09      	cmp	r3, #9
 8003d0a:	d170      	bne.n	8003dee <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	334d      	adds	r3, #77	@ 0x4d
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	3344      	adds	r3, #68	@ 0x44
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4403      	add	r3, r0
 8003d40:	3344      	adds	r3, #68	@ 0x44
 8003d42:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	3344      	adds	r3, #68	@ 0x44
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d914      	bls.n	8003d84 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	3344      	adds	r3, #68	@ 0x44
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	334c      	adds	r3, #76	@ 0x4c
 8003d7e:	2204      	movs	r2, #4
 8003d80:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d82:	e022      	b.n	8003dca <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	334c      	adds	r3, #76	@ 0x4c
 8003d94:	2202      	movs	r2, #2
 8003d96:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dae:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003db6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003dca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003dcc:	78fa      	ldrb	r2, [r7, #3]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	334c      	adds	r3, #76	@ 0x4c
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	4619      	mov	r1, r3
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f005 f864 	bl	8008eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003de8:	e002      	b.n	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003dea:	bf00      	nop
 8003dec:	e000      	b.n	8003df0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003dee:	bf00      	nop
  }
}
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b08a      	sub	sp, #40	@ 0x28
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e06:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	0c5b      	lsrs	r3, r3, #17
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e2a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d004      	beq.n	8003e3c <HCD_RXQLVL_IRQHandler+0x46>
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	f000 80b6 	beq.w	8003fa6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e3a:	e0b7      	b.n	8003fac <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80b3 	beq.w	8003faa <HCD_RXQLVL_IRQHandler+0x1b4>
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	332c      	adds	r3, #44	@ 0x2c
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80a7 	beq.w	8003faa <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3338      	adds	r3, #56	@ 0x38
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	18d1      	adds	r1, r2, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4403      	add	r3, r0
 8003e80:	3334      	adds	r3, #52	@ 0x34
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4299      	cmp	r1, r3
 8003e86:	f200 8083 	bhi.w	8003f90 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4613      	mov	r3, r2
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	332c      	adds	r3, #44	@ 0x2c
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	b292      	uxth	r2, r2
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f001 fe9c 	bl	8005be2 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	332c      	adds	r3, #44	@ 0x2c
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	18d1      	adds	r1, r2, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4403      	add	r3, r0
 8003ece:	332c      	adds	r3, #44	@ 0x2c
 8003ed0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	3338      	adds	r3, #56	@ 0x38
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	18d1      	adds	r1, r2, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4613      	mov	r3, r2
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4403      	add	r3, r0
 8003ef6:	3338      	adds	r3, #56	@ 0x38
 8003ef8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	0cdb      	lsrs	r3, r3, #19
 8003f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f0e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3328      	adds	r3, #40	@ 0x28
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d13f      	bne.n	8003faa <HCD_RXQLVL_IRQHandler+0x1b4>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d03c      	beq.n	8003faa <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f46:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f4e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	333c      	adds	r3, #60	@ 0x3c
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	f083 0301 	eor.w	r3, r3, #1
 8003f78:	b2d8      	uxtb	r0, r3
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	333c      	adds	r3, #60	@ 0x3c
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	701a      	strb	r2, [r3, #0]
      break;
 8003f8e:	e00c      	b.n	8003faa <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4613      	mov	r3, r2
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	334c      	adds	r3, #76	@ 0x4c
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	701a      	strb	r2, [r3, #0]
      break;
 8003fa4:	e001      	b.n	8003faa <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003faa:	bf00      	nop
  }
}
 8003fac:	bf00      	nop
 8003fae:	3728      	adds	r7, #40	@ 0x28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003fe0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d10b      	bne.n	8004004 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d102      	bne.n	8003ffc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f004 ff3e 	bl	8008e78 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f043 0302 	orr.w	r3, r3, #2
 8004002:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b08      	cmp	r3, #8
 800400c:	d132      	bne.n	8004074 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f043 0308 	orr.w	r3, r3, #8
 8004014:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b04      	cmp	r3, #4
 800401e:	d126      	bne.n	800406e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	7a5b      	ldrb	r3, [r3, #9]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d113      	bne.n	8004050 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800402e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004032:	d106      	bne.n	8004042 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2102      	movs	r1, #2
 800403a:	4618      	mov	r0, r3
 800403c:	f001 ff60 	bl	8005f00 <USB_InitFSLSPClkSel>
 8004040:	e011      	b.n	8004066 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2101      	movs	r1, #1
 8004048:	4618      	mov	r0, r3
 800404a:	f001 ff59 	bl	8005f00 <USB_InitFSLSPClkSel>
 800404e:	e00a      	b.n	8004066 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	79db      	ldrb	r3, [r3, #7]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d106      	bne.n	8004066 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800405e:	461a      	mov	r2, r3
 8004060:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004064:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f004 ff30 	bl	8008ecc <HAL_HCD_PortEnabled_Callback>
 800406c:	e002      	b.n	8004074 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f004 ff3a 	bl	8008ee8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b20      	cmp	r3, #32
 800407c:	d103      	bne.n	8004086 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f043 0320 	orr.w	r3, r3, #32
 8004084:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800408c:	461a      	mov	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6013      	str	r3, [r2, #0]
}
 8004092:	bf00      	nop
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e12b      	b.n	8004306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fc fd16 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2224      	movs	r2, #36	@ 0x24
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004100:	f001 fa20 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8004104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4a81      	ldr	r2, [pc, #516]	@ (8004310 <HAL_I2C_Init+0x274>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d807      	bhi.n	8004120 <HAL_I2C_Init+0x84>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a80      	ldr	r2, [pc, #512]	@ (8004314 <HAL_I2C_Init+0x278>)
 8004114:	4293      	cmp	r3, r2
 8004116:	bf94      	ite	ls
 8004118:	2301      	movls	r3, #1
 800411a:	2300      	movhi	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e006      	b.n	800412e <HAL_I2C_Init+0x92>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a7d      	ldr	r2, [pc, #500]	@ (8004318 <HAL_I2C_Init+0x27c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	bf94      	ite	ls
 8004128:	2301      	movls	r3, #1
 800412a:	2300      	movhi	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0e7      	b.n	8004306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4a78      	ldr	r2, [pc, #480]	@ (800431c <HAL_I2C_Init+0x280>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	0c9b      	lsrs	r3, r3, #18
 8004140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4a6a      	ldr	r2, [pc, #424]	@ (8004310 <HAL_I2C_Init+0x274>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d802      	bhi.n	8004170 <HAL_I2C_Init+0xd4>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3301      	adds	r3, #1
 800416e:	e009      	b.n	8004184 <HAL_I2C_Init+0xe8>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	4a69      	ldr	r2, [pc, #420]	@ (8004320 <HAL_I2C_Init+0x284>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	099b      	lsrs	r3, r3, #6
 8004182:	3301      	adds	r3, #1
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	430b      	orrs	r3, r1
 800418a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004196:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	495c      	ldr	r1, [pc, #368]	@ (8004310 <HAL_I2C_Init+0x274>)
 80041a0:	428b      	cmp	r3, r1
 80041a2:	d819      	bhi.n	80041d8 <HAL_I2C_Init+0x13c>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1e59      	subs	r1, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b2:	1c59      	adds	r1, r3, #1
 80041b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80041b8:	400b      	ands	r3, r1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_I2C_Init+0x138>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1e59      	subs	r1, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d2:	e051      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 80041d4:	2304      	movs	r3, #4
 80041d6:	e04f      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d111      	bne.n	8004204 <HAL_I2C_Init+0x168>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1e58      	subs	r0, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	440b      	add	r3, r1
 80041ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	e012      	b.n	800422a <HAL_I2C_Init+0x18e>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1e58      	subs	r0, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6859      	ldr	r1, [r3, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	0099      	lsls	r1, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	fbb0 f3f3 	udiv	r3, r0, r3
 800421a:	3301      	adds	r3, #1
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Init+0x196>
 800422e:	2301      	movs	r3, #1
 8004230:	e022      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10e      	bne.n	8004258 <HAL_I2C_Init+0x1bc>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1e58      	subs	r0, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	440b      	add	r3, r1
 8004248:	fbb0 f3f3 	udiv	r3, r0, r3
 800424c:	3301      	adds	r3, #1
 800424e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004256:	e00f      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1e58      	subs	r0, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	0099      	lsls	r1, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	fbb0 f3f3 	udiv	r3, r0, r3
 800426e:	3301      	adds	r3, #1
 8004270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004274:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	6809      	ldr	r1, [r1, #0]
 800427c:	4313      	orrs	r3, r2
 800427e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69da      	ldr	r2, [r3, #28]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80042a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6911      	ldr	r1, [r2, #16]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68d2      	ldr	r2, [r2, #12]
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	000186a0 	.word	0x000186a0
 8004314:	001e847f 	.word	0x001e847f
 8004318:	003d08ff 	.word	0x003d08ff
 800431c:	431bde83 	.word	0x431bde83
 8004320:	10624dd3 	.word	0x10624dd3

08004324 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e128      	b.n	8004588 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a90      	ldr	r2, [pc, #576]	@ (8004590 <HAL_I2S_Init+0x26c>)
 800434e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fc fc17 	bl	8000b84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800436c:	f023 030f 	bic.w	r3, r3, #15
 8004370:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2202      	movs	r2, #2
 8004378:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d060      	beq.n	8004444 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800438a:	2310      	movs	r3, #16
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	e001      	b.n	8004394 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004390:	2320      	movs	r3, #32
 8004392:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b20      	cmp	r3, #32
 800439a:	d802      	bhi.n	80043a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80043a2:	2001      	movs	r0, #1
 80043a4:	f001 f9c4 	bl	8005730 <HAL_RCCEx_GetPeriphCLKFreq>
 80043a8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b2:	d125      	bne.n	8004400 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d010      	beq.n	80043de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	461a      	mov	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	3305      	adds	r3, #5
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	e01f      	b.n	800441e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	461a      	mov	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	3305      	adds	r3, #5
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	e00e      	b.n	800441e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	fbb2 f2f3 	udiv	r2, r2, r3
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	461a      	mov	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	fbb2 f3f3 	udiv	r3, r2, r3
 800441a:	3305      	adds	r3, #5
 800441c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4a5c      	ldr	r2, [pc, #368]	@ (8004594 <HAL_I2S_Init+0x270>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	08db      	lsrs	r3, r3, #3
 8004428:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	e003      	b.n	800444c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004444:	2302      	movs	r3, #2
 8004446:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d902      	bls.n	8004458 <HAL_I2S_Init+0x134>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	2bff      	cmp	r3, #255	@ 0xff
 8004456:	d907      	bls.n	8004468 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	f043 0210 	orr.w	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e08f      	b.n	8004588 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	ea42 0103 	orr.w	r1, r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	430a      	orrs	r2, r1
 800447a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004486:	f023 030f 	bic.w	r3, r3, #15
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6851      	ldr	r1, [r2, #4]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6892      	ldr	r2, [r2, #8]
 8004492:	4311      	orrs	r1, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68d2      	ldr	r2, [r2, #12]
 8004498:	4311      	orrs	r1, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6992      	ldr	r2, [r2, #24]
 800449e:	430a      	orrs	r2, r1
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d161      	bne.n	8004578 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a38      	ldr	r2, [pc, #224]	@ (8004598 <HAL_I2S_Init+0x274>)
 80044b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a37      	ldr	r2, [pc, #220]	@ (800459c <HAL_I2S_Init+0x278>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_I2S_Init+0x1a4>
 80044c4:	4b36      	ldr	r3, [pc, #216]	@ (80045a0 <HAL_I2S_Init+0x27c>)
 80044c6:	e001      	b.n	80044cc <HAL_I2S_Init+0x1a8>
 80044c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	4932      	ldr	r1, [pc, #200]	@ (800459c <HAL_I2S_Init+0x278>)
 80044d4:	428a      	cmp	r2, r1
 80044d6:	d101      	bne.n	80044dc <HAL_I2S_Init+0x1b8>
 80044d8:	4a31      	ldr	r2, [pc, #196]	@ (80045a0 <HAL_I2S_Init+0x27c>)
 80044da:	e001      	b.n	80044e0 <HAL_I2S_Init+0x1bc>
 80044dc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80044e0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80044e4:	f023 030f 	bic.w	r3, r3, #15
 80044e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2b      	ldr	r2, [pc, #172]	@ (800459c <HAL_I2S_Init+0x278>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d101      	bne.n	80044f8 <HAL_I2S_Init+0x1d4>
 80044f4:	4b2a      	ldr	r3, [pc, #168]	@ (80045a0 <HAL_I2S_Init+0x27c>)
 80044f6:	e001      	b.n	80044fc <HAL_I2S_Init+0x1d8>
 80044f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044fc:	2202      	movs	r2, #2
 80044fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a25      	ldr	r2, [pc, #148]	@ (800459c <HAL_I2S_Init+0x278>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d101      	bne.n	800450e <HAL_I2S_Init+0x1ea>
 800450a:	4b25      	ldr	r3, [pc, #148]	@ (80045a0 <HAL_I2S_Init+0x27c>)
 800450c:	e001      	b.n	8004512 <HAL_I2S_Init+0x1ee>
 800450e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800451e:	d003      	beq.n	8004528 <HAL_I2S_Init+0x204>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e001      	b.n	8004534 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800453e:	4313      	orrs	r3, r2
 8004540:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004548:	4313      	orrs	r3, r2
 800454a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004552:	4313      	orrs	r3, r2
 8004554:	b29a      	uxth	r2, r3
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	4313      	orrs	r3, r2
 800455a:	b29b      	uxth	r3, r3
 800455c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004560:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a0d      	ldr	r2, [pc, #52]	@ (800459c <HAL_I2S_Init+0x278>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d101      	bne.n	8004570 <HAL_I2S_Init+0x24c>
 800456c:	4b0c      	ldr	r3, [pc, #48]	@ (80045a0 <HAL_I2S_Init+0x27c>)
 800456e:	e001      	b.n	8004574 <HAL_I2S_Init+0x250>
 8004570:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004574:	897a      	ldrh	r2, [r7, #10]
 8004576:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	0800469b 	.word	0x0800469b
 8004594:	cccccccd 	.word	0xcccccccd
 8004598:	080047b1 	.word	0x080047b1
 800459c:	40003800 	.word	0x40003800
 80045a0:	40003400 	.word	0x40003400

080045a4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	881a      	ldrh	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	1c9a      	adds	r2, r3, #2
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10e      	bne.n	8004634 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004624:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff ffb8 	bl	80045a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	b292      	uxth	r2, r2
 8004650:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10e      	bne.n	8004692 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004682:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ff93 	bl	80045b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d13a      	bne.n	800472c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d109      	bne.n	80046d4 <I2S_IRQHandler+0x3a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ca:	2b40      	cmp	r3, #64	@ 0x40
 80046cc:	d102      	bne.n	80046d4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff ffb4 	bl	800463c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046da:	2b40      	cmp	r3, #64	@ 0x40
 80046dc:	d126      	bne.n	800472c <I2S_IRQHandler+0x92>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d11f      	bne.n	800472c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046fc:	2300      	movs	r3, #0
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471e:	f043 0202 	orr.w	r2, r3, #2
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ff50 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b03      	cmp	r3, #3
 8004736:	d136      	bne.n	80047a6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b02      	cmp	r3, #2
 8004740:	d109      	bne.n	8004756 <I2S_IRQHandler+0xbc>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b80      	cmp	r3, #128	@ 0x80
 800474e:	d102      	bne.n	8004756 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff45 	bl	80045e0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b08      	cmp	r3, #8
 800475e:	d122      	bne.n	80047a6 <I2S_IRQHandler+0x10c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b20      	cmp	r3, #32
 800476c:	d11b      	bne.n	80047a6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800477c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004798:	f043 0204 	orr.w	r2, r3, #4
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ff13 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a92      	ldr	r2, [pc, #584]	@ (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80047ca:	4b92      	ldr	r3, [pc, #584]	@ (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047cc:	e001      	b.n	80047d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80047ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a8b      	ldr	r2, [pc, #556]	@ (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d101      	bne.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80047e8:	4b8a      	ldr	r3, [pc, #552]	@ (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047ea:	e001      	b.n	80047f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80047ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047fc:	d004      	beq.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f040 8099 	bne.w	800493a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d107      	bne.n	8004822 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f925 	bl	8004a6c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d107      	bne.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f9c8 	bl	8004bcc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004842:	2b40      	cmp	r3, #64	@ 0x40
 8004844:	d13a      	bne.n	80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d035      	beq.n	80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6e      	ldr	r2, [pc, #440]	@ (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800485a:	4b6e      	ldr	r3, [pc, #440]	@ (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800485c:	e001      	b.n	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800485e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4969      	ldr	r1, [pc, #420]	@ (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800486a:	428b      	cmp	r3, r1
 800486c:	d101      	bne.n	8004872 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800486e:	4b69      	ldr	r3, [pc, #420]	@ (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004870:	e001      	b.n	8004876 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004872:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004876:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800487a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800488a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ae:	f043 0202 	orr.w	r2, r3, #2
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fe88 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	f040 80c3 	bne.w	8004a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80bd 	beq.w	8004a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a49      	ldr	r2, [pc, #292]	@ (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d101      	bne.n	80048f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80048ee:	4b49      	ldr	r3, [pc, #292]	@ (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048f0:	e001      	b.n	80048f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80048f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4944      	ldr	r1, [pc, #272]	@ (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048fe:	428b      	cmp	r3, r1
 8004900:	d101      	bne.n	8004906 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004902:	4b44      	ldr	r3, [pc, #272]	@ (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004904:	e001      	b.n	800490a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004906:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800490a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800490e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004910:	2300      	movs	r3, #0
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492a:	f043 0204 	orr.w	r2, r3, #4
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff fe4a 	bl	80045cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004938:	e089      	b.n	8004a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b02      	cmp	r3, #2
 8004942:	d107      	bne.n	8004954 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f8be 	bl	8004ad0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b01      	cmp	r3, #1
 800495c:	d107      	bne.n	800496e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8fd 	bl	8004b68 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004974:	2b40      	cmp	r3, #64	@ 0x40
 8004976:	d12f      	bne.n	80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d02a      	beq.n	80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004990:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1e      	ldr	r2, [pc, #120]	@ (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d101      	bne.n	80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800499c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800499e:	e001      	b.n	80049a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80049a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4919      	ldr	r1, [pc, #100]	@ (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049ac:	428b      	cmp	r3, r1
 80049ae:	d101      	bne.n	80049b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80049b0:	4b18      	ldr	r3, [pc, #96]	@ (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049b2:	e001      	b.n	80049b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80049b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ca:	f043 0202 	orr.w	r2, r3, #2
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff fdfa 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d136      	bne.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d031      	beq.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a07      	ldr	r2, [pc, #28]	@ (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d101      	bne.n	80049fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80049f6:	4b07      	ldr	r3, [pc, #28]	@ (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049f8:	e001      	b.n	80049fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80049fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4902      	ldr	r1, [pc, #8]	@ (8004a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a06:	428b      	cmp	r3, r1
 8004a08:	d106      	bne.n	8004a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004a0a:	4b02      	ldr	r3, [pc, #8]	@ (8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a0c:	e006      	b.n	8004a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004a0e:	bf00      	nop
 8004a10:	40003800 	.word	0x40003800
 8004a14:	40003400 	.word	0x40003400
 8004a18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a1c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a20:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3e:	f043 0204 	orr.w	r2, r3, #4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff fdc0 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a4c:	e000      	b.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a4e:	bf00      	nop
}
 8004a50:	bf00      	nop
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	1c99      	adds	r1, r3, #2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6251      	str	r1, [r2, #36]	@ 0x24
 8004a7e:	881a      	ldrh	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d113      	bne.n	8004ac6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004aac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff ffc9 	bl	8004a58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	1c99      	adds	r1, r3, #2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6251      	str	r1, [r2, #36]	@ 0x24
 8004ae2:	8819      	ldrh	r1, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b60 <I2SEx_TxISR_I2SExt+0x90>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d101      	bne.n	8004af2 <I2SEx_TxISR_I2SExt+0x22>
 8004aee:	4b1d      	ldr	r3, [pc, #116]	@ (8004b64 <I2SEx_TxISR_I2SExt+0x94>)
 8004af0:	e001      	b.n	8004af6 <I2SEx_TxISR_I2SExt+0x26>
 8004af2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004af6:	460a      	mov	r2, r1
 8004af8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d121      	bne.n	8004b56 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a12      	ldr	r2, [pc, #72]	@ (8004b60 <I2SEx_TxISR_I2SExt+0x90>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <I2SEx_TxISR_I2SExt+0x50>
 8004b1c:	4b11      	ldr	r3, [pc, #68]	@ (8004b64 <I2SEx_TxISR_I2SExt+0x94>)
 8004b1e:	e001      	b.n	8004b24 <I2SEx_TxISR_I2SExt+0x54>
 8004b20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	490d      	ldr	r1, [pc, #52]	@ (8004b60 <I2SEx_TxISR_I2SExt+0x90>)
 8004b2c:	428b      	cmp	r3, r1
 8004b2e:	d101      	bne.n	8004b34 <I2SEx_TxISR_I2SExt+0x64>
 8004b30:	4b0c      	ldr	r3, [pc, #48]	@ (8004b64 <I2SEx_TxISR_I2SExt+0x94>)
 8004b32:	e001      	b.n	8004b38 <I2SEx_TxISR_I2SExt+0x68>
 8004b34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff ff81 	bl	8004a58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40003800 	.word	0x40003800
 8004b64:	40003400 	.word	0x40003400

08004b68 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68d8      	ldr	r0, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	1c99      	adds	r1, r3, #2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004b80:	b282      	uxth	r2, r0
 8004b82:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d113      	bne.n	8004bc4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004baa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ff4a 	bl	8004a58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a20      	ldr	r2, [pc, #128]	@ (8004c5c <I2SEx_RxISR_I2SExt+0x90>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <I2SEx_RxISR_I2SExt+0x16>
 8004bde:	4b20      	ldr	r3, [pc, #128]	@ (8004c60 <I2SEx_RxISR_I2SExt+0x94>)
 8004be0:	e001      	b.n	8004be6 <I2SEx_RxISR_I2SExt+0x1a>
 8004be2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004be6:	68d8      	ldr	r0, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	1c99      	adds	r1, r3, #2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004bf2:	b282      	uxth	r2, r0
 8004bf4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d121      	bne.n	8004c52 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a12      	ldr	r2, [pc, #72]	@ (8004c5c <I2SEx_RxISR_I2SExt+0x90>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d101      	bne.n	8004c1c <I2SEx_RxISR_I2SExt+0x50>
 8004c18:	4b11      	ldr	r3, [pc, #68]	@ (8004c60 <I2SEx_RxISR_I2SExt+0x94>)
 8004c1a:	e001      	b.n	8004c20 <I2SEx_RxISR_I2SExt+0x54>
 8004c1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	490d      	ldr	r1, [pc, #52]	@ (8004c5c <I2SEx_RxISR_I2SExt+0x90>)
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	d101      	bne.n	8004c30 <I2SEx_RxISR_I2SExt+0x64>
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c60 <I2SEx_RxISR_I2SExt+0x94>)
 8004c2e:	e001      	b.n	8004c34 <I2SEx_RxISR_I2SExt+0x68>
 8004c30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c38:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ff03 	bl	8004a58 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40003800 	.word	0x40003800
 8004c60:	40003400 	.word	0x40003400

08004c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e267      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d075      	beq.n	8004d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c82:	4b88      	ldr	r3, [pc, #544]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8e:	4b85      	ldr	r3, [pc, #532]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d112      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c9a:	4b82      	ldr	r3, [pc, #520]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca6:	d10b      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d05b      	beq.n	8004d6c <HAL_RCC_OscConfig+0x108>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d157      	bne.n	8004d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e242      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc8:	d106      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x74>
 8004cca:	4b76      	ldr	r3, [pc, #472]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a75      	ldr	r2, [pc, #468]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e01d      	b.n	8004d14 <HAL_RCC_OscConfig+0xb0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x98>
 8004ce2:	4b70      	ldr	r3, [pc, #448]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a6f      	ldr	r2, [pc, #444]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b6d      	ldr	r3, [pc, #436]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a6c      	ldr	r2, [pc, #432]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e00b      	b.n	8004d14 <HAL_RCC_OscConfig+0xb0>
 8004cfc:	4b69      	ldr	r3, [pc, #420]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a68      	ldr	r2, [pc, #416]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	4b66      	ldr	r3, [pc, #408]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a65      	ldr	r2, [pc, #404]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d013      	beq.n	8004d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1c:	f7fc f916 	bl	8000f4c <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fc f912 	bl	8000f4c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	@ 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e207      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0xc0>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fc f902 	bl	8000f4c <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fc f8fe 	bl	8000f4c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	@ 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e1f3      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5e:	4b51      	ldr	r3, [pc, #324]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0xe8>
 8004d6a:	e000      	b.n	8004d6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d063      	beq.n	8004e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d86:	4b47      	ldr	r3, [pc, #284]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d11c      	bne.n	8004dcc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d92:	4b44      	ldr	r3, [pc, #272]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d116      	bne.n	8004dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	4b41      	ldr	r3, [pc, #260]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_RCC_OscConfig+0x152>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d001      	beq.n	8004db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e1c7      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4937      	ldr	r1, [pc, #220]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dca:	e03a      	b.n	8004e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd4:	4b34      	ldr	r3, [pc, #208]	@ (8004ea8 <HAL_RCC_OscConfig+0x244>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dda:	f7fc f8b7 	bl	8000f4c <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de2:	f7fc f8b3 	bl	8000f4c <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e1a8      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df4:	4b2b      	ldr	r3, [pc, #172]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e00:	4b28      	ldr	r3, [pc, #160]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	4925      	ldr	r1, [pc, #148]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	600b      	str	r3, [r1, #0]
 8004e14:	e015      	b.n	8004e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e16:	4b24      	ldr	r3, [pc, #144]	@ (8004ea8 <HAL_RCC_OscConfig+0x244>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fc f896 	bl	8000f4c <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e24:	f7fc f892 	bl	8000f4c <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e187      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e36:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d036      	beq.n	8004ebc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d016      	beq.n	8004e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e56:	4b15      	ldr	r3, [pc, #84]	@ (8004eac <HAL_RCC_OscConfig+0x248>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5c:	f7fc f876 	bl	8000f4c <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e64:	f7fc f872 	bl	8000f4c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e167      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0x200>
 8004e82:	e01b      	b.n	8004ebc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e84:	4b09      	ldr	r3, [pc, #36]	@ (8004eac <HAL_RCC_OscConfig+0x248>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8a:	f7fc f85f 	bl	8000f4c <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e90:	e00e      	b.n	8004eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e92:	f7fc f85b 	bl	8000f4c <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d907      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e150      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	42470000 	.word	0x42470000
 8004eac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb0:	4b88      	ldr	r3, [pc, #544]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ea      	bne.n	8004e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8097 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ece:	4b81      	ldr	r3, [pc, #516]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10f      	bne.n	8004efa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eda:	2300      	movs	r3, #0
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	4b7d      	ldr	r3, [pc, #500]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	4a7c      	ldr	r2, [pc, #496]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eea:	4b7a      	ldr	r3, [pc, #488]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efa:	4b77      	ldr	r3, [pc, #476]	@ (80050d8 <HAL_RCC_OscConfig+0x474>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d118      	bne.n	8004f38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f06:	4b74      	ldr	r3, [pc, #464]	@ (80050d8 <HAL_RCC_OscConfig+0x474>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a73      	ldr	r2, [pc, #460]	@ (80050d8 <HAL_RCC_OscConfig+0x474>)
 8004f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f12:	f7fc f81b 	bl	8000f4c <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f1a:	f7fc f817 	bl	8000f4c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e10c      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80050d8 <HAL_RCC_OscConfig+0x474>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d106      	bne.n	8004f4e <HAL_RCC_OscConfig+0x2ea>
 8004f40:	4b64      	ldr	r3, [pc, #400]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f44:	4a63      	ldr	r2, [pc, #396]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f4c:	e01c      	b.n	8004f88 <HAL_RCC_OscConfig+0x324>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x30c>
 8004f56:	4b5f      	ldr	r3, [pc, #380]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5a:	4a5e      	ldr	r2, [pc, #376]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	f043 0304 	orr.w	r3, r3, #4
 8004f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f62:	4b5c      	ldr	r3, [pc, #368]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	4a5b      	ldr	r2, [pc, #364]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6e:	e00b      	b.n	8004f88 <HAL_RCC_OscConfig+0x324>
 8004f70:	4b58      	ldr	r3, [pc, #352]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f74:	4a57      	ldr	r2, [pc, #348]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f7c:	4b55      	ldr	r3, [pc, #340]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f80:	4a54      	ldr	r2, [pc, #336]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f82:	f023 0304 	bic.w	r3, r3, #4
 8004f86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d015      	beq.n	8004fbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7fb ffdc 	bl	8000f4c <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f96:	e00a      	b.n	8004fae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f98:	f7fb ffd8 	bl	8000f4c <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e0cb      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fae:	4b49      	ldr	r3, [pc, #292]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0ee      	beq.n	8004f98 <HAL_RCC_OscConfig+0x334>
 8004fba:	e014      	b.n	8004fe6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fbc:	f7fb ffc6 	bl	8000f4c <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc4:	f7fb ffc2 	bl	8000f4c <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e0b5      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fda:	4b3e      	ldr	r3, [pc, #248]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1ee      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fec:	4b39      	ldr	r3, [pc, #228]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	4a38      	ldr	r2, [pc, #224]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ff6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80a1 	beq.w	8005144 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005002:	4b34      	ldr	r3, [pc, #208]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	2b08      	cmp	r3, #8
 800500c:	d05c      	beq.n	80050c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d141      	bne.n	800509a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005016:	4b31      	ldr	r3, [pc, #196]	@ (80050dc <HAL_RCC_OscConfig+0x478>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501c:	f7fb ff96 	bl	8000f4c <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005024:	f7fb ff92 	bl	8000f4c <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e087      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005036:	4b27      	ldr	r3, [pc, #156]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	019b      	lsls	r3, r3, #6
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	3b01      	subs	r3, #1
 800505c:	041b      	lsls	r3, r3, #16
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	061b      	lsls	r3, r3, #24
 8005066:	491b      	ldr	r1, [pc, #108]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8005068:	4313      	orrs	r3, r2
 800506a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800506c:	4b1b      	ldr	r3, [pc, #108]	@ (80050dc <HAL_RCC_OscConfig+0x478>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005072:	f7fb ff6b 	bl	8000f4c <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507a:	f7fb ff67 	bl	8000f4c <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e05c      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508c:	4b11      	ldr	r3, [pc, #68]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_OscConfig+0x416>
 8005098:	e054      	b.n	8005144 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509a:	4b10      	ldr	r3, [pc, #64]	@ (80050dc <HAL_RCC_OscConfig+0x478>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a0:	f7fb ff54 	bl	8000f4c <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fb ff50 	bl	8000f4c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e045      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ba:	4b06      	ldr	r3, [pc, #24]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x444>
 80050c6:	e03d      	b.n	8005144 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e038      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40007000 	.word	0x40007000
 80050dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005150 <HAL_RCC_OscConfig+0x4ec>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d028      	beq.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d121      	bne.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d11a      	bne.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005110:	4013      	ands	r3, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005118:	4293      	cmp	r3, r2
 800511a:	d111      	bne.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	3b01      	subs	r3, #1
 800512a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d107      	bne.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d001      	beq.n	8005144 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800

08005154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0cc      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005168:	4b68      	ldr	r3, [pc, #416]	@ (800530c <HAL_RCC_ClockConfig+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d90c      	bls.n	8005190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b65      	ldr	r3, [pc, #404]	@ (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800517e:	4b63      	ldr	r3, [pc, #396]	@ (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d001      	beq.n	8005190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0b8      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d020      	beq.n	80051de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051a8:	4b59      	ldr	r3, [pc, #356]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	4a58      	ldr	r2, [pc, #352]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051c0:	4b53      	ldr	r3, [pc, #332]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	4a52      	ldr	r2, [pc, #328]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051cc:	4b50      	ldr	r3, [pc, #320]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	494d      	ldr	r1, [pc, #308]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d044      	beq.n	8005274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d107      	bne.n	8005202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f2:	4b47      	ldr	r3, [pc, #284]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d119      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e07f      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d003      	beq.n	8005212 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800520e:	2b03      	cmp	r3, #3
 8005210:	d107      	bne.n	8005222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005212:	4b3f      	ldr	r3, [pc, #252]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d109      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e06f      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005222:	4b3b      	ldr	r3, [pc, #236]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e067      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005232:	4b37      	ldr	r3, [pc, #220]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f023 0203 	bic.w	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4934      	ldr	r1, [pc, #208]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005240:	4313      	orrs	r3, r2
 8005242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005244:	f7fb fe82 	bl	8000f4c <HAL_GetTick>
 8005248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524a:	e00a      	b.n	8005262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524c:	f7fb fe7e 	bl	8000f4c <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e04f      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005262:	4b2b      	ldr	r3, [pc, #172]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 020c 	and.w	r2, r3, #12
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	429a      	cmp	r2, r3
 8005272:	d1eb      	bne.n	800524c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005274:	4b25      	ldr	r3, [pc, #148]	@ (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d20c      	bcs.n	800529c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005282:	4b22      	ldr	r3, [pc, #136]	@ (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b20      	ldr	r3, [pc, #128]	@ (800530c <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e032      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a8:	4b19      	ldr	r3, [pc, #100]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4916      	ldr	r1, [pc, #88]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052c6:	4b12      	ldr	r3, [pc, #72]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	490e      	ldr	r1, [pc, #56]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052da:	f000 f821 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 80052de:	4602      	mov	r2, r0
 80052e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	490a      	ldr	r1, [pc, #40]	@ (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 80052ec:	5ccb      	ldrb	r3, [r1, r3]
 80052ee:	fa22 f303 	lsr.w	r3, r2, r3
 80052f2:	4a09      	ldr	r2, [pc, #36]	@ (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80052f6:	4b09      	ldr	r3, [pc, #36]	@ (800531c <HAL_RCC_ClockConfig+0x1c8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fb fde2 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40023c00 	.word	0x40023c00
 8005310:	40023800 	.word	0x40023800
 8005314:	080095a4 	.word	0x080095a4
 8005318:	20000000 	.word	0x20000000
 800531c:	20000004 	.word	0x20000004

08005320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005324:	b094      	sub	sp, #80	@ 0x50
 8005326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005338:	4b79      	ldr	r3, [pc, #484]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	2b08      	cmp	r3, #8
 8005342:	d00d      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x40>
 8005344:	2b08      	cmp	r3, #8
 8005346:	f200 80e1 	bhi.w	800550c <HAL_RCC_GetSysClockFreq+0x1ec>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_RCC_GetSysClockFreq+0x34>
 800534e:	2b04      	cmp	r3, #4
 8005350:	d003      	beq.n	800535a <HAL_RCC_GetSysClockFreq+0x3a>
 8005352:	e0db      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005354:	4b73      	ldr	r3, [pc, #460]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x204>)
 8005356:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005358:	e0db      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800535a:	4b73      	ldr	r3, [pc, #460]	@ (8005528 <HAL_RCC_GetSysClockFreq+0x208>)
 800535c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800535e:	e0d8      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005360:	4b6f      	ldr	r3, [pc, #444]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005368:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800536a:	4b6d      	ldr	r3, [pc, #436]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d063      	beq.n	800543e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005376:	4b6a      	ldr	r3, [pc, #424]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	099b      	lsrs	r3, r3, #6
 800537c:	2200      	movs	r2, #0
 800537e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005380:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005388:	633b      	str	r3, [r7, #48]	@ 0x30
 800538a:	2300      	movs	r3, #0
 800538c:	637b      	str	r3, [r7, #52]	@ 0x34
 800538e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005392:	4622      	mov	r2, r4
 8005394:	462b      	mov	r3, r5
 8005396:	f04f 0000 	mov.w	r0, #0
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	0159      	lsls	r1, r3, #5
 80053a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053a4:	0150      	lsls	r0, r2, #5
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4621      	mov	r1, r4
 80053ac:	1a51      	subs	r1, r2, r1
 80053ae:	6139      	str	r1, [r7, #16]
 80053b0:	4629      	mov	r1, r5
 80053b2:	eb63 0301 	sbc.w	r3, r3, r1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053c4:	4659      	mov	r1, fp
 80053c6:	018b      	lsls	r3, r1, #6
 80053c8:	4651      	mov	r1, sl
 80053ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053ce:	4651      	mov	r1, sl
 80053d0:	018a      	lsls	r2, r1, #6
 80053d2:	4651      	mov	r1, sl
 80053d4:	ebb2 0801 	subs.w	r8, r2, r1
 80053d8:	4659      	mov	r1, fp
 80053da:	eb63 0901 	sbc.w	r9, r3, r1
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053f2:	4690      	mov	r8, r2
 80053f4:	4699      	mov	r9, r3
 80053f6:	4623      	mov	r3, r4
 80053f8:	eb18 0303 	adds.w	r3, r8, r3
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	462b      	mov	r3, r5
 8005400:	eb49 0303 	adc.w	r3, r9, r3
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005412:	4629      	mov	r1, r5
 8005414:	024b      	lsls	r3, r1, #9
 8005416:	4621      	mov	r1, r4
 8005418:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800541c:	4621      	mov	r1, r4
 800541e:	024a      	lsls	r2, r1, #9
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005426:	2200      	movs	r2, #0
 8005428:	62bb      	str	r3, [r7, #40]	@ 0x28
 800542a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800542c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005430:	f7fa feca 	bl	80001c8 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4613      	mov	r3, r2
 800543a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800543c:	e058      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800543e:	4b38      	ldr	r3, [pc, #224]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	099b      	lsrs	r3, r3, #6
 8005444:	2200      	movs	r2, #0
 8005446:	4618      	mov	r0, r3
 8005448:	4611      	mov	r1, r2
 800544a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800544e:	623b      	str	r3, [r7, #32]
 8005450:	2300      	movs	r3, #0
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
 8005454:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	f04f 0000 	mov.w	r0, #0
 8005460:	f04f 0100 	mov.w	r1, #0
 8005464:	0159      	lsls	r1, r3, #5
 8005466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800546a:	0150      	lsls	r0, r2, #5
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4641      	mov	r1, r8
 8005472:	ebb2 0a01 	subs.w	sl, r2, r1
 8005476:	4649      	mov	r1, r9
 8005478:	eb63 0b01 	sbc.w	fp, r3, r1
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005488:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800548c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005490:	ebb2 040a 	subs.w	r4, r2, sl
 8005494:	eb63 050b 	sbc.w	r5, r3, fp
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	00eb      	lsls	r3, r5, #3
 80054a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054a6:	00e2      	lsls	r2, r4, #3
 80054a8:	4614      	mov	r4, r2
 80054aa:	461d      	mov	r5, r3
 80054ac:	4643      	mov	r3, r8
 80054ae:	18e3      	adds	r3, r4, r3
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	464b      	mov	r3, r9
 80054b4:	eb45 0303 	adc.w	r3, r5, r3
 80054b8:	607b      	str	r3, [r7, #4]
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054c6:	4629      	mov	r1, r5
 80054c8:	028b      	lsls	r3, r1, #10
 80054ca:	4621      	mov	r1, r4
 80054cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054d0:	4621      	mov	r1, r4
 80054d2:	028a      	lsls	r2, r1, #10
 80054d4:	4610      	mov	r0, r2
 80054d6:	4619      	mov	r1, r3
 80054d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054da:	2200      	movs	r2, #0
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	61fa      	str	r2, [r7, #28]
 80054e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054e4:	f7fa fe70 	bl	80001c8 <__aeabi_uldivmod>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4613      	mov	r3, r2
 80054ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	3301      	adds	r3, #1
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005500:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005504:	fbb2 f3f3 	udiv	r3, r2, r3
 8005508:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800550a:	e002      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800550c:	4b05      	ldr	r3, [pc, #20]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x204>)
 800550e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005514:	4618      	mov	r0, r3
 8005516:	3750      	adds	r7, #80	@ 0x50
 8005518:	46bd      	mov	sp, r7
 800551a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800
 8005524:	00f42400 	.word	0x00f42400
 8005528:	007a1200 	.word	0x007a1200

0800552c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005530:	4b03      	ldr	r3, [pc, #12]	@ (8005540 <HAL_RCC_GetHCLKFreq+0x14>)
 8005532:	681b      	ldr	r3, [r3, #0]
}
 8005534:	4618      	mov	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20000000 	.word	0x20000000

08005544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005548:	f7ff fff0 	bl	800552c <HAL_RCC_GetHCLKFreq>
 800554c:	4602      	mov	r2, r0
 800554e:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	0a9b      	lsrs	r3, r3, #10
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	4903      	ldr	r1, [pc, #12]	@ (8005568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005560:	4618      	mov	r0, r3
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40023800 	.word	0x40023800
 8005568:	080095b4 	.word	0x080095b4

0800556c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d105      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005590:	2b00      	cmp	r3, #0
 8005592:	d035      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005594:	4b62      	ldr	r3, [pc, #392]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800559a:	f7fb fcd7 	bl	8000f4c <HAL_GetTick>
 800559e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055a0:	e008      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055a2:	f7fb fcd3 	bl	8000f4c <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e0b0      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055b4:	4b5b      	ldr	r3, [pc, #364]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1f0      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	019a      	lsls	r2, r3, #6
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	071b      	lsls	r3, r3, #28
 80055cc:	4955      	ldr	r1, [pc, #340]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055d4:	4b52      	ldr	r3, [pc, #328]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055da:	f7fb fcb7 	bl	8000f4c <HAL_GetTick>
 80055de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055e0:	e008      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055e2:	f7fb fcb3 	bl	8000f4c <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e090      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0f0      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 8083 	beq.w	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	4b44      	ldr	r3, [pc, #272]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	4a43      	ldr	r2, [pc, #268]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800561c:	6413      	str	r3, [r2, #64]	@ 0x40
 800561e:	4b41      	ldr	r3, [pc, #260]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800562a:	4b3f      	ldr	r3, [pc, #252]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a3e      	ldr	r2, [pc, #248]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005634:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005636:	f7fb fc89 	bl	8000f4c <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563e:	f7fb fc85 	bl	8000f4c <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e062      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005650:	4b35      	ldr	r3, [pc, #212]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800565c:	4b31      	ldr	r3, [pc, #196]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005660:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005664:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d02f      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	429a      	cmp	r2, r3
 8005678:	d028      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800567a:	4b2a      	ldr	r3, [pc, #168]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005682:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005684:	4b29      	ldr	r3, [pc, #164]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005686:	2201      	movs	r2, #1
 8005688:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800568a:	4b28      	ldr	r3, [pc, #160]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005690:	4a24      	ldr	r2, [pc, #144]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005696:	4b23      	ldr	r3, [pc, #140]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d114      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056a2:	f7fb fc53 	bl	8000f4c <HAL_GetTick>
 80056a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a8:	e00a      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056aa:	f7fb fc4f 	bl	8000f4c <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e02a      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c0:	4b18      	ldr	r3, [pc, #96]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ee      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056d8:	d10d      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80056da:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80056ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ee:	490d      	ldr	r1, [pc, #52]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	608b      	str	r3, [r1, #8]
 80056f4:	e005      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80056f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056fc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005700:	6093      	str	r3, [r2, #8]
 8005702:	4b08      	ldr	r3, [pc, #32]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005704:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800570e:	4905      	ldr	r1, [pc, #20]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005710:	4313      	orrs	r3, r2
 8005712:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	42470068 	.word	0x42470068
 8005724:	40023800 	.word	0x40023800
 8005728:	40007000 	.word	0x40007000
 800572c:	42470e40 	.word	0x42470e40

08005730 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d13f      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800574e:	4b24      	ldr	r3, [pc, #144]	@ (80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005756:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d006      	beq.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005764:	d12f      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005766:	4b1f      	ldr	r3, [pc, #124]	@ (80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005768:	617b      	str	r3, [r7, #20]
          break;
 800576a:	e02f      	b.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800576c:	4b1c      	ldr	r3, [pc, #112]	@ (80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005778:	d108      	bne.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800577a:	4b19      	ldr	r3, [pc, #100]	@ (80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005782:	4a19      	ldr	r2, [pc, #100]	@ (80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	e007      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800578c:	4b14      	ldr	r3, [pc, #80]	@ (80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005794:	4a15      	ldr	r2, [pc, #84]	@ (80057ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005796:	fbb2 f3f3 	udiv	r3, r2, r3
 800579a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800579c:	4b10      	ldr	r3, [pc, #64]	@ (80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800579e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057a2:	099b      	lsrs	r3, r3, #6
 80057a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
 80057ae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80057b0:	4b0b      	ldr	r3, [pc, #44]	@ (80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057b6:	0f1b      	lsrs	r3, r3, #28
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c2:	617b      	str	r3, [r7, #20]
          break;
 80057c4:	e002      	b.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
          break;
 80057ca:	bf00      	nop
        }
      }
      break;
 80057cc:	e000      	b.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80057ce:	bf00      	nop
    }
  }
  return frequency;
 80057d0:	697b      	ldr	r3, [r7, #20]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40023800 	.word	0x40023800
 80057e4:	00bb8000 	.word	0x00bb8000
 80057e8:	007a1200 	.word	0x007a1200
 80057ec:	00f42400 	.word	0x00f42400

080057f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e07b      	b.n	80058fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d108      	bne.n	800581c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005812:	d009      	beq.n	8005828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	61da      	str	r2, [r3, #28]
 800581a:	e005      	b.n	8005828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fb fa1e 	bl	8000c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800585e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ac:	ea42 0103 	orr.w	r1, r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	f003 0104 	and.w	r1, r3, #4
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ce:	f003 0210 	and.w	r2, r3, #16
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005902:	b084      	sub	sp, #16
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	f107 001c 	add.w	r0, r7, #28
 8005910:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005914:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005918:	2b01      	cmp	r3, #1
 800591a:	d123      	bne.n	8005964 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005920:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005944:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005948:	2b01      	cmp	r3, #1
 800594a:	d105      	bne.n	8005958 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f9dc 	bl	8005d16 <USB_CoreReset>
 800595e:	4603      	mov	r3, r0
 8005960:	73fb      	strb	r3, [r7, #15]
 8005962:	e01b      	b.n	800599c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f9d0 	bl	8005d16 <USB_CoreReset>
 8005976:	4603      	mov	r3, r0
 8005978:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800597a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005986:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	639a      	str	r2, [r3, #56]	@ 0x38
 800598e:	e005      	b.n	800599c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005994:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800599c:	7fbb      	ldrb	r3, [r7, #30]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d10b      	bne.n	80059ba <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f043 0206 	orr.w	r2, r3, #6
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f043 0220 	orr.w	r2, r3, #32
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059c6:	b004      	add	sp, #16
 80059c8:	4770      	bx	lr

080059ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f043 0201 	orr.w	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 0201 	bic.w	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	460b      	mov	r3, r1
 8005a18:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d115      	bne.n	8005a5c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a3c:	200a      	movs	r0, #10
 8005a3e:	f7fb fa91 	bl	8000f64 <HAL_Delay>
      ms += 10U;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	330a      	adds	r3, #10
 8005a46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f956 	bl	8005cfa <USB_GetMode>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d01e      	beq.n	8005a92 <USB_SetCurrentMode+0x84>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a58:	d9f0      	bls.n	8005a3c <USB_SetCurrentMode+0x2e>
 8005a5a:	e01a      	b.n	8005a92 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d115      	bne.n	8005a8e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a6e:	200a      	movs	r0, #10
 8005a70:	f7fb fa78 	bl	8000f64 <HAL_Delay>
      ms += 10U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	330a      	adds	r3, #10
 8005a78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f93d 	bl	8005cfa <USB_GetMode>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <USB_SetCurrentMode+0x84>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a8a:	d9f0      	bls.n	8005a6e <USB_SetCurrentMode+0x60>
 8005a8c:	e001      	b.n	8005a92 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e005      	b.n	8005a9e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a96:	d101      	bne.n	8005a9c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ac0:	d901      	bls.n	8005ac6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e01b      	b.n	8005afe <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	daf2      	bge.n	8005ab4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	019b      	lsls	r3, r3, #6
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005aea:	d901      	bls.n	8005af0 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e006      	b.n	8005afe <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f003 0320 	and.w	r3, r3, #32
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d0f0      	beq.n	8005ade <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b22:	d901      	bls.n	8005b28 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e018      	b.n	8005b5a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	daf2      	bge.n	8005b16 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2210      	movs	r2, #16
 8005b38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b46:	d901      	bls.n	8005b4c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e006      	b.n	8005b5a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d0f0      	beq.n	8005b3a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b089      	sub	sp, #36	@ 0x24
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	4611      	mov	r1, r2
 8005b72:	461a      	mov	r2, r3
 8005b74:	460b      	mov	r3, r1
 8005b76:	71fb      	strb	r3, [r7, #7]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d123      	bne.n	8005bd4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b8c:	88bb      	ldrh	r3, [r7, #4]
 8005b8e:	3303      	adds	r3, #3
 8005b90:	089b      	lsrs	r3, r3, #2
 8005b92:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b94:	2300      	movs	r3, #0
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	e018      	b.n	8005bcc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	031a      	lsls	r2, r3, #12
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d3e2      	bcc.n	8005b9a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3724      	adds	r7, #36	@ 0x24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b08b      	sub	sp, #44	@ 0x2c
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	4613      	mov	r3, r2
 8005bee:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	089b      	lsrs	r3, r3, #2
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	623b      	str	r3, [r7, #32]
 8005c0c:	e014      	b.n	8005c38 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	3301      	adds	r3, #1
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	3301      	adds	r3, #1
 8005c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	3301      	adds	r3, #1
 8005c30:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	3301      	adds	r3, #1
 8005c36:	623b      	str	r3, [r7, #32]
 8005c38:	6a3a      	ldr	r2, [r7, #32]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d3e6      	bcc.n	8005c0e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c40:	8bfb      	ldrh	r3, [r7, #30]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01e      	beq.n	8005c84 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c50:	461a      	mov	r2, r3
 8005c52:	f107 0310 	add.w	r3, r7, #16
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	fa22 f303 	lsr.w	r3, r2, r3
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	701a      	strb	r2, [r3, #0]
      i++;
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	3301      	adds	r3, #1
 8005c76:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c78:	8bfb      	ldrh	r3, [r7, #30]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c7e:	8bfb      	ldrh	r3, [r7, #30]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ea      	bne.n	8005c5a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	372c      	adds	r7, #44	@ 0x2c
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005caa:	68fb      	ldr	r3, [r7, #12]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cec:	68bb      	ldr	r3, [r7, #8]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0301 	and.w	r3, r3, #1
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3301      	adds	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d2e:	d901      	bls.n	8005d34 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e01b      	b.n	8005d6c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	daf2      	bge.n	8005d22 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f043 0201 	orr.w	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d58:	d901      	bls.n	8005d5e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e006      	b.n	8005d6c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d0f0      	beq.n	8005d4c <USB_CoreReset+0x36>

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d78:	b084      	sub	sp, #16
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b086      	sub	sp, #24
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d98:	461a      	mov	r2, r3
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d119      	bne.n	8005e02 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005dce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10a      	bne.n	8005dec <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005de4:	f043 0304 	orr.w	r3, r3, #4
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e014      	b.n	8005e16 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005dfa:	f023 0304 	bic.w	r3, r3, #4
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	e009      	b.n	8005e16 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e10:	f023 0304 	bic.w	r3, r3, #4
 8005e14:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e16:	2110      	movs	r1, #16
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fe44 	bl	8005aa6 <USB_FlushTxFifo>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fe6e 	bl	8005b0a <USB_FlushRxFifo>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	e015      	b.n	8005e6a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e50:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e5e:	461a      	mov	r2, r3
 8005e60:	2300      	movs	r3, #0
 8005e62:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	3301      	adds	r3, #1
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e6e:	461a      	mov	r2, r3
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d3e3      	bcc.n	8005e3e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e82:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a18      	ldr	r2, [pc, #96]	@ (8005ee8 <USB_HostInit+0x170>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d10b      	bne.n	8005ea4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e92:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a15      	ldr	r2, [pc, #84]	@ (8005eec <USB_HostInit+0x174>)
 8005e98:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a14      	ldr	r2, [pc, #80]	@ (8005ef0 <USB_HostInit+0x178>)
 8005e9e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005ea2:	e009      	b.n	8005eb8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2280      	movs	r2, #128	@ 0x80
 8005ea8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a11      	ldr	r2, [pc, #68]	@ (8005ef4 <USB_HostInit+0x17c>)
 8005eae:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a11      	ldr	r2, [pc, #68]	@ (8005ef8 <USB_HostInit+0x180>)
 8005eb4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005eb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d105      	bne.n	8005ecc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	f043 0210 	orr.w	r2, r3, #16
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699a      	ldr	r2, [r3, #24]
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <USB_HostInit+0x184>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ee4:	b004      	add	sp, #16
 8005ee6:	4770      	bx	lr
 8005ee8:	40040000 	.word	0x40040000
 8005eec:	01000200 	.word	0x01000200
 8005ef0:	00e00300 	.word	0x00e00300
 8005ef4:	00600080 	.word	0x00600080
 8005ef8:	004000e0 	.word	0x004000e0
 8005efc:	a3200008 	.word	0xa3200008

08005f00 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	68f9      	ldr	r1, [r7, #12]
 8005f34:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d107      	bne.n	8005f52 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f4e:	6053      	str	r3, [r2, #4]
 8005f50:	e00c      	b.n	8005f6c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d107      	bne.n	8005f68 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005f64:	6053      	str	r3, [r2, #4]
 8005f66:	e001      	b.n	8005f6c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e000      	b.n	8005f6e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005f9a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fa8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005faa:	2064      	movs	r0, #100	@ 0x64
 8005fac:	f7fa ffda 	bl	8000f64 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fbc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005fbe:	200a      	movs	r0, #10
 8005fc0:	f7fa ffd0 	bl	8000f64 <HAL_Delay>

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005ff2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <USB_DriveVbus+0x44>
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d106      	bne.n	8006012 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800600c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006010:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800601c:	d109      	bne.n	8006032 <USB_DriveVbus+0x64>
 800601e:	78fb      	ldrb	r3, [r7, #3]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800602c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006030:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	0c5b      	lsrs	r3, r3, #17
 800605e:	f003 0303 	and.w	r3, r3, #3
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	b29b      	uxth	r3, r3
}
 8006084:	4618      	mov	r0, r3
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	4608      	mov	r0, r1
 800609a:	4611      	mov	r1, r2
 800609c:	461a      	mov	r2, r3
 800609e:	4603      	mov	r3, r0
 80060a0:	70fb      	strb	r3, [r7, #3]
 80060a2:	460b      	mov	r3, r1
 80060a4:	70bb      	strb	r3, [r7, #2]
 80060a6:	4613      	mov	r3, r2
 80060a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060be:	461a      	mov	r2, r3
 80060c0:	f04f 33ff 	mov.w	r3, #4294967295
 80060c4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80060c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d87c      	bhi.n	80061c8 <USB_HC_Init+0x138>
 80060ce:	a201      	add	r2, pc, #4	@ (adr r2, 80060d4 <USB_HC_Init+0x44>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	0800618b 	.word	0x0800618b
 80060dc:	080060e5 	.word	0x080060e5
 80060e0:	0800614d 	.word	0x0800614d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f0:	461a      	mov	r2, r3
 80060f2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80060f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80060f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	da10      	bge.n	8006122 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	4413      	add	r3, r2
 8006108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	440a      	add	r2, r1
 8006116:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800611a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800611e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006120:	e055      	b.n	80061ce <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a6f      	ldr	r2, [pc, #444]	@ (80062e4 <USB_HC_Init+0x254>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d151      	bne.n	80061ce <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	4413      	add	r3, r2
 8006132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	440a      	add	r2, r1
 8006140:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006144:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006148:	60d3      	str	r3, [r2, #12]
      break;
 800614a:	e040      	b.n	80061ce <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006158:	461a      	mov	r2, r3
 800615a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800615e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006160:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006164:	2b00      	cmp	r3, #0
 8006166:	da34      	bge.n	80061d2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4413      	add	r3, r2
 8006170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	78fa      	ldrb	r2, [r7, #3]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	440a      	add	r2, r1
 800617e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006186:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006188:	e023      	b.n	80061d2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006196:	461a      	mov	r2, r3
 8006198:	f240 2325 	movw	r3, #549	@ 0x225
 800619c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800619e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	da17      	bge.n	80061d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	78fa      	ldrb	r2, [r7, #3]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061c0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80061c4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80061c6:	e006      	b.n	80061d6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	77fb      	strb	r3, [r7, #31]
      break;
 80061cc:	e004      	b.n	80061d8 <USB_HC_Init+0x148>
      break;
 80061ce:	bf00      	nop
 80061d0:	e002      	b.n	80061d8 <USB_HC_Init+0x148>
      break;
 80061d2:	bf00      	nop
 80061d4:	e000      	b.n	80061d8 <USB_HC_Init+0x148>
      break;
 80061d6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061e4:	461a      	mov	r2, r3
 80061e6:	2300      	movs	r3, #0
 80061e8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	78fa      	ldrb	r2, [r7, #3]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006204:	f043 0302 	orr.w	r3, r3, #2
 8006208:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	2101      	movs	r1, #1
 800621a:	fa01 f303 	lsl.w	r3, r1, r3
 800621e:	6939      	ldr	r1, [r7, #16]
 8006220:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006224:	4313      	orrs	r3, r2
 8006226:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006234:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006238:	2b00      	cmp	r3, #0
 800623a:	da03      	bge.n	8006244 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800623c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	e001      	b.n	8006248 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff fef9 	bl	8006040 <USB_GetHostSpeed>
 800624e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006250:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006254:	2b02      	cmp	r3, #2
 8006256:	d106      	bne.n	8006266 <USB_HC_Init+0x1d6>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d003      	beq.n	8006266 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800625e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e001      	b.n	800626a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800626a:	787b      	ldrb	r3, [r7, #1]
 800626c:	059b      	lsls	r3, r3, #22
 800626e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006272:	78bb      	ldrb	r3, [r7, #2]
 8006274:	02db      	lsls	r3, r3, #11
 8006276:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800627a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800627c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006280:	049b      	lsls	r3, r3, #18
 8006282:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006286:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006288:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800628a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800628e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	431a      	orrs	r2, r3
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006298:	78fa      	ldrb	r2, [r7, #3]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80062a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062a8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80062aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d003      	beq.n	80062ba <USB_HC_Init+0x22a>
 80062b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d10f      	bne.n	80062da <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	78fa      	ldrb	r2, [r7, #3]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062d8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80062da:	7ffb      	ldrb	r3, [r7, #31]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40040000 	.word	0x40040000

080062e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	@ 0x30
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	4613      	mov	r3, r2
 80062f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	785b      	ldrb	r3, [r3, #1]
 80062fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006300:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006304:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4a5d      	ldr	r2, [pc, #372]	@ (8006480 <USB_HC_StartXfer+0x198>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d12f      	bne.n	800636e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d11c      	bne.n	800634e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	7c9b      	ldrb	r3, [r3, #18]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <USB_HC_StartXfer+0x3c>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	7c9b      	ldrb	r3, [r3, #18]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d124      	bne.n	800636e <USB_HC_StartXfer+0x86>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	799b      	ldrb	r3, [r3, #6]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d120      	bne.n	800636e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	4413      	add	r3, r2
 8006334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	6a3a      	ldr	r2, [r7, #32]
 8006340:	440a      	add	r2, r1
 8006342:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800634a:	60d3      	str	r3, [r2, #12]
 800634c:	e00f      	b.n	800636e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	791b      	ldrb	r3, [r3, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <USB_HC_StartXfer+0x86>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	795b      	ldrb	r3, [r3, #5]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d107      	bne.n	800636e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	785b      	ldrb	r3, [r3, #1]
 8006362:	4619      	mov	r1, r3
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fb6b 	bl	8006a40 <USB_DoPing>
        return HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	e232      	b.n	80067d4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	799b      	ldrb	r3, [r3, #6]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d158      	bne.n	8006428 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006376:	2301      	movs	r3, #1
 8006378:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	78db      	ldrb	r3, [r3, #3]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006382:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	8a92      	ldrh	r2, [r2, #20]
 8006388:	fb03 f202 	mul.w	r2, r3, r2
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	61da      	str	r2, [r3, #28]
 8006390:	e07c      	b.n	800648c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	7c9b      	ldrb	r3, [r3, #18]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d130      	bne.n	80063fc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	2bbc      	cmp	r3, #188	@ 0xbc
 80063a0:	d918      	bls.n	80063d4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	8a9b      	ldrh	r3, [r3, #20]
 80063a6:	461a      	mov	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d003      	beq.n	80063c4 <USB_HC_StartXfer+0xdc>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d103      	bne.n	80063cc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2202      	movs	r2, #2
 80063c8:	60da      	str	r2, [r3, #12]
 80063ca:	e05f      	b.n	800648c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2201      	movs	r2, #1
 80063d0:	60da      	str	r2, [r3, #12]
 80063d2:	e05b      	b.n	800648c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	6a1a      	ldr	r2, [r3, #32]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d007      	beq.n	80063f4 <USB_HC_StartXfer+0x10c>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d003      	beq.n	80063f4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2204      	movs	r2, #4
 80063f0:	60da      	str	r2, [r3, #12]
 80063f2:	e04b      	b.n	800648c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2203      	movs	r2, #3
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	e047      	b.n	800648c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d10d      	bne.n	800641e <USB_HC_StartXfer+0x136>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	8a92      	ldrh	r2, [r2, #20]
 800640a:	4293      	cmp	r3, r2
 800640c:	d907      	bls.n	800641e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800640e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	8a92      	ldrh	r2, [r2, #20]
 8006414:	fb03 f202 	mul.w	r2, r3, r2
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	61da      	str	r2, [r3, #28]
 800641c:	e036      	b.n	800648c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6a1a      	ldr	r2, [r3, #32]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	61da      	str	r2, [r3, #28]
 8006426:	e031      	b.n	800648c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d018      	beq.n	8006462 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	8a92      	ldrh	r2, [r2, #20]
 8006438:	4413      	add	r3, r2
 800643a:	3b01      	subs	r3, #1
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	8a92      	ldrh	r2, [r2, #20]
 8006440:	fbb3 f3f2 	udiv	r3, r3, r2
 8006444:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006446:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006448:	8b7b      	ldrh	r3, [r7, #26]
 800644a:	429a      	cmp	r2, r3
 800644c:	d90b      	bls.n	8006466 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800644e:	8b7b      	ldrh	r3, [r7, #26]
 8006450:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006452:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	8a92      	ldrh	r2, [r2, #20]
 8006458:	fb03 f202 	mul.w	r2, r3, r2
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	61da      	str	r2, [r3, #28]
 8006460:	e001      	b.n	8006466 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006462:	2301      	movs	r3, #1
 8006464:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	78db      	ldrb	r3, [r3, #3]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800646e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	8a92      	ldrh	r2, [r2, #20]
 8006474:	fb03 f202 	mul.w	r2, r3, r2
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	61da      	str	r2, [r3, #28]
 800647c:	e006      	b.n	800648c <USB_HC_StartXfer+0x1a4>
 800647e:	bf00      	nop
 8006480:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	6a1a      	ldr	r2, [r3, #32]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006494:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006496:	04d9      	lsls	r1, r3, #19
 8006498:	4ba3      	ldr	r3, [pc, #652]	@ (8006728 <USB_HC_StartXfer+0x440>)
 800649a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800649c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	7d9b      	ldrb	r3, [r3, #22]
 80064a2:	075b      	lsls	r3, r3, #29
 80064a4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064a8:	69f9      	ldr	r1, [r7, #28]
 80064aa:	0148      	lsls	r0, r1, #5
 80064ac:	6a39      	ldr	r1, [r7, #32]
 80064ae:	4401      	add	r1, r0
 80064b0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064b6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d009      	beq.n	80064d2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6999      	ldr	r1, [r3, #24]
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ce:	460a      	mov	r2, r1
 80064d0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf0c      	ite	eq
 80064e2:	2301      	moveq	r3, #1
 80064e4:	2300      	movne	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	6a3a      	ldr	r2, [r7, #32]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006504:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006508:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	7e7b      	ldrb	r3, [r7, #25]
 800651a:	075b      	lsls	r3, r3, #29
 800651c:	69f9      	ldr	r1, [r7, #28]
 800651e:	0148      	lsls	r0, r1, #5
 8006520:	6a39      	ldr	r1, [r7, #32]
 8006522:	4401      	add	r1, r0
 8006524:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006528:	4313      	orrs	r3, r2
 800652a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	799b      	ldrb	r3, [r3, #6]
 8006530:	2b01      	cmp	r3, #1
 8006532:	f040 80c3 	bne.w	80066bc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	7c5b      	ldrb	r3, [r3, #17]
 800653a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006540:	4313      	orrs	r3, r2
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	6a3a      	ldr	r2, [r7, #32]
 8006548:	440a      	add	r2, r1
 800654a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800654e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006552:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	4413      	add	r3, r2
 800655c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	69fa      	ldr	r2, [r7, #28]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	6a3a      	ldr	r2, [r7, #32]
 8006568:	440a      	add	r2, r1
 800656a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800656e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006572:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	79db      	ldrb	r3, [r3, #7]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d123      	bne.n	80065c4 <USB_HC_StartXfer+0x2dc>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	78db      	ldrb	r3, [r3, #3]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d11f      	bne.n	80065c4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	6a3a      	ldr	r2, [r7, #32]
 8006598:	440a      	add	r2, r1
 800659a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800659e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065a2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	0151      	lsls	r1, r2, #5
 80065b6:	6a3a      	ldr	r2, [r7, #32]
 80065b8:	440a      	add	r2, r1
 80065ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065c2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	7c9b      	ldrb	r3, [r3, #18]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d003      	beq.n	80065d4 <USB_HC_StartXfer+0x2ec>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	7c9b      	ldrb	r3, [r3, #18]
 80065d0:	2b03      	cmp	r3, #3
 80065d2:	d117      	bne.n	8006604 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d113      	bne.n	8006604 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	78db      	ldrb	r3, [r3, #3]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d10f      	bne.n	8006604 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	6a3a      	ldr	r2, [r7, #32]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006602:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	7c9b      	ldrb	r3, [r3, #18]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d162      	bne.n	80066d2 <USB_HC_StartXfer+0x3ea>
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	78db      	ldrb	r3, [r3, #3]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d15e      	bne.n	80066d2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	3b01      	subs	r3, #1
 800661a:	2b03      	cmp	r3, #3
 800661c:	d858      	bhi.n	80066d0 <USB_HC_StartXfer+0x3e8>
 800661e:	a201      	add	r2, pc, #4	@ (adr r2, 8006624 <USB_HC_StartXfer+0x33c>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006635 	.word	0x08006635
 8006628:	08006657 	.word	0x08006657
 800662c:	08006679 	.word	0x08006679
 8006630:	0800669b 	.word	0x0800669b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	4413      	add	r3, r2
 800663c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	0151      	lsls	r1, r2, #5
 8006646:	6a3a      	ldr	r2, [r7, #32]
 8006648:	440a      	add	r2, r1
 800664a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800664e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006652:	6053      	str	r3, [r2, #4]
          break;
 8006654:	e03d      	b.n	80066d2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	4413      	add	r3, r2
 800665e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	69fa      	ldr	r2, [r7, #28]
 8006666:	0151      	lsls	r1, r2, #5
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	440a      	add	r2, r1
 800666c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006670:	f043 030e 	orr.w	r3, r3, #14
 8006674:	6053      	str	r3, [r2, #4]
          break;
 8006676:	e02c      	b.n	80066d2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	4413      	add	r3, r2
 8006680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	0151      	lsls	r1, r2, #5
 800668a:	6a3a      	ldr	r2, [r7, #32]
 800668c:	440a      	add	r2, r1
 800668e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006696:	6053      	str	r3, [r2, #4]
          break;
 8006698:	e01b      	b.n	80066d2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	6a3a      	ldr	r2, [r7, #32]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066b8:	6053      	str	r3, [r2, #4]
          break;
 80066ba:	e00a      	b.n	80066d2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066c8:	461a      	mov	r2, r3
 80066ca:	2300      	movs	r3, #0
 80066cc:	6053      	str	r3, [r2, #4]
 80066ce:	e000      	b.n	80066d2 <USB_HC_StartXfer+0x3ea>
          break;
 80066d0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066e8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	78db      	ldrb	r3, [r3, #3]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d004      	beq.n	80066fc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	e003      	b.n	8006704 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006702:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800670a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	4413      	add	r3, r2
 8006714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006718:	461a      	mov	r2, r3
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	e055      	b.n	80067d4 <USB_HC_StartXfer+0x4ec>
 8006728:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	78db      	ldrb	r3, [r3, #3]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d14e      	bne.n	80067d2 <USB_HC_StartXfer+0x4ea>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d04a      	beq.n	80067d2 <USB_HC_StartXfer+0x4ea>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	79db      	ldrb	r3, [r3, #7]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d146      	bne.n	80067d2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	7c9b      	ldrb	r3, [r3, #18]
 8006748:	2b03      	cmp	r3, #3
 800674a:	d831      	bhi.n	80067b0 <USB_HC_StartXfer+0x4c8>
 800674c:	a201      	add	r2, pc, #4	@ (adr r2, 8006754 <USB_HC_StartXfer+0x46c>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006765 	.word	0x08006765
 8006758:	08006789 	.word	0x08006789
 800675c:	08006765 	.word	0x08006765
 8006760:	08006789 	.word	0x08006789
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	3303      	adds	r3, #3
 800676a:	089b      	lsrs	r3, r3, #2
 800676c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800676e:	8afa      	ldrh	r2, [r7, #22]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006774:	b29b      	uxth	r3, r3
 8006776:	429a      	cmp	r2, r3
 8006778:	d91c      	bls.n	80067b4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f043 0220 	orr.w	r2, r3, #32
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	619a      	str	r2, [r3, #24]
        }
        break;
 8006786:	e015      	b.n	80067b4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	3303      	adds	r3, #3
 800678e:	089b      	lsrs	r3, r3, #2
 8006790:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006792:	8afa      	ldrh	r2, [r7, #22]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	b29b      	uxth	r3, r3
 800679e:	429a      	cmp	r2, r3
 80067a0:	d90a      	bls.n	80067b8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80067ae:	e003      	b.n	80067b8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80067b0:	bf00      	nop
 80067b2:	e002      	b.n	80067ba <USB_HC_StartXfer+0x4d2>
        break;
 80067b4:	bf00      	nop
 80067b6:	e000      	b.n	80067ba <USB_HC_StartXfer+0x4d2>
        break;
 80067b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6999      	ldr	r1, [r3, #24]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	785a      	ldrb	r2, [r3, #1]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2000      	movs	r0, #0
 80067ca:	9000      	str	r0, [sp, #0]
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff f9ca 	bl	8005b66 <USB_WritePacket>
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3728      	adds	r7, #40	@ 0x28
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	b29b      	uxth	r3, r3
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067fe:	b480      	push	{r7}
 8006800:	b089      	sub	sp, #36	@ 0x24
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800680e:	78fb      	ldrb	r3, [r7, #3]
 8006810:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	0c9b      	lsrs	r3, r3, #18
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	0fdb      	lsrs	r3, r3, #31
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	4413      	add	r3, r2
 800684a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	0fdb      	lsrs	r3, r3, #31
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b20      	cmp	r3, #32
 8006862:	d10d      	bne.n	8006880 <USB_HC_Halt+0x82>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <USB_HC_Halt+0x82>
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d005      	beq.n	800687c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d002      	beq.n	800687c <USB_HC_Halt+0x7e>
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b03      	cmp	r3, #3
 800687a:	d101      	bne.n	8006880 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	e0d8      	b.n	8006a32 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <USB_HC_Halt+0x8e>
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d173      	bne.n	8006974 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	4413      	add	r3, r2
 8006894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d14a      	bne.n	800694e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d133      	bne.n	800692c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068e2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006902:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	3301      	adds	r3, #1
 8006908:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006910:	d82e      	bhi.n	8006970 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006924:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006928:	d0ec      	beq.n	8006904 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800692a:	e081      	b.n	8006a30 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	440a      	add	r2, r1
 8006942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006946:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800694a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800694c:	e070      	b.n	8006a30 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	440a      	add	r2, r1
 8006964:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006968:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800696c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800696e:	e05f      	b.n	8006a30 <USB_HC_Halt+0x232>
            break;
 8006970:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006972:	e05d      	b.n	8006a30 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	4413      	add	r3, r2
 800697c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	0151      	lsls	r1, r2, #5
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	440a      	add	r2, r1
 800698a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800698e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006992:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d133      	bne.n	8006a0c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	0151      	lsls	r1, r2, #5
 80069d6:	69fa      	ldr	r2, [r7, #28]
 80069d8:	440a      	add	r2, r1
 80069da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069e2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	3301      	adds	r3, #1
 80069e8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069f0:	d81d      	bhi.n	8006a2e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a08:	d0ec      	beq.n	80069e4 <USB_HC_Halt+0x1e6>
 8006a0a:	e011      	b.n	8006a30 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	e000      	b.n	8006a30 <USB_HC_Halt+0x232>
          break;
 8006a2e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3724      	adds	r7, #36	@ 0x24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
	...

08006a40 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a54:	2301      	movs	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	04da      	lsls	r2, r3, #19
 8006a5c:	4b15      	ldr	r3, [pc, #84]	@ (8006ab4 <USB_DoPing+0x74>)
 8006a5e:	4013      	ands	r3, r2
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a70:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a88:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a90:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	1ff80000 	.word	0x1ff80000

08006ab8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7fe ff8d 	bl	80059ec <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ad2:	2110      	movs	r1, #16
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fe ffe6 	bl	8005aa6 <USB_FlushTxFifo>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff f810 	bl	8005b0a <USB_FlushRxFifo>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	e01f      	b.n	8006b3a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b18:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b20:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b2e:	461a      	mov	r2, r3
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	3301      	adds	r3, #1
 8006b38:	61bb      	str	r3, [r7, #24]
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	2b0f      	cmp	r3, #15
 8006b3e:	d9dc      	bls.n	8006afa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b40:	2300      	movs	r3, #0
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	e034      	b.n	8006bb0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b5c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3301      	adds	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b8c:	d80c      	bhi.n	8006ba8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ba4:	d0ec      	beq.n	8006b80 <USB_StopHost+0xc8>
 8006ba6:	e000      	b.n	8006baa <USB_StopHost+0xf2>
        break;
 8006ba8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	3301      	adds	r3, #1
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b0f      	cmp	r3, #15
 8006bb4:	d9c7      	bls.n	8006b46 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fe fefc 	bl	80059ca <USB_EnableGlobalInt>

  return ret;
 8006bd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006bdc:	b590      	push	{r4, r7, lr}
 8006bde:	b089      	sub	sp, #36	@ 0x24
 8006be0:	af04      	add	r7, sp, #16
 8006be2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006be4:	2301      	movs	r3, #1
 8006be6:	2202      	movs	r2, #2
 8006be8:	2102      	movs	r1, #2
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fc85 	bl	80074fa <USBH_FindInterface>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	2bff      	cmp	r3, #255	@ 0xff
 8006bf8:	d002      	beq.n	8006c00 <USBH_CDC_InterfaceInit+0x24>
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d901      	bls.n	8006c04 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c00:	2302      	movs	r3, #2
 8006c02:	e13d      	b.n	8006e80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	4619      	mov	r1, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fc5a 	bl	80074c2 <USBH_SelectInterface>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e131      	b.n	8006e80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006c22:	2050      	movs	r0, #80	@ 0x50
 8006c24:	f002 fb64 	bl	80092f0 <malloc>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e11f      	b.n	8006e80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006c40:	2250      	movs	r2, #80	@ 0x50
 8006c42:	2100      	movs	r1, #0
 8006c44:	68b8      	ldr	r0, [r7, #8]
 8006c46:	f002 fc11 	bl	800946c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	211a      	movs	r1, #26
 8006c50:	fb01 f303 	mul.w	r3, r1, r3
 8006c54:	4413      	add	r3, r2
 8006c56:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b25b      	sxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	da15      	bge.n	8006c8e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	211a      	movs	r1, #26
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c72:	781a      	ldrb	r2, [r3, #0]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	211a      	movs	r1, #26
 8006c7e:	fb01 f303 	mul.w	r3, r1, r3
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c88:	881a      	ldrh	r2, [r3, #0]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 ffbe 	bl	8008c16 <USBH_AllocPipe>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	7819      	ldrb	r1, [r3, #0]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	7858      	ldrb	r0, [r3, #1]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	8952      	ldrh	r2, [r2, #10]
 8006cba:	9202      	str	r2, [sp, #8]
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	9201      	str	r2, [sp, #4]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 ff76 	bl	8008bb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f002 fa85 	bl	80091e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2200      	movs	r2, #0
 8006cde:	210a      	movs	r1, #10
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fc0a 	bl	80074fa <USBH_FindInterface>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	2bff      	cmp	r3, #255	@ 0xff
 8006cee:	d002      	beq.n	8006cf6 <USBH_CDC_InterfaceInit+0x11a>
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d901      	bls.n	8006cfa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e0c2      	b.n	8006e80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	211a      	movs	r1, #26
 8006d00:	fb01 f303 	mul.w	r3, r1, r3
 8006d04:	4413      	add	r3, r2
 8006d06:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b25b      	sxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	da16      	bge.n	8006d40 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	211a      	movs	r1, #26
 8006d18:	fb01 f303 	mul.w	r3, r1, r3
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	211a      	movs	r1, #26
 8006d2e:	fb01 f303 	mul.w	r3, r1, r3
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d38:	881a      	ldrh	r2, [r3, #0]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	835a      	strh	r2, [r3, #26]
 8006d3e:	e015      	b.n	8006d6c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	211a      	movs	r1, #26
 8006d46:	fb01 f303 	mul.w	r3, r1, r3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	211a      	movs	r1, #26
 8006d5c:	fb01 f303 	mul.w	r3, r1, r3
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d66:	881a      	ldrh	r2, [r3, #0]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	211a      	movs	r1, #26
 8006d72:	fb01 f303 	mul.w	r3, r1, r3
 8006d76:	4413      	add	r3, r2
 8006d78:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b25b      	sxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	da16      	bge.n	8006db2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	211a      	movs	r1, #26
 8006d8a:	fb01 f303 	mul.w	r3, r1, r3
 8006d8e:	4413      	add	r3, r2
 8006d90:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d94:	781a      	ldrb	r2, [r3, #0]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	211a      	movs	r1, #26
 8006da0:	fb01 f303 	mul.w	r3, r1, r3
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006daa:	881a      	ldrh	r2, [r3, #0]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	835a      	strh	r2, [r3, #26]
 8006db0:	e015      	b.n	8006dde <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	211a      	movs	r1, #26
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006dc2:	781a      	ldrb	r2, [r3, #0]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	211a      	movs	r1, #26
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006dd8:	881a      	ldrh	r2, [r3, #0]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	7b9b      	ldrb	r3, [r3, #14]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 ff16 	bl	8008c16 <USBH_AllocPipe>
 8006dea:	4603      	mov	r3, r0
 8006dec:	461a      	mov	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	7bdb      	ldrb	r3, [r3, #15]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 ff0c 	bl	8008c16 <USBH_AllocPipe>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	461a      	mov	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	7b59      	ldrb	r1, [r3, #13]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	7b98      	ldrb	r0, [r3, #14]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	8b12      	ldrh	r2, [r2, #24]
 8006e1e:	9202      	str	r2, [sp, #8]
 8006e20:	2202      	movs	r2, #2
 8006e22:	9201      	str	r2, [sp, #4]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	4623      	mov	r3, r4
 8006e28:	4602      	mov	r2, r0
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fec4 	bl	8008bb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	7b19      	ldrb	r1, [r3, #12]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	7bd8      	ldrb	r0, [r3, #15]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	8b52      	ldrh	r2, [r2, #26]
 8006e48:	9202      	str	r2, [sp, #8]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	9201      	str	r2, [sp, #4]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	4623      	mov	r3, r4
 8006e52:	4602      	mov	r2, r0
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 feaf 	bl	8008bb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	7b5b      	ldrb	r3, [r3, #13]
 8006e66:	2200      	movs	r2, #0
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f002 f9ba 	bl	80091e4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	7b1b      	ldrb	r3, [r3, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f002 f9b3 	bl	80091e4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd90      	pop	{r4, r7, pc}

08006e88 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00e      	beq.n	8006ec0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fea4 	bl	8008bf6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 fecf 	bl	8008c58 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	7b1b      	ldrb	r3, [r3, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00e      	beq.n	8006ee6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	7b1b      	ldrb	r3, [r3, #12]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fe91 	bl	8008bf6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	7b1b      	ldrb	r3, [r3, #12]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 febc 	bl	8008c58 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	7b5b      	ldrb	r3, [r3, #13]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00e      	beq.n	8006f0c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	7b5b      	ldrb	r3, [r3, #13]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fe7e 	bl	8008bf6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	7b5b      	ldrb	r3, [r3, #13]
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fea9 	bl	8008c58 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f002 f9ed 	bl	8009300 <free>
    phost->pActiveClass->pData = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3340      	adds	r3, #64	@ 0x40
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f8b1 	bl	80070ba <GetLineCoding>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006f5c:	7afb      	ldrb	r3, [r7, #11]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d105      	bne.n	8006f6e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f68:	2102      	movs	r1, #2
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006f6e:	7afb      	ldrb	r3, [r7, #11]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f80:	2301      	movs	r3, #1
 8006f82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d877      	bhi.n	800708c <USBH_CDC_Process+0x114>
 8006f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa4 <USBH_CDC_Process+0x2c>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fb9 	.word	0x08006fb9
 8006fa8:	08006fbf 	.word	0x08006fbf
 8006fac:	08006fef 	.word	0x08006fef
 8006fb0:	08007063 	.word	0x08007063
 8006fb4:	08007071 	.word	0x08007071
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	73fb      	strb	r3, [r7, #15]
      break;
 8006fbc:	e06d      	b.n	800709a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f897 	bl	80070f8 <SetLineCoding>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006fdc:	e058      	b.n	8007090 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006fde:	7bbb      	ldrb	r3, [r7, #14]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d055      	beq.n	8007090 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006fec:	e050      	b.n	8007090 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	3340      	adds	r3, #64	@ 0x40
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f860 	bl	80070ba <GetLineCoding>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d126      	bne.n	8007052 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007016:	791b      	ldrb	r3, [r3, #4]
 8007018:	429a      	cmp	r2, r3
 800701a:	d13b      	bne.n	8007094 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007026:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007028:	429a      	cmp	r2, r3
 800702a:	d133      	bne.n	8007094 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007036:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007038:	429a      	cmp	r2, r3
 800703a:	d12b      	bne.n	8007094 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007044:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007046:	429a      	cmp	r2, r3
 8007048:	d124      	bne.n	8007094 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f958 	bl	8007300 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007050:	e020      	b.n	8007094 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d01d      	beq.n	8007094 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2204      	movs	r2, #4
 800705c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007060:	e018      	b.n	8007094 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f867 	bl	8007136 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f8da 	bl	8007222 <CDC_ProcessReception>
      break;
 800706e:	e014      	b.n	800709a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007070:	2100      	movs	r1, #0
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 f81a 	bl	80080ac <USBH_ClrFeature>
 8007078:	4603      	mov	r3, r0
 800707a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10a      	bne.n	8007098 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800708a:	e005      	b.n	8007098 <USBH_CDC_Process+0x120>

    default:
      break;
 800708c:	bf00      	nop
 800708e:	e004      	b.n	800709a <USBH_CDC_Process+0x122>
      break;
 8007090:	bf00      	nop
 8007092:	e002      	b.n	800709a <USBH_CDC_Process+0x122>
      break;
 8007094:	bf00      	nop
 8007096:	e000      	b.n	800709a <USBH_CDC_Process+0x122>
      break;
 8007098:	bf00      	nop

  }

  return status;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	22a1      	movs	r2, #161	@ 0xa1
 80070c8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2221      	movs	r2, #33	@ 0x21
 80070ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2207      	movs	r2, #7
 80070e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2207      	movs	r2, #7
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fb14 	bl	8008716 <USBH_CtlReq>
 80070ee:	4603      	mov	r3, r0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2221      	movs	r2, #33	@ 0x21
 8007106:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2207      	movs	r2, #7
 800711e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2207      	movs	r2, #7
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 faf5 	bl	8008716 <USBH_CtlReq>
 800712c:	4603      	mov	r3, r0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b086      	sub	sp, #24
 800713a:	af02      	add	r7, sp, #8
 800713c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007148:	2300      	movs	r3, #0
 800714a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007152:	2b01      	cmp	r3, #1
 8007154:	d002      	beq.n	800715c <CDC_ProcessTransmission+0x26>
 8007156:	2b02      	cmp	r3, #2
 8007158:	d023      	beq.n	80071a2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800715a:	e05e      	b.n	800721a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	8b12      	ldrh	r2, [r2, #24]
 8007164:	4293      	cmp	r3, r2
 8007166:	d90b      	bls.n	8007180 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	69d9      	ldr	r1, [r3, #28]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8b1a      	ldrh	r2, [r3, #24]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	7b5b      	ldrb	r3, [r3, #13]
 8007174:	2001      	movs	r0, #1
 8007176:	9000      	str	r0, [sp, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fcda 	bl	8008b32 <USBH_BulkSendData>
 800717e:	e00b      	b.n	8007198 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007188:	b29a      	uxth	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	7b5b      	ldrb	r3, [r3, #13]
 800718e:	2001      	movs	r0, #1
 8007190:	9000      	str	r0, [sp, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 fccd 	bl	8008b32 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80071a0:	e03b      	b.n	800721a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	7b5b      	ldrb	r3, [r3, #13]
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f001 fff1 	bl	8009190 <USBH_LL_GetURBState>
 80071ae:	4603      	mov	r3, r0
 80071b0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80071b2:	7afb      	ldrb	r3, [r7, #11]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d128      	bne.n	800720a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	8b12      	ldrh	r2, [r2, #24]
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d90e      	bls.n	80071e2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	8b12      	ldrh	r2, [r2, #24]
 80071cc:	1a9a      	subs	r2, r3, r2
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	8b12      	ldrh	r2, [r2, #24]
 80071da:	441a      	add	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	61da      	str	r2, [r3, #28]
 80071e0:	e002      	b.n	80071e8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80071f8:	e00e      	b.n	8007218 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f868 	bl	80072d8 <USBH_CDC_TransmitCallback>
      break;
 8007208:	e006      	b.n	8007218 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800720a:	7afb      	ldrb	r3, [r7, #11]
 800720c:	2b02      	cmp	r3, #2
 800720e:	d103      	bne.n	8007218 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007218:	bf00      	nop
  }
}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b086      	sub	sp, #24
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007234:	2300      	movs	r3, #0
 8007236:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800723e:	2b03      	cmp	r3, #3
 8007240:	d002      	beq.n	8007248 <CDC_ProcessReception+0x26>
 8007242:	2b04      	cmp	r3, #4
 8007244:	d00e      	beq.n	8007264 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007246:	e043      	b.n	80072d0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	6a19      	ldr	r1, [r3, #32]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	8b5a      	ldrh	r2, [r3, #26]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	7b1b      	ldrb	r3, [r3, #12]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 fc91 	bl	8008b7c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2204      	movs	r2, #4
 800725e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007262:	e035      	b.n	80072d0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	7b1b      	ldrb	r3, [r3, #12]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 ff90 	bl	8009190 <USBH_LL_GetURBState>
 8007270:	4603      	mov	r3, r0
 8007272:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007274:	7cfb      	ldrb	r3, [r7, #19]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d129      	bne.n	80072ce <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	7b1b      	ldrb	r3, [r3, #12]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 fef3 	bl	800906c <USBH_LL_GetLastXferSize>
 8007286:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	429a      	cmp	r2, r3
 8007290:	d016      	beq.n	80072c0 <CDC_ProcessReception+0x9e>
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	8b5b      	ldrh	r3, [r3, #26]
 8007296:	461a      	mov	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4293      	cmp	r3, r2
 800729c:	d110      	bne.n	80072c0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	1ad2      	subs	r2, r2, r3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	6a1a      	ldr	r2, [r3, #32]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	441a      	add	r2, r3
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2203      	movs	r2, #3
 80072ba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80072be:	e006      	b.n	80072ce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f80f 	bl	80072ec <USBH_CDC_ReceiveCallback>
      break;
 80072ce:	bf00      	nop
  }
}
 80072d0:	bf00      	nop
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	4613      	mov	r3, r2
 8007320:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007328:	2302      	movs	r3, #2
 800732a:	e029      	b.n	8007380 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	79fa      	ldrb	r2, [r7, #7]
 8007330:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f81f 	bl	8007388 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f001 fdc3 	bl	8008f04 <USBH_LL_Init>

  return USBH_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	e009      	b.n	80073ae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	33e0      	adds	r3, #224	@ 0xe0
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	2200      	movs	r2, #0
 80073a6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3301      	adds	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b0f      	cmp	r3, #15
 80073b2:	d9f2      	bls.n	800739a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073b4:	2300      	movs	r3, #0
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	e009      	b.n	80073ce <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80073c4:	2200      	movs	r2, #0
 80073c6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073d4:	d3f1      	bcc.n	80073ba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2240      	movs	r2, #64	@ 0x40
 80073fa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	331c      	adds	r3, #28
 8007426:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800742a:	2100      	movs	r1, #0
 800742c:	4618      	mov	r0, r3
 800742e:	f002 f81d 	bl	800946c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800743c:	2100      	movs	r1, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f002 f814 	bl	800946c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800744a:	2212      	movs	r2, #18
 800744c:	2100      	movs	r1, #0
 800744e:	4618      	mov	r0, r3
 8007450:	f002 f80c 	bl	800946c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800745a:	223e      	movs	r2, #62	@ 0x3e
 800745c:	2100      	movs	r1, #0
 800745e:	4618      	mov	r0, r3
 8007460:	f002 f804 	bl	800946c <memset>

  return USBH_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d016      	beq.n	80074b0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10e      	bne.n	80074aa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007492:	1c59      	adds	r1, r3, #1
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	33de      	adds	r3, #222	@ 0xde
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
 80074a8:	e004      	b.n	80074b4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80074aa:	2302      	movs	r3, #2
 80074ac:	73fb      	strb	r3, [r7, #15]
 80074ae:	e001      	b.n	80074b4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80074b0:	2302      	movs	r3, #2
 80074b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b085      	sub	sp, #20
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d204      	bcs.n	80074e8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	78fa      	ldrb	r2, [r7, #3]
 80074e2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80074e6:	e001      	b.n	80074ec <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80074e8:	2302      	movs	r3, #2
 80074ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b087      	sub	sp, #28
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	4608      	mov	r0, r1
 8007504:	4611      	mov	r1, r2
 8007506:	461a      	mov	r2, r3
 8007508:	4603      	mov	r3, r0
 800750a:	70fb      	strb	r3, [r7, #3]
 800750c:	460b      	mov	r3, r1
 800750e:	70bb      	strb	r3, [r7, #2]
 8007510:	4613      	mov	r3, r2
 8007512:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007522:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007524:	e025      	b.n	8007572 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	221a      	movs	r2, #26
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	3308      	adds	r3, #8
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	4413      	add	r3, r2
 8007534:	3302      	adds	r3, #2
 8007536:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	795b      	ldrb	r3, [r3, #5]
 800753c:	78fa      	ldrb	r2, [r7, #3]
 800753e:	429a      	cmp	r2, r3
 8007540:	d002      	beq.n	8007548 <USBH_FindInterface+0x4e>
 8007542:	78fb      	ldrb	r3, [r7, #3]
 8007544:	2bff      	cmp	r3, #255	@ 0xff
 8007546:	d111      	bne.n	800756c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800754c:	78ba      	ldrb	r2, [r7, #2]
 800754e:	429a      	cmp	r2, r3
 8007550:	d002      	beq.n	8007558 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007552:	78bb      	ldrb	r3, [r7, #2]
 8007554:	2bff      	cmp	r3, #255	@ 0xff
 8007556:	d109      	bne.n	800756c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800755c:	787a      	ldrb	r2, [r7, #1]
 800755e:	429a      	cmp	r2, r3
 8007560:	d002      	beq.n	8007568 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007562:	787b      	ldrb	r3, [r7, #1]
 8007564:	2bff      	cmp	r3, #255	@ 0xff
 8007566:	d101      	bne.n	800756c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	e006      	b.n	800757a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	3301      	adds	r3, #1
 8007570:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d9d6      	bls.n	8007526 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007578:	23ff      	movs	r3, #255	@ 0xff
}
 800757a:	4618      	mov	r0, r3
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f001 fcf4 	bl	8008f7c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007594:	2101      	movs	r1, #1
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fe0d 	bl	80091b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af04      	add	r7, sp, #16
 80075ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80075b0:	2302      	movs	r3, #2
 80075b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d102      	bne.n	80075ca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2203      	movs	r2, #3
 80075c8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b0b      	cmp	r3, #11
 80075d2:	f200 81bb 	bhi.w	800794c <USBH_Process+0x3a4>
 80075d6:	a201      	add	r2, pc, #4	@ (adr r2, 80075dc <USBH_Process+0x34>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	0800760d 	.word	0x0800760d
 80075e0:	0800763f 	.word	0x0800763f
 80075e4:	080076a7 	.word	0x080076a7
 80075e8:	080078e7 	.word	0x080078e7
 80075ec:	0800794d 	.word	0x0800794d
 80075f0:	08007747 	.word	0x08007747
 80075f4:	0800788d 	.word	0x0800788d
 80075f8:	0800777d 	.word	0x0800777d
 80075fc:	0800779d 	.word	0x0800779d
 8007600:	080077bb 	.word	0x080077bb
 8007604:	080077ff 	.word	0x080077ff
 8007608:	080078cf 	.word	0x080078cf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 819b 	beq.w	8007950 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007620:	20c8      	movs	r0, #200	@ 0xc8
 8007622:	f001 fe12 	bl	800924a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fd05 	bl	8009036 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800763c:	e188      	b.n	8007950 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007644:	2b01      	cmp	r3, #1
 8007646:	d107      	bne.n	8007658 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007656:	e18a      	b.n	800796e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800765e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007662:	d914      	bls.n	800768e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800766a:	3301      	adds	r3, #1
 800766c:	b2da      	uxtb	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800767a:	2b03      	cmp	r3, #3
 800767c:	d903      	bls.n	8007686 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	220d      	movs	r2, #13
 8007682:	701a      	strb	r2, [r3, #0]
      break;
 8007684:	e173      	b.n	800796e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]
      break;
 800768c:	e16f      	b.n	800796e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007694:	f103 020a 	add.w	r2, r3, #10
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800769e:	200a      	movs	r0, #10
 80076a0:	f001 fdd3 	bl	800924a <USBH_Delay>
      break;
 80076a4:	e163      	b.n	800796e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d005      	beq.n	80076bc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076b6:	2104      	movs	r1, #4
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80076bc:	2064      	movs	r0, #100	@ 0x64
 80076be:	f001 fdc4 	bl	800924a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 fc90 	bl	8008fe8 <USBH_LL_GetSpeed>
 80076c8:	4603      	mov	r3, r0
 80076ca:	461a      	mov	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2205      	movs	r2, #5
 80076d6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80076d8:	2100      	movs	r1, #0
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 fa9b 	bl	8008c16 <USBH_AllocPipe>
 80076e0:	4603      	mov	r3, r0
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80076e8:	2180      	movs	r1, #128	@ 0x80
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 fa93 	bl	8008c16 <USBH_AllocPipe>
 80076f0:	4603      	mov	r3, r0
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	7919      	ldrb	r1, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800770c:	9202      	str	r2, [sp, #8]
 800770e:	2200      	movs	r2, #0
 8007710:	9201      	str	r2, [sp, #4]
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	4603      	mov	r3, r0
 8007716:	2280      	movs	r2, #128	@ 0x80
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 fa4d 	bl	8008bb8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	7959      	ldrb	r1, [r3, #5]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007732:	9202      	str	r2, [sp, #8]
 8007734:	2200      	movs	r2, #0
 8007736:	9201      	str	r2, [sp, #4]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	4603      	mov	r3, r0
 800773c:	2200      	movs	r2, #0
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 fa3a 	bl	8008bb8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007744:	e113      	b.n	800796e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f916 	bl	8007978 <USBH_HandleEnum>
 800774c:	4603      	mov	r3, r0
 800774e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	f040 80fd 	bne.w	8007954 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007768:	2b01      	cmp	r3, #1
 800776a:	d103      	bne.n	8007774 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2208      	movs	r2, #8
 8007770:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007772:	e0ef      	b.n	8007954 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2207      	movs	r2, #7
 8007778:	701a      	strb	r2, [r3, #0]
      break;
 800777a:	e0eb      	b.n	8007954 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 80e8 	beq.w	8007958 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800778e:	2101      	movs	r1, #1
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2208      	movs	r2, #8
 8007798:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800779a:	e0dd      	b.n	8007958 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fc3a 	bl	800801e <USBH_SetCfg>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f040 80d5 	bne.w	800795c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2209      	movs	r2, #9
 80077b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077b8:	e0d0      	b.n	800795c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80077c0:	f003 0320 	and.w	r3, r3, #32
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d016      	beq.n	80077f6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80077c8:	2101      	movs	r1, #1
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fc4a 	bl	8008064 <USBH_SetFeature>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d103      	bne.n	80077e4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	220a      	movs	r2, #10
 80077e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077e2:	e0bd      	b.n	8007960 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	f040 80b9 	bne.w	8007960 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	220a      	movs	r2, #10
 80077f2:	701a      	strb	r2, [r3, #0]
      break;
 80077f4:	e0b4      	b.n	8007960 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	220a      	movs	r2, #10
 80077fa:	701a      	strb	r2, [r3, #0]
      break;
 80077fc:	e0b0      	b.n	8007960 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 80ad 	beq.w	8007964 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007812:	2300      	movs	r3, #0
 8007814:	73fb      	strb	r3, [r7, #15]
 8007816:	e016      	b.n	8007846 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007818:	7bfa      	ldrb	r2, [r7, #15]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	32de      	adds	r2, #222	@ 0xde
 800781e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007822:	791a      	ldrb	r2, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800782a:	429a      	cmp	r2, r3
 800782c:	d108      	bne.n	8007840 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800782e:	7bfa      	ldrb	r2, [r7, #15]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	32de      	adds	r2, #222	@ 0xde
 8007834:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800783e:	e005      	b.n	800784c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	3301      	adds	r3, #1
 8007844:	73fb      	strb	r3, [r7, #15]
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0e5      	beq.n	8007818 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d016      	beq.n	8007884 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4798      	blx	r3
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d109      	bne.n	800787c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2206      	movs	r2, #6
 800786c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007874:	2103      	movs	r1, #3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800787a:	e073      	b.n	8007964 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	220d      	movs	r2, #13
 8007880:	701a      	strb	r2, [r3, #0]
      break;
 8007882:	e06f      	b.n	8007964 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	220d      	movs	r2, #13
 8007888:	701a      	strb	r2, [r3, #0]
      break;
 800788a:	e06b      	b.n	8007964 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d017      	beq.n	80078c6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4798      	blx	r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	220b      	movs	r2, #11
 80078b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078b4:	e058      	b.n	8007968 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d154      	bne.n	8007968 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	220d      	movs	r2, #13
 80078c2:	701a      	strb	r2, [r3, #0]
      break;
 80078c4:	e050      	b.n	8007968 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	220d      	movs	r2, #13
 80078ca:	701a      	strb	r2, [r3, #0]
      break;
 80078cc:	e04c      	b.n	8007968 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d049      	beq.n	800796c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4798      	blx	r3
      }
      break;
 80078e4:	e042      	b.n	800796c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff fd4a 	bl	8007388 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007922:	2105      	movs	r1, #5
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	d107      	bne.n	8007944 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7ff fe22 	bl	8007586 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007942:	e014      	b.n	800796e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 fb19 	bl	8008f7c <USBH_LL_Start>
      break;
 800794a:	e010      	b.n	800796e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800794c:	bf00      	nop
 800794e:	e00e      	b.n	800796e <USBH_Process+0x3c6>
      break;
 8007950:	bf00      	nop
 8007952:	e00c      	b.n	800796e <USBH_Process+0x3c6>
      break;
 8007954:	bf00      	nop
 8007956:	e00a      	b.n	800796e <USBH_Process+0x3c6>
    break;
 8007958:	bf00      	nop
 800795a:	e008      	b.n	800796e <USBH_Process+0x3c6>
      break;
 800795c:	bf00      	nop
 800795e:	e006      	b.n	800796e <USBH_Process+0x3c6>
      break;
 8007960:	bf00      	nop
 8007962:	e004      	b.n	800796e <USBH_Process+0x3c6>
      break;
 8007964:	bf00      	nop
 8007966:	e002      	b.n	800796e <USBH_Process+0x3c6>
      break;
 8007968:	bf00      	nop
 800796a:	e000      	b.n	800796e <USBH_Process+0x3c6>
      break;
 800796c:	bf00      	nop
  }
  return USBH_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af04      	add	r7, sp, #16
 800797e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007980:	2301      	movs	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007984:	2301      	movs	r3, #1
 8007986:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	785b      	ldrb	r3, [r3, #1]
 800798c:	2b07      	cmp	r3, #7
 800798e:	f200 81bd 	bhi.w	8007d0c <USBH_HandleEnum+0x394>
 8007992:	a201      	add	r2, pc, #4	@ (adr r2, 8007998 <USBH_HandleEnum+0x20>)
 8007994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007998:	080079b9 	.word	0x080079b9
 800799c:	08007a73 	.word	0x08007a73
 80079a0:	08007add 	.word	0x08007add
 80079a4:	08007b67 	.word	0x08007b67
 80079a8:	08007bd1 	.word	0x08007bd1
 80079ac:	08007c41 	.word	0x08007c41
 80079b0:	08007c87 	.word	0x08007c87
 80079b4:	08007ccd 	.word	0x08007ccd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80079b8:	2108      	movs	r1, #8
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fa4c 	bl	8007e58 <USBH_Get_DevDesc>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d12e      	bne.n	8007a28 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	7919      	ldrb	r1, [r3, #4]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079ee:	9202      	str	r2, [sp, #8]
 80079f0:	2200      	movs	r2, #0
 80079f2:	9201      	str	r2, [sp, #4]
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	4603      	mov	r3, r0
 80079f8:	2280      	movs	r2, #128	@ 0x80
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f001 f8dc 	bl	8008bb8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	7959      	ldrb	r1, [r3, #5]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a14:	9202      	str	r2, [sp, #8]
 8007a16:	2200      	movs	r2, #0
 8007a18:	9201      	str	r2, [sp, #4]
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2200      	movs	r2, #0
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 f8c9 	bl	8008bb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a26:	e173      	b.n	8007d10 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	f040 8170 	bne.w	8007d10 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a36:	3301      	adds	r3, #1
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d903      	bls.n	8007a52 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	220d      	movs	r2, #13
 8007a4e:	701a      	strb	r2, [r3, #0]
      break;
 8007a50:	e15e      	b.n	8007d10 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	795b      	ldrb	r3, [r3, #5]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 f8fd 	bl	8008c58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	791b      	ldrb	r3, [r3, #4]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 f8f7 	bl	8008c58 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	701a      	strb	r2, [r3, #0]
      break;
 8007a70:	e14e      	b.n	8007d10 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a72:	2112      	movs	r1, #18
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f9ef 	bl	8007e58 <USBH_Get_DevDesc>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d103      	bne.n	8007a8c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a8a:	e143      	b.n	8007d14 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	f040 8140 	bne.w	8007d14 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d903      	bls.n	8007ab6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	220d      	movs	r2, #13
 8007ab2:	701a      	strb	r2, [r3, #0]
      break;
 8007ab4:	e12e      	b.n	8007d14 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	795b      	ldrb	r3, [r3, #5]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 f8cb 	bl	8008c58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	791b      	ldrb	r3, [r3, #4]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 f8c5 	bl	8008c58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	701a      	strb	r2, [r3, #0]
      break;
 8007ada:	e11b      	b.n	8007d14 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007adc:	2101      	movs	r1, #1
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fa79 	bl	8007fd6 <USBH_SetAddress>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d130      	bne.n	8007b50 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007aee:	2002      	movs	r0, #2
 8007af0:	f001 fbab 	bl	800924a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2203      	movs	r2, #3
 8007b00:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	7919      	ldrb	r1, [r3, #4]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b16:	9202      	str	r2, [sp, #8]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	9201      	str	r2, [sp, #4]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2280      	movs	r2, #128	@ 0x80
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 f848 	bl	8008bb8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	7959      	ldrb	r1, [r3, #5]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b3c:	9202      	str	r2, [sp, #8]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	9201      	str	r2, [sp, #4]
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	4603      	mov	r3, r0
 8007b46:	2200      	movs	r2, #0
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 f835 	bl	8008bb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b4e:	e0e3      	b.n	8007d18 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	f040 80e0 	bne.w	8007d18 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	220d      	movs	r2, #13
 8007b5c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	705a      	strb	r2, [r3, #1]
      break;
 8007b64:	e0d8      	b.n	8007d18 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b66:	2109      	movs	r1, #9
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f9a1 	bl	8007eb0 <USBH_Get_CfgDesc>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d103      	bne.n	8007b80 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2204      	movs	r2, #4
 8007b7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b7e:	e0cd      	b.n	8007d1c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	f040 80ca 	bne.w	8007d1c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b8e:	3301      	adds	r3, #1
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d903      	bls.n	8007baa <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	220d      	movs	r2, #13
 8007ba6:	701a      	strb	r2, [r3, #0]
      break;
 8007ba8:	e0b8      	b.n	8007d1c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	795b      	ldrb	r3, [r3, #5]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 f851 	bl	8008c58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	791b      	ldrb	r3, [r3, #4]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f84b 	bl	8008c58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	701a      	strb	r2, [r3, #0]
      break;
 8007bce:	e0a5      	b.n	8007d1c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f969 	bl	8007eb0 <USBH_Get_CfgDesc>
 8007bde:	4603      	mov	r3, r0
 8007be0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d103      	bne.n	8007bf0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2205      	movs	r2, #5
 8007bec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bee:	e097      	b.n	8007d20 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	f040 8094 	bne.w	8007d20 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bfe:	3301      	adds	r3, #1
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d903      	bls.n	8007c1a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	220d      	movs	r2, #13
 8007c16:	701a      	strb	r2, [r3, #0]
      break;
 8007c18:	e082      	b.n	8007d20 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	795b      	ldrb	r3, [r3, #5]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f819 	bl	8008c58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	791b      	ldrb	r3, [r3, #4]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f001 f813 	bl	8008c58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	701a      	strb	r2, [r3, #0]
      break;
 8007c3e:	e06f      	b.n	8007d20 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d019      	beq.n	8007c7e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c56:	23ff      	movs	r3, #255	@ 0xff
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f953 	bl	8007f04 <USBH_Get_StringDesc>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d103      	bne.n	8007c70 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2206      	movs	r2, #6
 8007c6c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c6e:	e059      	b.n	8007d24 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d156      	bne.n	8007d24 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2206      	movs	r2, #6
 8007c7a:	705a      	strb	r2, [r3, #1]
      break;
 8007c7c:	e052      	b.n	8007d24 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2206      	movs	r2, #6
 8007c82:	705a      	strb	r2, [r3, #1]
      break;
 8007c84:	e04e      	b.n	8007d24 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d019      	beq.n	8007cc4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c9c:	23ff      	movs	r3, #255	@ 0xff
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f930 	bl	8007f04 <USBH_Get_StringDesc>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d103      	bne.n	8007cb6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007cb4:	e038      	b.n	8007d28 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d135      	bne.n	8007d28 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2207      	movs	r2, #7
 8007cc0:	705a      	strb	r2, [r3, #1]
      break;
 8007cc2:	e031      	b.n	8007d28 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2207      	movs	r2, #7
 8007cc8:	705a      	strb	r2, [r3, #1]
      break;
 8007cca:	e02d      	b.n	8007d28 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d017      	beq.n	8007d06 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ce2:	23ff      	movs	r3, #255	@ 0xff
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f90d 	bl	8007f04 <USBH_Get_StringDesc>
 8007cea:	4603      	mov	r3, r0
 8007cec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cee:	7bbb      	ldrb	r3, [r7, #14]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d102      	bne.n	8007cfa <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007cf8:	e018      	b.n	8007d2c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cfa:	7bbb      	ldrb	r3, [r7, #14]
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d115      	bne.n	8007d2c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	73fb      	strb	r3, [r7, #15]
      break;
 8007d04:	e012      	b.n	8007d2c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	73fb      	strb	r3, [r7, #15]
      break;
 8007d0a:	e00f      	b.n	8007d2c <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007d0c:	bf00      	nop
 8007d0e:	e00e      	b.n	8007d2e <USBH_HandleEnum+0x3b6>
      break;
 8007d10:	bf00      	nop
 8007d12:	e00c      	b.n	8007d2e <USBH_HandleEnum+0x3b6>
      break;
 8007d14:	bf00      	nop
 8007d16:	e00a      	b.n	8007d2e <USBH_HandleEnum+0x3b6>
      break;
 8007d18:	bf00      	nop
 8007d1a:	e008      	b.n	8007d2e <USBH_HandleEnum+0x3b6>
      break;
 8007d1c:	bf00      	nop
 8007d1e:	e006      	b.n	8007d2e <USBH_HandleEnum+0x3b6>
      break;
 8007d20:	bf00      	nop
 8007d22:	e004      	b.n	8007d2e <USBH_HandleEnum+0x3b6>
      break;
 8007d24:	bf00      	nop
 8007d26:	e002      	b.n	8007d2e <USBH_HandleEnum+0x3b6>
      break;
 8007d28:	bf00      	nop
 8007d2a:	e000      	b.n	8007d2e <USBH_HandleEnum+0x3b6>
      break;
 8007d2c:	bf00      	nop
  }
  return Status;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f804 	bl	8007d7a <USBH_HandleSof>
}
 8007d72:	bf00      	nop
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b0b      	cmp	r3, #11
 8007d8a:	d10a      	bne.n	8007da2 <USBH_HandleSof+0x28>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d005      	beq.n	8007da2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
  }
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007dba:	bf00      	nop
}
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007dd6:	bf00      	nop
}
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 f8be 	bl	8008fb2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	791b      	ldrb	r3, [r3, #4]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 ff0b 	bl	8008c58 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	795b      	ldrb	r3, [r3, #5]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 ff05 	bl	8008c58 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007e64:	887b      	ldrh	r3, [r7, #2]
 8007e66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e6a:	d901      	bls.n	8007e70 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e01b      	b.n	8007ea8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007e76:	887b      	ldrh	r3, [r7, #2]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e80:	2100      	movs	r1, #0
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f872 	bl	8007f6c <USBH_GetDescriptor>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d109      	bne.n	8007ea6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007e98:	887a      	ldrh	r2, [r7, #2]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f929 	bl	80080f4 <USBH_ParseDevDesc>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	331c      	adds	r3, #28
 8007ec0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007ec2:	887b      	ldrh	r3, [r7, #2]
 8007ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec8:	d901      	bls.n	8007ece <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e016      	b.n	8007efc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ece:	887b      	ldrh	r3, [r7, #2]
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ed8:	2100      	movs	r1, #0
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f846 	bl	8007f6c <USBH_GetDescriptor>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d107      	bne.n	8007efa <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007eea:	887b      	ldrh	r3, [r7, #2]
 8007eec:	461a      	mov	r2, r3
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f9af 	bl	8008254 <USBH_ParseCfgDesc>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	460b      	mov	r3, r1
 8007f12:	72fb      	strb	r3, [r7, #11]
 8007f14:	4613      	mov	r3, r2
 8007f16:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007f18:	893b      	ldrh	r3, [r7, #8]
 8007f1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f1e:	d802      	bhi.n	8007f26 <USBH_Get_StringDesc+0x22>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e01c      	b.n	8007f64 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007f2a:	7afb      	ldrb	r3, [r7, #11]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007f32:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007f3a:	893b      	ldrh	r3, [r7, #8]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	2100      	movs	r1, #0
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 f812 	bl	8007f6c <USBH_GetDescriptor>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d107      	bne.n	8007f62 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f58:	893a      	ldrh	r2, [r7, #8]
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fb8d 	bl	800867c <USBH_ParseStringDesc>
  }

  return status;
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	607b      	str	r3, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	72fb      	strb	r3, [r7, #11]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	789b      	ldrb	r3, [r3, #2]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d11c      	bne.n	8007fc0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f86:	7afb      	ldrb	r3, [r7, #11]
 8007f88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2206      	movs	r2, #6
 8007f96:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	893a      	ldrh	r2, [r7, #8]
 8007f9c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f9e:	893b      	ldrh	r3, [r7, #8]
 8007fa0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007fa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fa8:	d104      	bne.n	8007fb4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f240 4209 	movw	r2, #1033	@ 0x409
 8007fb0:	829a      	strh	r2, [r3, #20]
 8007fb2:	e002      	b.n	8007fba <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8b3a      	ldrh	r2, [r7, #24]
 8007fbe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007fc0:	8b3b      	ldrh	r3, [r7, #24]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 fba5 	bl	8008716 <USBH_CtlReq>
 8007fcc:	4603      	mov	r3, r0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	789b      	ldrb	r3, [r3, #2]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d10f      	bne.n	800800a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2205      	movs	r2, #5
 8007ff4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800800a:	2200      	movs	r2, #0
 800800c:	2100      	movs	r1, #0
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fb81 	bl	8008716 <USBH_CtlReq>
 8008014:	4603      	mov	r3, r0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	460b      	mov	r3, r1
 8008028:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	789b      	ldrb	r3, [r3, #2]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d10e      	bne.n	8008050 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2209      	movs	r2, #9
 800803c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	887a      	ldrh	r2, [r7, #2]
 8008042:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008050:	2200      	movs	r2, #0
 8008052:	2100      	movs	r1, #0
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fb5e 	bl	8008716 <USBH_CtlReq>
 800805a:	4603      	mov	r3, r0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	789b      	ldrb	r3, [r3, #2]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d10f      	bne.n	8008098 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2203      	movs	r2, #3
 8008082:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	b29a      	uxth	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008098:	2200      	movs	r2, #0
 800809a:	2100      	movs	r1, #0
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fb3a 	bl	8008716 <USBH_CtlReq>
 80080a2:	4603      	mov	r3, r0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	460b      	mov	r3, r1
 80080b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	789b      	ldrb	r3, [r3, #2]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d10f      	bne.n	80080e0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80080d2:	78fb      	ldrb	r3, [r7, #3]
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080e0:	2200      	movs	r2, #0
 80080e2:	2100      	movs	r1, #0
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fb16 	bl	8008716 <USBH_CtlReq>
 80080ea:	4603      	mov	r3, r0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	4613      	mov	r3, r2
 8008100:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008108:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008114:	2302      	movs	r3, #2
 8008116:	e094      	b.n	8008242 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	781a      	ldrb	r2, [r3, #0]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	785a      	ldrb	r2, [r3, #1]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	3302      	adds	r3, #2
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	3303      	adds	r3, #3
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	021b      	lsls	r3, r3, #8
 8008138:	b29b      	uxth	r3, r3
 800813a:	4313      	orrs	r3, r2
 800813c:	b29a      	uxth	r2, r3
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	791a      	ldrb	r2, [r3, #4]
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	795a      	ldrb	r2, [r3, #5]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	799a      	ldrb	r2, [r3, #6]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	79da      	ldrb	r2, [r3, #7]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008172:	2b01      	cmp	r3, #1
 8008174:	d11b      	bne.n	80081ae <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	79db      	ldrb	r3, [r3, #7]
 800817a:	2b20      	cmp	r3, #32
 800817c:	dc0f      	bgt.n	800819e <USBH_ParseDevDesc+0xaa>
 800817e:	2b08      	cmp	r3, #8
 8008180:	db0f      	blt.n	80081a2 <USBH_ParseDevDesc+0xae>
 8008182:	3b08      	subs	r3, #8
 8008184:	4a32      	ldr	r2, [pc, #200]	@ (8008250 <USBH_ParseDevDesc+0x15c>)
 8008186:	fa22 f303 	lsr.w	r3, r2, r3
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	bf14      	ite	ne
 8008192:	2301      	movne	r3, #1
 8008194:	2300      	moveq	r3, #0
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d106      	bne.n	80081aa <USBH_ParseDevDesc+0xb6>
 800819c:	e001      	b.n	80081a2 <USBH_ParseDevDesc+0xae>
 800819e:	2b40      	cmp	r3, #64	@ 0x40
 80081a0:	d003      	beq.n	80081aa <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2208      	movs	r2, #8
 80081a6:	71da      	strb	r2, [r3, #7]
        break;
 80081a8:	e000      	b.n	80081ac <USBH_ParseDevDesc+0xb8>
        break;
 80081aa:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80081ac:	e00e      	b.n	80081cc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d107      	bne.n	80081c8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	79db      	ldrb	r3, [r3, #7]
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d005      	beq.n	80081cc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	2208      	movs	r2, #8
 80081c4:	71da      	strb	r2, [r3, #7]
 80081c6:	e001      	b.n	80081cc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80081c8:	2303      	movs	r3, #3
 80081ca:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80081cc:	88fb      	ldrh	r3, [r7, #6]
 80081ce:	2b08      	cmp	r3, #8
 80081d0:	d936      	bls.n	8008240 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	3308      	adds	r3, #8
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	461a      	mov	r2, r3
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	3309      	adds	r3, #9
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	021b      	lsls	r3, r3, #8
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	4313      	orrs	r3, r2
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	330a      	adds	r3, #10
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	330b      	adds	r3, #11
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	021b      	lsls	r3, r3, #8
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	b29a      	uxth	r2, r3
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	330c      	adds	r3, #12
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	330d      	adds	r3, #13
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	b29b      	uxth	r3, r3
 8008218:	4313      	orrs	r3, r2
 800821a:	b29a      	uxth	r2, r3
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	7b9a      	ldrb	r2, [r3, #14]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	7bda      	ldrb	r2, [r3, #15]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	7c1a      	ldrb	r2, [r3, #16]
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	7c5a      	ldrb	r2, [r3, #17]
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008240:	7dfb      	ldrb	r3, [r7, #23]
}
 8008242:	4618      	mov	r0, r3
 8008244:	371c      	adds	r7, #28
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	01000101 	.word	0x01000101

08008254 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08c      	sub	sp, #48	@ 0x30
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	4613      	mov	r3, r2
 8008260:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008268:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008282:	2302      	movs	r3, #2
 8008284:	e0da      	b.n	800843c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b09      	cmp	r3, #9
 8008290:	d002      	beq.n	8008298 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008294:	2209      	movs	r2, #9
 8008296:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	781a      	ldrb	r2, [r3, #0]
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	785a      	ldrb	r2, [r3, #1]
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	3302      	adds	r3, #2
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	3303      	adds	r3, #3
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	021b      	lsls	r3, r3, #8
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	4313      	orrs	r3, r2
 80082bc:	b29b      	uxth	r3, r3
 80082be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082c2:	bf28      	it	cs
 80082c4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	791a      	ldrb	r2, [r3, #4]
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	795a      	ldrb	r2, [r3, #5]
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	799a      	ldrb	r2, [r3, #6]
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	79da      	ldrb	r2, [r3, #7]
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	7a1a      	ldrb	r2, [r3, #8]
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082f6:	88fb      	ldrh	r3, [r7, #6]
 80082f8:	2b09      	cmp	r3, #9
 80082fa:	f240 809d 	bls.w	8008438 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80082fe:	2309      	movs	r3, #9
 8008300:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008306:	e081      	b.n	800840c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008308:	f107 0316 	add.w	r3, r7, #22
 800830c:	4619      	mov	r1, r3
 800830e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008310:	f000 f9e7 	bl	80086e2 <USBH_GetNextDesc>
 8008314:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	2b04      	cmp	r3, #4
 800831c:	d176      	bne.n	800840c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b09      	cmp	r3, #9
 8008324:	d002      	beq.n	800832c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008328:	2209      	movs	r2, #9
 800832a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800832c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008330:	221a      	movs	r2, #26
 8008332:	fb02 f303 	mul.w	r3, r2, r3
 8008336:	3308      	adds	r3, #8
 8008338:	6a3a      	ldr	r2, [r7, #32]
 800833a:	4413      	add	r3, r2
 800833c:	3302      	adds	r3, #2
 800833e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008342:	69f8      	ldr	r0, [r7, #28]
 8008344:	f000 f87e 	bl	8008444 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800834e:	2300      	movs	r3, #0
 8008350:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008352:	e043      	b.n	80083dc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008354:	f107 0316 	add.w	r3, r7, #22
 8008358:	4619      	mov	r1, r3
 800835a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800835c:	f000 f9c1 	bl	80086e2 <USBH_GetNextDesc>
 8008360:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	2b05      	cmp	r3, #5
 8008368:	d138      	bne.n	80083dc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	795b      	ldrb	r3, [r3, #5]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d113      	bne.n	800839a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008376:	2b02      	cmp	r3, #2
 8008378:	d003      	beq.n	8008382 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	799b      	ldrb	r3, [r3, #6]
 800837e:	2b03      	cmp	r3, #3
 8008380:	d10b      	bne.n	800839a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	79db      	ldrb	r3, [r3, #7]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10b      	bne.n	80083a2 <USBH_ParseCfgDesc+0x14e>
 800838a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	2b09      	cmp	r3, #9
 8008390:	d007      	beq.n	80083a2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008394:	2209      	movs	r2, #9
 8008396:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008398:	e003      	b.n	80083a2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800839a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839c:	2207      	movs	r2, #7
 800839e:	701a      	strb	r2, [r3, #0]
 80083a0:	e000      	b.n	80083a4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80083a2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80083a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083a8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083ac:	3201      	adds	r2, #1
 80083ae:	00d2      	lsls	r2, r2, #3
 80083b0:	211a      	movs	r1, #26
 80083b2:	fb01 f303 	mul.w	r3, r1, r3
 80083b6:	4413      	add	r3, r2
 80083b8:	3308      	adds	r3, #8
 80083ba:	6a3a      	ldr	r2, [r7, #32]
 80083bc:	4413      	add	r3, r2
 80083be:	3304      	adds	r3, #4
 80083c0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80083c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083c4:	69b9      	ldr	r1, [r7, #24]
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 f870 	bl	80084ac <USBH_ParseEPDesc>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80083d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083d6:	3301      	adds	r3, #1
 80083d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	791b      	ldrb	r3, [r3, #4]
 80083e0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d204      	bcs.n	80083f2 <USBH_ParseCfgDesc+0x19e>
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	885a      	ldrh	r2, [r3, #2]
 80083ec:	8afb      	ldrh	r3, [r7, #22]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d8b0      	bhi.n	8008354 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	791b      	ldrb	r3, [r3, #4]
 80083f6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d201      	bcs.n	8008402 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80083fe:	2303      	movs	r3, #3
 8008400:	e01c      	b.n	800843c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008406:	3301      	adds	r3, #1
 8008408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800840c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008410:	2b01      	cmp	r3, #1
 8008412:	d805      	bhi.n	8008420 <USBH_ParseCfgDesc+0x1cc>
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	885a      	ldrh	r2, [r3, #2]
 8008418:	8afb      	ldrh	r3, [r7, #22]
 800841a:	429a      	cmp	r2, r3
 800841c:	f63f af74 	bhi.w	8008308 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	791b      	ldrb	r3, [r3, #4]
 8008424:	2b02      	cmp	r3, #2
 8008426:	bf28      	it	cs
 8008428:	2302      	movcs	r3, #2
 800842a:	b2db      	uxtb	r3, r3
 800842c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008430:	429a      	cmp	r2, r3
 8008432:	d201      	bcs.n	8008438 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008434:	2303      	movs	r3, #3
 8008436:	e001      	b.n	800843c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008438:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800843c:	4618      	mov	r0, r3
 800843e:	3730      	adds	r7, #48	@ 0x30
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	785a      	ldrb	r2, [r3, #1]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	789a      	ldrb	r2, [r3, #2]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	78da      	ldrb	r2, [r3, #3]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	3304      	adds	r3, #4
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b02      	cmp	r3, #2
 8008476:	bf28      	it	cs
 8008478:	2302      	movcs	r3, #2
 800847a:	b2da      	uxtb	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	795a      	ldrb	r2, [r3, #5]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	799a      	ldrb	r2, [r3, #6]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	79da      	ldrb	r2, [r3, #7]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	7a1a      	ldrb	r2, [r3, #8]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	721a      	strb	r2, [r3, #8]
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	781a      	ldrb	r2, [r3, #0]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	785a      	ldrb	r2, [r3, #1]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	789a      	ldrb	r2, [r3, #2]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	78da      	ldrb	r2, [r3, #3]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3304      	adds	r3, #4
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3305      	adds	r3, #5
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4313      	orrs	r3, r2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	799a      	ldrb	r2, [r3, #6]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	889b      	ldrh	r3, [r3, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d009      	beq.n	800851a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800850a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800850e:	d804      	bhi.n	800851a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008518:	d901      	bls.n	800851e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800851a:	2303      	movs	r3, #3
 800851c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008524:	2b00      	cmp	r3, #0
 8008526:	d136      	bne.n	8008596 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	78db      	ldrb	r3, [r3, #3]
 800852c:	f003 0303 	and.w	r3, r3, #3
 8008530:	2b02      	cmp	r3, #2
 8008532:	d108      	bne.n	8008546 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	889b      	ldrh	r3, [r3, #4]
 8008538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800853c:	f240 8097 	bls.w	800866e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008540:	2303      	movs	r3, #3
 8008542:	75fb      	strb	r3, [r7, #23]
 8008544:	e093      	b.n	800866e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	78db      	ldrb	r3, [r3, #3]
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d107      	bne.n	8008562 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	2b40      	cmp	r3, #64	@ 0x40
 8008558:	f240 8089 	bls.w	800866e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800855c:	2303      	movs	r3, #3
 800855e:	75fb      	strb	r3, [r7, #23]
 8008560:	e085      	b.n	800866e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	78db      	ldrb	r3, [r3, #3]
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	2b01      	cmp	r3, #1
 800856c:	d005      	beq.n	800857a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	78db      	ldrb	r3, [r3, #3]
 8008572:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008576:	2b03      	cmp	r3, #3
 8008578:	d10a      	bne.n	8008590 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	799b      	ldrb	r3, [r3, #6]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <USBH_ParseEPDesc+0xde>
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	799b      	ldrb	r3, [r3, #6]
 8008586:	2b10      	cmp	r3, #16
 8008588:	d970      	bls.n	800866c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800858a:	2303      	movs	r3, #3
 800858c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800858e:	e06d      	b.n	800866c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008590:	2303      	movs	r3, #3
 8008592:	75fb      	strb	r3, [r7, #23]
 8008594:	e06b      	b.n	800866e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800859c:	2b01      	cmp	r3, #1
 800859e:	d13c      	bne.n	800861a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	78db      	ldrb	r3, [r3, #3]
 80085a4:	f003 0303 	and.w	r3, r3, #3
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d005      	beq.n	80085b8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	78db      	ldrb	r3, [r3, #3]
 80085b0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d106      	bne.n	80085c6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	889b      	ldrh	r3, [r3, #4]
 80085bc:	2b40      	cmp	r3, #64	@ 0x40
 80085be:	d956      	bls.n	800866e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085c0:	2303      	movs	r3, #3
 80085c2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085c4:	e053      	b.n	800866e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	78db      	ldrb	r3, [r3, #3]
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d10e      	bne.n	80085f0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	799b      	ldrb	r3, [r3, #6]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80085de:	2b10      	cmp	r3, #16
 80085e0:	d803      	bhi.n	80085ea <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80085e6:	2b40      	cmp	r3, #64	@ 0x40
 80085e8:	d941      	bls.n	800866e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085ea:	2303      	movs	r3, #3
 80085ec:	75fb      	strb	r3, [r7, #23]
 80085ee:	e03e      	b.n	800866e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	78db      	ldrb	r3, [r3, #3]
 80085f4:	f003 0303 	and.w	r3, r3, #3
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d10b      	bne.n	8008614 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	799b      	ldrb	r3, [r3, #6]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d004      	beq.n	800860e <USBH_ParseEPDesc+0x162>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	889b      	ldrh	r3, [r3, #4]
 8008608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800860c:	d32f      	bcc.n	800866e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800860e:	2303      	movs	r3, #3
 8008610:	75fb      	strb	r3, [r7, #23]
 8008612:	e02c      	b.n	800866e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008614:	2303      	movs	r3, #3
 8008616:	75fb      	strb	r3, [r7, #23]
 8008618:	e029      	b.n	800866e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008620:	2b02      	cmp	r3, #2
 8008622:	d120      	bne.n	8008666 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	78db      	ldrb	r3, [r3, #3]
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d106      	bne.n	800863e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	889b      	ldrh	r3, [r3, #4]
 8008634:	2b08      	cmp	r3, #8
 8008636:	d01a      	beq.n	800866e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008638:	2303      	movs	r3, #3
 800863a:	75fb      	strb	r3, [r7, #23]
 800863c:	e017      	b.n	800866e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	78db      	ldrb	r3, [r3, #3]
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	2b03      	cmp	r3, #3
 8008648:	d10a      	bne.n	8008660 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	799b      	ldrb	r3, [r3, #6]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d003      	beq.n	800865a <USBH_ParseEPDesc+0x1ae>
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	889b      	ldrh	r3, [r3, #4]
 8008656:	2b08      	cmp	r3, #8
 8008658:	d909      	bls.n	800866e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800865a:	2303      	movs	r3, #3
 800865c:	75fb      	strb	r3, [r7, #23]
 800865e:	e006      	b.n	800866e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008660:	2303      	movs	r3, #3
 8008662:	75fb      	strb	r3, [r7, #23]
 8008664:	e003      	b.n	800866e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008666:	2303      	movs	r3, #3
 8008668:	75fb      	strb	r3, [r7, #23]
 800866a:	e000      	b.n	800866e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800866c:	bf00      	nop
  }

  return status;
 800866e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008670:	4618      	mov	r0, r3
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	4613      	mov	r3, r2
 8008688:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3301      	adds	r3, #1
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b03      	cmp	r3, #3
 8008692:	d120      	bne.n	80086d6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	1e9a      	subs	r2, r3, #2
 800869a:	88fb      	ldrh	r3, [r7, #6]
 800869c:	4293      	cmp	r3, r2
 800869e:	bf28      	it	cs
 80086a0:	4613      	movcs	r3, r2
 80086a2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3302      	adds	r3, #2
 80086a8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80086aa:	2300      	movs	r3, #0
 80086ac:	82fb      	strh	r3, [r7, #22]
 80086ae:	e00b      	b.n	80086c8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80086b0:	8afb      	ldrh	r3, [r7, #22]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4413      	add	r3, r2
 80086b6:	781a      	ldrb	r2, [r3, #0]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	701a      	strb	r2, [r3, #0]
      pdest++;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	3301      	adds	r3, #1
 80086c0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80086c2:	8afb      	ldrh	r3, [r7, #22]
 80086c4:	3302      	adds	r3, #2
 80086c6:	82fb      	strh	r3, [r7, #22]
 80086c8:	8afa      	ldrh	r2, [r7, #22]
 80086ca:	8abb      	ldrh	r3, [r7, #20]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d3ef      	bcc.n	80086b0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
  }
}
 80086d6:	bf00      	nop
 80086d8:	371c      	adds	r7, #28
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	7812      	ldrb	r2, [r2, #0]
 80086f4:	4413      	add	r3, r2
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4413      	add	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008708:	68fb      	ldr	r3, [r7, #12]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b086      	sub	sp, #24
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	4613      	mov	r3, r2
 8008722:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008724:	2301      	movs	r3, #1
 8008726:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	789b      	ldrb	r3, [r3, #2]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d002      	beq.n	8008736 <USBH_CtlReq+0x20>
 8008730:	2b02      	cmp	r3, #2
 8008732:	d00f      	beq.n	8008754 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008734:	e027      	b.n	8008786 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	88fa      	ldrh	r2, [r7, #6]
 8008740:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2201      	movs	r2, #1
 8008746:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2202      	movs	r2, #2
 800874c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800874e:	2301      	movs	r3, #1
 8008750:	75fb      	strb	r3, [r7, #23]
      break;
 8008752:	e018      	b.n	8008786 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 f81b 	bl	8008790 <USBH_HandleControl>
 800875a:	4603      	mov	r3, r0
 800875c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <USBH_CtlReq+0x54>
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	2b03      	cmp	r3, #3
 8008768:	d106      	bne.n	8008778 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	761a      	strb	r2, [r3, #24]
      break;
 8008776:	e005      	b.n	8008784 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	2b02      	cmp	r3, #2
 800877c:	d102      	bne.n	8008784 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2201      	movs	r2, #1
 8008782:	709a      	strb	r2, [r3, #2]
      break;
 8008784:	bf00      	nop
  }
  return status;
 8008786:	7dfb      	ldrb	r3, [r7, #23]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af02      	add	r7, sp, #8
 8008796:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008798:	2301      	movs	r3, #1
 800879a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800879c:	2300      	movs	r3, #0
 800879e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	7e1b      	ldrb	r3, [r3, #24]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	2b0a      	cmp	r3, #10
 80087a8:	f200 8156 	bhi.w	8008a58 <USBH_HandleControl+0x2c8>
 80087ac:	a201      	add	r2, pc, #4	@ (adr r2, 80087b4 <USBH_HandleControl+0x24>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087e1 	.word	0x080087e1
 80087b8:	080087fb 	.word	0x080087fb
 80087bc:	08008865 	.word	0x08008865
 80087c0:	0800888b 	.word	0x0800888b
 80087c4:	080088c3 	.word	0x080088c3
 80087c8:	080088ed 	.word	0x080088ed
 80087cc:	0800893f 	.word	0x0800893f
 80087d0:	08008961 	.word	0x08008961
 80087d4:	0800899d 	.word	0x0800899d
 80087d8:	080089c3 	.word	0x080089c3
 80087dc:	08008a01 	.word	0x08008a01
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f103 0110 	add.w	r1, r3, #16
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	795b      	ldrb	r3, [r3, #5]
 80087ea:	461a      	mov	r2, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f943 	bl	8008a78 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2202      	movs	r2, #2
 80087f6:	761a      	strb	r2, [r3, #24]
      break;
 80087f8:	e139      	b.n	8008a6e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	795b      	ldrb	r3, [r3, #5]
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fcc5 	bl	8009190 <USBH_LL_GetURBState>
 8008806:	4603      	mov	r3, r0
 8008808:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d11e      	bne.n	800884e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7c1b      	ldrb	r3, [r3, #16]
 8008814:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008818:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	8adb      	ldrh	r3, [r3, #22]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00a      	beq.n	8008838 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008822:	7b7b      	ldrb	r3, [r7, #13]
 8008824:	2b80      	cmp	r3, #128	@ 0x80
 8008826:	d103      	bne.n	8008830 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2203      	movs	r2, #3
 800882c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800882e:	e115      	b.n	8008a5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2205      	movs	r2, #5
 8008834:	761a      	strb	r2, [r3, #24]
      break;
 8008836:	e111      	b.n	8008a5c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008838:	7b7b      	ldrb	r3, [r7, #13]
 800883a:	2b80      	cmp	r3, #128	@ 0x80
 800883c:	d103      	bne.n	8008846 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2209      	movs	r2, #9
 8008842:	761a      	strb	r2, [r3, #24]
      break;
 8008844:	e10a      	b.n	8008a5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2207      	movs	r2, #7
 800884a:	761a      	strb	r2, [r3, #24]
      break;
 800884c:	e106      	b.n	8008a5c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800884e:	7bbb      	ldrb	r3, [r7, #14]
 8008850:	2b04      	cmp	r3, #4
 8008852:	d003      	beq.n	800885c <USBH_HandleControl+0xcc>
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	2b02      	cmp	r3, #2
 8008858:	f040 8100 	bne.w	8008a5c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	220b      	movs	r2, #11
 8008860:	761a      	strb	r2, [r3, #24]
      break;
 8008862:	e0fb      	b.n	8008a5c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800886a:	b29a      	uxth	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6899      	ldr	r1, [r3, #8]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	899a      	ldrh	r2, [r3, #12]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	791b      	ldrb	r3, [r3, #4]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f93a 	bl	8008af6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2204      	movs	r2, #4
 8008886:	761a      	strb	r2, [r3, #24]
      break;
 8008888:	e0f1      	b.n	8008a6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	791b      	ldrb	r3, [r3, #4]
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fc7d 	bl	8009190 <USBH_LL_GetURBState>
 8008896:	4603      	mov	r3, r0
 8008898:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d102      	bne.n	80088a6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2209      	movs	r2, #9
 80088a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80088a6:	7bbb      	ldrb	r3, [r7, #14]
 80088a8:	2b05      	cmp	r3, #5
 80088aa:	d102      	bne.n	80088b2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80088ac:	2303      	movs	r3, #3
 80088ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088b0:	e0d6      	b.n	8008a60 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	f040 80d3 	bne.w	8008a60 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	220b      	movs	r2, #11
 80088be:	761a      	strb	r2, [r3, #24]
      break;
 80088c0:	e0ce      	b.n	8008a60 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6899      	ldr	r1, [r3, #8]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	899a      	ldrh	r2, [r3, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	795b      	ldrb	r3, [r3, #5]
 80088ce:	2001      	movs	r0, #1
 80088d0:	9000      	str	r0, [sp, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f8ea 	bl	8008aac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2206      	movs	r2, #6
 80088e8:	761a      	strb	r2, [r3, #24]
      break;
 80088ea:	e0c0      	b.n	8008a6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	795b      	ldrb	r3, [r3, #5]
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fc4c 	bl	8009190 <USBH_LL_GetURBState>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d103      	bne.n	800890a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2207      	movs	r2, #7
 8008906:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008908:	e0ac      	b.n	8008a64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800890a:	7bbb      	ldrb	r3, [r7, #14]
 800890c:	2b05      	cmp	r3, #5
 800890e:	d105      	bne.n	800891c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	220c      	movs	r2, #12
 8008914:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008916:	2303      	movs	r3, #3
 8008918:	73fb      	strb	r3, [r7, #15]
      break;
 800891a:	e0a3      	b.n	8008a64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d103      	bne.n	800892a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2205      	movs	r2, #5
 8008926:	761a      	strb	r2, [r3, #24]
      break;
 8008928:	e09c      	b.n	8008a64 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800892a:	7bbb      	ldrb	r3, [r7, #14]
 800892c:	2b04      	cmp	r3, #4
 800892e:	f040 8099 	bne.w	8008a64 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	220b      	movs	r2, #11
 8008936:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008938:	2302      	movs	r3, #2
 800893a:	73fb      	strb	r3, [r7, #15]
      break;
 800893c:	e092      	b.n	8008a64 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	791b      	ldrb	r3, [r3, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	2100      	movs	r1, #0
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f8d5 	bl	8008af6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008952:	b29a      	uxth	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2208      	movs	r2, #8
 800895c:	761a      	strb	r2, [r3, #24]

      break;
 800895e:	e086      	b.n	8008a6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	791b      	ldrb	r3, [r3, #4]
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fc12 	bl	8009190 <USBH_LL_GetURBState>
 800896c:	4603      	mov	r3, r0
 800896e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d105      	bne.n	8008982 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	220d      	movs	r2, #13
 800897a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008980:	e072      	b.n	8008a68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b04      	cmp	r3, #4
 8008986:	d103      	bne.n	8008990 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	220b      	movs	r2, #11
 800898c:	761a      	strb	r2, [r3, #24]
      break;
 800898e:	e06b      	b.n	8008a68 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008990:	7bbb      	ldrb	r3, [r7, #14]
 8008992:	2b05      	cmp	r3, #5
 8008994:	d168      	bne.n	8008a68 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008996:	2303      	movs	r3, #3
 8008998:	73fb      	strb	r3, [r7, #15]
      break;
 800899a:	e065      	b.n	8008a68 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	795b      	ldrb	r3, [r3, #5]
 80089a0:	2201      	movs	r2, #1
 80089a2:	9200      	str	r2, [sp, #0]
 80089a4:	2200      	movs	r2, #0
 80089a6:	2100      	movs	r1, #0
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f87f 	bl	8008aac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	220a      	movs	r2, #10
 80089be:	761a      	strb	r2, [r3, #24]
      break;
 80089c0:	e055      	b.n	8008a6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	795b      	ldrb	r3, [r3, #5]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fbe1 	bl	8009190 <USBH_LL_GetURBState>
 80089ce:	4603      	mov	r3, r0
 80089d0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d105      	bne.n	80089e4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	220d      	movs	r2, #13
 80089e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089e2:	e043      	b.n	8008a6c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d103      	bne.n	80089f2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2209      	movs	r2, #9
 80089ee:	761a      	strb	r2, [r3, #24]
      break;
 80089f0:	e03c      	b.n	8008a6c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	d139      	bne.n	8008a6c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	220b      	movs	r2, #11
 80089fc:	761a      	strb	r2, [r3, #24]
      break;
 80089fe:	e035      	b.n	8008a6c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	7e5b      	ldrb	r3, [r3, #25]
 8008a04:	3301      	adds	r3, #1
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	765a      	strb	r2, [r3, #25]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7e5b      	ldrb	r3, [r3, #25]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d806      	bhi.n	8008a22 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008a20:	e025      	b.n	8008a6e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a28:	2106      	movs	r1, #6
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	795b      	ldrb	r3, [r3, #5]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f90c 	bl	8008c58 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	791b      	ldrb	r3, [r3, #4]
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f906 	bl	8008c58 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a52:	2302      	movs	r3, #2
 8008a54:	73fb      	strb	r3, [r7, #15]
      break;
 8008a56:	e00a      	b.n	8008a6e <USBH_HandleControl+0x2de>

    default:
      break;
 8008a58:	bf00      	nop
 8008a5a:	e008      	b.n	8008a6e <USBH_HandleControl+0x2de>
      break;
 8008a5c:	bf00      	nop
 8008a5e:	e006      	b.n	8008a6e <USBH_HandleControl+0x2de>
      break;
 8008a60:	bf00      	nop
 8008a62:	e004      	b.n	8008a6e <USBH_HandleControl+0x2de>
      break;
 8008a64:	bf00      	nop
 8008a66:	e002      	b.n	8008a6e <USBH_HandleControl+0x2de>
      break;
 8008a68:	bf00      	nop
 8008a6a:	e000      	b.n	8008a6e <USBH_HandleControl+0x2de>
      break;
 8008a6c:	bf00      	nop
  }

  return status;
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af04      	add	r7, sp, #16
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	4613      	mov	r3, r2
 8008a84:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a86:	79f9      	ldrb	r1, [r7, #7]
 8008a88:	2300      	movs	r3, #0
 8008a8a:	9303      	str	r3, [sp, #12]
 8008a8c:	2308      	movs	r3, #8
 8008a8e:	9302      	str	r3, [sp, #8]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	9301      	str	r3, [sp, #4]
 8008a94:	2300      	movs	r3, #0
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	2300      	movs	r3, #0
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 fb46 	bl	800912e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af04      	add	r7, sp, #16
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	461a      	mov	r2, r3
 8008aba:	460b      	mov	r3, r1
 8008abc:	80fb      	strh	r3, [r7, #6]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008acc:	2300      	movs	r3, #0
 8008ace:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ad0:	7979      	ldrb	r1, [r7, #5]
 8008ad2:	7e3b      	ldrb	r3, [r7, #24]
 8008ad4:	9303      	str	r3, [sp, #12]
 8008ad6:	88fb      	ldrh	r3, [r7, #6]
 8008ad8:	9302      	str	r3, [sp, #8]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	2301      	movs	r3, #1
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 fb21 	bl	800912e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b088      	sub	sp, #32
 8008afa:	af04      	add	r7, sp, #16
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	4611      	mov	r1, r2
 8008b02:	461a      	mov	r2, r3
 8008b04:	460b      	mov	r3, r1
 8008b06:	80fb      	strh	r3, [r7, #6]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b0c:	7979      	ldrb	r1, [r7, #5]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9303      	str	r3, [sp, #12]
 8008b12:	88fb      	ldrh	r3, [r7, #6]
 8008b14:	9302      	str	r3, [sp, #8]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	2201      	movs	r2, #1
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fb03 	bl	800912e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b28:	2300      	movs	r3, #0

}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b088      	sub	sp, #32
 8008b36:	af04      	add	r7, sp, #16
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	461a      	mov	r2, r3
 8008b40:	460b      	mov	r3, r1
 8008b42:	80fb      	strh	r3, [r7, #6]
 8008b44:	4613      	mov	r3, r2
 8008b46:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b56:	7979      	ldrb	r1, [r7, #5]
 8008b58:	7e3b      	ldrb	r3, [r7, #24]
 8008b5a:	9303      	str	r3, [sp, #12]
 8008b5c:	88fb      	ldrh	r3, [r7, #6]
 8008b5e:	9302      	str	r3, [sp, #8]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	2301      	movs	r3, #1
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	2302      	movs	r3, #2
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 fade 	bl	800912e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af04      	add	r7, sp, #16
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4611      	mov	r1, r2
 8008b88:	461a      	mov	r2, r3
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	80fb      	strh	r3, [r7, #6]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b92:	7979      	ldrb	r1, [r7, #5]
 8008b94:	2300      	movs	r3, #0
 8008b96:	9303      	str	r3, [sp, #12]
 8008b98:	88fb      	ldrh	r3, [r7, #6]
 8008b9a:	9302      	str	r3, [sp, #8]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	9301      	str	r3, [sp, #4]
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 fac0 	bl	800912e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af04      	add	r7, sp, #16
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	4608      	mov	r0, r1
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	70fb      	strb	r3, [r7, #3]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70bb      	strb	r3, [r7, #2]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008bd2:	7878      	ldrb	r0, [r7, #1]
 8008bd4:	78ba      	ldrb	r2, [r7, #2]
 8008bd6:	78f9      	ldrb	r1, [r7, #3]
 8008bd8:	8b3b      	ldrh	r3, [r7, #24]
 8008bda:	9302      	str	r3, [sp, #8]
 8008bdc:	7d3b      	ldrb	r3, [r7, #20]
 8008bde:	9301      	str	r3, [sp, #4]
 8008be0:	7c3b      	ldrb	r3, [r7, #16]
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	4603      	mov	r3, r0
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fa53 	bl	8009092 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b082      	sub	sp, #8
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008c02:	78fb      	ldrb	r3, [r7, #3]
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa72 	bl	80090f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f836 	bl	8008c94 <USBH_GetFreePipe>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008c2c:	89fb      	ldrh	r3, [r7, #14]
 8008c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d00a      	beq.n	8008c4c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	89fb      	ldrh	r3, [r7, #14]
 8008c3a:	f003 030f 	and.w	r3, r3, #15
 8008c3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c42:	6879      	ldr	r1, [r7, #4]
 8008c44:	33e0      	adds	r3, #224	@ 0xe0
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	440b      	add	r3, r1
 8008c4a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c4c:	89fb      	ldrh	r3, [r7, #14]
 8008c4e:	b2db      	uxtb	r3, r3
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	2b0f      	cmp	r3, #15
 8008c68:	d80d      	bhi.n	8008c86 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	33e0      	adds	r3, #224	@ 0xe0
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	78fb      	ldrb	r3, [r7, #3]
 8008c78:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	33e0      	adds	r3, #224	@ 0xe0
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	440b      	add	r3, r1
 8008c84:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
 8008ca4:	e00f      	b.n	8008cc6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	33e0      	adds	r3, #224	@ 0xe0
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d102      	bne.n	8008cc0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	e007      	b.n	8008cd0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	73fb      	strb	r3, [r7, #15]
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b0f      	cmp	r3, #15
 8008cca:	d9ec      	bls.n	8008ca6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008ccc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	490e      	ldr	r1, [pc, #56]	@ (8008d1c <MX_USB_HOST_Init+0x40>)
 8008ce4:	480e      	ldr	r0, [pc, #56]	@ (8008d20 <MX_USB_HOST_Init+0x44>)
 8008ce6:	f7fe fb15 	bl	8007314 <USBH_Init>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008cf0:	f7f7 fe86 	bl	8000a00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008cf4:	490b      	ldr	r1, [pc, #44]	@ (8008d24 <MX_USB_HOST_Init+0x48>)
 8008cf6:	480a      	ldr	r0, [pc, #40]	@ (8008d20 <MX_USB_HOST_Init+0x44>)
 8008cf8:	f7fe fbb9 	bl	800746e <USBH_RegisterClass>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008d02:	f7f7 fe7d 	bl	8000a00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008d06:	4806      	ldr	r0, [pc, #24]	@ (8008d20 <MX_USB_HOST_Init+0x44>)
 8008d08:	f7fe fc3d 	bl	8007586 <USBH_Start>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008d12:	f7f7 fe75 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008d16:	bf00      	nop
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	08008d3d 	.word	0x08008d3d
 8008d20:	200001e0 	.word	0x200001e0
 8008d24:	2000000c 	.word	0x2000000c

08008d28 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d2c:	4802      	ldr	r0, [pc, #8]	@ (8008d38 <MX_USB_HOST_Process+0x10>)
 8008d2e:	f7fe fc3b 	bl	80075a8 <USBH_Process>
}
 8008d32:	bf00      	nop
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	200001e0 	.word	0x200001e0

08008d3c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d819      	bhi.n	8008d84 <USBH_UserProcess+0x48>
 8008d50:	a201      	add	r2, pc, #4	@ (adr r2, 8008d58 <USBH_UserProcess+0x1c>)
 8008d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d56:	bf00      	nop
 8008d58:	08008d85 	.word	0x08008d85
 8008d5c:	08008d75 	.word	0x08008d75
 8008d60:	08008d85 	.word	0x08008d85
 8008d64:	08008d7d 	.word	0x08008d7d
 8008d68:	08008d6d 	.word	0x08008d6d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d6c:	4b09      	ldr	r3, [pc, #36]	@ (8008d94 <USBH_UserProcess+0x58>)
 8008d6e:	2203      	movs	r2, #3
 8008d70:	701a      	strb	r2, [r3, #0]
  break;
 8008d72:	e008      	b.n	8008d86 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d74:	4b07      	ldr	r3, [pc, #28]	@ (8008d94 <USBH_UserProcess+0x58>)
 8008d76:	2202      	movs	r2, #2
 8008d78:	701a      	strb	r2, [r3, #0]
  break;
 8008d7a:	e004      	b.n	8008d86 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d7c:	4b05      	ldr	r3, [pc, #20]	@ (8008d94 <USBH_UserProcess+0x58>)
 8008d7e:	2201      	movs	r2, #1
 8008d80:	701a      	strb	r2, [r3, #0]
  break;
 8008d82:	e000      	b.n	8008d86 <USBH_UserProcess+0x4a>

  default:
  break;
 8008d84:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d86:	bf00      	nop
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	200005b8 	.word	0x200005b8

08008d98 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08a      	sub	sp, #40	@ 0x28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008da0:	f107 0314 	add.w	r3, r7, #20
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	605a      	str	r2, [r3, #4]
 8008daa:	609a      	str	r2, [r3, #8]
 8008dac:	60da      	str	r2, [r3, #12]
 8008dae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008db8:	d147      	bne.n	8008e4a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dba:	2300      	movs	r3, #0
 8008dbc:	613b      	str	r3, [r7, #16]
 8008dbe:	4b25      	ldr	r3, [pc, #148]	@ (8008e54 <HAL_HCD_MspInit+0xbc>)
 8008dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc2:	4a24      	ldr	r2, [pc, #144]	@ (8008e54 <HAL_HCD_MspInit+0xbc>)
 8008dc4:	f043 0301 	orr.w	r3, r3, #1
 8008dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dca:	4b22      	ldr	r3, [pc, #136]	@ (8008e54 <HAL_HCD_MspInit+0xbc>)
 8008dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	613b      	str	r3, [r7, #16]
 8008dd4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008de0:	2300      	movs	r3, #0
 8008de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008de4:	f107 0314 	add.w	r3, r7, #20
 8008de8:	4619      	mov	r1, r3
 8008dea:	481b      	ldr	r0, [pc, #108]	@ (8008e58 <HAL_HCD_MspInit+0xc0>)
 8008dec:	f7f8 fe6c 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008df0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008df6:	2302      	movs	r3, #2
 8008df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e02:	230a      	movs	r3, #10
 8008e04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e06:	f107 0314 	add.w	r3, r7, #20
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4812      	ldr	r0, [pc, #72]	@ (8008e58 <HAL_HCD_MspInit+0xc0>)
 8008e0e:	f7f8 fe5b 	bl	8001ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e12:	4b10      	ldr	r3, [pc, #64]	@ (8008e54 <HAL_HCD_MspInit+0xbc>)
 8008e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e16:	4a0f      	ldr	r2, [pc, #60]	@ (8008e54 <HAL_HCD_MspInit+0xbc>)
 8008e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e1c:	6353      	str	r3, [r2, #52]	@ 0x34
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60fb      	str	r3, [r7, #12]
 8008e22:	4b0c      	ldr	r3, [pc, #48]	@ (8008e54 <HAL_HCD_MspInit+0xbc>)
 8008e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e26:	4a0b      	ldr	r2, [pc, #44]	@ (8008e54 <HAL_HCD_MspInit+0xbc>)
 8008e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e2e:	4b09      	ldr	r3, [pc, #36]	@ (8008e54 <HAL_HCD_MspInit+0xbc>)
 8008e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	2043      	movs	r0, #67	@ 0x43
 8008e40:	f7f8 fe0b 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e44:	2043      	movs	r0, #67	@ 0x43
 8008e46:	f7f8 fe24 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e4a:	bf00      	nop
 8008e4c:	3728      	adds	r7, #40	@ 0x28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	40023800 	.word	0x40023800
 8008e58:	40020000 	.word	0x40020000

08008e5c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe ff73 	bl	8007d56 <USBH_LL_IncTimer>
}
 8008e70:	bf00      	nop
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe ffab 	bl	8007de2 <USBH_LL_Connect>
}
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fe ffb4 	bl	8007e10 <USBH_LL_Disconnect>
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe ff65 	bl	8007daa <USBH_LL_PortEnabled>
}
 8008ee0:	bf00      	nop
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe ff65 	bl	8007dc6 <USBH_LL_PortDisabled>
}
 8008efc:	bf00      	nop
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d12a      	bne.n	8008f6c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008f16:	4a18      	ldr	r2, [pc, #96]	@ (8008f78 <USBH_LL_Init+0x74>)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a15      	ldr	r2, [pc, #84]	@ (8008f78 <USBH_LL_Init+0x74>)
 8008f22:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f26:	4b14      	ldr	r3, [pc, #80]	@ (8008f78 <USBH_LL_Init+0x74>)
 8008f28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f2c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008f2e:	4b12      	ldr	r3, [pc, #72]	@ (8008f78 <USBH_LL_Init+0x74>)
 8008f30:	2208      	movs	r2, #8
 8008f32:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008f34:	4b10      	ldr	r3, [pc, #64]	@ (8008f78 <USBH_LL_Init+0x74>)
 8008f36:	2201      	movs	r2, #1
 8008f38:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008f78 <USBH_LL_Init+0x74>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f40:	4b0d      	ldr	r3, [pc, #52]	@ (8008f78 <USBH_LL_Init+0x74>)
 8008f42:	2202      	movs	r2, #2
 8008f44:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f46:	4b0c      	ldr	r3, [pc, #48]	@ (8008f78 <USBH_LL_Init+0x74>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f4c:	480a      	ldr	r0, [pc, #40]	@ (8008f78 <USBH_LL_Init+0x74>)
 8008f4e:	f7f8 ff70 	bl	8001e32 <HAL_HCD_Init>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f58:	f7f7 fd52 	bl	8000a00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f5c:	4806      	ldr	r0, [pc, #24]	@ (8008f78 <USBH_LL_Init+0x74>)
 8008f5e:	f7f9 fbd1 	bl	8002704 <HAL_HCD_GetCurrentFrame>
 8008f62:	4603      	mov	r3, r0
 8008f64:	4619      	mov	r1, r3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7fe fee6 	bl	8007d38 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	200005bc 	.word	0x200005bc

08008f7c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7f9 fb3e 	bl	8002614 <HAL_HCD_Start>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 f95e 	bl	8009260 <USBH_Get_USB_Status>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7f9 fb46 	bl	800265a <HAL_HCD_Stop>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 f943 	bl	8009260 <USBH_Get_USB_Status>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fde:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7f9 fb90 	bl	8002720 <HAL_HCD_GetCurrentSpeed>
 8009000:	4603      	mov	r3, r0
 8009002:	2b02      	cmp	r3, #2
 8009004:	d00c      	beq.n	8009020 <USBH_LL_GetSpeed+0x38>
 8009006:	2b02      	cmp	r3, #2
 8009008:	d80d      	bhi.n	8009026 <USBH_LL_GetSpeed+0x3e>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <USBH_LL_GetSpeed+0x2c>
 800900e:	2b01      	cmp	r3, #1
 8009010:	d003      	beq.n	800901a <USBH_LL_GetSpeed+0x32>
 8009012:	e008      	b.n	8009026 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009014:	2300      	movs	r3, #0
 8009016:	73fb      	strb	r3, [r7, #15]
    break;
 8009018:	e008      	b.n	800902c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800901a:	2301      	movs	r3, #1
 800901c:	73fb      	strb	r3, [r7, #15]
    break;
 800901e:	e005      	b.n	800902c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009020:	2302      	movs	r3, #2
 8009022:	73fb      	strb	r3, [r7, #15]
    break;
 8009024:	e002      	b.n	800902c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009026:	2301      	movs	r3, #1
 8009028:	73fb      	strb	r3, [r7, #15]
    break;
 800902a:	bf00      	nop
  }
  return  speed;
 800902c:	7bfb      	ldrb	r3, [r7, #15]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800904c:	4618      	mov	r0, r3
 800904e:	f7f9 fb21 	bl	8002694 <HAL_HCD_ResetPort>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 f901 	bl	8009260 <USBH_Get_USB_Status>
 800905e:	4603      	mov	r3, r0
 8009060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009062:	7bbb      	ldrb	r3, [r7, #14]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800907e:	78fa      	ldrb	r2, [r7, #3]
 8009080:	4611      	mov	r1, r2
 8009082:	4618      	mov	r0, r3
 8009084:	f7f9 fb29 	bl	80026da <HAL_HCD_HC_GetXferCount>
 8009088:	4603      	mov	r3, r0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009092:	b590      	push	{r4, r7, lr}
 8009094:	b089      	sub	sp, #36	@ 0x24
 8009096:	af04      	add	r7, sp, #16
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	4608      	mov	r0, r1
 800909c:	4611      	mov	r1, r2
 800909e:	461a      	mov	r2, r3
 80090a0:	4603      	mov	r3, r0
 80090a2:	70fb      	strb	r3, [r7, #3]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70bb      	strb	r3, [r7, #2]
 80090a8:	4613      	mov	r3, r2
 80090aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80090ba:	787c      	ldrb	r4, [r7, #1]
 80090bc:	78ba      	ldrb	r2, [r7, #2]
 80090be:	78f9      	ldrb	r1, [r7, #3]
 80090c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80090c2:	9302      	str	r3, [sp, #8]
 80090c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80090c8:	9301      	str	r3, [sp, #4]
 80090ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	4623      	mov	r3, r4
 80090d2:	f7f8 ff15 	bl	8001f00 <HAL_HCD_HC_Init>
 80090d6:	4603      	mov	r3, r0
 80090d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 f8bf 	bl	8009260 <USBH_Get_USB_Status>
 80090e2:	4603      	mov	r3, r0
 80090e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd90      	pop	{r4, r7, pc}

080090f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800910a:	78fa      	ldrb	r2, [r7, #3]
 800910c:	4611      	mov	r1, r2
 800910e:	4618      	mov	r0, r3
 8009110:	f7f8 ffae 	bl	8002070 <HAL_HCD_HC_Halt>
 8009114:	4603      	mov	r3, r0
 8009116:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	4618      	mov	r0, r3
 800911c:	f000 f8a0 	bl	8009260 <USBH_Get_USB_Status>
 8009120:	4603      	mov	r3, r0
 8009122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009124:	7bbb      	ldrb	r3, [r7, #14]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800912e:	b590      	push	{r4, r7, lr}
 8009130:	b089      	sub	sp, #36	@ 0x24
 8009132:	af04      	add	r7, sp, #16
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	4608      	mov	r0, r1
 8009138:	4611      	mov	r1, r2
 800913a:	461a      	mov	r2, r3
 800913c:	4603      	mov	r3, r0
 800913e:	70fb      	strb	r3, [r7, #3]
 8009140:	460b      	mov	r3, r1
 8009142:	70bb      	strb	r3, [r7, #2]
 8009144:	4613      	mov	r3, r2
 8009146:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009156:	787c      	ldrb	r4, [r7, #1]
 8009158:	78ba      	ldrb	r2, [r7, #2]
 800915a:	78f9      	ldrb	r1, [r7, #3]
 800915c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009160:	9303      	str	r3, [sp, #12]
 8009162:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009164:	9302      	str	r3, [sp, #8]
 8009166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	4623      	mov	r3, r4
 8009172:	f7f8 ffa1 	bl	80020b8 <HAL_HCD_HC_SubmitRequest>
 8009176:	4603      	mov	r3, r0
 8009178:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	4618      	mov	r0, r3
 800917e:	f000 f86f 	bl	8009260 <USBH_Get_USB_Status>
 8009182:	4603      	mov	r3, r0
 8009184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009186:	7bbb      	ldrb	r3, [r7, #14]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	bd90      	pop	{r4, r7, pc}

08009190 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	460b      	mov	r3, r1
 800919a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091a2:	78fa      	ldrb	r2, [r7, #3]
 80091a4:	4611      	mov	r1, r2
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7f9 fa82 	bl	80026b0 <HAL_HCD_HC_GetURBState>
 80091ac:	4603      	mov	r3, r0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b082      	sub	sp, #8
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	460b      	mov	r3, r1
 80091c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d103      	bne.n	80091d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 f872 	bl	80092b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80091d4:	20c8      	movs	r0, #200	@ 0xc8
 80091d6:	f7f7 fec5 	bl	8000f64 <HAL_Delay>
  return USBH_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
 80091f0:	4613      	mov	r3, r2
 80091f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	68f9      	ldr	r1, [r7, #12]
 8009200:	4613      	mov	r3, r2
 8009202:	011b      	lsls	r3, r3, #4
 8009204:	1a9b      	subs	r3, r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	440b      	add	r3, r1
 800920a:	3317      	adds	r3, #23
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00a      	beq.n	8009228 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009212:	78fa      	ldrb	r2, [r7, #3]
 8009214:	68f9      	ldr	r1, [r7, #12]
 8009216:	4613      	mov	r3, r2
 8009218:	011b      	lsls	r3, r3, #4
 800921a:	1a9b      	subs	r3, r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	440b      	add	r3, r1
 8009220:	333c      	adds	r3, #60	@ 0x3c
 8009222:	78ba      	ldrb	r2, [r7, #2]
 8009224:	701a      	strb	r2, [r3, #0]
 8009226:	e009      	b.n	800923c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009228:	78fa      	ldrb	r2, [r7, #3]
 800922a:	68f9      	ldr	r1, [r7, #12]
 800922c:	4613      	mov	r3, r2
 800922e:	011b      	lsls	r3, r3, #4
 8009230:	1a9b      	subs	r3, r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	440b      	add	r3, r1
 8009236:	333d      	adds	r3, #61	@ 0x3d
 8009238:	78ba      	ldrb	r2, [r7, #2]
 800923a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b082      	sub	sp, #8
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7f7 fe86 	bl	8000f64 <HAL_Delay>
}
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	2b03      	cmp	r3, #3
 8009272:	d817      	bhi.n	80092a4 <USBH_Get_USB_Status+0x44>
 8009274:	a201      	add	r2, pc, #4	@ (adr r2, 800927c <USBH_Get_USB_Status+0x1c>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	0800928d 	.word	0x0800928d
 8009280:	08009293 	.word	0x08009293
 8009284:	08009299 	.word	0x08009299
 8009288:	0800929f 	.word	0x0800929f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
    break;
 8009290:	e00b      	b.n	80092aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009292:	2302      	movs	r3, #2
 8009294:	73fb      	strb	r3, [r7, #15]
    break;
 8009296:	e008      	b.n	80092aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009298:	2301      	movs	r3, #1
 800929a:	73fb      	strb	r3, [r7, #15]
    break;
 800929c:	e005      	b.n	80092aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800929e:	2302      	movs	r3, #2
 80092a0:	73fb      	strb	r3, [r7, #15]
    break;
 80092a2:	e002      	b.n	80092aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80092a4:	2302      	movs	r3, #2
 80092a6:	73fb      	strb	r3, [r7, #15]
    break;
 80092a8:	bf00      	nop
  }
  return usb_status;
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80092c2:	79fb      	ldrb	r3, [r7, #7]
 80092c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80092c6:	79fb      	ldrb	r3, [r7, #7]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d102      	bne.n	80092d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
 80092d0:	e001      	b.n	80092d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80092d2:	2301      	movs	r3, #1
 80092d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	461a      	mov	r2, r3
 80092da:	2101      	movs	r1, #1
 80092dc:	4803      	ldr	r0, [pc, #12]	@ (80092ec <MX_DriverVbusFS+0x34>)
 80092de:	f7f8 fd8f 	bl	8001e00 <HAL_GPIO_WritePin>
}
 80092e2:	bf00      	nop
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	40020800 	.word	0x40020800

080092f0 <malloc>:
 80092f0:	4b02      	ldr	r3, [pc, #8]	@ (80092fc <malloc+0xc>)
 80092f2:	4601      	mov	r1, r0
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	f000 b82d 	b.w	8009354 <_malloc_r>
 80092fa:	bf00      	nop
 80092fc:	2000002c 	.word	0x2000002c

08009300 <free>:
 8009300:	4b02      	ldr	r3, [pc, #8]	@ (800930c <free+0xc>)
 8009302:	4601      	mov	r1, r0
 8009304:	6818      	ldr	r0, [r3, #0]
 8009306:	f000 b8f5 	b.w	80094f4 <_free_r>
 800930a:	bf00      	nop
 800930c:	2000002c 	.word	0x2000002c

08009310 <sbrk_aligned>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	4e0f      	ldr	r6, [pc, #60]	@ (8009350 <sbrk_aligned+0x40>)
 8009314:	460c      	mov	r4, r1
 8009316:	6831      	ldr	r1, [r6, #0]
 8009318:	4605      	mov	r5, r0
 800931a:	b911      	cbnz	r1, 8009322 <sbrk_aligned+0x12>
 800931c:	f000 f8ae 	bl	800947c <_sbrk_r>
 8009320:	6030      	str	r0, [r6, #0]
 8009322:	4621      	mov	r1, r4
 8009324:	4628      	mov	r0, r5
 8009326:	f000 f8a9 	bl	800947c <_sbrk_r>
 800932a:	1c43      	adds	r3, r0, #1
 800932c:	d103      	bne.n	8009336 <sbrk_aligned+0x26>
 800932e:	f04f 34ff 	mov.w	r4, #4294967295
 8009332:	4620      	mov	r0, r4
 8009334:	bd70      	pop	{r4, r5, r6, pc}
 8009336:	1cc4      	adds	r4, r0, #3
 8009338:	f024 0403 	bic.w	r4, r4, #3
 800933c:	42a0      	cmp	r0, r4
 800933e:	d0f8      	beq.n	8009332 <sbrk_aligned+0x22>
 8009340:	1a21      	subs	r1, r4, r0
 8009342:	4628      	mov	r0, r5
 8009344:	f000 f89a 	bl	800947c <_sbrk_r>
 8009348:	3001      	adds	r0, #1
 800934a:	d1f2      	bne.n	8009332 <sbrk_aligned+0x22>
 800934c:	e7ef      	b.n	800932e <sbrk_aligned+0x1e>
 800934e:	bf00      	nop
 8009350:	2000099c 	.word	0x2000099c

08009354 <_malloc_r>:
 8009354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009358:	1ccd      	adds	r5, r1, #3
 800935a:	f025 0503 	bic.w	r5, r5, #3
 800935e:	3508      	adds	r5, #8
 8009360:	2d0c      	cmp	r5, #12
 8009362:	bf38      	it	cc
 8009364:	250c      	movcc	r5, #12
 8009366:	2d00      	cmp	r5, #0
 8009368:	4606      	mov	r6, r0
 800936a:	db01      	blt.n	8009370 <_malloc_r+0x1c>
 800936c:	42a9      	cmp	r1, r5
 800936e:	d904      	bls.n	800937a <_malloc_r+0x26>
 8009370:	230c      	movs	r3, #12
 8009372:	6033      	str	r3, [r6, #0]
 8009374:	2000      	movs	r0, #0
 8009376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800937a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009450 <_malloc_r+0xfc>
 800937e:	f000 f869 	bl	8009454 <__malloc_lock>
 8009382:	f8d8 3000 	ldr.w	r3, [r8]
 8009386:	461c      	mov	r4, r3
 8009388:	bb44      	cbnz	r4, 80093dc <_malloc_r+0x88>
 800938a:	4629      	mov	r1, r5
 800938c:	4630      	mov	r0, r6
 800938e:	f7ff ffbf 	bl	8009310 <sbrk_aligned>
 8009392:	1c43      	adds	r3, r0, #1
 8009394:	4604      	mov	r4, r0
 8009396:	d158      	bne.n	800944a <_malloc_r+0xf6>
 8009398:	f8d8 4000 	ldr.w	r4, [r8]
 800939c:	4627      	mov	r7, r4
 800939e:	2f00      	cmp	r7, #0
 80093a0:	d143      	bne.n	800942a <_malloc_r+0xd6>
 80093a2:	2c00      	cmp	r4, #0
 80093a4:	d04b      	beq.n	800943e <_malloc_r+0xea>
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	4639      	mov	r1, r7
 80093aa:	4630      	mov	r0, r6
 80093ac:	eb04 0903 	add.w	r9, r4, r3
 80093b0:	f000 f864 	bl	800947c <_sbrk_r>
 80093b4:	4581      	cmp	r9, r0
 80093b6:	d142      	bne.n	800943e <_malloc_r+0xea>
 80093b8:	6821      	ldr	r1, [r4, #0]
 80093ba:	1a6d      	subs	r5, r5, r1
 80093bc:	4629      	mov	r1, r5
 80093be:	4630      	mov	r0, r6
 80093c0:	f7ff ffa6 	bl	8009310 <sbrk_aligned>
 80093c4:	3001      	adds	r0, #1
 80093c6:	d03a      	beq.n	800943e <_malloc_r+0xea>
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	442b      	add	r3, r5
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	f8d8 3000 	ldr.w	r3, [r8]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	bb62      	cbnz	r2, 8009430 <_malloc_r+0xdc>
 80093d6:	f8c8 7000 	str.w	r7, [r8]
 80093da:	e00f      	b.n	80093fc <_malloc_r+0xa8>
 80093dc:	6822      	ldr	r2, [r4, #0]
 80093de:	1b52      	subs	r2, r2, r5
 80093e0:	d420      	bmi.n	8009424 <_malloc_r+0xd0>
 80093e2:	2a0b      	cmp	r2, #11
 80093e4:	d917      	bls.n	8009416 <_malloc_r+0xc2>
 80093e6:	1961      	adds	r1, r4, r5
 80093e8:	42a3      	cmp	r3, r4
 80093ea:	6025      	str	r5, [r4, #0]
 80093ec:	bf18      	it	ne
 80093ee:	6059      	strne	r1, [r3, #4]
 80093f0:	6863      	ldr	r3, [r4, #4]
 80093f2:	bf08      	it	eq
 80093f4:	f8c8 1000 	streq.w	r1, [r8]
 80093f8:	5162      	str	r2, [r4, r5]
 80093fa:	604b      	str	r3, [r1, #4]
 80093fc:	4630      	mov	r0, r6
 80093fe:	f000 f82f 	bl	8009460 <__malloc_unlock>
 8009402:	f104 000b 	add.w	r0, r4, #11
 8009406:	1d23      	adds	r3, r4, #4
 8009408:	f020 0007 	bic.w	r0, r0, #7
 800940c:	1ac2      	subs	r2, r0, r3
 800940e:	bf1c      	itt	ne
 8009410:	1a1b      	subne	r3, r3, r0
 8009412:	50a3      	strne	r3, [r4, r2]
 8009414:	e7af      	b.n	8009376 <_malloc_r+0x22>
 8009416:	6862      	ldr	r2, [r4, #4]
 8009418:	42a3      	cmp	r3, r4
 800941a:	bf0c      	ite	eq
 800941c:	f8c8 2000 	streq.w	r2, [r8]
 8009420:	605a      	strne	r2, [r3, #4]
 8009422:	e7eb      	b.n	80093fc <_malloc_r+0xa8>
 8009424:	4623      	mov	r3, r4
 8009426:	6864      	ldr	r4, [r4, #4]
 8009428:	e7ae      	b.n	8009388 <_malloc_r+0x34>
 800942a:	463c      	mov	r4, r7
 800942c:	687f      	ldr	r7, [r7, #4]
 800942e:	e7b6      	b.n	800939e <_malloc_r+0x4a>
 8009430:	461a      	mov	r2, r3
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	42a3      	cmp	r3, r4
 8009436:	d1fb      	bne.n	8009430 <_malloc_r+0xdc>
 8009438:	2300      	movs	r3, #0
 800943a:	6053      	str	r3, [r2, #4]
 800943c:	e7de      	b.n	80093fc <_malloc_r+0xa8>
 800943e:	230c      	movs	r3, #12
 8009440:	6033      	str	r3, [r6, #0]
 8009442:	4630      	mov	r0, r6
 8009444:	f000 f80c 	bl	8009460 <__malloc_unlock>
 8009448:	e794      	b.n	8009374 <_malloc_r+0x20>
 800944a:	6005      	str	r5, [r0, #0]
 800944c:	e7d6      	b.n	80093fc <_malloc_r+0xa8>
 800944e:	bf00      	nop
 8009450:	200009a0 	.word	0x200009a0

08009454 <__malloc_lock>:
 8009454:	4801      	ldr	r0, [pc, #4]	@ (800945c <__malloc_lock+0x8>)
 8009456:	f000 b84b 	b.w	80094f0 <__retarget_lock_acquire_recursive>
 800945a:	bf00      	nop
 800945c:	20000ae0 	.word	0x20000ae0

08009460 <__malloc_unlock>:
 8009460:	4801      	ldr	r0, [pc, #4]	@ (8009468 <__malloc_unlock+0x8>)
 8009462:	f000 b846 	b.w	80094f2 <__retarget_lock_release_recursive>
 8009466:	bf00      	nop
 8009468:	20000ae0 	.word	0x20000ae0

0800946c <memset>:
 800946c:	4402      	add	r2, r0
 800946e:	4603      	mov	r3, r0
 8009470:	4293      	cmp	r3, r2
 8009472:	d100      	bne.n	8009476 <memset+0xa>
 8009474:	4770      	bx	lr
 8009476:	f803 1b01 	strb.w	r1, [r3], #1
 800947a:	e7f9      	b.n	8009470 <memset+0x4>

0800947c <_sbrk_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4d06      	ldr	r5, [pc, #24]	@ (8009498 <_sbrk_r+0x1c>)
 8009480:	2300      	movs	r3, #0
 8009482:	4604      	mov	r4, r0
 8009484:	4608      	mov	r0, r1
 8009486:	602b      	str	r3, [r5, #0]
 8009488:	f7f7 fc88 	bl	8000d9c <_sbrk>
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	d102      	bne.n	8009496 <_sbrk_r+0x1a>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	b103      	cbz	r3, 8009496 <_sbrk_r+0x1a>
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	20000adc 	.word	0x20000adc

0800949c <__errno>:
 800949c:	4b01      	ldr	r3, [pc, #4]	@ (80094a4 <__errno+0x8>)
 800949e:	6818      	ldr	r0, [r3, #0]
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	2000002c 	.word	0x2000002c

080094a8 <__libc_init_array>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	4d0d      	ldr	r5, [pc, #52]	@ (80094e0 <__libc_init_array+0x38>)
 80094ac:	4c0d      	ldr	r4, [pc, #52]	@ (80094e4 <__libc_init_array+0x3c>)
 80094ae:	1b64      	subs	r4, r4, r5
 80094b0:	10a4      	asrs	r4, r4, #2
 80094b2:	2600      	movs	r6, #0
 80094b4:	42a6      	cmp	r6, r4
 80094b6:	d109      	bne.n	80094cc <__libc_init_array+0x24>
 80094b8:	4d0b      	ldr	r5, [pc, #44]	@ (80094e8 <__libc_init_array+0x40>)
 80094ba:	4c0c      	ldr	r4, [pc, #48]	@ (80094ec <__libc_init_array+0x44>)
 80094bc:	f000 f864 	bl	8009588 <_init>
 80094c0:	1b64      	subs	r4, r4, r5
 80094c2:	10a4      	asrs	r4, r4, #2
 80094c4:	2600      	movs	r6, #0
 80094c6:	42a6      	cmp	r6, r4
 80094c8:	d105      	bne.n	80094d6 <__libc_init_array+0x2e>
 80094ca:	bd70      	pop	{r4, r5, r6, pc}
 80094cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d0:	4798      	blx	r3
 80094d2:	3601      	adds	r6, #1
 80094d4:	e7ee      	b.n	80094b4 <__libc_init_array+0xc>
 80094d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094da:	4798      	blx	r3
 80094dc:	3601      	adds	r6, #1
 80094de:	e7f2      	b.n	80094c6 <__libc_init_array+0x1e>
 80094e0:	080095c4 	.word	0x080095c4
 80094e4:	080095c4 	.word	0x080095c4
 80094e8:	080095c4 	.word	0x080095c4
 80094ec:	080095c8 	.word	0x080095c8

080094f0 <__retarget_lock_acquire_recursive>:
 80094f0:	4770      	bx	lr

080094f2 <__retarget_lock_release_recursive>:
 80094f2:	4770      	bx	lr

080094f4 <_free_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4605      	mov	r5, r0
 80094f8:	2900      	cmp	r1, #0
 80094fa:	d041      	beq.n	8009580 <_free_r+0x8c>
 80094fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009500:	1f0c      	subs	r4, r1, #4
 8009502:	2b00      	cmp	r3, #0
 8009504:	bfb8      	it	lt
 8009506:	18e4      	addlt	r4, r4, r3
 8009508:	f7ff ffa4 	bl	8009454 <__malloc_lock>
 800950c:	4a1d      	ldr	r2, [pc, #116]	@ (8009584 <_free_r+0x90>)
 800950e:	6813      	ldr	r3, [r2, #0]
 8009510:	b933      	cbnz	r3, 8009520 <_free_r+0x2c>
 8009512:	6063      	str	r3, [r4, #4]
 8009514:	6014      	str	r4, [r2, #0]
 8009516:	4628      	mov	r0, r5
 8009518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800951c:	f7ff bfa0 	b.w	8009460 <__malloc_unlock>
 8009520:	42a3      	cmp	r3, r4
 8009522:	d908      	bls.n	8009536 <_free_r+0x42>
 8009524:	6820      	ldr	r0, [r4, #0]
 8009526:	1821      	adds	r1, r4, r0
 8009528:	428b      	cmp	r3, r1
 800952a:	bf01      	itttt	eq
 800952c:	6819      	ldreq	r1, [r3, #0]
 800952e:	685b      	ldreq	r3, [r3, #4]
 8009530:	1809      	addeq	r1, r1, r0
 8009532:	6021      	streq	r1, [r4, #0]
 8009534:	e7ed      	b.n	8009512 <_free_r+0x1e>
 8009536:	461a      	mov	r2, r3
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	b10b      	cbz	r3, 8009540 <_free_r+0x4c>
 800953c:	42a3      	cmp	r3, r4
 800953e:	d9fa      	bls.n	8009536 <_free_r+0x42>
 8009540:	6811      	ldr	r1, [r2, #0]
 8009542:	1850      	adds	r0, r2, r1
 8009544:	42a0      	cmp	r0, r4
 8009546:	d10b      	bne.n	8009560 <_free_r+0x6c>
 8009548:	6820      	ldr	r0, [r4, #0]
 800954a:	4401      	add	r1, r0
 800954c:	1850      	adds	r0, r2, r1
 800954e:	4283      	cmp	r3, r0
 8009550:	6011      	str	r1, [r2, #0]
 8009552:	d1e0      	bne.n	8009516 <_free_r+0x22>
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	6053      	str	r3, [r2, #4]
 800955a:	4408      	add	r0, r1
 800955c:	6010      	str	r0, [r2, #0]
 800955e:	e7da      	b.n	8009516 <_free_r+0x22>
 8009560:	d902      	bls.n	8009568 <_free_r+0x74>
 8009562:	230c      	movs	r3, #12
 8009564:	602b      	str	r3, [r5, #0]
 8009566:	e7d6      	b.n	8009516 <_free_r+0x22>
 8009568:	6820      	ldr	r0, [r4, #0]
 800956a:	1821      	adds	r1, r4, r0
 800956c:	428b      	cmp	r3, r1
 800956e:	bf04      	itt	eq
 8009570:	6819      	ldreq	r1, [r3, #0]
 8009572:	685b      	ldreq	r3, [r3, #4]
 8009574:	6063      	str	r3, [r4, #4]
 8009576:	bf04      	itt	eq
 8009578:	1809      	addeq	r1, r1, r0
 800957a:	6021      	streq	r1, [r4, #0]
 800957c:	6054      	str	r4, [r2, #4]
 800957e:	e7ca      	b.n	8009516 <_free_r+0x22>
 8009580:	bd38      	pop	{r3, r4, r5, pc}
 8009582:	bf00      	nop
 8009584:	200009a0 	.word	0x200009a0

08009588 <_init>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	bf00      	nop
 800958c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958e:	bc08      	pop	{r3}
 8009590:	469e      	mov	lr, r3
 8009592:	4770      	bx	lr

08009594 <_fini>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	bf00      	nop
 8009598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959a:	bc08      	pop	{r3}
 800959c:	469e      	mov	lr, r3
 800959e:	4770      	bx	lr
