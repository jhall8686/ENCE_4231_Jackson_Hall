
ADC_DMA_Multiple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b58  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009ce0  08009ce0  0000ace0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d04  08009d04  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d04  08009d04  0000ad04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d0c  08009d0c  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d0c  08009d0c  0000ad0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d10  08009d10  0000ad10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009d14  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000ad0  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b4c  20000b4c  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b17  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d92  00000000  00000000  00021bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  00025958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6a  00000000  00000000  00026c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024dd7  00000000  00000000  00027aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ac7e  00000000  00000000  0004c881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8690  00000000  00000000  000674ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fb8f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051e4  00000000  00000000  0013fbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008a  00000000  00000000  00144db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009cc8 	.word	0x08009cc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009cc8 	.word	0x08009cc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fd66 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f82a 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9c2 	bl	8000888 <MX_GPIO_Init>
  MX_DMA_Init();
 8000504:	f000 f9a0 	bl	8000848 <MX_DMA_Init>
  MX_I2C1_Init();
 8000508:	f000 f90a 	bl	8000720 <MX_I2C1_Init>
  MX_I2S3_Init();
 800050c:	f000 f936 	bl	800077c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000510:	f000 f964 	bl	80007dc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000514:	f008 ff82 	bl	800941c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000518:	f000 f886 	bl	8000628 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gADC_Values, 4);
 800051c:	2204      	movs	r2, #4
 800051e:	490a      	ldr	r1, [pc, #40]	@ (8000548 <main+0x54>)
 8000520:	480a      	ldr	r0, [pc, #40]	@ (800054c <main+0x58>)
 8000522:	f000 fe2b 	bl	800117c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(gFlag_ADC_Finished) {
 8000526:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <main+0x5c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d007      	beq.n	8000540 <main+0x4c>
		gFlag_ADC_Finished = 0;
 8000530:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <main+0x5c>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gADC_Values, 4);
 8000536:	2204      	movs	r2, #4
 8000538:	4903      	ldr	r1, [pc, #12]	@ (8000548 <main+0x54>)
 800053a:	4804      	ldr	r0, [pc, #16]	@ (800054c <main+0x58>)
 800053c:	f000 fe1e 	bl	800117c <HAL_ADC_Start_DMA>
	}
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000540:	f008 ff92 	bl	8009468 <MX_USB_HOST_Process>
	if(gFlag_ADC_Finished) {
 8000544:	e7ef      	b.n	8000526 <main+0x32>
 8000546:	bf00      	nop
 8000548:	20000234 	.word	0x20000234
 800054c:	20000098 	.word	0x20000098
 8000550:	2000023c 	.word	0x2000023c

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	@ 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	@ 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f009 fb22 	bl	8009bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b28      	ldr	r3, [pc, #160]	@ (8000620 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	4a27      	ldr	r2, [pc, #156]	@ (8000620 <SystemClock_Config+0xcc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	@ 0x40
 8000588:	4b25      	ldr	r3, [pc, #148]	@ (8000620 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a21      	ldr	r2, [pc, #132]	@ (8000624 <SystemClock_Config+0xd0>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c4:	2308      	movs	r3, #8
 80005c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d2:	2307      	movs	r3, #7
 80005d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fee2 	bl	80053a4 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e6:	f000 fa69 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2105      	movs	r1, #5
 8000608:	4618      	mov	r0, r3
 800060a:	f005 f943 	bl	8005894 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000614:	f000 fa52 	bl	8000abc <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	@ 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800063a:	4b36      	ldr	r3, [pc, #216]	@ (8000714 <MX_ADC1_Init+0xec>)
 800063c:	4a36      	ldr	r2, [pc, #216]	@ (8000718 <MX_ADC1_Init+0xf0>)
 800063e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000640:	4b34      	ldr	r3, [pc, #208]	@ (8000714 <MX_ADC1_Init+0xec>)
 8000642:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000646:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000648:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <MX_ADC1_Init+0xec>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800064e:	4b31      	ldr	r3, [pc, #196]	@ (8000714 <MX_ADC1_Init+0xec>)
 8000650:	2201      	movs	r2, #1
 8000652:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000654:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <MX_ADC1_Init+0xec>)
 8000656:	2200      	movs	r2, #0
 8000658:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065a:	4b2e      	ldr	r3, [pc, #184]	@ (8000714 <MX_ADC1_Init+0xec>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <MX_ADC1_Init+0xec>)
 8000664:	2200      	movs	r2, #0
 8000666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000668:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <MX_ADC1_Init+0xec>)
 800066a:	4a2c      	ldr	r2, [pc, #176]	@ (800071c <MX_ADC1_Init+0xf4>)
 800066c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_ADC1_Init+0xec>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000674:	4b27      	ldr	r3, [pc, #156]	@ (8000714 <MX_ADC1_Init+0xec>)
 8000676:	2204      	movs	r2, #4
 8000678:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067a:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_ADC1_Init+0xec>)
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000682:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <MX_ADC1_Init+0xec>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000688:	4822      	ldr	r0, [pc, #136]	@ (8000714 <MX_ADC1_Init+0xec>)
 800068a:	f000 fd33 	bl	80010f4 <HAL_ADC_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000694:	f000 fa12 	bl	8000abc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000698:	2301      	movs	r3, #1
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800069c:	2301      	movs	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006a0:	2307      	movs	r3, #7
 80006a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	481a      	ldr	r0, [pc, #104]	@ (8000714 <MX_ADC1_Init+0xec>)
 80006aa:	f000 fe8b 	bl	80013c4 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006b4:	f000 fa02 	bl	8000abc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4813      	ldr	r0, [pc, #76]	@ (8000714 <MX_ADC1_Init+0xec>)
 80006c6:	f000 fe7d 	bl	80013c4 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006d0:	f000 f9f4 	bl	8000abc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006d4:	2303      	movs	r3, #3
 80006d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80006d8:	2303      	movs	r3, #3
 80006da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <MX_ADC1_Init+0xec>)
 80006e2:	f000 fe6f 	bl	80013c4 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006ec:	f000 f9e6 	bl	8000abc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_ADC1_Init+0xec>)
 80006fe:	f000 fe61 	bl	80013c4 <HAL_ADC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000708:	f000 f9d8 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000098 	.word	0x20000098
 8000718:	40012000 	.word	0x40012000
 800071c:	0f000001 	.word	0x0f000001

08000720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <MX_I2C1_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_I2C1_Init+0x50>)
 800072c:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x58>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_I2C1_Init+0x50>)
 800073e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_I2C1_Init+0x50>)
 800075e:	f004 f83d 	bl	80047dc <HAL_I2C_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 f9a8 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000140 	.word	0x20000140
 8000774:	40005400 	.word	0x40005400
 8000778:	000186a0 	.word	0x000186a0

0800077c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_I2S3_Init+0x54>)
 8000782:	4a14      	ldr	r2, [pc, #80]	@ (80007d4 <MX_I2S3_Init+0x58>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_I2S3_Init+0x54>)
 8000788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800078c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_I2S3_Init+0x54>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000794:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_I2S3_Init+0x54>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <MX_I2S3_Init+0x54>)
 800079c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_I2S3_Init+0x54>)
 80007a4:	4a0c      	ldr	r2, [pc, #48]	@ (80007d8 <MX_I2S3_Init+0x5c>)
 80007a6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_I2S3_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_I2S3_Init+0x54>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_I2S3_Init+0x54>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_I2S3_Init+0x54>)
 80007bc:	f004 f952 	bl	8004a64 <HAL_I2S_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007c6:	f000 f979 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000194 	.word	0x20000194
 80007d4:	40003c00 	.word	0x40003c00
 80007d8:	00017700 	.word	0x00017700

080007dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e0:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_SPI1_Init+0x64>)
 80007e2:	4a18      	ldr	r2, [pc, #96]	@ (8000844 <MX_SPI1_Init+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_SPI1_Init+0x64>)
 80007e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_SPI1_Init+0x64>)
 8000808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800080c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000814:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000820:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_SPI1_Init+0x64>)
 8000828:	220a      	movs	r2, #10
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082c:	4804      	ldr	r0, [pc, #16]	@ (8000840 <MX_SPI1_Init+0x64>)
 800082e:	f005 fb7f 	bl	8005f30 <HAL_SPI_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000838:	f000 f940 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200001dc 	.word	0x200001dc
 8000844:	40013000 	.word	0x40013000

08000848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_DMA_Init+0x3c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a0b      	ldr	r2, [pc, #44]	@ (8000884 <MX_DMA_Init+0x3c>)
 8000858:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_DMA_Init+0x3c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	2038      	movs	r0, #56	@ 0x38
 8000870:	f001 f923 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000874:	2038      	movs	r0, #56	@ 0x38
 8000876:	f001 f93c 	bl	8001af2 <HAL_NVIC_EnableIRQ>

}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	@ 0x30
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	4b78      	ldr	r3, [pc, #480]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a77      	ldr	r2, [pc, #476]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 80008a8:	f043 0310 	orr.w	r3, r3, #16
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b75      	ldr	r3, [pc, #468]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0310 	and.w	r3, r3, #16
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	4b71      	ldr	r3, [pc, #452]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a70      	ldr	r2, [pc, #448]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b6e      	ldr	r3, [pc, #440]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b6a      	ldr	r3, [pc, #424]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a69      	ldr	r2, [pc, #420]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b67      	ldr	r3, [pc, #412]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b63      	ldr	r3, [pc, #396]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a62      	ldr	r2, [pc, #392]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b60      	ldr	r3, [pc, #384]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b5c      	ldr	r3, [pc, #368]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a5b      	ldr	r2, [pc, #364]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b59      	ldr	r3, [pc, #356]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b55      	ldr	r3, [pc, #340]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a54      	ldr	r2, [pc, #336]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b52      	ldr	r3, [pc, #328]	@ (8000a84 <MX_GPIO_Init+0x1fc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	484f      	ldr	r0, [pc, #316]	@ (8000a88 <MX_GPIO_Init+0x200>)
 800094c:	f001 fdf8 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2101      	movs	r1, #1
 8000954:	484d      	ldr	r0, [pc, #308]	@ (8000a8c <MX_GPIO_Init+0x204>)
 8000956:	f001 fdf3 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095a:	2200      	movs	r2, #0
 800095c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000960:	484b      	ldr	r0, [pc, #300]	@ (8000a90 <MX_GPIO_Init+0x208>)
 8000962:	f001 fded 	bl	8002540 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000966:	2308      	movs	r3, #8
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4842      	ldr	r0, [pc, #264]	@ (8000a88 <MX_GPIO_Init+0x200>)
 800097e:	f001 fc43 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000982:	2301      	movs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	483c      	ldr	r0, [pc, #240]	@ (8000a8c <MX_GPIO_Init+0x204>)
 800099a:	f001 fc35 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800099e:	2308      	movs	r3, #8
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ae:	2305      	movs	r3, #5
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4834      	ldr	r0, [pc, #208]	@ (8000a8c <MX_GPIO_Init+0x204>)
 80009ba:	f001 fc25 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009be:	2301      	movs	r3, #1
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4830      	ldr	r0, [pc, #192]	@ (8000a94 <MX_GPIO_Init+0x20c>)
 80009d4:	f001 fc18 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009d8:	2304      	movs	r3, #4
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	482b      	ldr	r0, [pc, #172]	@ (8000a98 <MX_GPIO_Init+0x210>)
 80009ec:	f001 fc0c 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a02:	2305      	movs	r3, #5
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4822      	ldr	r0, [pc, #136]	@ (8000a98 <MX_GPIO_Init+0x210>)
 8000a0e:	f001 fbfb 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000a12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481a      	ldr	r0, [pc, #104]	@ (8000a90 <MX_GPIO_Init+0x208>)
 8000a28:	f001 fbee 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a2c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a30:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4812      	ldr	r0, [pc, #72]	@ (8000a90 <MX_GPIO_Init+0x208>)
 8000a46:	f001 fbdf 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a4a:	2320      	movs	r3, #32
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <MX_GPIO_Init+0x208>)
 8000a5e:	f001 fbd3 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a66:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <MX_GPIO_Init+0x200>)
 8000a78:	f001 fbc6 	bl	8002208 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3730      	adds	r7, #48	@ 0x30
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400

08000a9c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	gFlag_ADC_Finished = 1;
 8000aa4:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	2000023c 	.word	0x2000023c

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <Error_Handler+0x8>

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <HAL_MspInit+0x4c>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	4a08      	ldr	r2, [pc, #32]	@ (8000b14 <HAL_MspInit+0x4c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b06:	2007      	movs	r0, #7
 8000b08:	f000 ffcc 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a3b      	ldr	r2, [pc, #236]	@ (8000c24 <HAL_ADC_MspInit+0x10c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d170      	bne.n	8000c1c <HAL_ADC_MspInit+0x104>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c28 <HAL_ADC_MspInit+0x110>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	4a39      	ldr	r2, [pc, #228]	@ (8000c28 <HAL_ADC_MspInit+0x110>)
 8000b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4a:	4b37      	ldr	r3, [pc, #220]	@ (8000c28 <HAL_ADC_MspInit+0x110>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b33      	ldr	r3, [pc, #204]	@ (8000c28 <HAL_ADC_MspInit+0x110>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a32      	ldr	r2, [pc, #200]	@ (8000c28 <HAL_ADC_MspInit+0x110>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b30      	ldr	r3, [pc, #192]	@ (8000c28 <HAL_ADC_MspInit+0x110>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <HAL_ADC_MspInit+0x110>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c28 <HAL_ADC_MspInit+0x110>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <HAL_ADC_MspInit+0x110>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b8e:	230e      	movs	r3, #14
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b92:	2303      	movs	r3, #3
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4822      	ldr	r0, [pc, #136]	@ (8000c2c <HAL_ADC_MspInit+0x114>)
 8000ba2:	f001 fb31 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000baa:	2303      	movs	r3, #3
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481d      	ldr	r0, [pc, #116]	@ (8000c30 <HAL_ADC_MspInit+0x118>)
 8000bba:	f001 fb25 	bl	8002208 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c38 <HAL_ADC_MspInit+0x120>)
 8000bc2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000bd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bdc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000be0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000be4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000be6:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000be8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000bee:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000c02:	f000 ff91 	bl	8001b28 <HAL_DMA_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000c0c:	f7ff ff56 	bl	8000abc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000c14:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c16:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	@ 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40012000 	.word	0x40012000
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40020400 	.word	0x40020400
 8000c34:	200000e0 	.word	0x200000e0
 8000c38:	40026410 	.word	0x40026410

08000c3c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a19      	ldr	r2, [pc, #100]	@ (8000cc0 <HAL_I2C_MspInit+0x84>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12c      	bne.n	8000cb8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a17      	ldr	r2, [pc, #92]	@ (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c7a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c80:	2312      	movs	r3, #18
 8000c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <HAL_I2C_MspInit+0x8c>)
 8000c98:	f001 fab6 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	4a07      	ldr	r2, [pc, #28]	@ (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000ca6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <HAL_I2C_MspInit+0x88>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	@ 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020400 	.word	0x40020400

08000ccc <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	@ 0x38
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a31      	ldr	r2, [pc, #196]	@ (8000dbc <HAL_I2S_MspInit+0xf0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d15a      	bne.n	8000db2 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d00:	23c0      	movs	r3, #192	@ 0xc0
 8000d02:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f004 ffcd 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d18:	f7ff fed0 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	4b27      	ldr	r3, [pc, #156]	@ (8000dc0 <HAL_I2S_MspInit+0xf4>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	4a26      	ldr	r2, [pc, #152]	@ (8000dc0 <HAL_I2S_MspInit+0xf4>)
 8000d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2c:	4b24      	ldr	r3, [pc, #144]	@ (8000dc0 <HAL_I2S_MspInit+0xf4>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <HAL_I2S_MspInit+0xf4>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc0 <HAL_I2S_MspInit+0xf4>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d48:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <HAL_I2S_MspInit+0xf4>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <HAL_I2S_MspInit+0xf4>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5c:	4a18      	ldr	r2, [pc, #96]	@ (8000dc0 <HAL_I2S_MspInit+0xf4>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <HAL_I2S_MspInit+0xf4>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d70:	2310      	movs	r3, #16
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d80:	2306      	movs	r3, #6
 8000d82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480e      	ldr	r0, [pc, #56]	@ (8000dc4 <HAL_I2S_MspInit+0xf8>)
 8000d8c:	f001 fa3c 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d90:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da2:	2306      	movs	r3, #6
 8000da4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	4806      	ldr	r0, [pc, #24]	@ (8000dc8 <HAL_I2S_MspInit+0xfc>)
 8000dae:	f001 fa2b 	bl	8002208 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000db2:	bf00      	nop
 8000db4:	3738      	adds	r7, #56	@ 0x38
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40003c00 	.word	0x40003c00
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40020800 	.word	0x40020800

08000dcc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a19      	ldr	r2, [pc, #100]	@ (8000e50 <HAL_SPI_MspInit+0x84>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12b      	bne.n	8000e46 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <HAL_SPI_MspInit+0x88>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	4a17      	ldr	r2, [pc, #92]	@ (8000e54 <HAL_SPI_MspInit+0x88>)
 8000df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <HAL_SPI_MspInit+0x88>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <HAL_SPI_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a10      	ldr	r2, [pc, #64]	@ (8000e54 <HAL_SPI_MspInit+0x88>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <HAL_SPI_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e26:	23e0      	movs	r3, #224	@ 0xe0
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e36:	2305      	movs	r3, #5
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <HAL_SPI_MspInit+0x8c>)
 8000e42:	f001 f9e1 	bl	8002208 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	@ 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40013000 	.word	0x40013000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <NMI_Handler+0x4>

08000e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <MemManage_Handler+0x4>

08000e74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb2:	f000 f8db 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ec0:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <DMA2_Stream0_IRQHandler+0x10>)
 8000ec2:	f000 ff37 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200000e0 	.word	0x200000e0

08000ed0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ed4:	4802      	ldr	r0, [pc, #8]	@ (8000ee0 <OTG_FS_IRQHandler+0x10>)
 8000ed6:	f001 fe2d 	bl	8002b34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000624 	.word	0x20000624

08000ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eec:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <_sbrk+0x5c>)
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <_sbrk+0x60>)
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <_sbrk+0x64>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <_sbrk+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d207      	bcs.n	8000f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f14:	f008 fe62 	bl	8009bdc <__errno>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e009      	b.n	8000f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <_sbrk+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20020000 	.word	0x20020000
 8000f44:	00000400 	.word	0x00000400
 8000f48:	20000240 	.word	0x20000240
 8000f4c:	20000b50 	.word	0x20000b50

08000f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f78:	f7ff ffea 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7e:	490d      	ldr	r1, [pc, #52]	@ (8000fb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f80:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f94:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f008 fe21 	bl	8009be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa6:	f7ff faa5 	bl	80004f4 <main>
  bx  lr    
 8000faa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fb8:	08009d14 	.word	0x08009d14
  ldr r2, =_sbss
 8000fbc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fc0:	20000b4c 	.word	0x20000b4c

08000fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC_IRQHandler>
	...

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001008 <HAL_Init+0x40>)
 8000fd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <HAL_Init+0x40>)
 8000fde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	@ (8001008 <HAL_Init+0x40>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 fd57 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f808 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff fd64 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_InitTick+0x54>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_InitTick+0x58>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fd6f 	bl	8001b0e <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 fd37 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	@ (8001068 <HAL_InitTick+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	20000008 	.word	0x20000008
 8001068:	20000004 	.word	0x20000004

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008
 8001090:	20000244 	.word	0x20000244

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000244 	.word	0x20000244

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff ffee 	bl	8001094 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d005      	beq.n	80010d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <HAL_Delay+0x44>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d2:	bf00      	nop
 80010d4:	f7ff ffde 	bl	8001094 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8f7      	bhi.n	80010d4 <HAL_Delay+0x28>
  {
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008

080010f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e033      	b.n	8001172 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	2b00      	cmp	r3, #0
 8001110:	d109      	bne.n	8001126 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff fd00 	bl	8000b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	2b00      	cmp	r3, #0
 8001130:	d118      	bne.n	8001164 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800113a:	f023 0302 	bic.w	r3, r3, #2
 800113e:	f043 0202 	orr.w	r2, r3, #2
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 fa5e 	bl	8001608 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f023 0303 	bic.w	r3, r3, #3
 800115a:	f043 0201 	orr.w	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	641a      	str	r2, [r3, #64]	@ 0x40
 8001162:	e001      	b.n	8001168 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_ADC_Start_DMA+0x1e>
 8001196:	2302      	movs	r3, #2
 8001198:	e0e9      	b.n	800136e <HAL_ADC_Start_DMA+0x1f2>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d018      	beq.n	80011e2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011c0:	4b6d      	ldr	r3, [pc, #436]	@ (8001378 <HAL_ADC_Start_DMA+0x1fc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a6d      	ldr	r2, [pc, #436]	@ (800137c <HAL_ADC_Start_DMA+0x200>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9a      	lsrs	r2, r3, #18
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80011d4:	e002      	b.n	80011dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	3b01      	subs	r3, #1
 80011da:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f9      	bne.n	80011d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011f0:	d107      	bne.n	8001202 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001200:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	f040 80a1 	bne.w	8001354 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800123c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800124c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001250:	d106      	bne.n	8001260 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	f023 0206 	bic.w	r2, r3, #6
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	645a      	str	r2, [r3, #68]	@ 0x44
 800125e:	e002      	b.n	8001266 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800126e:	4b44      	ldr	r3, [pc, #272]	@ (8001380 <HAL_ADC_Start_DMA+0x204>)
 8001270:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001276:	4a43      	ldr	r2, [pc, #268]	@ (8001384 <HAL_ADC_Start_DMA+0x208>)
 8001278:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800127e:	4a42      	ldr	r2, [pc, #264]	@ (8001388 <HAL_ADC_Start_DMA+0x20c>)
 8001280:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001286:	4a41      	ldr	r2, [pc, #260]	@ (800138c <HAL_ADC_Start_DMA+0x210>)
 8001288:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001292:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80012a2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012b2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	334c      	adds	r3, #76	@ 0x4c
 80012be:	4619      	mov	r1, r3
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f000 fcde 	bl	8001c84 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d12a      	bne.n	800132a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001390 <HAL_ADC_Start_DMA+0x214>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d015      	beq.n	800130a <HAL_ADC_Start_DMA+0x18e>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001394 <HAL_ADC_Start_DMA+0x218>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d105      	bne.n	80012f4 <HAL_ADC_Start_DMA+0x178>
 80012e8:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <HAL_ADC_Start_DMA+0x204>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00a      	beq.n	800130a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a27      	ldr	r2, [pc, #156]	@ (8001398 <HAL_ADC_Start_DMA+0x21c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d136      	bne.n	800136c <HAL_ADC_Start_DMA+0x1f0>
 80012fe:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <HAL_ADC_Start_DMA+0x204>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	2b00      	cmp	r3, #0
 8001308:	d130      	bne.n	800136c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d129      	bne.n	800136c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	e020      	b.n	800136c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a18      	ldr	r2, [pc, #96]	@ (8001390 <HAL_ADC_Start_DMA+0x214>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d11b      	bne.n	800136c <HAL_ADC_Start_DMA+0x1f0>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d114      	bne.n	800136c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	e00b      	b.n	800136c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001358:	f043 0210 	orr.w	r2, r3, #16
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001364:	f043 0201 	orr.w	r2, r3, #1
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000000 	.word	0x20000000
 800137c:	431bde83 	.word	0x431bde83
 8001380:	40012300 	.word	0x40012300
 8001384:	08001801 	.word	0x08001801
 8001388:	080018bb 	.word	0x080018bb
 800138c:	080018d7 	.word	0x080018d7
 8001390:	40012000 	.word	0x40012000
 8001394:	40012100 	.word	0x40012100
 8001398:	40012200 	.word	0x40012200

0800139c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x1c>
 80013dc:	2302      	movs	r3, #2
 80013de:	e105      	b.n	80015ec <HAL_ADC_ConfigChannel+0x228>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	d925      	bls.n	800143c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68d9      	ldr	r1, [r3, #12]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	3b1e      	subs	r3, #30
 8001406:	2207      	movs	r2, #7
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43da      	mvns	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	400a      	ands	r2, r1
 8001414:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68d9      	ldr	r1, [r3, #12]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	4603      	mov	r3, r0
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4403      	add	r3, r0
 800142e:	3b1e      	subs	r3, #30
 8001430:	409a      	lsls	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	e022      	b.n	8001482 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6919      	ldr	r1, [r3, #16]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	2207      	movs	r2, #7
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	400a      	ands	r2, r1
 800145e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6919      	ldr	r1, [r3, #16]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	4603      	mov	r3, r0
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4403      	add	r3, r0
 8001478:	409a      	lsls	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b06      	cmp	r3, #6
 8001488:	d824      	bhi.n	80014d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b05      	subs	r3, #5
 800149c:	221f      	movs	r2, #31
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	400a      	ands	r2, r1
 80014aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	3b05      	subs	r3, #5
 80014c6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014d2:	e04c      	b.n	800156e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b0c      	cmp	r3, #12
 80014da:	d824      	bhi.n	8001526 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	3b23      	subs	r3, #35	@ 0x23
 80014ee:	221f      	movs	r2, #31
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43da      	mvns	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	400a      	ands	r2, r1
 80014fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3b23      	subs	r3, #35	@ 0x23
 8001518:	fa00 f203 	lsl.w	r2, r0, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	631a      	str	r2, [r3, #48]	@ 0x30
 8001524:	e023      	b.n	800156e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3b41      	subs	r3, #65	@ 0x41
 8001538:	221f      	movs	r2, #31
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	400a      	ands	r2, r1
 8001546:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	3b41      	subs	r3, #65	@ 0x41
 8001562:	fa00 f203 	lsl.w	r2, r0, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800156e:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <HAL_ADC_ConfigChannel+0x234>)
 8001570:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a21      	ldr	r2, [pc, #132]	@ (80015fc <HAL_ADC_ConfigChannel+0x238>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d109      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1cc>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b12      	cmp	r3, #18
 8001582:	d105      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <HAL_ADC_ConfigChannel+0x238>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d123      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x21e>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b10      	cmp	r3, #16
 80015a0:	d003      	beq.n	80015aa <HAL_ADC_ConfigChannel+0x1e6>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b11      	cmp	r3, #17
 80015a8:	d11b      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b10      	cmp	r3, #16
 80015bc:	d111      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_ADC_ConfigChannel+0x23c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <HAL_ADC_ConfigChannel+0x240>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	0c9a      	lsrs	r2, r3, #18
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015d4:	e002      	b.n	80015dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3b01      	subs	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f9      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40012300 	.word	0x40012300
 80015fc:	40012000 	.word	0x40012000
 8001600:	20000000 	.word	0x20000000
 8001604:	431bde83 	.word	0x431bde83

08001608 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001610:	4b79      	ldr	r3, [pc, #484]	@ (80017f8 <ADC_Init+0x1f0>)
 8001612:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	431a      	orrs	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800163c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	021a      	lsls	r2, r3, #8
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169a:	4a58      	ldr	r2, [pc, #352]	@ (80017fc <ADC_Init+0x1f4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d022      	beq.n	80016e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6899      	ldr	r1, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6899      	ldr	r1, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	e00f      	b.n	8001706 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001704:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0202 	bic.w	r2, r2, #2
 8001714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6899      	ldr	r1, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7e1b      	ldrb	r3, [r3, #24]
 8001720:	005a      	lsls	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d01b      	beq.n	800176c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001742:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001752:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6859      	ldr	r1, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	3b01      	subs	r3, #1
 8001760:	035a      	lsls	r2, r3, #13
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	e007      	b.n	800177c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800177a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800178a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	3b01      	subs	r3, #1
 8001798:	051a      	lsls	r2, r3, #20
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6899      	ldr	r1, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017be:	025a      	lsls	r2, r3, #9
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6899      	ldr	r1, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	029a      	lsls	r2, r3, #10
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	609a      	str	r2, [r3, #8]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40012300 	.word	0x40012300
 80017fc:	0f000001 	.word	0x0f000001

08001800 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800180c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001816:	2b00      	cmp	r3, #0
 8001818:	d13c      	bne.n	8001894 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d12b      	bne.n	800188c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001838:	2b00      	cmp	r3, #0
 800183a:	d127      	bne.n	800188c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001842:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001854:	2b00      	cmp	r3, #0
 8001856:	d119      	bne.n	800188c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0220 	bic.w	r2, r2, #32
 8001866:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	f043 0201 	orr.w	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7ff f905 	bl	8000a9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001892:	e00e      	b.n	80018b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff fd85 	bl	80013b0 <HAL_ADC_ErrorCallback>
}
 80018a6:	e004      	b.n	80018b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f7ff fd67 	bl	800139c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018e2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2240      	movs	r2, #64	@ 0x40
 80018e8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f043 0204 	orr.w	r2, r3, #4
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f7ff fd5a 	bl	80013b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800192c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4907      	ldr	r1, [pc, #28]	@ (80019a0 <__NVIC_EnableIRQ+0x38>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	@ (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	@ 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff8e 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff29 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff3e 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff8e 	bl	80019f8 <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5d 	bl	80019a4 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff31 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffa2 	bl	8001a60 <SysTick_Config>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff faae 	bl	8001094 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e099      	b.n	8001c78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b64:	e00f      	b.n	8001b86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b66:	f7ff fa95 	bl	8001094 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d908      	bls.n	8001b86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2220      	movs	r2, #32
 8001b78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e078      	b.n	8001c78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1e8      	bne.n	8001b66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	4b38      	ldr	r3, [pc, #224]	@ (8001c80 <HAL_DMA_Init+0x158>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d107      	bne.n	8001bf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	4313      	orrs	r3, r2
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f023 0307 	bic.w	r3, r3, #7
 8001c06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d117      	bne.n	8001c4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00e      	beq.n	8001c4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 fa6f 	bl	8002110 <DMA_CheckFifoParam>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2240      	movs	r2, #64	@ 0x40
 8001c3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c46:	2301      	movs	r3, #1
 8001c48:	e016      	b.n	8001c78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fa26 	bl	80020a4 <DMA_CalcBaseAndBitshift>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c60:	223f      	movs	r2, #63	@ 0x3f
 8001c62:	409a      	lsls	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	f010803f 	.word	0xf010803f

08001c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_DMA_Start_IT+0x26>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e040      	b.n	8001d2c <HAL_DMA_Start_IT+0xa8>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d12f      	bne.n	8001d1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f9b8 	bl	8002048 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cdc:	223f      	movs	r2, #63	@ 0x3f
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0216 	orr.w	r2, r2, #22
 8001cf2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d007      	beq.n	8001d0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0208 	orr.w	r2, r2, #8
 8001d0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e005      	b.n	8001d2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d26:	2302      	movs	r3, #2
 8001d28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d40:	4b8e      	ldr	r3, [pc, #568]	@ (8001f7c <HAL_DMA_IRQHandler+0x248>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a8e      	ldr	r2, [pc, #568]	@ (8001f80 <HAL_DMA_IRQHandler+0x24c>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5e:	2208      	movs	r2, #8
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01a      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0204 	bic.w	r2, r2, #4
 8001d86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da4:	2201      	movs	r2, #1
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dce:	f043 0202 	orr.w	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dda:	2204      	movs	r2, #4
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d012      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	2204      	movs	r2, #4
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	2210      	movs	r2, #16
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d043      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d03c      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2e:	2210      	movs	r2, #16
 8001e30:	409a      	lsls	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d018      	beq.n	8001e76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d108      	bne.n	8001e64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d024      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	e01f      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
 8001e74:	e016      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0208 	bic.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 808f 	beq.w	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8087 	beq.w	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eca:	2220      	movs	r2, #32
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d136      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0216 	bic.w	r2, r2, #22
 8001eec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001efc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <HAL_DMA_IRQHandler+0x1da>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f22:	223f      	movs	r2, #63	@ 0x3f
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d07e      	beq.n	8002040 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
        }
        return;
 8001f4a:	e079      	b.n	8002040 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01d      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10d      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d031      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	e02c      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
 8001f7a:	bf00      	nop
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
 8001f94:	e01e      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10f      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0210 	bic.w	r2, r2, #16
 8001fb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d032      	beq.n	8002042 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d022      	beq.n	800202e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2205      	movs	r2, #5
 8001fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3301      	adds	r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	d307      	bcc.n	800201c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f2      	bne.n	8002000 <HAL_DMA_IRQHandler+0x2cc>
 800201a:	e000      	b.n	800201e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800201c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	4798      	blx	r3
 800203e:	e000      	b.n	8002042 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002040:	bf00      	nop
    }
  }
}
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002064:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b40      	cmp	r3, #64	@ 0x40
 8002074:	d108      	bne.n	8002088 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002086:	e007      	b.n	8002098 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	60da      	str	r2, [r3, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	3b10      	subs	r3, #16
 80020b4:	4a14      	ldr	r2, [pc, #80]	@ (8002108 <DMA_CalcBaseAndBitshift+0x64>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020be:	4a13      	ldr	r2, [pc, #76]	@ (800210c <DMA_CalcBaseAndBitshift+0x68>)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d909      	bls.n	80020e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020da:	f023 0303 	bic.w	r3, r3, #3
 80020de:	1d1a      	adds	r2, r3, #4
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80020e4:	e007      	b.n	80020f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	aaaaaaab 	.word	0xaaaaaaab
 800210c:	08009cfc 	.word	0x08009cfc

08002110 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d11f      	bne.n	800216a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d856      	bhi.n	80021de <DMA_CheckFifoParam+0xce>
 8002130:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <DMA_CheckFifoParam+0x28>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	08002149 	.word	0x08002149
 800213c:	0800215b 	.word	0x0800215b
 8002140:	08002149 	.word	0x08002149
 8002144:	080021df 	.word	0x080021df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d046      	beq.n	80021e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002158:	e043      	b.n	80021e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002162:	d140      	bne.n	80021e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002168:	e03d      	b.n	80021e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002172:	d121      	bne.n	80021b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d837      	bhi.n	80021ea <DMA_CheckFifoParam+0xda>
 800217a:	a201      	add	r2, pc, #4	@ (adr r2, 8002180 <DMA_CheckFifoParam+0x70>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	08002191 	.word	0x08002191
 8002184:	08002197 	.word	0x08002197
 8002188:	08002191 	.word	0x08002191
 800218c:	080021a9 	.word	0x080021a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	e030      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d025      	beq.n	80021ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a6:	e022      	b.n	80021ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021b0:	d11f      	bne.n	80021f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021b6:	e01c      	b.n	80021f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d903      	bls.n	80021c6 <DMA_CheckFifoParam+0xb6>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d003      	beq.n	80021cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021c4:	e018      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
      break;
 80021ca:	e015      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00e      	beq.n	80021f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
      break;
 80021dc:	e00b      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      break;
 80021de:	bf00      	nop
 80021e0:	e00a      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021e2:	bf00      	nop
 80021e4:	e008      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021e6:	bf00      	nop
 80021e8:	e006      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ea:	bf00      	nop
 80021ec:	e004      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ee:	bf00      	nop
 80021f0:	e002      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021f6:	bf00      	nop
    }
  } 
  
  return status; 
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	@ 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e16b      	b.n	80024fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 815a 	bne.w	80024f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d005      	beq.n	800225a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002256:	2b02      	cmp	r3, #2
 8002258:	d130      	bne.n	80022bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 0201 	and.w	r2, r3, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d017      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d123      	bne.n	800234c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80b4 	beq.w	80024f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b60      	ldr	r3, [pc, #384]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	4a5f      	ldr	r2, [pc, #380]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239c:	6453      	str	r3, [r2, #68]	@ 0x44
 800239e:	4b5d      	ldr	r3, [pc, #372]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002518 <HAL_GPIO_Init+0x310>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a52      	ldr	r2, [pc, #328]	@ (800251c <HAL_GPIO_Init+0x314>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02b      	beq.n	800242e <HAL_GPIO_Init+0x226>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a51      	ldr	r2, [pc, #324]	@ (8002520 <HAL_GPIO_Init+0x318>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d025      	beq.n	800242a <HAL_GPIO_Init+0x222>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a50      	ldr	r2, [pc, #320]	@ (8002524 <HAL_GPIO_Init+0x31c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <HAL_GPIO_Init+0x21e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002528 <HAL_GPIO_Init+0x320>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d019      	beq.n	8002422 <HAL_GPIO_Init+0x21a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4e      	ldr	r2, [pc, #312]	@ (800252c <HAL_GPIO_Init+0x324>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0x216>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002530 <HAL_GPIO_Init+0x328>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x212>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4c      	ldr	r2, [pc, #304]	@ (8002534 <HAL_GPIO_Init+0x32c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x20e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4b      	ldr	r2, [pc, #300]	@ (8002538 <HAL_GPIO_Init+0x330>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x20a>
 800240e:	2307      	movs	r3, #7
 8002410:	e00e      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002412:	2308      	movs	r3, #8
 8002414:	e00c      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002416:	2306      	movs	r3, #6
 8002418:	e00a      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800241a:	2305      	movs	r3, #5
 800241c:	e008      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800241e:	2304      	movs	r3, #4
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002422:	2303      	movs	r3, #3
 8002424:	e004      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002426:	2302      	movs	r3, #2
 8002428:	e002      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800242e:	2300      	movs	r3, #0
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	f002 0203 	and.w	r2, r2, #3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4093      	lsls	r3, r2
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002440:	4935      	ldr	r1, [pc, #212]	@ (8002518 <HAL_GPIO_Init+0x310>)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244e:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <HAL_GPIO_Init+0x334>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002472:	4a32      	ldr	r2, [pc, #200]	@ (800253c <HAL_GPIO_Init+0x334>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002478:	4b30      	ldr	r3, [pc, #192]	@ (800253c <HAL_GPIO_Init+0x334>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800249c:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_GPIO_Init+0x334>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a2:	4b26      	ldr	r3, [pc, #152]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c6:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f0:	4a12      	ldr	r2, [pc, #72]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	f67f ae90 	bls.w	8002224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40013800 	.word	0x40013800
 800251c:	40020000 	.word	0x40020000
 8002520:	40020400 	.word	0x40020400
 8002524:	40020800 	.word	0x40020800
 8002528:	40020c00 	.word	0x40020c00
 800252c:	40021000 	.word	0x40021000
 8002530:	40021400 	.word	0x40021400
 8002534:	40021800 	.word	0x40021800
 8002538:	40021c00 	.word	0x40021c00
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800255c:	e003      	b.n	8002566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	041a      	lsls	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	619a      	str	r2, [r3, #24]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af02      	add	r7, sp, #8
 8002578:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e059      	b.n	8002638 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f006 ff9a 	bl	80094d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025b2:	d102      	bne.n	80025ba <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fdb4 	bl	800612c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7c1a      	ldrb	r2, [r3, #16]
 80025cc:	f88d 2000 	strb.w	r2, [sp]
 80025d0:	3304      	adds	r3, #4
 80025d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d4:	f003 fd35 	bl	8006042 <USB_CoreInit>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e026      	b.n	8002638 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 fdac 	bl	800614e <USB_SetCurrentMode>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e017      	b.n	8002638 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7c1a      	ldrb	r2, [r3, #16]
 8002610:	f88d 2000 	strb.w	r2, [sp]
 8002614:	3304      	adds	r3, #4
 8002616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002618:	f003 ff4e 	bl	80064b8 <USB_HostInit>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e004      	b.n	8002638 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b08b      	sub	sp, #44	@ 0x2c
 8002644:	af04      	add	r7, sp, #16
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	461a      	mov	r2, r3
 800264e:	4603      	mov	r3, r0
 8002650:	70fb      	strb	r3, [r7, #3]
 8002652:	460b      	mov	r3, r1
 8002654:	70bb      	strb	r3, [r7, #2]
 8002656:	4613      	mov	r3, r2
 8002658:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800265a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800265c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_HCD_HC_Init+0x2c>
 8002668:	2302      	movs	r3, #2
 800266a:	e09d      	b.n	80027a8 <HAL_HCD_HC_Init+0x168>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3319      	adds	r3, #25
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3314      	adds	r3, #20
 8002698:	787a      	ldrb	r2, [r7, #1]
 800269a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3315      	adds	r3, #21
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3326      	adds	r3, #38	@ 0x26
 80026c0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	78bb      	ldrb	r3, [r7, #2]
 80026ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026ce:	b2d8      	uxtb	r0, r3
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3316      	adds	r3, #22
 80026de:	4602      	mov	r2, r0
 80026e0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fbc8 	bl	8002e7c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80026ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	da0a      	bge.n	800270a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	3317      	adds	r3, #23
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e009      	b.n	800271e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3317      	adds	r3, #23
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f004 f82c 	bl	8006780 <USB_GetHostSpeed>
 8002728:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800272a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800272e:	2b01      	cmp	r3, #1
 8002730:	d10b      	bne.n	800274a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002732:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_HCD_HC_Init+0x10a>
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2bbc      	cmp	r3, #188	@ 0xbc
 8002744:	d901      	bls.n	800274a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002746:	23bc      	movs	r3, #188	@ 0xbc
 8002748:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3318      	adds	r3, #24
 800275a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800275e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	b298      	uxth	r0, r3
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3328      	adds	r3, #40	@ 0x28
 8002774:	4602      	mov	r2, r0
 8002776:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	b29b      	uxth	r3, r3
 8002780:	787c      	ldrb	r4, [r7, #1]
 8002782:	78ba      	ldrb	r2, [r7, #2]
 8002784:	78f9      	ldrb	r1, [r7, #3]
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4623      	mov	r3, r4
 8002796:	f004 f81b 	bl	80067d0 <USB_HC_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd90      	pop	{r4, r7, pc}

080027b0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_HCD_HC_Halt+0x1e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e00f      	b.n	80027ee <HAL_HCD_HC_Halt+0x3e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f004 fbad 	bl	8006f3e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	4608      	mov	r0, r1
 8002802:	4611      	mov	r1, r2
 8002804:	461a      	mov	r2, r3
 8002806:	4603      	mov	r3, r0
 8002808:	70fb      	strb	r3, [r7, #3]
 800280a:	460b      	mov	r3, r1
 800280c:	70bb      	strb	r3, [r7, #2]
 800280e:	4613      	mov	r3, r2
 8002810:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3317      	adds	r3, #23
 8002822:	78ba      	ldrb	r2, [r7, #2]
 8002824:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3326      	adds	r3, #38	@ 0x26
 8002836:	787a      	ldrb	r2, [r7, #1]
 8002838:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800283a:	7c3b      	ldrb	r3, [r7, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d114      	bne.n	800286a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	332a      	adds	r3, #42	@ 0x2a
 8002850:	2203      	movs	r2, #3
 8002852:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	3319      	adds	r3, #25
 8002864:	7f3a      	ldrb	r2, [r7, #28]
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e009      	b.n	800287e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	332a      	adds	r3, #42	@ 0x2a
 800287a:	2202      	movs	r2, #2
 800287c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800287e:	787b      	ldrb	r3, [r7, #1]
 8002880:	2b03      	cmp	r3, #3
 8002882:	f200 8102 	bhi.w	8002a8a <HAL_HCD_HC_SubmitRequest+0x292>
 8002886:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	0800289d 	.word	0x0800289d
 8002890:	08002a75 	.word	0x08002a75
 8002894:	08002961 	.word	0x08002961
 8002898:	080029eb 	.word	0x080029eb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800289c:	7c3b      	ldrb	r3, [r7, #16]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f040 80f5 	bne.w	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80028a4:	78bb      	ldrb	r3, [r7, #2]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d12d      	bne.n	8002906 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80028aa:	8b3b      	ldrh	r3, [r7, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	333d      	adds	r3, #61	@ 0x3d
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	333d      	adds	r3, #61	@ 0x3d
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10a      	bne.n	80028f0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	332a      	adds	r3, #42	@ 0x2a
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80028ee:	e0ce      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	332a      	adds	r3, #42	@ 0x2a
 8002900:	2202      	movs	r2, #2
 8002902:	701a      	strb	r2, [r3, #0]
      break;
 8002904:	e0c3      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	331a      	adds	r3, #26
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	f040 80b8 	bne.w	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	333c      	adds	r3, #60	@ 0x3c
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	332a      	adds	r3, #42	@ 0x2a
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
      break;
 8002948:	e0a1      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	332a      	adds	r3, #42	@ 0x2a
 800295a:	2202      	movs	r2, #2
 800295c:	701a      	strb	r2, [r3, #0]
      break;
 800295e:	e096      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002960:	78bb      	ldrb	r3, [r7, #2]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d120      	bne.n	80029a8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	333d      	adds	r3, #61	@ 0x3d
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	332a      	adds	r3, #42	@ 0x2a
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002990:	e07e      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	332a      	adds	r3, #42	@ 0x2a
 80029a2:	2202      	movs	r2, #2
 80029a4:	701a      	strb	r2, [r3, #0]
      break;
 80029a6:	e073      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	333c      	adds	r3, #60	@ 0x3c
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	332a      	adds	r3, #42	@ 0x2a
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
      break;
 80029d2:	e05d      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	332a      	adds	r3, #42	@ 0x2a
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]
      break;
 80029e8:	e052      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029ea:	78bb      	ldrb	r3, [r7, #2]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d120      	bne.n	8002a32 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	333d      	adds	r3, #61	@ 0x3d
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	332a      	adds	r3, #42	@ 0x2a
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a1a:	e039      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	332a      	adds	r3, #42	@ 0x2a
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	701a      	strb	r2, [r3, #0]
      break;
 8002a30:	e02e      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	333c      	adds	r3, #60	@ 0x3c
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	332a      	adds	r3, #42	@ 0x2a
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
      break;
 8002a5c:	e018      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	332a      	adds	r3, #42	@ 0x2a
 8002a6e:	2202      	movs	r2, #2
 8002a70:	701a      	strb	r2, [r3, #0]
      break;
 8002a72:	e00d      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	332a      	adds	r3, #42	@ 0x2a
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
      break;
 8002a88:	e002      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e000      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002a8e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	332c      	adds	r3, #44	@ 0x2c
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	8b39      	ldrh	r1, [r7, #24]
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4403      	add	r3, r0
 8002ab4:	3334      	adds	r3, #52	@ 0x34
 8002ab6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	334c      	adds	r3, #76	@ 0x4c
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3338      	adds	r3, #56	@ 0x38
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3315      	adds	r3, #21
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	334d      	adds	r3, #77	@ 0x4d
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	3310      	adds	r3, #16
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	1d19      	adds	r1, r3, #4
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	799b      	ldrb	r3, [r3, #6]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f003 ff80 	bl	8006a28 <USB_HC_StartXfer>
 8002b28:	4603      	mov	r3, r0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop

08002b34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 fc75 	bl	800643a <USB_GetMode>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	f040 80fb 	bne.w	8002d4e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 fc38 	bl	80063d2 <USB_ReadInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80f1 	beq.w	8002d4c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fc2f 	bl	80063d2 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b7e:	d104      	bne.n	8002b8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f003 fc1f 	bl	80063d2 <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b9e:	d104      	bne.n	8002baa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ba8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 fc0f 	bl	80063d2 <USB_ReadInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bbe:	d104      	bne.n	8002bca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 fbff 	bl	80063d2 <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d103      	bne.n	8002be6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2202      	movs	r2, #2
 8002be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 fbf1 	bl	80063d2 <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bfa:	d120      	bne.n	8002c3e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002c04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d113      	bne.n	8002c3e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c16:	2110      	movs	r1, #16
 8002c18:	6938      	ldr	r0, [r7, #16]
 8002c1a:	f003 fae4 	bl	80061e6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c1e:	6938      	ldr	r0, [r7, #16]
 8002c20:	f003 fb13 	bl	800624a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7a5b      	ldrb	r3, [r3, #9]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d105      	bne.n	8002c38 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 fd04 	bl	8006640 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f006 fccb 	bl	80095d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fbc5 	bl	80063d2 <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c52:	d102      	bne.n	8002c5a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f001 fd4d 	bl	80046f4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fbb7 	bl	80063d2 <USB_ReadInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d106      	bne.n	8002c7c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f006 fc94 	bl	800959c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f003 fba6 	bl	80063d2 <USB_ReadInterrupts>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c90:	d139      	bne.n	8002d06 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 f940 	bl	8006f1c <USB_HC_ReadInterrupt>
 8002c9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e025      	b.n	8002cf0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d018      	beq.n	8002cea <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cce:	d106      	bne.n	8002cde <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f905 	bl	8002ee6 <HCD_HC_IN_IRQHandler>
 8002cdc:	e005      	b.n	8002cea <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 ff67 	bl	8003bb8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3301      	adds	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	795b      	ldrb	r3, [r3, #5]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d3d3      	bcc.n	8002ca4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 fb61 	bl	80063d2 <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d101      	bne.n	8002d1e <HAL_HCD_IRQHandler+0x1ea>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_HCD_IRQHandler+0x1ec>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d014      	beq.n	8002d4e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0210 	bic.w	r2, r2, #16
 8002d32:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f001 fbfe 	bl	8004536 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0210 	orr.w	r2, r2, #16
 8002d48:	619a      	str	r2, [r3, #24]
 8002d4a:	e000      	b.n	8002d4e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002d4c:	bf00      	nop
    }
  }
}
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_HCD_Start+0x16>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e013      	b.n	8002d92 <HAL_HCD_Start+0x3e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 fcc8 	bl	800670e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 f9c1 	bl	800610a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_HCD_Stop+0x16>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e00d      	b.n	8002dcc <HAL_HCD_Stop+0x32>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 fa1b 	bl	80071f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 fc6a 	bl	80066ba <USB_ResetPort>
 8002de6:	4603      	mov	r3, r0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	334c      	adds	r3, #76	@ 0x4c
 8002e0c:	781b      	ldrb	r3, [r3, #0]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3338      	adds	r3, #56	@ 0x38
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 fcac 	bl	80067ae <USB_GetCurrentFrame>
 8002e56:	4603      	mov	r3, r0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 fc87 	bl	8006780 <USB_GetHostSpeed>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	331a      	adds	r3, #26
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	331b      	adds	r3, #27
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3325      	adds	r3, #37	@ 0x25
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3324      	adds	r3, #36	@ 0x24
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fa77 	bl	80063f8 <USB_ReadChInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d11a      	bne.n	8002f4a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	2304      	movs	r3, #4
 8002f24:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	334d      	adds	r3, #77	@ 0x4d
 8002f36:	2207      	movs	r2, #7
 8002f38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 fffb 	bl	8006f3e <USB_HC_Halt>
 8002f48:	e09e      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fa50 	bl	80063f8 <USB_ReadChInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f62:	d11b      	bne.n	8002f9c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334d      	adds	r3, #77	@ 0x4d
 8002f88:	2208      	movs	r2, #8
 8002f8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 ffd2 	bl	8006f3e <USB_HC_Halt>
 8002f9a:	e075      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f003 fa27 	bl	80063f8 <USB_ReadChInterrupts>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d11a      	bne.n	8002fea <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	334d      	adds	r3, #77	@ 0x4d
 8002fd6:	2206      	movs	r2, #6
 8002fd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 ffab 	bl	8006f3e <USB_HC_Halt>
 8002fe8:	e04e      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f003 fa00 	bl	80063f8 <USB_ReadChInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003002:	d11b      	bne.n	800303c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003016:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	334d      	adds	r3, #77	@ 0x4d
 8003028:	2209      	movs	r2, #9
 800302a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f003 ff82 	bl	8006f3e <USB_HC_Halt>
 800303a:	e025      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f003 f9d7 	bl	80063f8 <USB_ReadChInterrupts>
 800304a:	4603      	mov	r3, r0
 800304c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003050:	2b80      	cmp	r3, #128	@ 0x80
 8003052:	d119      	bne.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003060:	461a      	mov	r2, r3
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	334d      	adds	r3, #77	@ 0x4d
 8003076:	2207      	movs	r2, #7
 8003078:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f003 ff5b 	bl	8006f3e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f003 f9b1 	bl	80063f8 <USB_ReadChInterrupts>
 8003096:	4603      	mov	r3, r0
 8003098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800309c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030a0:	d112      	bne.n	80030c8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 ff47 	bl	8006f3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030bc:	461a      	mov	r2, r3
 80030be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030c2:	6093      	str	r3, [r2, #8]
 80030c4:	f000 bd75 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f003 f991 	bl	80063f8 <USB_ReadChInterrupts>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	f040 8128 	bne.w	8003332 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ee:	461a      	mov	r2, r3
 80030f0:	2320      	movs	r3, #32
 80030f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	331b      	adds	r3, #27
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d119      	bne.n	800313e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	331b      	adds	r3, #27
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	0151      	lsls	r1, r2, #5
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	440a      	add	r2, r1
 8003134:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	799b      	ldrb	r3, [r3, #6]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01b      	beq.n	800317e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3330      	adds	r3, #48	@ 0x30
 8003156:	6819      	ldr	r1, [r3, #0]
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4413      	add	r3, r2
 8003160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	1ac9      	subs	r1, r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4403      	add	r3, r0
 800317a:	3338      	adds	r3, #56	@ 0x38
 800317c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	334d      	adds	r3, #77	@ 0x4d
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	3344      	adds	r3, #68	@ 0x44
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b2:	461a      	mov	r2, r3
 80031b4:	2301      	movs	r3, #1
 80031b6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3326      	adds	r3, #38	@ 0x26
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3326      	adds	r3, #38	@ 0x26
 80031de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d110      	bne.n	8003206 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fea6 	bl	8006f3e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031fe:	461a      	mov	r2, r3
 8003200:	2310      	movs	r3, #16
 8003202:	6093      	str	r3, [r2, #8]
 8003204:	e03d      	b.n	8003282 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3326      	adds	r3, #38	@ 0x26
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d00a      	beq.n	8003232 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3326      	adds	r3, #38	@ 0x26
 800322c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800322e:	2b01      	cmp	r3, #1
 8003230:	d127      	bne.n	8003282 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	0151      	lsls	r1, r2, #5
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	440a      	add	r2, r1
 8003248:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800324c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003250:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	334c      	adds	r3, #76	@ 0x4c
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334c      	adds	r3, #76	@ 0x4c
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f006 f9b7 	bl	80095f0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	799b      	ldrb	r3, [r3, #6]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d13b      	bne.n	8003302 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3338      	adds	r3, #56	@ 0x38
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4403      	add	r3, r0
 80032aa:	3328      	adds	r3, #40	@ 0x28
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	440b      	add	r3, r1
 80032b0:	1e59      	subs	r1, r3, #1
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4403      	add	r3, r0
 80032c0:	3328      	adds	r3, #40	@ 0x28
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8470 	beq.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	333c      	adds	r3, #60	@ 0x3c
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	f083 0301 	eor.w	r3, r3, #1
 80032ea:	b2d8      	uxtb	r0, r3
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	333c      	adds	r3, #60	@ 0x3c
 80032fa:	4602      	mov	r2, r0
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	f000 bc58 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	333c      	adds	r3, #60	@ 0x3c
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	f083 0301 	eor.w	r3, r3, #1
 800331a:	b2d8      	uxtb	r0, r3
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	333c      	adds	r3, #60	@ 0x3c
 800332a:	4602      	mov	r2, r0
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	f000 bc40 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f003 f85c 	bl	80063f8 <USB_ReadChInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b20      	cmp	r3, #32
 8003348:	d131      	bne.n	80033ae <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003356:	461a      	mov	r2, r3
 8003358:	2320      	movs	r3, #32
 800335a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	331a      	adds	r3, #26
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	f040 841f 	bne.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	331b      	adds	r3, #27
 8003384:	2201      	movs	r2, #1
 8003386:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334d      	adds	r3, #77	@ 0x4d
 8003398:	2203      	movs	r2, #3
 800339a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f003 fdca 	bl	8006f3e <USB_HC_Halt>
 80033aa:	f000 bc02 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f003 f81e 	bl	80063f8 <USB_ReadChInterrupts>
 80033bc:	4603      	mov	r3, r0
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	f040 8305 	bne.w	80039d2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d4:	461a      	mov	r2, r3
 80033d6:	2302      	movs	r3, #2
 80033d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	334d      	adds	r3, #77	@ 0x4d
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d114      	bne.n	800341a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	334d      	adds	r3, #77	@ 0x4d
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334c      	adds	r3, #76	@ 0x4c
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	e2cc      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	334d      	adds	r3, #77	@ 0x4d
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b06      	cmp	r3, #6
 800342e:	d114      	bne.n	800345a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334d      	adds	r3, #77	@ 0x4d
 8003440:	2202      	movs	r2, #2
 8003442:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	334c      	adds	r3, #76	@ 0x4c
 8003454:	2205      	movs	r2, #5
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e2ac      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334d      	adds	r3, #77	@ 0x4d
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b07      	cmp	r3, #7
 800346e:	d00b      	beq.n	8003488 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334d      	adds	r3, #77	@ 0x4d
 8003480:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003482:	2b09      	cmp	r3, #9
 8003484:	f040 80a6 	bne.w	80035d4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	334d      	adds	r3, #77	@ 0x4d
 8003498:	2202      	movs	r2, #2
 800349a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	3344      	adds	r3, #68	@ 0x44
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	1c59      	adds	r1, r3, #1
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4403      	add	r3, r0
 80034bc:	3344      	adds	r3, #68	@ 0x44
 80034be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3344      	adds	r3, #68	@ 0x44
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d943      	bls.n	800355e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3344      	adds	r3, #68	@ 0x44
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	331a      	adds	r3, #26
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d123      	bne.n	8003548 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	331b      	adds	r3, #27
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	331c      	adds	r3, #28
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	0151      	lsls	r1, r2, #5
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	440a      	add	r2, r1
 800353e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003546:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	334c      	adds	r3, #76	@ 0x4c
 8003558:	2204      	movs	r2, #4
 800355a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800355c:	e229      	b.n	80039b2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	334c      	adds	r3, #76	@ 0x4c
 800356e:	2202      	movs	r2, #2
 8003570:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3326      	adds	r3, #38	@ 0x26
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3326      	adds	r3, #38	@ 0x26
 8003598:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800359a:	2b02      	cmp	r3, #2
 800359c:	f040 8209 	bne.w	80039b2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035d2:	e1ee      	b.n	80039b2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	334d      	adds	r3, #77	@ 0x4d
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	f040 80c8 	bne.w	800377c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334d      	adds	r3, #77	@ 0x4d
 80035fc:	2202      	movs	r2, #2
 80035fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	331b      	adds	r3, #27
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	f040 81ce 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3326      	adds	r3, #38	@ 0x26
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d16b      	bne.n	8003706 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3348      	adds	r3, #72	@ 0x48
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	1c59      	adds	r1, r3, #1
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4403      	add	r3, r0
 800364e:	3348      	adds	r3, #72	@ 0x48
 8003650:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3348      	adds	r3, #72	@ 0x48
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d943      	bls.n	80036f0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3348      	adds	r3, #72	@ 0x48
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	331b      	adds	r3, #27
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	3344      	adds	r3, #68	@ 0x44
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d809      	bhi.n	80036ba <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	331c      	adds	r3, #28
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	0151      	lsls	r1, r2, #5
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	440a      	add	r2, r1
 80036d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	334c      	adds	r3, #76	@ 0x4c
 80036ea:	2204      	movs	r2, #4
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e014      	b.n	800371a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	334c      	adds	r3, #76	@ 0x4c
 8003700:	2202      	movs	r2, #2
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e009      	b.n	800371a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334c      	adds	r3, #76	@ 0x4c
 8003716:	2202      	movs	r2, #2
 8003718:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3326      	adds	r3, #38	@ 0x26
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3326      	adds	r3, #38	@ 0x26
 8003740:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003742:	2b02      	cmp	r3, #2
 8003744:	f040 8136 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4413      	add	r3, r2
 8003750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800375e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003766:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003774:	461a      	mov	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e11b      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	334d      	adds	r3, #77	@ 0x4d
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b03      	cmp	r3, #3
 8003790:	f040 8081 	bne.w	8003896 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	334d      	adds	r3, #77	@ 0x4d
 80037a4:	2202      	movs	r2, #2
 80037a6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	331b      	adds	r3, #27
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	f040 80fa 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	334c      	adds	r3, #76	@ 0x4c
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	440a      	add	r2, r1
 800380a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800380e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003812:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	0151      	lsls	r1, r2, #5
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	440a      	add	r2, r1
 800382a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800382e:	f023 0320 	bic.w	r3, r3, #32
 8003832:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3326      	adds	r3, #38	@ 0x26
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3326      	adds	r3, #38	@ 0x26
 800385a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800385c:	2b02      	cmp	r3, #2
 800385e:	f040 80a9 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003878:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003880:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e08e      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	334d      	adds	r3, #77	@ 0x4d
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d143      	bne.n	8003934 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	334d      	adds	r3, #77	@ 0x4d
 80038bc:	2202      	movs	r2, #2
 80038be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	334c      	adds	r3, #76	@ 0x4c
 80038d0:	2202      	movs	r2, #2
 80038d2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3326      	adds	r3, #38	@ 0x26
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	3326      	adds	r3, #38	@ 0x26
 80038fa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d159      	bne.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003916:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800391e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800392c:	461a      	mov	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e03f      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	334d      	adds	r3, #77	@ 0x4d
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b08      	cmp	r3, #8
 8003948:	d126      	bne.n	8003998 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	334d      	adds	r3, #77	@ 0x4d
 800395a:	2202      	movs	r2, #2
 800395c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3344      	adds	r3, #68	@ 0x44
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	1c59      	adds	r1, r3, #1
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4403      	add	r3, r0
 800397e:	3344      	adds	r3, #68	@ 0x44
 8003980:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	334c      	adds	r3, #76	@ 0x4c
 8003992:	2204      	movs	r2, #4
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e00d      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	334d      	adds	r3, #77	@ 0x4d
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	f000 8100 	beq.w	8003bb0 <HCD_HC_IN_IRQHandler+0xcca>
 80039b0:	e000      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	334c      	adds	r3, #76	@ 0x4c
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	4619      	mov	r1, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f005 fe10 	bl	80095f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039d0:	e0ef      	b.n	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f002 fd0c 	bl	80063f8 <USB_ReadChInterrupts>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e6:	2b40      	cmp	r3, #64	@ 0x40
 80039e8:	d12f      	bne.n	8003a4a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f6:	461a      	mov	r2, r3
 80039f8:	2340      	movs	r3, #64	@ 0x40
 80039fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	334d      	adds	r3, #77	@ 0x4d
 8003a0c:	2205      	movs	r2, #5
 8003a0e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	331a      	adds	r3, #26
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	3344      	adds	r3, #68	@ 0x44
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 fa7b 	bl	8006f3e <USB_HC_Halt>
 8003a48:	e0b3      	b.n	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f002 fcd0 	bl	80063f8 <USB_ReadChInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	f040 80a7 	bne.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3326      	adds	r3, #38	@ 0x26
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d11b      	bne.n	8003ab2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	3344      	adds	r3, #68	@ 0x44
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	334d      	adds	r3, #77	@ 0x4d
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 fa47 	bl	8006f3e <USB_HC_Halt>
 8003ab0:	e03f      	b.n	8003b32 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3326      	adds	r3, #38	@ 0x26
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3326      	adds	r3, #38	@ 0x26
 8003ad8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d129      	bne.n	8003b32 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3344      	adds	r3, #68	@ 0x44
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	799b      	ldrb	r3, [r3, #6]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HCD_HC_IN_IRQHandler+0xc2a>
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	331b      	adds	r3, #27
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d110      	bne.n	8003b32 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	334d      	adds	r3, #77	@ 0x4d
 8003b20:	2204      	movs	r2, #4
 8003b22:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f003 fa06 	bl	8006f3e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	331b      	adds	r3, #27
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d129      	bne.n	8003b9c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	331b      	adds	r3, #27
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b96:	f043 0320 	orr.w	r3, r3, #32
 8003b9a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2310      	movs	r3, #16
 8003bac:	6093      	str	r3, [r2, #8]
 8003bae:	e000      	b.n	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003bb0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f002 fc0e 	bl	80063f8 <USB_ReadChInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d11b      	bne.n	8003c1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334d      	adds	r3, #77	@ 0x4d
 8003c08:	2207      	movs	r2, #7
 8003c0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f003 f992 	bl	8006f3e <USB_HC_Halt>
 8003c1a:	f000 bc89 	b.w	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f002 fbe6 	bl	80063f8 <USB_ReadChInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	f040 8082 	bne.w	8003d3c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c44:	461a      	mov	r2, r3
 8003c46:	2320      	movs	r3, #32
 8003c48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	3319      	adds	r3, #25
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d124      	bne.n	8003caa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	3319      	adds	r3, #25
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	334c      	adds	r3, #76	@ 0x4c
 8003c84:	2202      	movs	r2, #2
 8003c86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	334d      	adds	r3, #77	@ 0x4d
 8003c98:	2203      	movs	r2, #3
 8003c9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f003 f94a 	bl	8006f3e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	331a      	adds	r3, #26
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 8437 	bne.w	8004530 <HCD_HC_OUT_IRQHandler+0x978>
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	331b      	adds	r3, #27
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f040 842b 	bne.w	8004530 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3326      	adds	r3, #38	@ 0x26
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d009      	beq.n	8003d04 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	331b      	adds	r3, #27
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	334d      	adds	r3, #77	@ 0x4d
 8003d14:	2203      	movs	r2, #3
 8003d16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f003 f90c 	bl	8006f3e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	3344      	adds	r3, #68	@ 0x44
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e3f9      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f002 fb57 	bl	80063f8 <USB_ReadChInterrupts>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d54:	d111      	bne.n	8003d7a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d62:	461a      	mov	r2, r3
 8003d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f003 f8e3 	bl	8006f3e <USB_HC_Halt>
 8003d78:	e3da      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f002 fb38 	bl	80063f8 <USB_ReadChInterrupts>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d168      	bne.n	8003e64 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3344      	adds	r3, #68	@ 0x44
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f002 fb22 	bl	80063f8 <USB_ReadChInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dba:	2b40      	cmp	r3, #64	@ 0x40
 8003dbc:	d112      	bne.n	8003de4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	3319      	adds	r3, #25
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dde:	461a      	mov	r2, r3
 8003de0:	2340      	movs	r3, #64	@ 0x40
 8003de2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	331b      	adds	r3, #27
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d019      	beq.n	8003e2e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	331b      	adds	r3, #27
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	0151      	lsls	r1, r2, #5
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	440a      	add	r2, r1
 8003e24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	334d      	adds	r3, #77	@ 0x4d
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f003 f86e 	bl	8006f3e <USB_HC_Halt>
 8003e62:	e365      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f002 fac3 	bl	80063f8 <USB_ReadChInterrupts>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e78:	2b40      	cmp	r3, #64	@ 0x40
 8003e7a:	d139      	bne.n	8003ef0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	334d      	adds	r3, #77	@ 0x4d
 8003e8c:	2205      	movs	r2, #5
 8003e8e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	331a      	adds	r3, #26
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3319      	adds	r3, #25
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3344      	adds	r3, #68	@ 0x44
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f003 f831 	bl	8006f3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2340      	movs	r3, #64	@ 0x40
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	e31f      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f002 fa7d 	bl	80063f8 <USB_ReadChInterrupts>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d11a      	bne.n	8003f3e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f14:	461a      	mov	r2, r3
 8003f16:	2308      	movs	r3, #8
 8003f18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	334d      	adds	r3, #77	@ 0x4d
 8003f2a:	2206      	movs	r2, #6
 8003f2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 f801 	bl	8006f3e <USB_HC_Halt>
 8003f3c:	e2f8      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f002 fa56 	bl	80063f8 <USB_ReadChInterrupts>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d144      	bne.n	8003fe0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	3344      	adds	r3, #68	@ 0x44
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	334d      	adds	r3, #77	@ 0x4d
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3319      	adds	r3, #25
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d114      	bne.n	8003fbe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3318      	adds	r3, #24
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	3319      	adds	r3, #25
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f002 ffb9 	bl	8006f3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2310      	movs	r3, #16
 8003fdc:	6093      	str	r3, [r2, #8]
 8003fde:	e2a7      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f002 fa05 	bl	80063f8 <USB_ReadChInterrupts>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	2b80      	cmp	r3, #128	@ 0x80
 8003ff6:	f040 8083 	bne.w	8004100 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	799b      	ldrb	r3, [r3, #6]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d111      	bne.n	8004026 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	334d      	adds	r3, #77	@ 0x4d
 8004012:	2207      	movs	r2, #7
 8004014:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f002 ff8d 	bl	8006f3e <USB_HC_Halt>
 8004024:	e062      	b.n	80040ec <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	3344      	adds	r3, #68	@ 0x44
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	1c59      	adds	r1, r3, #1
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4403      	add	r3, r0
 8004046:	3344      	adds	r3, #68	@ 0x44
 8004048:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	3344      	adds	r3, #68	@ 0x44
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d922      	bls.n	80040a6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004060:	78fa      	ldrb	r2, [r7, #3]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	3344      	adds	r3, #68	@ 0x44
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	334c      	adds	r3, #76	@ 0x4c
 8004084:	2204      	movs	r2, #4
 8004086:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	334c      	adds	r3, #76	@ 0x4c
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f005 faa6 	bl	80095f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80040a4:	e022      	b.n	80040ec <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	334c      	adds	r3, #76	@ 0x4c
 80040b6:	2202      	movs	r2, #2
 80040b8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040d0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040d8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040e6:	461a      	mov	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f8:	461a      	mov	r2, r3
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	6093      	str	r3, [r2, #8]
 80040fe:	e217      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	4611      	mov	r1, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f002 f975 	bl	80063f8 <USB_ReadChInterrupts>
 800410e:	4603      	mov	r3, r0
 8004110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004118:	d11b      	bne.n	8004152 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	334d      	adds	r3, #77	@ 0x4d
 800412a:	2209      	movs	r2, #9
 800412c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f002 ff01 	bl	8006f3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004148:	461a      	mov	r2, r3
 800414a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800414e:	6093      	str	r3, [r2, #8]
 8004150:	e1ee      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f002 f94c 	bl	80063f8 <USB_ReadChInterrupts>
 8004160:	4603      	mov	r3, r0
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	f040 81df 	bne.w	800452a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004178:	461a      	mov	r2, r3
 800417a:	2302      	movs	r3, #2
 800417c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	334d      	adds	r3, #77	@ 0x4d
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	f040 8093 	bne.w	80042bc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	334d      	adds	r3, #77	@ 0x4d
 80041a6:	2202      	movs	r2, #2
 80041a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	334c      	adds	r3, #76	@ 0x4c
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	3326      	adds	r3, #38	@ 0x26
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d00b      	beq.n	80041ec <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	3326      	adds	r3, #38	@ 0x26
 80041e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	f040 8190 	bne.w	800450c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	799b      	ldrb	r3, [r3, #6]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d115      	bne.n	8004220 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	333d      	adds	r3, #61	@ 0x3d
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	f083 0301 	eor.w	r3, r3, #1
 800420c:	b2d8      	uxtb	r0, r3
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	333d      	adds	r3, #61	@ 0x3d
 800421c:	4602      	mov	r2, r0
 800421e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	799b      	ldrb	r3, [r3, #6]
 8004224:	2b01      	cmp	r3, #1
 8004226:	f040 8171 	bne.w	800450c <HCD_HC_OUT_IRQHandler+0x954>
 800422a:	78fa      	ldrb	r2, [r7, #3]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	3334      	adds	r3, #52	@ 0x34
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8165 	beq.w	800450c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	3334      	adds	r3, #52	@ 0x34
 8004252:	6819      	ldr	r1, [r3, #0]
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4403      	add	r3, r0
 8004262:	3328      	adds	r3, #40	@ 0x28
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	440b      	add	r3, r1
 8004268:	1e59      	subs	r1, r3, #1
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4403      	add	r3, r0
 8004278:	3328      	adds	r3, #40	@ 0x28
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004280:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 813f 	beq.w	800450c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	333d      	adds	r3, #61	@ 0x3d
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	f083 0301 	eor.w	r3, r3, #1
 80042a6:	b2d8      	uxtb	r0, r3
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	333d      	adds	r3, #61	@ 0x3d
 80042b6:	4602      	mov	r2, r0
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e127      	b.n	800450c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	334d      	adds	r3, #77	@ 0x4d
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d120      	bne.n	8004314 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	334d      	adds	r3, #77	@ 0x4d
 80042e2:	2202      	movs	r2, #2
 80042e4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042e6:	78fa      	ldrb	r2, [r7, #3]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	331b      	adds	r3, #27
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	f040 8107 	bne.w	800450c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	334c      	adds	r3, #76	@ 0x4c
 800430e:	2202      	movs	r2, #2
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e0fb      	b.n	800450c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	334d      	adds	r3, #77	@ 0x4d
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b04      	cmp	r3, #4
 8004328:	d13a      	bne.n	80043a0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	334d      	adds	r3, #77	@ 0x4d
 800433a:	2202      	movs	r2, #2
 800433c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	334c      	adds	r3, #76	@ 0x4c
 800434e:	2202      	movs	r2, #2
 8004350:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	331b      	adds	r3, #27
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	f040 80d1 	bne.w	800450c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	331b      	adds	r3, #27
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	440a      	add	r2, r1
 8004394:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800439c:	6053      	str	r3, [r2, #4]
 800439e:	e0b5      	b.n	800450c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	334d      	adds	r3, #77	@ 0x4d
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	d114      	bne.n	80043e0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	334d      	adds	r3, #77	@ 0x4d
 80043c6:	2202      	movs	r2, #2
 80043c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	334c      	adds	r3, #76	@ 0x4c
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e095      	b.n	800450c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80043e0:	78fa      	ldrb	r2, [r7, #3]
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	334d      	adds	r3, #77	@ 0x4d
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b06      	cmp	r3, #6
 80043f4:	d114      	bne.n	8004420 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	334d      	adds	r3, #77	@ 0x4d
 8004406:	2202      	movs	r2, #2
 8004408:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	334c      	adds	r3, #76	@ 0x4c
 800441a:	2205      	movs	r2, #5
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	e075      	b.n	800450c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	334d      	adds	r3, #77	@ 0x4d
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b07      	cmp	r3, #7
 8004434:	d00a      	beq.n	800444c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	334d      	adds	r3, #77	@ 0x4d
 8004446:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004448:	2b09      	cmp	r3, #9
 800444a:	d170      	bne.n	800452e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	334d      	adds	r3, #77	@ 0x4d
 800445c:	2202      	movs	r2, #2
 800445e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	3344      	adds	r3, #68	@ 0x44
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4403      	add	r3, r0
 8004480:	3344      	adds	r3, #68	@ 0x44
 8004482:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	3344      	adds	r3, #68	@ 0x44
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d914      	bls.n	80044c4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800449a:	78fa      	ldrb	r2, [r7, #3]
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	3344      	adds	r3, #68	@ 0x44
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044ae:	78fa      	ldrb	r2, [r7, #3]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	334c      	adds	r3, #76	@ 0x4c
 80044be:	2204      	movs	r2, #4
 80044c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044c2:	e022      	b.n	800450a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	334c      	adds	r3, #76	@ 0x4c
 80044d4:	2202      	movs	r2, #2
 80044d6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004504:	461a      	mov	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800450a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800450c:	78fa      	ldrb	r2, [r7, #3]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	334c      	adds	r3, #76	@ 0x4c
 800451c:	781a      	ldrb	r2, [r3, #0]
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f005 f864 	bl	80095f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004528:	e002      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800452a:	bf00      	nop
 800452c:	e000      	b.n	8004530 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800452e:	bf00      	nop
  }
}
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b08a      	sub	sp, #40	@ 0x28
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	0c5b      	lsrs	r3, r3, #17
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800456a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d004      	beq.n	800457c <HCD_RXQLVL_IRQHandler+0x46>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b05      	cmp	r3, #5
 8004576:	f000 80b6 	beq.w	80046e6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800457a:	e0b7      	b.n	80046ec <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80b3 	beq.w	80046ea <HCD_RXQLVL_IRQHandler+0x1b4>
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	332c      	adds	r3, #44	@ 0x2c
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80a7 	beq.w	80046ea <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4613      	mov	r3, r2
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	3338      	adds	r3, #56	@ 0x38
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	18d1      	adds	r1, r2, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4403      	add	r3, r0
 80045c0:	3334      	adds	r3, #52	@ 0x34
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4299      	cmp	r1, r3
 80045c6:	f200 8083 	bhi.w	80046d0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4613      	mov	r3, r2
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	332c      	adds	r3, #44	@ 0x2c
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	b292      	uxth	r2, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	f001 fe9c 	bl	8006322 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4613      	mov	r3, r2
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	1a9b      	subs	r3, r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	332c      	adds	r3, #44	@ 0x2c
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	18d1      	adds	r1, r2, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4613      	mov	r3, r2
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4403      	add	r3, r0
 800460e:	332c      	adds	r3, #44	@ 0x2c
 8004610:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4613      	mov	r3, r2
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	3338      	adds	r3, #56	@ 0x38
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	18d1      	adds	r1, r2, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4403      	add	r3, r0
 8004636:	3338      	adds	r3, #56	@ 0x38
 8004638:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	0cdb      	lsrs	r3, r3, #19
 800464a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800464e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	3328      	adds	r3, #40	@ 0x28
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4293      	cmp	r3, r2
 8004668:	d13f      	bne.n	80046ea <HCD_RXQLVL_IRQHandler+0x1b4>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d03c      	beq.n	80046ea <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004686:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800468e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	4413      	add	r3, r2
 8004698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800469c:	461a      	mov	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4613      	mov	r3, r2
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	333c      	adds	r3, #60	@ 0x3c
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	f083 0301 	eor.w	r3, r3, #1
 80046b8:	b2d8      	uxtb	r0, r3
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4613      	mov	r3, r2
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	333c      	adds	r3, #60	@ 0x3c
 80046ca:	4602      	mov	r2, r0
 80046cc:	701a      	strb	r2, [r3, #0]
      break;
 80046ce:	e00c      	b.n	80046ea <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4613      	mov	r3, r2
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	334c      	adds	r3, #76	@ 0x4c
 80046e0:	2204      	movs	r2, #4
 80046e2:	701a      	strb	r2, [r3, #0]
      break;
 80046e4:	e001      	b.n	80046ea <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80046e6:	bf00      	nop
 80046e8:	e000      	b.n	80046ec <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80046ea:	bf00      	nop
  }
}
 80046ec:	bf00      	nop
 80046ee:	3728      	adds	r7, #40	@ 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004720:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b02      	cmp	r3, #2
 800472a:	d10b      	bne.n	8004744 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	d102      	bne.n	800473c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f004 ff3e 	bl	80095b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f043 0302 	orr.w	r3, r3, #2
 8004742:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b08      	cmp	r3, #8
 800474c:	d132      	bne.n	80047b4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f043 0308 	orr.w	r3, r3, #8
 8004754:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b04      	cmp	r3, #4
 800475e:	d126      	bne.n	80047ae <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	7a5b      	ldrb	r3, [r3, #9]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d113      	bne.n	8004790 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800476e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004772:	d106      	bne.n	8004782 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2102      	movs	r1, #2
 800477a:	4618      	mov	r0, r3
 800477c:	f001 ff60 	bl	8006640 <USB_InitFSLSPClkSel>
 8004780:	e011      	b.n	80047a6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2101      	movs	r1, #1
 8004788:	4618      	mov	r0, r3
 800478a:	f001 ff59 	bl	8006640 <USB_InitFSLSPClkSel>
 800478e:	e00a      	b.n	80047a6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	79db      	ldrb	r3, [r3, #7]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d106      	bne.n	80047a6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800479e:	461a      	mov	r2, r3
 80047a0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80047a4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f004 ff30 	bl	800960c <HAL_HCD_PortEnabled_Callback>
 80047ac:	e002      	b.n	80047b4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f004 ff3a 	bl	8009628 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d103      	bne.n	80047c6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f043 0320 	orr.w	r3, r3, #32
 80047c4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6013      	str	r3, [r2, #0]
}
 80047d2:	bf00      	nop
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e12b      	b.n	8004a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fc fa1a 	bl	8000c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	@ 0x24
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800482e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800483e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004840:	f001 fa20 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 8004844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4a81      	ldr	r2, [pc, #516]	@ (8004a50 <HAL_I2C_Init+0x274>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d807      	bhi.n	8004860 <HAL_I2C_Init+0x84>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a80      	ldr	r2, [pc, #512]	@ (8004a54 <HAL_I2C_Init+0x278>)
 8004854:	4293      	cmp	r3, r2
 8004856:	bf94      	ite	ls
 8004858:	2301      	movls	r3, #1
 800485a:	2300      	movhi	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	e006      	b.n	800486e <HAL_I2C_Init+0x92>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a7d      	ldr	r2, [pc, #500]	@ (8004a58 <HAL_I2C_Init+0x27c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	bf94      	ite	ls
 8004868:	2301      	movls	r3, #1
 800486a:	2300      	movhi	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0e7      	b.n	8004a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a78      	ldr	r2, [pc, #480]	@ (8004a5c <HAL_I2C_Init+0x280>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	0c9b      	lsrs	r3, r3, #18
 8004880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004a50 <HAL_I2C_Init+0x274>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d802      	bhi.n	80048b0 <HAL_I2C_Init+0xd4>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	3301      	adds	r3, #1
 80048ae:	e009      	b.n	80048c4 <HAL_I2C_Init+0xe8>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	4a69      	ldr	r2, [pc, #420]	@ (8004a60 <HAL_I2C_Init+0x284>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	099b      	lsrs	r3, r3, #6
 80048c2:	3301      	adds	r3, #1
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	495c      	ldr	r1, [pc, #368]	@ (8004a50 <HAL_I2C_Init+0x274>)
 80048e0:	428b      	cmp	r3, r1
 80048e2:	d819      	bhi.n	8004918 <HAL_I2C_Init+0x13c>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	1e59      	subs	r1, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80048f2:	1c59      	adds	r1, r3, #1
 80048f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048f8:	400b      	ands	r3, r1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_I2C_Init+0x138>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1e59      	subs	r1, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	fbb1 f3f3 	udiv	r3, r1, r3
 800490c:	3301      	adds	r3, #1
 800490e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004912:	e051      	b.n	80049b8 <HAL_I2C_Init+0x1dc>
 8004914:	2304      	movs	r3, #4
 8004916:	e04f      	b.n	80049b8 <HAL_I2C_Init+0x1dc>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d111      	bne.n	8004944 <HAL_I2C_Init+0x168>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1e58      	subs	r0, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	440b      	add	r3, r1
 800492e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004932:	3301      	adds	r3, #1
 8004934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004938:	2b00      	cmp	r3, #0
 800493a:	bf0c      	ite	eq
 800493c:	2301      	moveq	r3, #1
 800493e:	2300      	movne	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	e012      	b.n	800496a <HAL_I2C_Init+0x18e>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1e58      	subs	r0, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	0099      	lsls	r1, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	fbb0 f3f3 	udiv	r3, r0, r3
 800495a:	3301      	adds	r3, #1
 800495c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_I2C_Init+0x196>
 800496e:	2301      	movs	r3, #1
 8004970:	e022      	b.n	80049b8 <HAL_I2C_Init+0x1dc>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10e      	bne.n	8004998 <HAL_I2C_Init+0x1bc>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1e58      	subs	r0, r3, #1
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6859      	ldr	r1, [r3, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	440b      	add	r3, r1
 8004988:	fbb0 f3f3 	udiv	r3, r0, r3
 800498c:	3301      	adds	r3, #1
 800498e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004996:	e00f      	b.n	80049b8 <HAL_I2C_Init+0x1dc>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	1e58      	subs	r0, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6859      	ldr	r1, [r3, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	0099      	lsls	r1, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ae:	3301      	adds	r3, #1
 80049b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	6809      	ldr	r1, [r1, #0]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6911      	ldr	r1, [r2, #16]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68d2      	ldr	r2, [r2, #12]
 80049f2:	4311      	orrs	r1, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	430b      	orrs	r3, r1
 80049fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	000186a0 	.word	0x000186a0
 8004a54:	001e847f 	.word	0x001e847f
 8004a58:	003d08ff 	.word	0x003d08ff
 8004a5c:	431bde83 	.word	0x431bde83
 8004a60:	10624dd3 	.word	0x10624dd3

08004a64 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e128      	b.n	8004cc8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a90      	ldr	r2, [pc, #576]	@ (8004cd0 <HAL_I2S_Init+0x26c>)
 8004a8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7fc f91b 	bl	8000ccc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004aac:	f023 030f 	bic.w	r3, r3, #15
 8004ab0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d060      	beq.n	8004b84 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004aca:	2310      	movs	r3, #16
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	e001      	b.n	8004ad4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ad0:	2320      	movs	r3, #32
 8004ad2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d802      	bhi.n	8004ae2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	f001 f9c4 	bl	8005e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ae8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004af2:	d125      	bne.n	8004b40 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d010      	beq.n	8004b1e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	461a      	mov	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	3305      	adds	r3, #5
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	e01f      	b.n	8004b5e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	461a      	mov	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	3305      	adds	r3, #5
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	e00e      	b.n	8004b5e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	461a      	mov	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	3305      	adds	r3, #5
 8004b5c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4a5c      	ldr	r2, [pc, #368]	@ (8004cd4 <HAL_I2S_Init+0x270>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	08db      	lsrs	r3, r3, #3
 8004b68:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	e003      	b.n	8004b8c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b84:	2302      	movs	r3, #2
 8004b86:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d902      	bls.n	8004b98 <HAL_I2S_Init+0x134>
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2bff      	cmp	r3, #255	@ 0xff
 8004b96:	d907      	bls.n	8004ba8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9c:	f043 0210 	orr.w	r2, r3, #16
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e08f      	b.n	8004cc8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	ea42 0103 	orr.w	r1, r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004bc6:	f023 030f 	bic.w	r3, r3, #15
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6851      	ldr	r1, [r2, #4]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6892      	ldr	r2, [r2, #8]
 8004bd2:	4311      	orrs	r1, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	68d2      	ldr	r2, [r2, #12]
 8004bd8:	4311      	orrs	r1, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6992      	ldr	r2, [r2, #24]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d161      	bne.n	8004cb8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a38      	ldr	r2, [pc, #224]	@ (8004cd8 <HAL_I2S_Init+0x274>)
 8004bf8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a37      	ldr	r2, [pc, #220]	@ (8004cdc <HAL_I2S_Init+0x278>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_I2S_Init+0x1a4>
 8004c04:	4b36      	ldr	r3, [pc, #216]	@ (8004ce0 <HAL_I2S_Init+0x27c>)
 8004c06:	e001      	b.n	8004c0c <HAL_I2S_Init+0x1a8>
 8004c08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6812      	ldr	r2, [r2, #0]
 8004c12:	4932      	ldr	r1, [pc, #200]	@ (8004cdc <HAL_I2S_Init+0x278>)
 8004c14:	428a      	cmp	r2, r1
 8004c16:	d101      	bne.n	8004c1c <HAL_I2S_Init+0x1b8>
 8004c18:	4a31      	ldr	r2, [pc, #196]	@ (8004ce0 <HAL_I2S_Init+0x27c>)
 8004c1a:	e001      	b.n	8004c20 <HAL_I2S_Init+0x1bc>
 8004c1c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004c20:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c24:	f023 030f 	bic.w	r3, r3, #15
 8004c28:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8004cdc <HAL_I2S_Init+0x278>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_I2S_Init+0x1d4>
 8004c34:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce0 <HAL_I2S_Init+0x27c>)
 8004c36:	e001      	b.n	8004c3c <HAL_I2S_Init+0x1d8>
 8004c38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a25      	ldr	r2, [pc, #148]	@ (8004cdc <HAL_I2S_Init+0x278>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d101      	bne.n	8004c4e <HAL_I2S_Init+0x1ea>
 8004c4a:	4b25      	ldr	r3, [pc, #148]	@ (8004ce0 <HAL_I2S_Init+0x27c>)
 8004c4c:	e001      	b.n	8004c52 <HAL_I2S_Init+0x1ee>
 8004c4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c5e:	d003      	beq.n	8004c68 <HAL_I2S_Init+0x204>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d103      	bne.n	8004c70 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	e001      	b.n	8004c74 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c70:	2300      	movs	r3, #0
 8004c72:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c92:	4313      	orrs	r3, r2
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	897b      	ldrh	r3, [r7, #10]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ca0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8004cdc <HAL_I2S_Init+0x278>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d101      	bne.n	8004cb0 <HAL_I2S_Init+0x24c>
 8004cac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce0 <HAL_I2S_Init+0x27c>)
 8004cae:	e001      	b.n	8004cb4 <HAL_I2S_Init+0x250>
 8004cb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cb4:	897a      	ldrh	r2, [r7, #10]
 8004cb6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	08004ddb 	.word	0x08004ddb
 8004cd4:	cccccccd 	.word	0xcccccccd
 8004cd8:	08004ef1 	.word	0x08004ef1
 8004cdc:	40003800 	.word	0x40003800
 8004ce0:	40003400 	.word	0x40003400

08004ce4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	881a      	ldrh	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d38:	1c9a      	adds	r2, r3, #2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10e      	bne.n	8004d74 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d64:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff ffb8 	bl	8004ce4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8e:	b292      	uxth	r2, r2
 8004d90:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	1c9a      	adds	r2, r3, #2
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10e      	bne.n	8004dd2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004dc2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff93 	bl	8004cf8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d13a      	bne.n	8004e6c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d109      	bne.n	8004e14 <I2S_IRQHandler+0x3a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0a:	2b40      	cmp	r3, #64	@ 0x40
 8004e0c:	d102      	bne.n	8004e14 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff ffb4 	bl	8004d7c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1a:	2b40      	cmp	r3, #64	@ 0x40
 8004e1c:	d126      	bne.n	8004e6c <I2S_IRQHandler+0x92>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d11f      	bne.n	8004e6c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e3a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	f043 0202 	orr.w	r2, r3, #2
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff ff50 	bl	8004d0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d136      	bne.n	8004ee6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d109      	bne.n	8004e96 <I2S_IRQHandler+0xbc>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8c:	2b80      	cmp	r3, #128	@ 0x80
 8004e8e:	d102      	bne.n	8004e96 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff ff45 	bl	8004d20 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d122      	bne.n	8004ee6 <I2S_IRQHandler+0x10c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d11b      	bne.n	8004ee6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ebc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed8:	f043 0204 	orr.w	r2, r3, #4
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff ff13 	bl	8004d0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a92      	ldr	r2, [pc, #584]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004f0a:	4b92      	ldr	r3, [pc, #584]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f0c:	e001      	b.n	8004f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004f0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a8b      	ldr	r2, [pc, #556]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d101      	bne.n	8004f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f28:	4b8a      	ldr	r3, [pc, #552]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f2a:	e001      	b.n	8004f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f3c:	d004      	beq.n	8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f040 8099 	bne.w	800507a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d107      	bne.n	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f925 	bl	80051ac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f9c8 	bl	800530c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f82:	2b40      	cmp	r3, #64	@ 0x40
 8004f84:	d13a      	bne.n	8004ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d035      	beq.n	8004ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a6e      	ldr	r2, [pc, #440]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d101      	bne.n	8004f9e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f9c:	e001      	b.n	8004fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4969      	ldr	r1, [pc, #420]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004faa:	428b      	cmp	r3, r1
 8004fac:	d101      	bne.n	8004fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004fae:	4b69      	ldr	r3, [pc, #420]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fb0:	e001      	b.n	8004fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004fb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fb6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004fba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fee:	f043 0202 	orr.w	r2, r3, #2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff fe88 	bl	8004d0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b08      	cmp	r3, #8
 8005004:	f040 80c3 	bne.w	800518e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80bd 	beq.w	800518e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005022:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a49      	ldr	r2, [pc, #292]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d101      	bne.n	8005032 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800502e:	4b49      	ldr	r3, [pc, #292]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005030:	e001      	b.n	8005036 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005032:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4944      	ldr	r1, [pc, #272]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800503e:	428b      	cmp	r3, r1
 8005040:	d101      	bne.n	8005046 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005042:	4b44      	ldr	r3, [pc, #272]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005044:	e001      	b.n	800504a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005046:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800504a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800504e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005050:	2300      	movs	r3, #0
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506a:	f043 0204 	orr.w	r2, r3, #4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff fe4a 	bl	8004d0c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005078:	e089      	b.n	800518e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b02      	cmp	r3, #2
 8005082:	d107      	bne.n	8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f8be 	bl	8005210 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b01      	cmp	r3, #1
 800509c:	d107      	bne.n	80050ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f8fd 	bl	80052a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b4:	2b40      	cmp	r3, #64	@ 0x40
 80050b6:	d12f      	bne.n	8005118 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d02a      	beq.n	8005118 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d101      	bne.n	80050e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80050dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050de:	e001      	b.n	80050e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80050e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4919      	ldr	r1, [pc, #100]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050ec:	428b      	cmp	r3, r1
 80050ee:	d101      	bne.n	80050f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80050f0:	4b18      	ldr	r3, [pc, #96]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050f2:	e001      	b.n	80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80050f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80050fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510a:	f043 0202 	orr.w	r2, r3, #2
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fdfa 	bl	8004d0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b08      	cmp	r3, #8
 8005120:	d136      	bne.n	8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d031      	beq.n	8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a07      	ldr	r2, [pc, #28]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d101      	bne.n	800513a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005136:	4b07      	ldr	r3, [pc, #28]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005138:	e001      	b.n	800513e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800513a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4902      	ldr	r1, [pc, #8]	@ (8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005146:	428b      	cmp	r3, r1
 8005148:	d106      	bne.n	8005158 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800514a:	4b02      	ldr	r3, [pc, #8]	@ (8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800514c:	e006      	b.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800514e:	bf00      	nop
 8005150:	40003800 	.word	0x40003800
 8005154:	40003400 	.word	0x40003400
 8005158:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800515c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005160:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005170:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517e:	f043 0204 	orr.w	r2, r3, #4
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fdc0 	bl	8004d0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800518c:	e000      	b.n	8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800518e:	bf00      	nop
}
 8005190:	bf00      	nop
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	1c99      	adds	r1, r3, #2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6251      	str	r1, [r2, #36]	@ 0x24
 80051be:	881a      	ldrh	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d113      	bne.n	8005206 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff ffc9 	bl	8005198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	1c99      	adds	r1, r3, #2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6251      	str	r1, [r2, #36]	@ 0x24
 8005222:	8819      	ldrh	r1, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1d      	ldr	r2, [pc, #116]	@ (80052a0 <I2SEx_TxISR_I2SExt+0x90>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d101      	bne.n	8005232 <I2SEx_TxISR_I2SExt+0x22>
 800522e:	4b1d      	ldr	r3, [pc, #116]	@ (80052a4 <I2SEx_TxISR_I2SExt+0x94>)
 8005230:	e001      	b.n	8005236 <I2SEx_TxISR_I2SExt+0x26>
 8005232:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005236:	460a      	mov	r2, r1
 8005238:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d121      	bne.n	8005296 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a12      	ldr	r2, [pc, #72]	@ (80052a0 <I2SEx_TxISR_I2SExt+0x90>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d101      	bne.n	8005260 <I2SEx_TxISR_I2SExt+0x50>
 800525c:	4b11      	ldr	r3, [pc, #68]	@ (80052a4 <I2SEx_TxISR_I2SExt+0x94>)
 800525e:	e001      	b.n	8005264 <I2SEx_TxISR_I2SExt+0x54>
 8005260:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	490d      	ldr	r1, [pc, #52]	@ (80052a0 <I2SEx_TxISR_I2SExt+0x90>)
 800526c:	428b      	cmp	r3, r1
 800526e:	d101      	bne.n	8005274 <I2SEx_TxISR_I2SExt+0x64>
 8005270:	4b0c      	ldr	r3, [pc, #48]	@ (80052a4 <I2SEx_TxISR_I2SExt+0x94>)
 8005272:	e001      	b.n	8005278 <I2SEx_TxISR_I2SExt+0x68>
 8005274:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005278:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800527c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ff81 	bl	8005198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40003800 	.word	0x40003800
 80052a4:	40003400 	.word	0x40003400

080052a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68d8      	ldr	r0, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ba:	1c99      	adds	r1, r3, #2
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80052c0:	b282      	uxth	r2, r0
 80052c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d113      	bne.n	8005304 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ff4a 	bl	8005198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005304:	bf00      	nop
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a20      	ldr	r2, [pc, #128]	@ (800539c <I2SEx_RxISR_I2SExt+0x90>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d101      	bne.n	8005322 <I2SEx_RxISR_I2SExt+0x16>
 800531e:	4b20      	ldr	r3, [pc, #128]	@ (80053a0 <I2SEx_RxISR_I2SExt+0x94>)
 8005320:	e001      	b.n	8005326 <I2SEx_RxISR_I2SExt+0x1a>
 8005322:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005326:	68d8      	ldr	r0, [r3, #12]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532c:	1c99      	adds	r1, r3, #2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005332:	b282      	uxth	r2, r0
 8005334:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d121      	bne.n	8005392 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a12      	ldr	r2, [pc, #72]	@ (800539c <I2SEx_RxISR_I2SExt+0x90>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d101      	bne.n	800535c <I2SEx_RxISR_I2SExt+0x50>
 8005358:	4b11      	ldr	r3, [pc, #68]	@ (80053a0 <I2SEx_RxISR_I2SExt+0x94>)
 800535a:	e001      	b.n	8005360 <I2SEx_RxISR_I2SExt+0x54>
 800535c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	490d      	ldr	r1, [pc, #52]	@ (800539c <I2SEx_RxISR_I2SExt+0x90>)
 8005368:	428b      	cmp	r3, r1
 800536a:	d101      	bne.n	8005370 <I2SEx_RxISR_I2SExt+0x64>
 800536c:	4b0c      	ldr	r3, [pc, #48]	@ (80053a0 <I2SEx_RxISR_I2SExt+0x94>)
 800536e:	e001      	b.n	8005374 <I2SEx_RxISR_I2SExt+0x68>
 8005370:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005374:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005378:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff ff03 	bl	8005198 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005392:	bf00      	nop
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40003800 	.word	0x40003800
 80053a0:	40003400 	.word	0x40003400

080053a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e267      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d075      	beq.n	80054ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053c2:	4b88      	ldr	r3, [pc, #544]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d00c      	beq.n	80053e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ce:	4b85      	ldr	r3, [pc, #532]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d112      	bne.n	8005400 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053da:	4b82      	ldr	r3, [pc, #520]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053e6:	d10b      	bne.n	8005400 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e8:	4b7e      	ldr	r3, [pc, #504]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d05b      	beq.n	80054ac <HAL_RCC_OscConfig+0x108>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d157      	bne.n	80054ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e242      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005408:	d106      	bne.n	8005418 <HAL_RCC_OscConfig+0x74>
 800540a:	4b76      	ldr	r3, [pc, #472]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a75      	ldr	r2, [pc, #468]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e01d      	b.n	8005454 <HAL_RCC_OscConfig+0xb0>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005420:	d10c      	bne.n	800543c <HAL_RCC_OscConfig+0x98>
 8005422:	4b70      	ldr	r3, [pc, #448]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6f      	ldr	r2, [pc, #444]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4b6d      	ldr	r3, [pc, #436]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a6c      	ldr	r2, [pc, #432]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e00b      	b.n	8005454 <HAL_RCC_OscConfig+0xb0>
 800543c:	4b69      	ldr	r3, [pc, #420]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a68      	ldr	r2, [pc, #416]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	4b66      	ldr	r3, [pc, #408]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a65      	ldr	r2, [pc, #404]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 800544e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d013      	beq.n	8005484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545c:	f7fb fe1a 	bl	8001094 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005464:	f7fb fe16 	bl	8001094 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b64      	cmp	r3, #100	@ 0x64
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e207      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005476:	4b5b      	ldr	r3, [pc, #364]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0xc0>
 8005482:	e014      	b.n	80054ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7fb fe06 	bl	8001094 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800548c:	f7fb fe02 	bl	8001094 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	@ 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e1f3      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800549e:	4b51      	ldr	r3, [pc, #324]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0xe8>
 80054aa:	e000      	b.n	80054ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d063      	beq.n	8005582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054ba:	4b4a      	ldr	r3, [pc, #296]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00b      	beq.n	80054de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c6:	4b47      	ldr	r3, [pc, #284]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d11c      	bne.n	800550c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054d2:	4b44      	ldr	r3, [pc, #272]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d116      	bne.n	800550c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054de:	4b41      	ldr	r3, [pc, #260]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <HAL_RCC_OscConfig+0x152>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d001      	beq.n	80054f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e1c7      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f6:	4b3b      	ldr	r3, [pc, #236]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4937      	ldr	r1, [pc, #220]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005506:	4313      	orrs	r3, r2
 8005508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800550a:	e03a      	b.n	8005582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d020      	beq.n	8005556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005514:	4b34      	ldr	r3, [pc, #208]	@ (80055e8 <HAL_RCC_OscConfig+0x244>)
 8005516:	2201      	movs	r2, #1
 8005518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551a:	f7fb fdbb 	bl	8001094 <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005522:	f7fb fdb7 	bl	8001094 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e1a8      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005534:	4b2b      	ldr	r3, [pc, #172]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0f0      	beq.n	8005522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005540:	4b28      	ldr	r3, [pc, #160]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4925      	ldr	r1, [pc, #148]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005550:	4313      	orrs	r3, r2
 8005552:	600b      	str	r3, [r1, #0]
 8005554:	e015      	b.n	8005582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005556:	4b24      	ldr	r3, [pc, #144]	@ (80055e8 <HAL_RCC_OscConfig+0x244>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fb fd9a 	bl	8001094 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005564:	f7fb fd96 	bl	8001094 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e187      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005576:	4b1b      	ldr	r3, [pc, #108]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d036      	beq.n	80055fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d016      	beq.n	80055c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005596:	4b15      	ldr	r3, [pc, #84]	@ (80055ec <HAL_RCC_OscConfig+0x248>)
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fb fd7a 	bl	8001094 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055a4:	f7fb fd76 	bl	8001094 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e167      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055b6:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <HAL_RCC_OscConfig+0x240>)
 80055b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCC_OscConfig+0x200>
 80055c2:	e01b      	b.n	80055fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c4:	4b09      	ldr	r3, [pc, #36]	@ (80055ec <HAL_RCC_OscConfig+0x248>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ca:	f7fb fd63 	bl	8001094 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d0:	e00e      	b.n	80055f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d2:	f7fb fd5f 	bl	8001094 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d907      	bls.n	80055f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e150      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
 80055e4:	40023800 	.word	0x40023800
 80055e8:	42470000 	.word	0x42470000
 80055ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f0:	4b88      	ldr	r3, [pc, #544]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80055f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1ea      	bne.n	80055d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8097 	beq.w	8005738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800560e:	4b81      	ldr	r3, [pc, #516]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10f      	bne.n	800563a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	4b7d      	ldr	r3, [pc, #500]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	4a7c      	ldr	r2, [pc, #496]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005628:	6413      	str	r3, [r2, #64]	@ 0x40
 800562a:	4b7a      	ldr	r3, [pc, #488]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563a:	4b77      	ldr	r3, [pc, #476]	@ (8005818 <HAL_RCC_OscConfig+0x474>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005642:	2b00      	cmp	r3, #0
 8005644:	d118      	bne.n	8005678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005646:	4b74      	ldr	r3, [pc, #464]	@ (8005818 <HAL_RCC_OscConfig+0x474>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a73      	ldr	r2, [pc, #460]	@ (8005818 <HAL_RCC_OscConfig+0x474>)
 800564c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005652:	f7fb fd1f 	bl	8001094 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565a:	f7fb fd1b 	bl	8001094 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e10c      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566c:	4b6a      	ldr	r3, [pc, #424]	@ (8005818 <HAL_RCC_OscConfig+0x474>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d106      	bne.n	800568e <HAL_RCC_OscConfig+0x2ea>
 8005680:	4b64      	ldr	r3, [pc, #400]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005684:	4a63      	ldr	r2, [pc, #396]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	6713      	str	r3, [r2, #112]	@ 0x70
 800568c:	e01c      	b.n	80056c8 <HAL_RCC_OscConfig+0x324>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b05      	cmp	r3, #5
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x30c>
 8005696:	4b5f      	ldr	r3, [pc, #380]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569a:	4a5e      	ldr	r2, [pc, #376]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 800569c:	f043 0304 	orr.w	r3, r3, #4
 80056a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a6:	4a5b      	ldr	r2, [pc, #364]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ae:	e00b      	b.n	80056c8 <HAL_RCC_OscConfig+0x324>
 80056b0:	4b58      	ldr	r3, [pc, #352]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b4:	4a57      	ldr	r2, [pc, #348]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056b6:	f023 0301 	bic.w	r3, r3, #1
 80056ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80056bc:	4b55      	ldr	r3, [pc, #340]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c0:	4a54      	ldr	r2, [pc, #336]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056c2:	f023 0304 	bic.w	r3, r3, #4
 80056c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d015      	beq.n	80056fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7fb fce0 	bl	8001094 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d8:	f7fb fcdc 	bl	8001094 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e0cb      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ee:	4b49      	ldr	r3, [pc, #292]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0ee      	beq.n	80056d8 <HAL_RCC_OscConfig+0x334>
 80056fa:	e014      	b.n	8005726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fc:	f7fb fcca 	bl	8001094 <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005702:	e00a      	b.n	800571a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005704:	f7fb fcc6 	bl	8001094 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e0b5      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571a:	4b3e      	ldr	r3, [pc, #248]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 800571c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1ee      	bne.n	8005704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d105      	bne.n	8005738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572c:	4b39      	ldr	r3, [pc, #228]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 800572e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005730:	4a38      	ldr	r2, [pc, #224]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005736:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80a1 	beq.w	8005884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005742:	4b34      	ldr	r3, [pc, #208]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b08      	cmp	r3, #8
 800574c:	d05c      	beq.n	8005808 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d141      	bne.n	80057da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005756:	4b31      	ldr	r3, [pc, #196]	@ (800581c <HAL_RCC_OscConfig+0x478>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575c:	f7fb fc9a 	bl	8001094 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005764:	f7fb fc96 	bl	8001094 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e087      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005776:	4b27      	ldr	r3, [pc, #156]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f0      	bne.n	8005764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69da      	ldr	r2, [r3, #28]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005790:	019b      	lsls	r3, r3, #6
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	085b      	lsrs	r3, r3, #1
 800579a:	3b01      	subs	r3, #1
 800579c:	041b      	lsls	r3, r3, #16
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	061b      	lsls	r3, r3, #24
 80057a6:	491b      	ldr	r1, [pc, #108]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ac:	4b1b      	ldr	r3, [pc, #108]	@ (800581c <HAL_RCC_OscConfig+0x478>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b2:	f7fb fc6f 	bl	8001094 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ba:	f7fb fc6b 	bl	8001094 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e05c      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057cc:	4b11      	ldr	r3, [pc, #68]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x416>
 80057d8:	e054      	b.n	8005884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057da:	4b10      	ldr	r3, [pc, #64]	@ (800581c <HAL_RCC_OscConfig+0x478>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e0:	f7fb fc58 	bl	8001094 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e8:	f7fb fc54 	bl	8001094 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e045      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fa:	4b06      	ldr	r3, [pc, #24]	@ (8005814 <HAL_RCC_OscConfig+0x470>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0x444>
 8005806:	e03d      	b.n	8005884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d107      	bne.n	8005820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e038      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
 8005814:	40023800 	.word	0x40023800
 8005818:	40007000 	.word	0x40007000
 800581c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005820:	4b1b      	ldr	r3, [pc, #108]	@ (8005890 <HAL_RCC_OscConfig+0x4ec>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d028      	beq.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005838:	429a      	cmp	r2, r3
 800583a:	d121      	bne.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005846:	429a      	cmp	r2, r3
 8005848:	d11a      	bne.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005850:	4013      	ands	r3, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005858:	4293      	cmp	r3, r2
 800585a:	d111      	bne.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	3b01      	subs	r3, #1
 800586a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800586c:	429a      	cmp	r2, r3
 800586e:	d107      	bne.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d001      	beq.n	8005884 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40023800 	.word	0x40023800

08005894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0cc      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058a8:	4b68      	ldr	r3, [pc, #416]	@ (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d90c      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b6:	4b65      	ldr	r3, [pc, #404]	@ (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058be:	4b63      	ldr	r3, [pc, #396]	@ (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0b8      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d020      	beq.n	800591e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058e8:	4b59      	ldr	r3, [pc, #356]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4a58      	ldr	r2, [pc, #352]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005900:	4b53      	ldr	r3, [pc, #332]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4a52      	ldr	r2, [pc, #328]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800590a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800590c:	4b50      	ldr	r3, [pc, #320]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	494d      	ldr	r1, [pc, #308]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	4313      	orrs	r3, r2
 800591c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d044      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d107      	bne.n	8005942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005932:	4b47      	ldr	r3, [pc, #284]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d119      	bne.n	8005972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e07f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d003      	beq.n	8005952 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800594e:	2b03      	cmp	r3, #3
 8005950:	d107      	bne.n	8005962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005952:	4b3f      	ldr	r3, [pc, #252]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e06f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005962:	4b3b      	ldr	r3, [pc, #236]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e067      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005972:	4b37      	ldr	r3, [pc, #220]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 0203 	bic.w	r2, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4934      	ldr	r1, [pc, #208]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	4313      	orrs	r3, r2
 8005982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005984:	f7fb fb86 	bl	8001094 <HAL_GetTick>
 8005988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800598c:	f7fb fb82 	bl	8001094 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e04f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 020c 	and.w	r2, r3, #12
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d1eb      	bne.n	800598c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059b4:	4b25      	ldr	r3, [pc, #148]	@ (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d20c      	bcs.n	80059dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c2:	4b22      	ldr	r3, [pc, #136]	@ (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b20      	ldr	r3, [pc, #128]	@ (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e032      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059e8:	4b19      	ldr	r3, [pc, #100]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4916      	ldr	r1, [pc, #88]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a06:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	490e      	ldr	r1, [pc, #56]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a1a:	f000 f821 	bl	8005a60 <HAL_RCC_GetSysClockFreq>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	490a      	ldr	r1, [pc, #40]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c0>)
 8005a2c:	5ccb      	ldrb	r3, [r1, r3]
 8005a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a32:	4a09      	ldr	r2, [pc, #36]	@ (8005a58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a36:	4b09      	ldr	r3, [pc, #36]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fb fae6 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40023c00 	.word	0x40023c00
 8005a50:	40023800 	.word	0x40023800
 8005a54:	08009ce4 	.word	0x08009ce4
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	20000004 	.word	0x20000004

08005a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a64:	b094      	sub	sp, #80	@ 0x50
 8005a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a78:	4b79      	ldr	r3, [pc, #484]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d00d      	beq.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	f200 80e1 	bhi.w	8005c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0x34>
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d003      	beq.n	8005a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a92:	e0db      	b.n	8005c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a94:	4b73      	ldr	r3, [pc, #460]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a98:	e0db      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a9a:	4b73      	ldr	r3, [pc, #460]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a9e:	e0d8      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005aa8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d063      	beq.n	8005b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	099b      	lsrs	r3, r3, #6
 8005abc:	2200      	movs	r2, #0
 8005abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ac0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aca:	2300      	movs	r3, #0
 8005acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	f04f 0000 	mov.w	r0, #0
 8005ada:	f04f 0100 	mov.w	r1, #0
 8005ade:	0159      	lsls	r1, r3, #5
 8005ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ae4:	0150      	lsls	r0, r2, #5
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4621      	mov	r1, r4
 8005aec:	1a51      	subs	r1, r2, r1
 8005aee:	6139      	str	r1, [r7, #16]
 8005af0:	4629      	mov	r1, r5
 8005af2:	eb63 0301 	sbc.w	r3, r3, r1
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b04:	4659      	mov	r1, fp
 8005b06:	018b      	lsls	r3, r1, #6
 8005b08:	4651      	mov	r1, sl
 8005b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b0e:	4651      	mov	r1, sl
 8005b10:	018a      	lsls	r2, r1, #6
 8005b12:	4651      	mov	r1, sl
 8005b14:	ebb2 0801 	subs.w	r8, r2, r1
 8005b18:	4659      	mov	r1, fp
 8005b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b32:	4690      	mov	r8, r2
 8005b34:	4699      	mov	r9, r3
 8005b36:	4623      	mov	r3, r4
 8005b38:	eb18 0303 	adds.w	r3, r8, r3
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	462b      	mov	r3, r5
 8005b40:	eb49 0303 	adc.w	r3, r9, r3
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b52:	4629      	mov	r1, r5
 8005b54:	024b      	lsls	r3, r1, #9
 8005b56:	4621      	mov	r1, r4
 8005b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	024a      	lsls	r2, r1, #9
 8005b60:	4610      	mov	r0, r2
 8005b62:	4619      	mov	r1, r3
 8005b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b66:	2200      	movs	r2, #0
 8005b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b70:	f7fa fb2a 	bl	80001c8 <__aeabi_uldivmod>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4613      	mov	r3, r2
 8005b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b7c:	e058      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b7e:	4b38      	ldr	r3, [pc, #224]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	099b      	lsrs	r3, r3, #6
 8005b84:	2200      	movs	r2, #0
 8005b86:	4618      	mov	r0, r3
 8005b88:	4611      	mov	r1, r2
 8005b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b8e:	623b      	str	r3, [r7, #32]
 8005b90:	2300      	movs	r3, #0
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b98:	4642      	mov	r2, r8
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	f04f 0000 	mov.w	r0, #0
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	0159      	lsls	r1, r3, #5
 8005ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005baa:	0150      	lsls	r0, r2, #5
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8005bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	00eb      	lsls	r3, r5, #3
 8005be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005be6:	00e2      	lsls	r2, r4, #3
 8005be8:	4614      	mov	r4, r2
 8005bea:	461d      	mov	r5, r3
 8005bec:	4643      	mov	r3, r8
 8005bee:	18e3      	adds	r3, r4, r3
 8005bf0:	603b      	str	r3, [r7, #0]
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	eb45 0303 	adc.w	r3, r5, r3
 8005bf8:	607b      	str	r3, [r7, #4]
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c06:	4629      	mov	r1, r5
 8005c08:	028b      	lsls	r3, r1, #10
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c10:	4621      	mov	r1, r4
 8005c12:	028a      	lsls	r2, r1, #10
 8005c14:	4610      	mov	r0, r2
 8005c16:	4619      	mov	r1, r3
 8005c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	61fa      	str	r2, [r7, #28]
 8005c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c24:	f7fa fad0 	bl	80001c8 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c30:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c4a:	e002      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c4c:	4b05      	ldr	r3, [pc, #20]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3750      	adds	r7, #80	@ 0x50
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800
 8005c64:	00f42400 	.word	0x00f42400
 8005c68:	007a1200 	.word	0x007a1200

08005c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c70:	4b03      	ldr	r3, [pc, #12]	@ (8005c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c72:	681b      	ldr	r3, [r3, #0]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000000 	.word	0x20000000

08005c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c88:	f7ff fff0 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	0a9b      	lsrs	r3, r3, #10
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	4903      	ldr	r1, [pc, #12]	@ (8005ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c9a:	5ccb      	ldrb	r3, [r1, r3]
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	08009cf4 	.word	0x08009cf4

08005cac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d035      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cd4:	4b62      	ldr	r3, [pc, #392]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cda:	f7fb f9db 	bl	8001094 <HAL_GetTick>
 8005cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ce2:	f7fb f9d7 	bl	8001094 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e0b0      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1f0      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	019a      	lsls	r2, r3, #6
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	071b      	lsls	r3, r3, #28
 8005d0c:	4955      	ldr	r1, [pc, #340]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d14:	4b52      	ldr	r3, [pc, #328]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d1a:	f7fb f9bb 	bl	8001094 <HAL_GetTick>
 8005d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d20:	e008      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d22:	f7fb f9b7 	bl	8001094 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e090      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d34:	4b4b      	ldr	r3, [pc, #300]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0f0      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8083 	beq.w	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	4b44      	ldr	r3, [pc, #272]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	4a43      	ldr	r2, [pc, #268]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d5e:	4b41      	ldr	r3, [pc, #260]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d76:	f7fb f98d 	bl	8001094 <HAL_GetTick>
 8005d7a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7e:	f7fb f989 	bl	8001094 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e062      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d90:	4b35      	ldr	r3, [pc, #212]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0f0      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d9c:	4b31      	ldr	r3, [pc, #196]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d02f      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d028      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dba:	4b2a      	ldr	r3, [pc, #168]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dc2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dc4:	4b29      	ldr	r3, [pc, #164]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dca:	4b28      	ldr	r3, [pc, #160]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dd0:	4a24      	ldr	r2, [pc, #144]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dd6:	4b23      	ldr	r3, [pc, #140]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d114      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005de2:	f7fb f957 	bl	8001094 <HAL_GetTick>
 8005de6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de8:	e00a      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dea:	f7fb f953 	bl	8001094 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e02a      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e00:	4b18      	ldr	r3, [pc, #96]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0ee      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e18:	d10d      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e1a:	4b12      	ldr	r3, [pc, #72]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e2e:	490d      	ldr	r1, [pc, #52]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	608b      	str	r3, [r1, #8]
 8005e34:	e005      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e36:	4b0b      	ldr	r3, [pc, #44]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e3c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e40:	6093      	str	r3, [r2, #8]
 8005e42:	4b08      	ldr	r3, [pc, #32]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e4e:	4905      	ldr	r1, [pc, #20]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	42470068 	.word	0x42470068
 8005e64:	40023800 	.word	0x40023800
 8005e68:	40007000 	.word	0x40007000
 8005e6c:	42470e40 	.word	0x42470e40

08005e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d13f      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e8e:	4b24      	ldr	r3, [pc, #144]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e96:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d006      	beq.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ea4:	d12f      	bne.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ea8:	617b      	str	r3, [r7, #20]
          break;
 8005eaa:	e02f      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005eac:	4b1c      	ldr	r3, [pc, #112]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005eb8:	d108      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005eba:	4b19      	ldr	r3, [pc, #100]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ec2:	4a19      	ldr	r2, [pc, #100]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	e007      	b.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ecc:	4b14      	ldr	r3, [pc, #80]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ed4:	4a15      	ldr	r2, [pc, #84]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eda:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005edc:	4b10      	ldr	r3, [pc, #64]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ee2:	099b      	lsrs	r3, r3, #6
 8005ee4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ef6:	0f1b      	lsrs	r3, r3, #28
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f02:	617b      	str	r3, [r7, #20]
          break;
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
          break;
 8005f0a:	bf00      	nop
        }
      }
      break;
 8005f0c:	e000      	b.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005f0e:	bf00      	nop
    }
  }
  return frequency;
 8005f10:	697b      	ldr	r3, [r7, #20]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40023800 	.word	0x40023800
 8005f24:	00bb8000 	.word	0x00bb8000
 8005f28:	007a1200 	.word	0x007a1200
 8005f2c:	00f42400 	.word	0x00f42400

08005f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e07b      	b.n	800603a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d108      	bne.n	8005f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f52:	d009      	beq.n	8005f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	61da      	str	r2, [r3, #28]
 8005f5a:	e005      	b.n	8005f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fa ff22 	bl	8000dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fec:	ea42 0103 	orr.w	r1, r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	0c1b      	lsrs	r3, r3, #16
 8006006:	f003 0104 	and.w	r1, r3, #4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600e:	f003 0210 	and.w	r2, r3, #16
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006028:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006042:	b084      	sub	sp, #16
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	f107 001c 	add.w	r0, r7, #28
 8006050:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006054:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006058:	2b01      	cmp	r3, #1
 800605a:	d123      	bne.n	80060a4 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006060:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006084:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006088:	2b01      	cmp	r3, #1
 800608a:	d105      	bne.n	8006098 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f9dc 	bl	8006456 <USB_CoreReset>
 800609e:	4603      	mov	r3, r0
 80060a0:	73fb      	strb	r3, [r7, #15]
 80060a2:	e01b      	b.n	80060dc <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f9d0 	bl	8006456 <USB_CoreReset>
 80060b6:	4603      	mov	r3, r0
 80060b8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80060ce:	e005      	b.n	80060dc <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060dc:	7fbb      	ldrb	r3, [r7, #30]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d10b      	bne.n	80060fa <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f043 0206 	orr.w	r2, r3, #6
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006106:	b004      	add	sp, #16
 8006108:	4770      	bx	lr

0800610a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f043 0201 	orr.w	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f023 0201 	bic.w	r2, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	460b      	mov	r3, r1
 8006158:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d115      	bne.n	800619c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800617c:	200a      	movs	r0, #10
 800617e:	f7fa ff95 	bl	80010ac <HAL_Delay>
      ms += 10U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	330a      	adds	r3, #10
 8006186:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f956 	bl	800643a <USB_GetMode>
 800618e:	4603      	mov	r3, r0
 8006190:	2b01      	cmp	r3, #1
 8006192:	d01e      	beq.n	80061d2 <USB_SetCurrentMode+0x84>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2bc7      	cmp	r3, #199	@ 0xc7
 8006198:	d9f0      	bls.n	800617c <USB_SetCurrentMode+0x2e>
 800619a:	e01a      	b.n	80061d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d115      	bne.n	80061ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061ae:	200a      	movs	r0, #10
 80061b0:	f7fa ff7c 	bl	80010ac <HAL_Delay>
      ms += 10U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	330a      	adds	r3, #10
 80061b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f93d 	bl	800643a <USB_GetMode>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <USB_SetCurrentMode+0x84>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80061ca:	d9f0      	bls.n	80061ae <USB_SetCurrentMode+0x60>
 80061cc:	e001      	b.n	80061d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e005      	b.n	80061de <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2bc8      	cmp	r3, #200	@ 0xc8
 80061d6:	d101      	bne.n	80061dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e000      	b.n	80061de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3301      	adds	r3, #1
 80061f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006200:	d901      	bls.n	8006206 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e01b      	b.n	800623e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	daf2      	bge.n	80061f4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	019b      	lsls	r3, r3, #6
 8006216:	f043 0220 	orr.w	r2, r3, #32
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3301      	adds	r3, #1
 8006222:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800622a:	d901      	bls.n	8006230 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e006      	b.n	800623e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b20      	cmp	r3, #32
 800623a:	d0f0      	beq.n	800621e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3301      	adds	r3, #1
 800625a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006262:	d901      	bls.n	8006268 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e018      	b.n	800629a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	daf2      	bge.n	8006256 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2210      	movs	r2, #16
 8006278:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3301      	adds	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006286:	d901      	bls.n	800628c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e006      	b.n	800629a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b10      	cmp	r3, #16
 8006296:	d0f0      	beq.n	800627a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b089      	sub	sp, #36	@ 0x24
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	4611      	mov	r1, r2
 80062b2:	461a      	mov	r2, r3
 80062b4:	460b      	mov	r3, r1
 80062b6:	71fb      	strb	r3, [r7, #7]
 80062b8:	4613      	mov	r3, r2
 80062ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d123      	bne.n	8006314 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062cc:	88bb      	ldrh	r3, [r7, #4]
 80062ce:	3303      	adds	r3, #3
 80062d0:	089b      	lsrs	r3, r3, #2
 80062d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062d4:	2300      	movs	r3, #0
 80062d6:	61bb      	str	r3, [r7, #24]
 80062d8:	e018      	b.n	800630c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	031a      	lsls	r2, r3, #12
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062e6:	461a      	mov	r2, r3
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	3301      	adds	r3, #1
 80062f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	3301      	adds	r3, #1
 80062f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	3301      	adds	r3, #1
 80062fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	3301      	adds	r3, #1
 8006304:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	3301      	adds	r3, #1
 800630a:	61bb      	str	r3, [r7, #24]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	429a      	cmp	r2, r3
 8006312:	d3e2      	bcc.n	80062da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3724      	adds	r7, #36	@ 0x24
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006322:	b480      	push	{r7}
 8006324:	b08b      	sub	sp, #44	@ 0x2c
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	4613      	mov	r3, r2
 800632e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006338:	88fb      	ldrh	r3, [r7, #6]
 800633a:	089b      	lsrs	r3, r3, #2
 800633c:	b29b      	uxth	r3, r3
 800633e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006348:	2300      	movs	r3, #0
 800634a:	623b      	str	r3, [r7, #32]
 800634c:	e014      	b.n	8006378 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	601a      	str	r2, [r3, #0]
    pDest++;
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	3301      	adds	r3, #1
 800635e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006362:	3301      	adds	r3, #1
 8006364:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	3301      	adds	r3, #1
 800636a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	3301      	adds	r3, #1
 8006370:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	3301      	adds	r3, #1
 8006376:	623b      	str	r3, [r7, #32]
 8006378:	6a3a      	ldr	r2, [r7, #32]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	429a      	cmp	r2, r3
 800637e:	d3e6      	bcc.n	800634e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006380:	8bfb      	ldrh	r3, [r7, #30]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01e      	beq.n	80063c4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006390:	461a      	mov	r2, r3
 8006392:	f107 0310 	add.w	r3, r7, #16
 8006396:	6812      	ldr	r2, [r2, #0]
 8006398:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	fa22 f303 	lsr.w	r3, r2, r3
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	701a      	strb	r2, [r3, #0]
      i++;
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	3301      	adds	r3, #1
 80063b0:	623b      	str	r3, [r7, #32]
      pDest++;
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	3301      	adds	r3, #1
 80063b6:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80063b8:	8bfb      	ldrh	r3, [r7, #30]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063be:	8bfb      	ldrh	r3, [r7, #30]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1ea      	bne.n	800639a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	372c      	adds	r7, #44	@ 0x2c
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4013      	ands	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063ea:	68fb      	ldr	r3, [r7, #12]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800642c:	68bb      	ldr	r3, [r7, #8]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f003 0301 	and.w	r3, r3, #1
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800646e:	d901      	bls.n	8006474 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e01b      	b.n	80064ac <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	daf2      	bge.n	8006462 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f043 0201 	orr.w	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3301      	adds	r3, #1
 8006490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006498:	d901      	bls.n	800649e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e006      	b.n	80064ac <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d0f0      	beq.n	800648c <USB_CoreReset+0x36>

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064b8:	b084      	sub	sp, #16
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b086      	sub	sp, #24
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80064c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064d8:	461a      	mov	r2, r3
 80064da:	2300      	movs	r3, #0
 80064dc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	d119      	bne.n	8006542 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800650e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006512:	2b01      	cmp	r3, #1
 8006514:	d10a      	bne.n	800652c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006524:	f043 0304 	orr.w	r3, r3, #4
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	e014      	b.n	8006556 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800653a:	f023 0304 	bic.w	r3, r3, #4
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	e009      	b.n	8006556 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006550:	f023 0304 	bic.w	r3, r3, #4
 8006554:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006556:	2110      	movs	r1, #16
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fe44 	bl	80061e6 <USB_FlushTxFifo>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff fe6e 	bl	800624a <USB_FlushRxFifo>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006578:	2300      	movs	r3, #0
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	e015      	b.n	80065aa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800658a:	461a      	mov	r2, r3
 800658c:	f04f 33ff 	mov.w	r3, #4294967295
 8006590:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800659e:	461a      	mov	r2, r3
 80065a0:	2300      	movs	r3, #0
 80065a2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	3301      	adds	r3, #1
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80065ae:	461a      	mov	r2, r3
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d3e3      	bcc.n	800657e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f04f 32ff 	mov.w	r2, #4294967295
 80065c2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a18      	ldr	r2, [pc, #96]	@ (8006628 <USB_HostInit+0x170>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d10b      	bne.n	80065e4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065d2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a15      	ldr	r2, [pc, #84]	@ (800662c <USB_HostInit+0x174>)
 80065d8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a14      	ldr	r2, [pc, #80]	@ (8006630 <USB_HostInit+0x178>)
 80065de:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80065e2:	e009      	b.n	80065f8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2280      	movs	r2, #128	@ 0x80
 80065e8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a11      	ldr	r2, [pc, #68]	@ (8006634 <USB_HostInit+0x17c>)
 80065ee:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a11      	ldr	r2, [pc, #68]	@ (8006638 <USB_HostInit+0x180>)
 80065f4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	f043 0210 	orr.w	r2, r3, #16
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	4b0a      	ldr	r3, [pc, #40]	@ (800663c <USB_HostInit+0x184>)
 8006612:	4313      	orrs	r3, r2
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006618:	7dfb      	ldrb	r3, [r7, #23]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006624:	b004      	add	sp, #16
 8006626:	4770      	bx	lr
 8006628:	40040000 	.word	0x40040000
 800662c:	01000200 	.word	0x01000200
 8006630:	00e00300 	.word	0x00e00300
 8006634:	00600080 	.word	0x00600080
 8006638:	004000e0 	.word	0x004000e0
 800663c:	a3200008 	.word	0xa3200008

08006640 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800665e:	f023 0303 	bic.w	r3, r3, #3
 8006662:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006678:	4313      	orrs	r3, r2
 800667a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d107      	bne.n	8006692 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006688:	461a      	mov	r2, r3
 800668a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800668e:	6053      	str	r3, [r2, #4]
 8006690:	e00c      	b.n	80066ac <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d107      	bne.n	80066a8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800669e:	461a      	mov	r2, r3
 80066a0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80066a4:	6053      	str	r3, [r2, #4]
 80066a6:	e001      	b.n	80066ac <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80066da:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80066ea:	2064      	movs	r0, #100	@ 0x64
 80066ec:	f7fa fcde 	bl	80010ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80066fe:	200a      	movs	r0, #10
 8006700:	f7fa fcd4 	bl	80010ac <HAL_Delay>

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006732:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d109      	bne.n	8006752 <USB_DriveVbus+0x44>
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d106      	bne.n	8006752 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800674c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006750:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800675c:	d109      	bne.n	8006772 <USB_DriveVbus+0x64>
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d106      	bne.n	8006772 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800676c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006770:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	0c5b      	lsrs	r3, r3, #17
 800679e:	f003 0303 	and.w	r3, r3, #3
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b085      	sub	sp, #20
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	b29b      	uxth	r3, r3
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	4608      	mov	r0, r1
 80067da:	4611      	mov	r1, r2
 80067dc:	461a      	mov	r2, r3
 80067de:	4603      	mov	r3, r0
 80067e0:	70fb      	strb	r3, [r7, #3]
 80067e2:	460b      	mov	r3, r1
 80067e4:	70bb      	strb	r3, [r7, #2]
 80067e6:	4613      	mov	r3, r2
 80067e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067fe:	461a      	mov	r2, r3
 8006800:	f04f 33ff 	mov.w	r3, #4294967295
 8006804:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006806:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800680a:	2b03      	cmp	r3, #3
 800680c:	d87c      	bhi.n	8006908 <USB_HC_Init+0x138>
 800680e:	a201      	add	r2, pc, #4	@ (adr r2, 8006814 <USB_HC_Init+0x44>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	08006825 	.word	0x08006825
 8006818:	080068cb 	.word	0x080068cb
 800681c:	08006825 	.word	0x08006825
 8006820:	0800688d 	.word	0x0800688d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006830:	461a      	mov	r2, r3
 8006832:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006836:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006838:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800683c:	2b00      	cmp	r3, #0
 800683e:	da10      	bge.n	8006862 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	4413      	add	r3, r2
 8006848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	0151      	lsls	r1, r2, #5
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	440a      	add	r2, r1
 8006856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800685a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800685e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006860:	e055      	b.n	800690e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a6f      	ldr	r2, [pc, #444]	@ (8006a24 <USB_HC_Init+0x254>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d151      	bne.n	800690e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	4413      	add	r3, r2
 8006872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	78fa      	ldrb	r2, [r7, #3]
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	440a      	add	r2, r1
 8006880:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006884:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006888:	60d3      	str	r3, [r2, #12]
      break;
 800688a:	e040      	b.n	800690e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	4413      	add	r3, r2
 8006894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006898:	461a      	mov	r2, r3
 800689a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800689e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	da34      	bge.n	8006912 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80068c8:	e023      	b.n	8006912 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d6:	461a      	mov	r2, r3
 80068d8:	f240 2325 	movw	r3, #549	@ 0x225
 80068dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	da17      	bge.n	8006916 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80068e6:	78fb      	ldrb	r3, [r7, #3]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	78fa      	ldrb	r2, [r7, #3]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006900:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006904:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006906:	e006      	b.n	8006916 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	77fb      	strb	r3, [r7, #31]
      break;
 800690c:	e004      	b.n	8006918 <USB_HC_Init+0x148>
      break;
 800690e:	bf00      	nop
 8006910:	e002      	b.n	8006918 <USB_HC_Init+0x148>
      break;
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <USB_HC_Init+0x148>
      break;
 8006916:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	4413      	add	r3, r2
 8006920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006924:	461a      	mov	r2, r3
 8006926:	2300      	movs	r3, #0
 8006928:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	4413      	add	r3, r2
 8006932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	78fa      	ldrb	r2, [r7, #3]
 800693a:	0151      	lsls	r1, r2, #5
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	440a      	add	r2, r1
 8006940:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006944:	f043 0302 	orr.w	r3, r3, #2
 8006948:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	2101      	movs	r1, #1
 800695a:	fa01 f303 	lsl.w	r3, r1, r3
 800695e:	6939      	ldr	r1, [r7, #16]
 8006960:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006964:	4313      	orrs	r3, r2
 8006966:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006974:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006978:	2b00      	cmp	r3, #0
 800697a:	da03      	bge.n	8006984 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800697c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	e001      	b.n	8006988 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff fef9 	bl	8006780 <USB_GetHostSpeed>
 800698e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006990:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006994:	2b02      	cmp	r3, #2
 8006996:	d106      	bne.n	80069a6 <USB_HC_Init+0x1d6>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d003      	beq.n	80069a6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800699e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e001      	b.n	80069aa <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069aa:	787b      	ldrb	r3, [r7, #1]
 80069ac:	059b      	lsls	r3, r3, #22
 80069ae:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069b2:	78bb      	ldrb	r3, [r7, #2]
 80069b4:	02db      	lsls	r3, r3, #11
 80069b6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069ba:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069c0:	049b      	lsls	r3, r3, #18
 80069c2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069c6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80069c8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80069ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069ce:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	431a      	orrs	r2, r3
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069d8:	78fa      	ldrb	r2, [r7, #3]
 80069da:	0151      	lsls	r1, r2, #5
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	440a      	add	r2, r1
 80069e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80069e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069e8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80069ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d003      	beq.n	80069fa <USB_HC_Init+0x22a>
 80069f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d10f      	bne.n	8006a1a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	78fa      	ldrb	r2, [r7, #3]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a18:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	40040000 	.word	0x40040000

08006a28 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08c      	sub	sp, #48	@ 0x30
 8006a2c:	af02      	add	r7, sp, #8
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	4613      	mov	r3, r2
 8006a34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006a40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a44:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a5d      	ldr	r2, [pc, #372]	@ (8006bc0 <USB_HC_StartXfer+0x198>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d12f      	bne.n	8006aae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d11c      	bne.n	8006a8e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	7c9b      	ldrb	r3, [r3, #18]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <USB_HC_StartXfer+0x3c>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	7c9b      	ldrb	r3, [r3, #18]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d124      	bne.n	8006aae <USB_HC_StartXfer+0x86>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	799b      	ldrb	r3, [r3, #6]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d120      	bne.n	8006aae <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	0151      	lsls	r1, r2, #5
 8006a7e:	6a3a      	ldr	r2, [r7, #32]
 8006a80:	440a      	add	r2, r1
 8006a82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a8a:	60d3      	str	r3, [r2, #12]
 8006a8c:	e00f      	b.n	8006aae <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	791b      	ldrb	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <USB_HC_StartXfer+0x86>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	795b      	ldrb	r3, [r3, #5]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d107      	bne.n	8006aae <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 fb6b 	bl	8007180 <USB_DoPing>
        return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e232      	b.n	8006f14 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	799b      	ldrb	r3, [r3, #6]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d158      	bne.n	8006b68 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	78db      	ldrb	r3, [r3, #3]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ac2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	8a92      	ldrh	r2, [r2, #20]
 8006ac8:	fb03 f202 	mul.w	r2, r3, r2
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	61da      	str	r2, [r3, #28]
 8006ad0:	e07c      	b.n	8006bcc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	7c9b      	ldrb	r3, [r3, #18]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d130      	bne.n	8006b3c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	2bbc      	cmp	r3, #188	@ 0xbc
 8006ae0:	d918      	bls.n	8006b14 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	8a9b      	ldrh	r3, [r3, #20]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d003      	beq.n	8006b04 <USB_HC_StartXfer+0xdc>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d103      	bne.n	8006b0c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2202      	movs	r2, #2
 8006b08:	60da      	str	r2, [r3, #12]
 8006b0a:	e05f      	b.n	8006bcc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	60da      	str	r2, [r3, #12]
 8006b12:	e05b      	b.n	8006bcc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	6a1a      	ldr	r2, [r3, #32]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d007      	beq.n	8006b34 <USB_HC_StartXfer+0x10c>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d003      	beq.n	8006b34 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2204      	movs	r2, #4
 8006b30:	60da      	str	r2, [r3, #12]
 8006b32:	e04b      	b.n	8006bcc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2203      	movs	r2, #3
 8006b38:	60da      	str	r2, [r3, #12]
 8006b3a:	e047      	b.n	8006bcc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d10d      	bne.n	8006b5e <USB_HC_StartXfer+0x136>
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	8a92      	ldrh	r2, [r2, #20]
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d907      	bls.n	8006b5e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	8a92      	ldrh	r2, [r2, #20]
 8006b54:	fb03 f202 	mul.w	r2, r3, r2
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	61da      	str	r2, [r3, #28]
 8006b5c:	e036      	b.n	8006bcc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6a1a      	ldr	r2, [r3, #32]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	61da      	str	r2, [r3, #28]
 8006b66:	e031      	b.n	8006bcc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d018      	beq.n	8006ba2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	8a92      	ldrh	r2, [r2, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	8a92      	ldrh	r2, [r2, #20]
 8006b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b84:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006b86:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006b88:	8b7b      	ldrh	r3, [r7, #26]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d90b      	bls.n	8006ba6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006b8e:	8b7b      	ldrh	r3, [r7, #26]
 8006b90:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	8a92      	ldrh	r2, [r2, #20]
 8006b98:	fb03 f202 	mul.w	r2, r3, r2
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	61da      	str	r2, [r3, #28]
 8006ba0:	e001      	b.n	8006ba6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	78db      	ldrb	r3, [r3, #3]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006bae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	8a92      	ldrh	r2, [r2, #20]
 8006bb4:	fb03 f202 	mul.w	r2, r3, r2
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	61da      	str	r2, [r3, #28]
 8006bbc:	e006      	b.n	8006bcc <USB_HC_StartXfer+0x1a4>
 8006bbe:	bf00      	nop
 8006bc0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	6a1a      	ldr	r2, [r3, #32]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bd4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bd6:	04d9      	lsls	r1, r3, #19
 8006bd8:	4ba3      	ldr	r3, [pc, #652]	@ (8006e68 <USB_HC_StartXfer+0x440>)
 8006bda:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bdc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	7d9b      	ldrb	r3, [r3, #22]
 8006be2:	075b      	lsls	r3, r3, #29
 8006be4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006be8:	69f9      	ldr	r1, [r7, #28]
 8006bea:	0148      	lsls	r0, r1, #5
 8006bec:	6a39      	ldr	r1, [r7, #32]
 8006bee:	4401      	add	r1, r0
 8006bf0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bf4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bf6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	6999      	ldr	r1, [r3, #24]
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c0e:	460a      	mov	r2, r1
 8006c10:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	bf0c      	ite	eq
 8006c22:	2301      	moveq	r3, #1
 8006c24:	2300      	movne	r3, #0
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69fa      	ldr	r2, [r7, #28]
 8006c3a:	0151      	lsls	r1, r2, #5
 8006c3c:	6a3a      	ldr	r2, [r7, #32]
 8006c3e:	440a      	add	r2, r1
 8006c40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c44:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c48:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	7e7b      	ldrb	r3, [r7, #25]
 8006c5a:	075b      	lsls	r3, r3, #29
 8006c5c:	69f9      	ldr	r1, [r7, #28]
 8006c5e:	0148      	lsls	r0, r1, #5
 8006c60:	6a39      	ldr	r1, [r7, #32]
 8006c62:	4401      	add	r1, r0
 8006c64:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	799b      	ldrb	r3, [r3, #6]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	f040 80c3 	bne.w	8006dfc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	7c5b      	ldrb	r3, [r3, #17]
 8006c7a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c80:	4313      	orrs	r3, r2
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	6a3a      	ldr	r2, [r7, #32]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006c8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c92:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	6a3a      	ldr	r2, [r7, #32]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006cb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	79db      	ldrb	r3, [r3, #7]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d123      	bne.n	8006d04 <USB_HC_StartXfer+0x2dc>
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	78db      	ldrb	r3, [r3, #3]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d11f      	bne.n	8006d04 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	69fa      	ldr	r2, [r7, #28]
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	6a3a      	ldr	r2, [r7, #32]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ce2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	0151      	lsls	r1, r2, #5
 8006cf6:	6a3a      	ldr	r2, [r7, #32]
 8006cf8:	440a      	add	r2, r1
 8006cfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d02:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	7c9b      	ldrb	r3, [r3, #18]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d003      	beq.n	8006d14 <USB_HC_StartXfer+0x2ec>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	7c9b      	ldrb	r3, [r3, #18]
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d117      	bne.n	8006d44 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d113      	bne.n	8006d44 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	78db      	ldrb	r3, [r3, #3]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d10f      	bne.n	8006d44 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	0151      	lsls	r1, r2, #5
 8006d36:	6a3a      	ldr	r2, [r7, #32]
 8006d38:	440a      	add	r2, r1
 8006d3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d42:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	7c9b      	ldrb	r3, [r3, #18]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d162      	bne.n	8006e12 <USB_HC_StartXfer+0x3ea>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	78db      	ldrb	r3, [r3, #3]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d15e      	bne.n	8006e12 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d858      	bhi.n	8006e10 <USB_HC_StartXfer+0x3e8>
 8006d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d64 <USB_HC_StartXfer+0x33c>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d75 	.word	0x08006d75
 8006d68:	08006d97 	.word	0x08006d97
 8006d6c:	08006db9 	.word	0x08006db9
 8006d70:	08006ddb 	.word	0x08006ddb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	69fa      	ldr	r2, [r7, #28]
 8006d84:	0151      	lsls	r1, r2, #5
 8006d86:	6a3a      	ldr	r2, [r7, #32]
 8006d88:	440a      	add	r2, r1
 8006d8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d92:	6053      	str	r3, [r2, #4]
          break;
 8006d94:	e03d      	b.n	8006e12 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	6a3a      	ldr	r2, [r7, #32]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006db0:	f043 030e 	orr.w	r3, r3, #14
 8006db4:	6053      	str	r3, [r2, #4]
          break;
 8006db6:	e02c      	b.n	8006e12 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	6a3a      	ldr	r2, [r7, #32]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006dd6:	6053      	str	r3, [r2, #4]
          break;
 8006dd8:	e01b      	b.n	8006e12 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	6a3a      	ldr	r2, [r7, #32]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006df4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006df8:	6053      	str	r3, [r2, #4]
          break;
 8006dfa:	e00a      	b.n	8006e12 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e08:	461a      	mov	r2, r3
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	6053      	str	r3, [r2, #4]
 8006e0e:	e000      	b.n	8006e12 <USB_HC_StartXfer+0x3ea>
          break;
 8006e10:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e28:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	78db      	ldrb	r3, [r3, #3]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e38:	613b      	str	r3, [r7, #16]
 8006e3a:	e003      	b.n	8006e44 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e42:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e4a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e58:	461a      	mov	r2, r3
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	e055      	b.n	8006f14 <USB_HC_StartXfer+0x4ec>
 8006e68:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	78db      	ldrb	r3, [r3, #3]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d14e      	bne.n	8006f12 <USB_HC_StartXfer+0x4ea>
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d04a      	beq.n	8006f12 <USB_HC_StartXfer+0x4ea>
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	79db      	ldrb	r3, [r3, #7]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d146      	bne.n	8006f12 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	7c9b      	ldrb	r3, [r3, #18]
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d831      	bhi.n	8006ef0 <USB_HC_StartXfer+0x4c8>
 8006e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e94 <USB_HC_StartXfer+0x46c>)
 8006e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e92:	bf00      	nop
 8006e94:	08006ea5 	.word	0x08006ea5
 8006e98:	08006ec9 	.word	0x08006ec9
 8006e9c:	08006ea5 	.word	0x08006ea5
 8006ea0:	08006ec9 	.word	0x08006ec9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	3303      	adds	r3, #3
 8006eaa:	089b      	lsrs	r3, r3, #2
 8006eac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006eae:	8afa      	ldrh	r2, [r7, #22]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d91c      	bls.n	8006ef4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f043 0220 	orr.w	r2, r3, #32
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ec6:	e015      	b.n	8006ef4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	3303      	adds	r3, #3
 8006ece:	089b      	lsrs	r3, r3, #2
 8006ed0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006ed2:	8afa      	ldrh	r2, [r7, #22]
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d90a      	bls.n	8006ef8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	619a      	str	r2, [r3, #24]
        }
        break;
 8006eee:	e003      	b.n	8006ef8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006ef0:	bf00      	nop
 8006ef2:	e002      	b.n	8006efa <USB_HC_StartXfer+0x4d2>
        break;
 8006ef4:	bf00      	nop
 8006ef6:	e000      	b.n	8006efa <USB_HC_StartXfer+0x4d2>
        break;
 8006ef8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	6999      	ldr	r1, [r3, #24]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	785a      	ldrb	r2, [r3, #1]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2000      	movs	r0, #0
 8006f0a:	9000      	str	r0, [sp, #0]
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff f9ca 	bl	80062a6 <USB_WritePacket>
  }

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3728      	adds	r7, #40	@ 0x28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	b29b      	uxth	r3, r3
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b089      	sub	sp, #36	@ 0x24
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	460b      	mov	r3, r1
 8006f48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	0c9b      	lsrs	r3, r3, #18
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	0fdb      	lsrs	r3, r3, #31
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	0fdb      	lsrs	r3, r3, #31
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d10d      	bne.n	8006fc0 <USB_HC_Halt+0x82>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10a      	bne.n	8006fc0 <USB_HC_Halt+0x82>
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d002      	beq.n	8006fbc <USB_HC_Halt+0x7e>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d101      	bne.n	8006fc0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	e0d8      	b.n	8007172 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <USB_HC_Halt+0x8e>
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d173      	bne.n	80070b4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fe6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d14a      	bne.n	800708e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d133      	bne.n	800706c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	4413      	add	r3, r2
 800700c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	440a      	add	r2, r1
 800701a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800701e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007022:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	4413      	add	r3, r2
 800702c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	69fa      	ldr	r2, [r7, #28]
 8007038:	440a      	add	r2, r1
 800703a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800703e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007042:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	3301      	adds	r3, #1
 8007048:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007050:	d82e      	bhi.n	80070b0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	4413      	add	r3, r2
 800705a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007064:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007068:	d0ec      	beq.n	8007044 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800706a:	e081      	b.n	8007170 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	440a      	add	r2, r1
 8007082:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007086:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800708a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800708c:	e070      	b.n	8007170 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070ae:	e05f      	b.n	8007170 <USB_HC_Halt+0x232>
            break;
 80070b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070b2:	e05d      	b.n	8007170 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	0151      	lsls	r1, r2, #5
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	440a      	add	r2, r1
 80070ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d133      	bne.n	800714c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007102:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	4413      	add	r3, r2
 800710c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	440a      	add	r2, r1
 800711a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800711e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007122:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	3301      	adds	r3, #1
 8007128:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007130:	d81d      	bhi.n	800716e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	4413      	add	r3, r2
 800713a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007144:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007148:	d0ec      	beq.n	8007124 <USB_HC_Halt+0x1e6>
 800714a:	e011      	b.n	8007170 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	4413      	add	r3, r2
 8007154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	0151      	lsls	r1, r2, #5
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	440a      	add	r2, r1
 8007162:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007166:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	e000      	b.n	8007170 <USB_HC_Halt+0x232>
          break;
 800716e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3724      	adds	r7, #36	@ 0x24
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
	...

08007180 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007194:	2301      	movs	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	04da      	lsls	r2, r3, #19
 800719c:	4b15      	ldr	r3, [pc, #84]	@ (80071f4 <USB_DoPing+0x74>)
 800719e:	4013      	ands	r3, r2
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	0151      	lsls	r1, r2, #5
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	440a      	add	r2, r1
 80071a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80071c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071de:	461a      	mov	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	1ff80000 	.word	0x1ff80000

080071f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7fe ff8d 	bl	800612c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007212:	2110      	movs	r1, #16
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7fe ffe6 	bl	80061e6 <USB_FlushTxFifo>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff f810 	bl	800624a <USB_FlushRxFifo>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007234:	2300      	movs	r3, #0
 8007236:	61bb      	str	r3, [r7, #24]
 8007238:	e01f      	b.n	800727a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	4413      	add	r3, r2
 8007242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007250:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007258:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007260:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	4413      	add	r3, r2
 800726a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800726e:	461a      	mov	r2, r3
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	3301      	adds	r3, #1
 8007278:	61bb      	str	r3, [r7, #24]
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2b0f      	cmp	r3, #15
 800727e:	d9dc      	bls.n	800723a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007280:	2300      	movs	r3, #0
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	e034      	b.n	80072f0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	4413      	add	r3, r2
 800728e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800729c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ba:	461a      	mov	r2, r3
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3301      	adds	r3, #1
 80072c4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072cc:	d80c      	bhi.n	80072e8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072e4:	d0ec      	beq.n	80072c0 <USB_StopHost+0xc8>
 80072e6:	e000      	b.n	80072ea <USB_StopHost+0xf2>
        break;
 80072e8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	3301      	adds	r3, #1
 80072ee:	61bb      	str	r3, [r7, #24]
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	2b0f      	cmp	r3, #15
 80072f4:	d9c7      	bls.n	8007286 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072fc:	461a      	mov	r2, r3
 80072fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007302:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f04f 32ff 	mov.w	r2, #4294967295
 800730a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7fe fefc 	bl	800610a <USB_EnableGlobalInt>

  return ret;
 8007312:	7ffb      	ldrb	r3, [r7, #31]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3720      	adds	r7, #32
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800731c:	b590      	push	{r4, r7, lr}
 800731e:	b089      	sub	sp, #36	@ 0x24
 8007320:	af04      	add	r7, sp, #16
 8007322:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007324:	2301      	movs	r3, #1
 8007326:	2202      	movs	r2, #2
 8007328:	2102      	movs	r1, #2
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fc85 	bl	8007c3a <USBH_FindInterface>
 8007330:	4603      	mov	r3, r0
 8007332:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	2bff      	cmp	r3, #255	@ 0xff
 8007338:	d002      	beq.n	8007340 <USBH_CDC_InterfaceInit+0x24>
 800733a:	7bfb      	ldrb	r3, [r7, #15]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d901      	bls.n	8007344 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007340:	2302      	movs	r3, #2
 8007342:	e13d      	b.n	80075c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fc5a 	bl	8007c02 <USBH_SelectInterface>
 800734e:	4603      	mov	r3, r0
 8007350:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007352:	7bbb      	ldrb	r3, [r7, #14]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007358:	2302      	movs	r3, #2
 800735a:	e131      	b.n	80075c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007362:	2050      	movs	r0, #80	@ 0x50
 8007364:	f002 fb64 	bl	8009a30 <malloc>
 8007368:	4603      	mov	r3, r0
 800736a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800737c:	2302      	movs	r3, #2
 800737e:	e11f      	b.n	80075c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007380:	2250      	movs	r2, #80	@ 0x50
 8007382:	2100      	movs	r1, #0
 8007384:	68b8      	ldr	r0, [r7, #8]
 8007386:	f002 fc11 	bl	8009bac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800738a:	7bfb      	ldrb	r3, [r7, #15]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	211a      	movs	r1, #26
 8007390:	fb01 f303 	mul.w	r3, r1, r3
 8007394:	4413      	add	r3, r2
 8007396:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	b25b      	sxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	da15      	bge.n	80073ce <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	211a      	movs	r1, #26
 80073a8:	fb01 f303 	mul.w	r3, r1, r3
 80073ac:	4413      	add	r3, r2
 80073ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073b2:	781a      	ldrb	r2, [r3, #0]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	211a      	movs	r1, #26
 80073be:	fb01 f303 	mul.w	r3, r1, r3
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073c8:	881a      	ldrh	r2, [r3, #0]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	785b      	ldrb	r3, [r3, #1]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 ffbe 	bl	8009356 <USBH_AllocPipe>
 80073da:	4603      	mov	r3, r0
 80073dc:	461a      	mov	r2, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	7819      	ldrb	r1, [r3, #0]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	7858      	ldrb	r0, [r3, #1]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	8952      	ldrh	r2, [r2, #10]
 80073fa:	9202      	str	r2, [sp, #8]
 80073fc:	2203      	movs	r2, #3
 80073fe:	9201      	str	r2, [sp, #4]
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	4623      	mov	r3, r4
 8007404:	4602      	mov	r2, r0
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 ff76 	bl	80092f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2200      	movs	r2, #0
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f002 fa85 	bl	8009924 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800741a:	2300      	movs	r3, #0
 800741c:	2200      	movs	r2, #0
 800741e:	210a      	movs	r1, #10
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fc0a 	bl	8007c3a <USBH_FindInterface>
 8007426:	4603      	mov	r3, r0
 8007428:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	2bff      	cmp	r3, #255	@ 0xff
 800742e:	d002      	beq.n	8007436 <USBH_CDC_InterfaceInit+0x11a>
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d901      	bls.n	800743a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007436:	2302      	movs	r3, #2
 8007438:	e0c2      	b.n	80075c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	211a      	movs	r1, #26
 8007440:	fb01 f303 	mul.w	r3, r1, r3
 8007444:	4413      	add	r3, r2
 8007446:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	b25b      	sxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	da16      	bge.n	8007480 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	211a      	movs	r1, #26
 8007458:	fb01 f303 	mul.w	r3, r1, r3
 800745c:	4413      	add	r3, r2
 800745e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007462:	781a      	ldrb	r2, [r3, #0]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	211a      	movs	r1, #26
 800746e:	fb01 f303 	mul.w	r3, r1, r3
 8007472:	4413      	add	r3, r2
 8007474:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007478:	881a      	ldrh	r2, [r3, #0]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	835a      	strh	r2, [r3, #26]
 800747e:	e015      	b.n	80074ac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	211a      	movs	r1, #26
 8007486:	fb01 f303 	mul.w	r3, r1, r3
 800748a:	4413      	add	r3, r2
 800748c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007490:	781a      	ldrb	r2, [r3, #0]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	211a      	movs	r1, #26
 800749c:	fb01 f303 	mul.w	r3, r1, r3
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80074a6:	881a      	ldrh	r2, [r3, #0]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	211a      	movs	r1, #26
 80074b2:	fb01 f303 	mul.w	r3, r1, r3
 80074b6:	4413      	add	r3, r2
 80074b8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	b25b      	sxtb	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	da16      	bge.n	80074f2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	211a      	movs	r1, #26
 80074ca:	fb01 f303 	mul.w	r3, r1, r3
 80074ce:	4413      	add	r3, r2
 80074d0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074d4:	781a      	ldrb	r2, [r3, #0]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	211a      	movs	r1, #26
 80074e0:	fb01 f303 	mul.w	r3, r1, r3
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80074ea:	881a      	ldrh	r2, [r3, #0]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	835a      	strh	r2, [r3, #26]
 80074f0:	e015      	b.n	800751e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	211a      	movs	r1, #26
 80074f8:	fb01 f303 	mul.w	r3, r1, r3
 80074fc:	4413      	add	r3, r2
 80074fe:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007502:	781a      	ldrb	r2, [r3, #0]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	211a      	movs	r1, #26
 800750e:	fb01 f303 	mul.w	r3, r1, r3
 8007512:	4413      	add	r3, r2
 8007514:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007518:	881a      	ldrh	r2, [r3, #0]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	7b9b      	ldrb	r3, [r3, #14]
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 ff16 	bl	8009356 <USBH_AllocPipe>
 800752a:	4603      	mov	r3, r0
 800752c:	461a      	mov	r2, r3
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	7bdb      	ldrb	r3, [r3, #15]
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 ff0c 	bl	8009356 <USBH_AllocPipe>
 800753e:	4603      	mov	r3, r0
 8007540:	461a      	mov	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	7b59      	ldrb	r1, [r3, #13]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	7b98      	ldrb	r0, [r3, #14]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	8b12      	ldrh	r2, [r2, #24]
 800755e:	9202      	str	r2, [sp, #8]
 8007560:	2202      	movs	r2, #2
 8007562:	9201      	str	r2, [sp, #4]
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	4623      	mov	r3, r4
 8007568:	4602      	mov	r2, r0
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 fec4 	bl	80092f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	7b19      	ldrb	r1, [r3, #12]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	7bd8      	ldrb	r0, [r3, #15]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	8b52      	ldrh	r2, [r2, #26]
 8007588:	9202      	str	r2, [sp, #8]
 800758a:	2202      	movs	r2, #2
 800758c:	9201      	str	r2, [sp, #4]
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	4623      	mov	r3, r4
 8007592:	4602      	mov	r2, r0
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 feaf 	bl	80092f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	7b5b      	ldrb	r3, [r3, #13]
 80075a6:	2200      	movs	r2, #0
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f002 f9ba 	bl	8009924 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	7b1b      	ldrb	r3, [r3, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f002 f9b3 	bl	8009924 <USBH_LL_SetToggle>

  return USBH_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd90      	pop	{r4, r7, pc}

080075c8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00e      	beq.n	8007600 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fea4 	bl	8009336 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fecf 	bl	8009398 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	7b1b      	ldrb	r3, [r3, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00e      	beq.n	8007626 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	7b1b      	ldrb	r3, [r3, #12]
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 fe91 	bl	8009336 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	7b1b      	ldrb	r3, [r3, #12]
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 febc 	bl	8009398 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	7b5b      	ldrb	r3, [r3, #13]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00e      	beq.n	800764c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	7b5b      	ldrb	r3, [r3, #13]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fe7e 	bl	8009336 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	7b5b      	ldrb	r3, [r3, #13]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fea9 	bl	8009398 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00b      	beq.n	8007670 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	4618      	mov	r0, r3
 8007662:	f002 f9ed 	bl	8009a40 <free>
    phost->pActiveClass->pData = 0U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800766c:	2200      	movs	r2, #0
 800766e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3340      	adds	r3, #64	@ 0x40
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f8b1 	bl	80077fa <GetLineCoding>
 8007698:	4603      	mov	r3, r0
 800769a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d105      	bne.n	80076ae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076a8:	2102      	movs	r1, #2
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80076ae:	7afb      	ldrb	r3, [r7, #11]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80076c0:	2301      	movs	r3, #1
 80076c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d877      	bhi.n	80077cc <USBH_CDC_Process+0x114>
 80076dc:	a201      	add	r2, pc, #4	@ (adr r2, 80076e4 <USBH_CDC_Process+0x2c>)
 80076de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e2:	bf00      	nop
 80076e4:	080076f9 	.word	0x080076f9
 80076e8:	080076ff 	.word	0x080076ff
 80076ec:	0800772f 	.word	0x0800772f
 80076f0:	080077a3 	.word	0x080077a3
 80076f4:	080077b1 	.word	0x080077b1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73fb      	strb	r3, [r7, #15]
      break;
 80076fc:	e06d      	b.n	80077da <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f897 	bl	8007838 <SetLineCoding>
 800770a:	4603      	mov	r3, r0
 800770c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800770e:	7bbb      	ldrb	r3, [r7, #14]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d104      	bne.n	800771e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800771c:	e058      	b.n	80077d0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d055      	beq.n	80077d0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2204      	movs	r2, #4
 8007728:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800772c:	e050      	b.n	80077d0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	3340      	adds	r3, #64	@ 0x40
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f860 	bl	80077fa <GetLineCoding>
 800773a:	4603      	mov	r3, r0
 800773c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800773e:	7bbb      	ldrb	r3, [r7, #14]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d126      	bne.n	8007792 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007756:	791b      	ldrb	r3, [r3, #4]
 8007758:	429a      	cmp	r2, r3
 800775a:	d13b      	bne.n	80077d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007766:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007768:	429a      	cmp	r2, r3
 800776a:	d133      	bne.n	80077d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007776:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007778:	429a      	cmp	r2, r3
 800777a:	d12b      	bne.n	80077d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007784:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007786:	429a      	cmp	r2, r3
 8007788:	d124      	bne.n	80077d4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f958 	bl	8007a40 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007790:	e020      	b.n	80077d4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d01d      	beq.n	80077d4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2204      	movs	r2, #4
 800779c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80077a0:	e018      	b.n	80077d4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f867 	bl	8007876 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f8da 	bl	8007962 <CDC_ProcessReception>
      break;
 80077ae:	e014      	b.n	80077da <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80077b0:	2100      	movs	r1, #0
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 f81a 	bl	80087ec <USBH_ClrFeature>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80077ca:	e005      	b.n	80077d8 <USBH_CDC_Process+0x120>

    default:
      break;
 80077cc:	bf00      	nop
 80077ce:	e004      	b.n	80077da <USBH_CDC_Process+0x122>
      break;
 80077d0:	bf00      	nop
 80077d2:	e002      	b.n	80077da <USBH_CDC_Process+0x122>
      break;
 80077d4:	bf00      	nop
 80077d6:	e000      	b.n	80077da <USBH_CDC_Process+0x122>
      break;
 80077d8:	bf00      	nop

  }

  return status;
 80077da:	7bfb      	ldrb	r3, [r7, #15]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	22a1      	movs	r2, #161	@ 0xa1
 8007808:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2221      	movs	r2, #33	@ 0x21
 800780e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2207      	movs	r2, #7
 8007820:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2207      	movs	r2, #7
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 fb14 	bl	8008e56 <USBH_CtlReq>
 800782e:	4603      	mov	r3, r0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2221      	movs	r2, #33	@ 0x21
 8007846:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2207      	movs	r2, #7
 800785e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2207      	movs	r2, #7
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 faf5 	bl	8008e56 <USBH_CtlReq>
 800786c:	4603      	mov	r3, r0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b086      	sub	sp, #24
 800787a:	af02      	add	r7, sp, #8
 800787c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007888:	2300      	movs	r3, #0
 800788a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007892:	2b01      	cmp	r3, #1
 8007894:	d002      	beq.n	800789c <CDC_ProcessTransmission+0x26>
 8007896:	2b02      	cmp	r3, #2
 8007898:	d023      	beq.n	80078e2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800789a:	e05e      	b.n	800795a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	8b12      	ldrh	r2, [r2, #24]
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d90b      	bls.n	80078c0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	69d9      	ldr	r1, [r3, #28]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8b1a      	ldrh	r2, [r3, #24]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	7b5b      	ldrb	r3, [r3, #13]
 80078b4:	2001      	movs	r0, #1
 80078b6:	9000      	str	r0, [sp, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 fcda 	bl	8009272 <USBH_BulkSendData>
 80078be:	e00b      	b.n	80078d8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	7b5b      	ldrb	r3, [r3, #13]
 80078ce:	2001      	movs	r0, #1
 80078d0:	9000      	str	r0, [sp, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 fccd 	bl	8009272 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80078e0:	e03b      	b.n	800795a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	7b5b      	ldrb	r3, [r3, #13]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 fff1 	bl	80098d0 <USBH_LL_GetURBState>
 80078ee:	4603      	mov	r3, r0
 80078f0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80078f2:	7afb      	ldrb	r3, [r7, #11]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d128      	bne.n	800794a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	8b12      	ldrh	r2, [r2, #24]
 8007900:	4293      	cmp	r3, r2
 8007902:	d90e      	bls.n	8007922 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	8b12      	ldrh	r2, [r2, #24]
 800790c:	1a9a      	subs	r2, r3, r2
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	8b12      	ldrh	r2, [r2, #24]
 800791a:	441a      	add	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	61da      	str	r2, [r3, #28]
 8007920:	e002      	b.n	8007928 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007938:	e00e      	b.n	8007958 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f868 	bl	8007a18 <USBH_CDC_TransmitCallback>
      break;
 8007948:	e006      	b.n	8007958 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800794a:	7afb      	ldrb	r3, [r7, #11]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d103      	bne.n	8007958 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007958:	bf00      	nop
  }
}
 800795a:	bf00      	nop
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b086      	sub	sp, #24
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007974:	2300      	movs	r3, #0
 8007976:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800797e:	2b03      	cmp	r3, #3
 8007980:	d002      	beq.n	8007988 <CDC_ProcessReception+0x26>
 8007982:	2b04      	cmp	r3, #4
 8007984:	d00e      	beq.n	80079a4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007986:	e043      	b.n	8007a10 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	6a19      	ldr	r1, [r3, #32]
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	8b5a      	ldrh	r2, [r3, #26]
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	7b1b      	ldrb	r3, [r3, #12]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 fc91 	bl	80092bc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2204      	movs	r2, #4
 800799e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80079a2:	e035      	b.n	8007a10 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	7b1b      	ldrb	r3, [r3, #12]
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 ff90 	bl	80098d0 <USBH_LL_GetURBState>
 80079b0:	4603      	mov	r3, r0
 80079b2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80079b4:	7cfb      	ldrb	r3, [r7, #19]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d129      	bne.n	8007a0e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	7b1b      	ldrb	r3, [r3, #12]
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fef3 	bl	80097ac <USBH_LL_GetLastXferSize>
 80079c6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d016      	beq.n	8007a00 <CDC_ProcessReception+0x9e>
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	8b5b      	ldrh	r3, [r3, #26]
 80079d6:	461a      	mov	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4293      	cmp	r3, r2
 80079dc:	d110      	bne.n	8007a00 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	1ad2      	subs	r2, r2, r3
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	6a1a      	ldr	r2, [r3, #32]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	441a      	add	r2, r3
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2203      	movs	r2, #3
 80079fa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80079fe:	e006      	b.n	8007a0e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f80f 	bl	8007a2c <USBH_CDC_ReceiveCallback>
      break;
 8007a0e:	bf00      	nop
  }
}
 8007a10:	bf00      	nop
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e029      	b.n	8007ac0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	79fa      	ldrb	r2, [r7, #7]
 8007a70:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 f81f 	bl	8007ac8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f001 fdc3 	bl	8009644 <USBH_LL_Init>

  return USBH_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	e009      	b.n	8007aee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	33e0      	adds	r3, #224	@ 0xe0
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60fb      	str	r3, [r7, #12]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b0f      	cmp	r3, #15
 8007af2:	d9f2      	bls.n	8007ada <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007af4:	2300      	movs	r3, #0
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	e009      	b.n	8007b0e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b14:	d3f1      	bcc.n	8007afa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2240      	movs	r2, #64	@ 0x40
 8007b3a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	331c      	adds	r3, #28
 8007b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f002 f81d 	bl	8009bac <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f002 f814 	bl	8009bac <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007b8a:	2212      	movs	r2, #18
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f002 f80c 	bl	8009bac <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007b9a:	223e      	movs	r2, #62	@ 0x3e
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f002 f804 	bl	8009bac <memset>

  return USBH_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d016      	beq.n	8007bf0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10e      	bne.n	8007bea <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007bd2:	1c59      	adds	r1, r3, #1
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	33de      	adds	r3, #222	@ 0xde
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73fb      	strb	r3, [r7, #15]
 8007be8:	e004      	b.n	8007bf4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007bea:	2302      	movs	r3, #2
 8007bec:	73fb      	strb	r3, [r7, #15]
 8007bee:	e001      	b.n	8007bf4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b085      	sub	sp, #20
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d204      	bcs.n	8007c28 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	78fa      	ldrb	r2, [r7, #3]
 8007c22:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007c26:	e001      	b.n	8007c2c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c28:	2302      	movs	r3, #2
 8007c2a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b087      	sub	sp, #28
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	4608      	mov	r0, r1
 8007c44:	4611      	mov	r1, r2
 8007c46:	461a      	mov	r2, r3
 8007c48:	4603      	mov	r3, r0
 8007c4a:	70fb      	strb	r3, [r7, #3]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70bb      	strb	r3, [r7, #2]
 8007c50:	4613      	mov	r3, r2
 8007c52:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007c62:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c64:	e025      	b.n	8007cb2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	221a      	movs	r2, #26
 8007c6a:	fb02 f303 	mul.w	r3, r2, r3
 8007c6e:	3308      	adds	r3, #8
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	3302      	adds	r3, #2
 8007c76:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	795b      	ldrb	r3, [r3, #5]
 8007c7c:	78fa      	ldrb	r2, [r7, #3]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d002      	beq.n	8007c88 <USBH_FindInterface+0x4e>
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	2bff      	cmp	r3, #255	@ 0xff
 8007c86:	d111      	bne.n	8007cac <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c8c:	78ba      	ldrb	r2, [r7, #2]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d002      	beq.n	8007c98 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c92:	78bb      	ldrb	r3, [r7, #2]
 8007c94:	2bff      	cmp	r3, #255	@ 0xff
 8007c96:	d109      	bne.n	8007cac <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c9c:	787a      	ldrb	r2, [r7, #1]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d002      	beq.n	8007ca8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ca2:	787b      	ldrb	r3, [r7, #1]
 8007ca4:	2bff      	cmp	r3, #255	@ 0xff
 8007ca6:	d101      	bne.n	8007cac <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	e006      	b.n	8007cba <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d9d6      	bls.n	8007c66 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007cb8:	23ff      	movs	r3, #255	@ 0xff
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 fcf4 	bl	80096bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 fe0d 	bl	80098f6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af04      	add	r7, sp, #16
 8007cee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d102      	bne.n	8007d0a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2203      	movs	r2, #3
 8007d08:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b0b      	cmp	r3, #11
 8007d12:	f200 81bb 	bhi.w	800808c <USBH_Process+0x3a4>
 8007d16:	a201      	add	r2, pc, #4	@ (adr r2, 8007d1c <USBH_Process+0x34>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d4d 	.word	0x08007d4d
 8007d20:	08007d7f 	.word	0x08007d7f
 8007d24:	08007de7 	.word	0x08007de7
 8007d28:	08008027 	.word	0x08008027
 8007d2c:	0800808d 	.word	0x0800808d
 8007d30:	08007e87 	.word	0x08007e87
 8007d34:	08007fcd 	.word	0x08007fcd
 8007d38:	08007ebd 	.word	0x08007ebd
 8007d3c:	08007edd 	.word	0x08007edd
 8007d40:	08007efb 	.word	0x08007efb
 8007d44:	08007f3f 	.word	0x08007f3f
 8007d48:	0800800f 	.word	0x0800800f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 819b 	beq.w	8008090 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007d60:	20c8      	movs	r0, #200	@ 0xc8
 8007d62:	f001 fe12 	bl	800998a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fd05 	bl	8009776 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d7c:	e188      	b.n	8008090 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d107      	bne.n	8007d98 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d96:	e18a      	b.n	80080ae <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007da2:	d914      	bls.n	8007dce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007daa:	3301      	adds	r3, #1
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d903      	bls.n	8007dc6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	220d      	movs	r2, #13
 8007dc2:	701a      	strb	r2, [r3, #0]
      break;
 8007dc4:	e173      	b.n	80080ae <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	701a      	strb	r2, [r3, #0]
      break;
 8007dcc:	e16f      	b.n	80080ae <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007dd4:	f103 020a 	add.w	r2, r3, #10
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007dde:	200a      	movs	r0, #10
 8007de0:	f001 fdd3 	bl	800998a <USBH_Delay>
      break;
 8007de4:	e163      	b.n	80080ae <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d005      	beq.n	8007dfc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007df6:	2104      	movs	r1, #4
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007dfc:	2064      	movs	r0, #100	@ 0x64
 8007dfe:	f001 fdc4 	bl	800998a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 fc90 	bl	8009728 <USBH_LL_GetSpeed>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2205      	movs	r2, #5
 8007e16:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007e18:	2100      	movs	r1, #0
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fa9b 	bl	8009356 <USBH_AllocPipe>
 8007e20:	4603      	mov	r3, r0
 8007e22:	461a      	mov	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007e28:	2180      	movs	r1, #128	@ 0x80
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f001 fa93 	bl	8009356 <USBH_AllocPipe>
 8007e30:	4603      	mov	r3, r0
 8007e32:	461a      	mov	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7919      	ldrb	r1, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e4c:	9202      	str	r2, [sp, #8]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	9201      	str	r2, [sp, #4]
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	4603      	mov	r3, r0
 8007e56:	2280      	movs	r2, #128	@ 0x80
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 fa4d 	bl	80092f8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	7959      	ldrb	r1, [r3, #5]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e72:	9202      	str	r2, [sp, #8]
 8007e74:	2200      	movs	r2, #0
 8007e76:	9201      	str	r2, [sp, #4]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 fa3a 	bl	80092f8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e84:	e113      	b.n	80080ae <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f916 	bl	80080b8 <USBH_HandleEnum>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f040 80fd 	bne.w	8008094 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d103      	bne.n	8007eb4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2208      	movs	r2, #8
 8007eb0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007eb2:	e0ef      	b.n	8008094 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2207      	movs	r2, #7
 8007eb8:	701a      	strb	r2, [r3, #0]
      break;
 8007eba:	e0eb      	b.n	8008094 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 80e8 	beq.w	8008098 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ece:	2101      	movs	r1, #1
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2208      	movs	r2, #8
 8007ed8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007eda:	e0dd      	b.n	8008098 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fc3a 	bl	800875e <USBH_SetCfg>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f040 80d5 	bne.w	800809c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2209      	movs	r2, #9
 8007ef6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ef8:	e0d0      	b.n	800809c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007f00:	f003 0320 	and.w	r3, r3, #32
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d016      	beq.n	8007f36 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007f08:	2101      	movs	r1, #1
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fc4a 	bl	80087a4 <USBH_SetFeature>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d103      	bne.n	8007f24 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	220a      	movs	r2, #10
 8007f20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f22:	e0bd      	b.n	80080a0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	f040 80b9 	bne.w	80080a0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	220a      	movs	r2, #10
 8007f32:	701a      	strb	r2, [r3, #0]
      break;
 8007f34:	e0b4      	b.n	80080a0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	220a      	movs	r2, #10
 8007f3a:	701a      	strb	r2, [r3, #0]
      break;
 8007f3c:	e0b0      	b.n	80080a0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 80ad 	beq.w	80080a4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]
 8007f56:	e016      	b.n	8007f86 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007f58:	7bfa      	ldrb	r2, [r7, #15]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	32de      	adds	r2, #222	@ 0xde
 8007f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f62:	791a      	ldrb	r2, [r3, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d108      	bne.n	8007f80 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007f6e:	7bfa      	ldrb	r2, [r7, #15]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	32de      	adds	r2, #222	@ 0xde
 8007f74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007f7e:	e005      	b.n	8007f8c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	3301      	adds	r3, #1
 8007f84:	73fb      	strb	r3, [r7, #15]
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0e5      	beq.n	8007f58 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d016      	beq.n	8007fc4 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	4798      	blx	r3
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d109      	bne.n	8007fbc <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2206      	movs	r2, #6
 8007fac:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fb4:	2103      	movs	r1, #3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fba:	e073      	b.n	80080a4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	220d      	movs	r2, #13
 8007fc0:	701a      	strb	r2, [r3, #0]
      break;
 8007fc2:	e06f      	b.n	80080a4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	220d      	movs	r2, #13
 8007fc8:	701a      	strb	r2, [r3, #0]
      break;
 8007fca:	e06b      	b.n	80080a4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d017      	beq.n	8008006 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	220b      	movs	r2, #11
 8007ff2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ff4:	e058      	b.n	80080a8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d154      	bne.n	80080a8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	220d      	movs	r2, #13
 8008002:	701a      	strb	r2, [r3, #0]
      break;
 8008004:	e050      	b.n	80080a8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	220d      	movs	r2, #13
 800800a:	701a      	strb	r2, [r3, #0]
      break;
 800800c:	e04c      	b.n	80080a8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d049      	beq.n	80080ac <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	4798      	blx	r3
      }
      break;
 8008024:	e042      	b.n	80080ac <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff fd4a 	bl	8007ac8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d009      	beq.n	8008052 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008058:	2b00      	cmp	r3, #0
 800805a:	d005      	beq.n	8008068 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008062:	2105      	movs	r1, #5
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b01      	cmp	r3, #1
 8008072:	d107      	bne.n	8008084 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff fe22 	bl	8007cc6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008082:	e014      	b.n	80080ae <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 fb19 	bl	80096bc <USBH_LL_Start>
      break;
 800808a:	e010      	b.n	80080ae <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800808c:	bf00      	nop
 800808e:	e00e      	b.n	80080ae <USBH_Process+0x3c6>
      break;
 8008090:	bf00      	nop
 8008092:	e00c      	b.n	80080ae <USBH_Process+0x3c6>
      break;
 8008094:	bf00      	nop
 8008096:	e00a      	b.n	80080ae <USBH_Process+0x3c6>
    break;
 8008098:	bf00      	nop
 800809a:	e008      	b.n	80080ae <USBH_Process+0x3c6>
      break;
 800809c:	bf00      	nop
 800809e:	e006      	b.n	80080ae <USBH_Process+0x3c6>
      break;
 80080a0:	bf00      	nop
 80080a2:	e004      	b.n	80080ae <USBH_Process+0x3c6>
      break;
 80080a4:	bf00      	nop
 80080a6:	e002      	b.n	80080ae <USBH_Process+0x3c6>
      break;
 80080a8:	bf00      	nop
 80080aa:	e000      	b.n	80080ae <USBH_Process+0x3c6>
      break;
 80080ac:	bf00      	nop
  }
  return USBH_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af04      	add	r7, sp, #16
 80080be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80080c0:	2301      	movs	r3, #1
 80080c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80080c4:	2301      	movs	r3, #1
 80080c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	2b07      	cmp	r3, #7
 80080ce:	f200 81bd 	bhi.w	800844c <USBH_HandleEnum+0x394>
 80080d2:	a201      	add	r2, pc, #4	@ (adr r2, 80080d8 <USBH_HandleEnum+0x20>)
 80080d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d8:	080080f9 	.word	0x080080f9
 80080dc:	080081b3 	.word	0x080081b3
 80080e0:	0800821d 	.word	0x0800821d
 80080e4:	080082a7 	.word	0x080082a7
 80080e8:	08008311 	.word	0x08008311
 80080ec:	08008381 	.word	0x08008381
 80080f0:	080083c7 	.word	0x080083c7
 80080f4:	0800840d 	.word	0x0800840d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80080f8:	2108      	movs	r1, #8
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fa4c 	bl	8008598 <USBH_Get_DevDesc>
 8008100:	4603      	mov	r3, r0
 8008102:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d12e      	bne.n	8008168 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	7919      	ldrb	r1, [r3, #4]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800812e:	9202      	str	r2, [sp, #8]
 8008130:	2200      	movs	r2, #0
 8008132:	9201      	str	r2, [sp, #4]
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	4603      	mov	r3, r0
 8008138:	2280      	movs	r2, #128	@ 0x80
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f001 f8dc 	bl	80092f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	7959      	ldrb	r1, [r3, #5]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008154:	9202      	str	r2, [sp, #8]
 8008156:	2200      	movs	r2, #0
 8008158:	9201      	str	r2, [sp, #4]
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	4603      	mov	r3, r0
 800815e:	2200      	movs	r2, #0
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 f8c9 	bl	80092f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008166:	e173      	b.n	8008450 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	2b03      	cmp	r3, #3
 800816c:	f040 8170 	bne.w	8008450 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008176:	3301      	adds	r3, #1
 8008178:	b2da      	uxtb	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008186:	2b03      	cmp	r3, #3
 8008188:	d903      	bls.n	8008192 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	220d      	movs	r2, #13
 800818e:	701a      	strb	r2, [r3, #0]
      break;
 8008190:	e15e      	b.n	8008450 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	795b      	ldrb	r3, [r3, #5]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f8fd 	bl	8009398 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	791b      	ldrb	r3, [r3, #4]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 f8f7 	bl	8009398 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	701a      	strb	r2, [r3, #0]
      break;
 80081b0:	e14e      	b.n	8008450 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80081b2:	2112      	movs	r1, #18
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f9ef 	bl	8008598 <USBH_Get_DevDesc>
 80081ba:	4603      	mov	r3, r0
 80081bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d103      	bne.n	80081cc <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081ca:	e143      	b.n	8008454 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	f040 8140 	bne.w	8008454 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081da:	3301      	adds	r3, #1
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d903      	bls.n	80081f6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	220d      	movs	r2, #13
 80081f2:	701a      	strb	r2, [r3, #0]
      break;
 80081f4:	e12e      	b.n	8008454 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	795b      	ldrb	r3, [r3, #5]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 f8cb 	bl	8009398 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	791b      	ldrb	r3, [r3, #4]
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 f8c5 	bl	8009398 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	701a      	strb	r2, [r3, #0]
      break;
 800821a:	e11b      	b.n	8008454 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800821c:	2101      	movs	r1, #1
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa79 	bl	8008716 <USBH_SetAddress>
 8008224:	4603      	mov	r3, r0
 8008226:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d130      	bne.n	8008290 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800822e:	2002      	movs	r0, #2
 8008230:	f001 fbab 	bl	800998a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2203      	movs	r2, #3
 8008240:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	7919      	ldrb	r1, [r3, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008256:	9202      	str	r2, [sp, #8]
 8008258:	2200      	movs	r2, #0
 800825a:	9201      	str	r2, [sp, #4]
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	4603      	mov	r3, r0
 8008260:	2280      	movs	r2, #128	@ 0x80
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f001 f848 	bl	80092f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	7959      	ldrb	r1, [r3, #5]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800827c:	9202      	str	r2, [sp, #8]
 800827e:	2200      	movs	r2, #0
 8008280:	9201      	str	r2, [sp, #4]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	4603      	mov	r3, r0
 8008286:	2200      	movs	r2, #0
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 f835 	bl	80092f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800828e:	e0e3      	b.n	8008458 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b03      	cmp	r3, #3
 8008294:	f040 80e0 	bne.w	8008458 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	220d      	movs	r2, #13
 800829c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	705a      	strb	r2, [r3, #1]
      break;
 80082a4:	e0d8      	b.n	8008458 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80082a6:	2109      	movs	r1, #9
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f9a1 	bl	80085f0 <USBH_Get_CfgDesc>
 80082ae:	4603      	mov	r3, r0
 80082b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d103      	bne.n	80082c0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2204      	movs	r2, #4
 80082bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082be:	e0cd      	b.n	800845c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	f040 80ca 	bne.w	800845c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082ce:	3301      	adds	r3, #1
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d903      	bls.n	80082ea <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	220d      	movs	r2, #13
 80082e6:	701a      	strb	r2, [r3, #0]
      break;
 80082e8:	e0b8      	b.n	800845c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	795b      	ldrb	r3, [r3, #5]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 f851 	bl	8009398 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	791b      	ldrb	r3, [r3, #4]
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 f84b 	bl	8009398 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	701a      	strb	r2, [r3, #0]
      break;
 800830e:	e0a5      	b.n	800845c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f969 	bl	80085f0 <USBH_Get_CfgDesc>
 800831e:	4603      	mov	r3, r0
 8008320:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d103      	bne.n	8008330 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2205      	movs	r2, #5
 800832c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800832e:	e097      	b.n	8008460 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008330:	7bbb      	ldrb	r3, [r7, #14]
 8008332:	2b03      	cmp	r3, #3
 8008334:	f040 8094 	bne.w	8008460 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800833e:	3301      	adds	r3, #1
 8008340:	b2da      	uxtb	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800834e:	2b03      	cmp	r3, #3
 8008350:	d903      	bls.n	800835a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	220d      	movs	r2, #13
 8008356:	701a      	strb	r2, [r3, #0]
      break;
 8008358:	e082      	b.n	8008460 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	795b      	ldrb	r3, [r3, #5]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 f819 	bl	8009398 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	791b      	ldrb	r3, [r3, #4]
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 f813 	bl	8009398 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	701a      	strb	r2, [r3, #0]
      break;
 800837e:	e06f      	b.n	8008460 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008386:	2b00      	cmp	r3, #0
 8008388:	d019      	beq.n	80083be <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008396:	23ff      	movs	r3, #255	@ 0xff
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f953 	bl	8008644 <USBH_Get_StringDesc>
 800839e:	4603      	mov	r3, r0
 80083a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d103      	bne.n	80083b0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2206      	movs	r2, #6
 80083ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80083ae:	e059      	b.n	8008464 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d156      	bne.n	8008464 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2206      	movs	r2, #6
 80083ba:	705a      	strb	r2, [r3, #1]
      break;
 80083bc:	e052      	b.n	8008464 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2206      	movs	r2, #6
 80083c2:	705a      	strb	r2, [r3, #1]
      break;
 80083c4:	e04e      	b.n	8008464 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d019      	beq.n	8008404 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083dc:	23ff      	movs	r3, #255	@ 0xff
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f930 	bl	8008644 <USBH_Get_StringDesc>
 80083e4:	4603      	mov	r3, r0
 80083e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d103      	bne.n	80083f6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2207      	movs	r2, #7
 80083f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80083f4:	e038      	b.n	8008468 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083f6:	7bbb      	ldrb	r3, [r7, #14]
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d135      	bne.n	8008468 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2207      	movs	r2, #7
 8008400:	705a      	strb	r2, [r3, #1]
      break;
 8008402:	e031      	b.n	8008468 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2207      	movs	r2, #7
 8008408:	705a      	strb	r2, [r3, #1]
      break;
 800840a:	e02d      	b.n	8008468 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008412:	2b00      	cmp	r3, #0
 8008414:	d017      	beq.n	8008446 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008422:	23ff      	movs	r3, #255	@ 0xff
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f90d 	bl	8008644 <USBH_Get_StringDesc>
 800842a:	4603      	mov	r3, r0
 800842c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008438:	e018      	b.n	800846c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b03      	cmp	r3, #3
 800843e:	d115      	bne.n	800846c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
      break;
 8008444:	e012      	b.n	800846c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]
      break;
 800844a:	e00f      	b.n	800846c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800844c:	bf00      	nop
 800844e:	e00e      	b.n	800846e <USBH_HandleEnum+0x3b6>
      break;
 8008450:	bf00      	nop
 8008452:	e00c      	b.n	800846e <USBH_HandleEnum+0x3b6>
      break;
 8008454:	bf00      	nop
 8008456:	e00a      	b.n	800846e <USBH_HandleEnum+0x3b6>
      break;
 8008458:	bf00      	nop
 800845a:	e008      	b.n	800846e <USBH_HandleEnum+0x3b6>
      break;
 800845c:	bf00      	nop
 800845e:	e006      	b.n	800846e <USBH_HandleEnum+0x3b6>
      break;
 8008460:	bf00      	nop
 8008462:	e004      	b.n	800846e <USBH_HandleEnum+0x3b6>
      break;
 8008464:	bf00      	nop
 8008466:	e002      	b.n	800846e <USBH_HandleEnum+0x3b6>
      break;
 8008468:	bf00      	nop
 800846a:	e000      	b.n	800846e <USBH_HandleEnum+0x3b6>
      break;
 800846c:	bf00      	nop
  }
  return Status;
 800846e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b082      	sub	sp, #8
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f804 	bl	80084ba <USBH_HandleSof>
}
 80084b2:	bf00      	nop
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b082      	sub	sp, #8
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b0b      	cmp	r3, #11
 80084ca:	d10a      	bne.n	80084e2 <USBH_HandleSof+0x28>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d005      	beq.n	80084e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	4798      	blx	r3
  }
}
 80084e2:	bf00      	nop
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b083      	sub	sp, #12
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80084fa:	bf00      	nop
}
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008516:	bf00      	nop
}
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 f8be 	bl	80096f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	791b      	ldrb	r3, [r3, #4]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 ff0b 	bl	8009398 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	795b      	ldrb	r3, [r3, #5]
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 ff05 	bl	8009398 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af02      	add	r7, sp, #8
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80085a4:	887b      	ldrh	r3, [r7, #2]
 80085a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085aa:	d901      	bls.n	80085b0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e01b      	b.n	80085e8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80085b6:	887b      	ldrh	r3, [r7, #2]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	4613      	mov	r3, r2
 80085bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085c0:	2100      	movs	r1, #0
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f872 	bl	80086ac <USBH_GetDescriptor>
 80085c8:	4603      	mov	r3, r0
 80085ca:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d109      	bne.n	80085e6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80085d8:	887a      	ldrh	r2, [r7, #2]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f929 	bl	8008834 <USBH_ParseDevDesc>
 80085e2:	4603      	mov	r3, r0
 80085e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	331c      	adds	r3, #28
 8008600:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008602:	887b      	ldrh	r3, [r7, #2]
 8008604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008608:	d901      	bls.n	800860e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800860a:	2303      	movs	r3, #3
 800860c:	e016      	b.n	800863c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800860e:	887b      	ldrh	r3, [r7, #2]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008618:	2100      	movs	r1, #0
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f846 	bl	80086ac <USBH_GetDescriptor>
 8008620:	4603      	mov	r3, r0
 8008622:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d107      	bne.n	800863a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800862a:	887b      	ldrh	r3, [r7, #2]
 800862c:	461a      	mov	r2, r3
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f9af 	bl	8008994 <USBH_ParseCfgDesc>
 8008636:	4603      	mov	r3, r0
 8008638:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800863a:	7bfb      	ldrb	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af02      	add	r7, sp, #8
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	607a      	str	r2, [r7, #4]
 800864e:	461a      	mov	r2, r3
 8008650:	460b      	mov	r3, r1
 8008652:	72fb      	strb	r3, [r7, #11]
 8008654:	4613      	mov	r3, r2
 8008656:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008658:	893b      	ldrh	r3, [r7, #8]
 800865a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800865e:	d802      	bhi.n	8008666 <USBH_Get_StringDesc+0x22>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008666:	2303      	movs	r3, #3
 8008668:	e01c      	b.n	80086a4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800866a:	7afb      	ldrb	r3, [r7, #11]
 800866c:	b29b      	uxth	r3, r3
 800866e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008672:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800867a:	893b      	ldrh	r3, [r7, #8]
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	460b      	mov	r3, r1
 8008680:	2100      	movs	r1, #0
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f000 f812 	bl	80086ac <USBH_GetDescriptor>
 8008688:	4603      	mov	r3, r0
 800868a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d107      	bne.n	80086a2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008698:	893a      	ldrh	r2, [r7, #8]
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fb8d 	bl	8008dbc <USBH_ParseStringDesc>
  }

  return status;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	607b      	str	r3, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	72fb      	strb	r3, [r7, #11]
 80086ba:	4613      	mov	r3, r2
 80086bc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	789b      	ldrb	r3, [r3, #2]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d11c      	bne.n	8008700 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80086c6:	7afb      	ldrb	r3, [r7, #11]
 80086c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2206      	movs	r2, #6
 80086d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	893a      	ldrh	r2, [r7, #8]
 80086dc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80086de:	893b      	ldrh	r3, [r7, #8]
 80086e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80086e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086e8:	d104      	bne.n	80086f4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f240 4209 	movw	r2, #1033	@ 0x409
 80086f0:	829a      	strh	r2, [r3, #20]
 80086f2:	e002      	b.n	80086fa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8b3a      	ldrh	r2, [r7, #24]
 80086fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008700:	8b3b      	ldrh	r3, [r7, #24]
 8008702:	461a      	mov	r2, r3
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 fba5 	bl	8008e56 <USBH_CtlReq>
 800870c:	4603      	mov	r3, r0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	460b      	mov	r3, r1
 8008720:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	789b      	ldrb	r3, [r3, #2]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d10f      	bne.n	800874a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2205      	movs	r2, #5
 8008734:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008736:	78fb      	ldrb	r3, [r7, #3]
 8008738:	b29a      	uxth	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800874a:	2200      	movs	r2, #0
 800874c:	2100      	movs	r1, #0
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fb81 	bl	8008e56 <USBH_CtlReq>
 8008754:	4603      	mov	r3, r0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	789b      	ldrb	r3, [r3, #2]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d10e      	bne.n	8008790 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2209      	movs	r2, #9
 800877c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	887a      	ldrh	r2, [r7, #2]
 8008782:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008790:	2200      	movs	r2, #0
 8008792:	2100      	movs	r1, #0
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fb5e 	bl	8008e56 <USBH_CtlReq>
 800879a:	4603      	mov	r3, r0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	789b      	ldrb	r3, [r3, #2]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d10f      	bne.n	80087d8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2203      	movs	r2, #3
 80087c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087d8:	2200      	movs	r2, #0
 80087da:	2100      	movs	r1, #0
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fb3a 	bl	8008e56 <USBH_CtlReq>
 80087e2:	4603      	mov	r3, r0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	789b      	ldrb	r3, [r3, #2]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d10f      	bne.n	8008820 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008812:	78fb      	ldrb	r3, [r7, #3]
 8008814:	b29a      	uxth	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008820:	2200      	movs	r2, #0
 8008822:	2100      	movs	r1, #0
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fb16 	bl	8008e56 <USBH_CtlReq>
 800882a:	4603      	mov	r3, r0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008834:	b480      	push	{r7}
 8008836:	b087      	sub	sp, #28
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	4613      	mov	r3, r2
 8008840:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008848:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008854:	2302      	movs	r3, #2
 8008856:	e094      	b.n	8008982 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	781a      	ldrb	r2, [r3, #0]
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	785a      	ldrb	r2, [r3, #1]
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	3302      	adds	r3, #2
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	461a      	mov	r2, r3
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	3303      	adds	r3, #3
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	021b      	lsls	r3, r3, #8
 8008878:	b29b      	uxth	r3, r3
 800887a:	4313      	orrs	r3, r2
 800887c:	b29a      	uxth	r2, r3
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	791a      	ldrb	r2, [r3, #4]
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	795a      	ldrb	r2, [r3, #5]
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	799a      	ldrb	r2, [r3, #6]
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	79da      	ldrb	r2, [r3, #7]
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d004      	beq.n	80088b6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d11b      	bne.n	80088ee <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	79db      	ldrb	r3, [r3, #7]
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	dc0f      	bgt.n	80088de <USBH_ParseDevDesc+0xaa>
 80088be:	2b08      	cmp	r3, #8
 80088c0:	db0f      	blt.n	80088e2 <USBH_ParseDevDesc+0xae>
 80088c2:	3b08      	subs	r3, #8
 80088c4:	4a32      	ldr	r2, [pc, #200]	@ (8008990 <USBH_ParseDevDesc+0x15c>)
 80088c6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	bf14      	ite	ne
 80088d2:	2301      	movne	r3, #1
 80088d4:	2300      	moveq	r3, #0
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d106      	bne.n	80088ea <USBH_ParseDevDesc+0xb6>
 80088dc:	e001      	b.n	80088e2 <USBH_ParseDevDesc+0xae>
 80088de:	2b40      	cmp	r3, #64	@ 0x40
 80088e0:	d003      	beq.n	80088ea <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	2208      	movs	r2, #8
 80088e6:	71da      	strb	r2, [r3, #7]
        break;
 80088e8:	e000      	b.n	80088ec <USBH_ParseDevDesc+0xb8>
        break;
 80088ea:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80088ec:	e00e      	b.n	800890c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d107      	bne.n	8008908 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	79db      	ldrb	r3, [r3, #7]
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d005      	beq.n	800890c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	2208      	movs	r2, #8
 8008904:	71da      	strb	r2, [r3, #7]
 8008906:	e001      	b.n	800890c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008908:	2303      	movs	r3, #3
 800890a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800890c:	88fb      	ldrh	r3, [r7, #6]
 800890e:	2b08      	cmp	r3, #8
 8008910:	d936      	bls.n	8008980 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	3308      	adds	r3, #8
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	461a      	mov	r2, r3
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	3309      	adds	r3, #9
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	021b      	lsls	r3, r3, #8
 8008922:	b29b      	uxth	r3, r3
 8008924:	4313      	orrs	r3, r2
 8008926:	b29a      	uxth	r2, r3
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	330a      	adds	r3, #10
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	330b      	adds	r3, #11
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	021b      	lsls	r3, r3, #8
 800893c:	b29b      	uxth	r3, r3
 800893e:	4313      	orrs	r3, r2
 8008940:	b29a      	uxth	r2, r3
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	330c      	adds	r3, #12
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	461a      	mov	r2, r3
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	330d      	adds	r3, #13
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	021b      	lsls	r3, r3, #8
 8008956:	b29b      	uxth	r3, r3
 8008958:	4313      	orrs	r3, r2
 800895a:	b29a      	uxth	r2, r3
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	7b9a      	ldrb	r2, [r3, #14]
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	7bda      	ldrb	r2, [r3, #15]
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	7c1a      	ldrb	r2, [r3, #16]
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	7c5a      	ldrb	r2, [r3, #17]
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008980:	7dfb      	ldrb	r3, [r7, #23]
}
 8008982:	4618      	mov	r0, r3
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	01000101 	.word	0x01000101

08008994 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08c      	sub	sp, #48	@ 0x30
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	4613      	mov	r3, r2
 80089a0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80089a8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80089c2:	2302      	movs	r3, #2
 80089c4:	e0da      	b.n	8008b7c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80089ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	2b09      	cmp	r3, #9
 80089d0:	d002      	beq.n	80089d8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80089d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d4:	2209      	movs	r2, #9
 80089d6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	781a      	ldrb	r2, [r3, #0]
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	785a      	ldrb	r2, [r3, #1]
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	3302      	adds	r3, #2
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	3303      	adds	r3, #3
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	021b      	lsls	r3, r3, #8
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	4313      	orrs	r3, r2
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a02:	bf28      	it	cs
 8008a04:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	791a      	ldrb	r2, [r3, #4]
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	795a      	ldrb	r2, [r3, #5]
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	799a      	ldrb	r2, [r3, #6]
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	79da      	ldrb	r2, [r3, #7]
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	7a1a      	ldrb	r2, [r3, #8]
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	2b09      	cmp	r3, #9
 8008a3a:	f240 809d 	bls.w	8008b78 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a3e:	2309      	movs	r3, #9
 8008a40:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a46:	e081      	b.n	8008b4c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a48:	f107 0316 	add.w	r3, r7, #22
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a50:	f000 f9e7 	bl	8008e22 <USBH_GetNextDesc>
 8008a54:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a58:	785b      	ldrb	r3, [r3, #1]
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	d176      	bne.n	8008b4c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	2b09      	cmp	r3, #9
 8008a64:	d002      	beq.n	8008a6c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a68:	2209      	movs	r2, #9
 8008a6a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a70:	221a      	movs	r2, #26
 8008a72:	fb02 f303 	mul.w	r3, r2, r3
 8008a76:	3308      	adds	r3, #8
 8008a78:	6a3a      	ldr	r2, [r7, #32]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	3302      	adds	r3, #2
 8008a7e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a82:	69f8      	ldr	r0, [r7, #28]
 8008a84:	f000 f87e 	bl	8008b84 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a92:	e043      	b.n	8008b1c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a94:	f107 0316 	add.w	r3, r7, #22
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a9c:	f000 f9c1 	bl	8008e22 <USBH_GetNextDesc>
 8008aa0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	d138      	bne.n	8008b1c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	795b      	ldrb	r3, [r3, #5]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d113      	bne.n	8008ada <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d003      	beq.n	8008ac2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	799b      	ldrb	r3, [r3, #6]
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d10b      	bne.n	8008ada <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	79db      	ldrb	r3, [r3, #7]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10b      	bne.n	8008ae2 <USBH_ParseCfgDesc+0x14e>
 8008aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b09      	cmp	r3, #9
 8008ad0:	d007      	beq.n	8008ae2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad4:	2209      	movs	r2, #9
 8008ad6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ad8:	e003      	b.n	8008ae2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008adc:	2207      	movs	r2, #7
 8008ade:	701a      	strb	r2, [r3, #0]
 8008ae0:	e000      	b.n	8008ae4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ae2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ae8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008aec:	3201      	adds	r2, #1
 8008aee:	00d2      	lsls	r2, r2, #3
 8008af0:	211a      	movs	r1, #26
 8008af2:	fb01 f303 	mul.w	r3, r1, r3
 8008af6:	4413      	add	r3, r2
 8008af8:	3308      	adds	r3, #8
 8008afa:	6a3a      	ldr	r2, [r7, #32]
 8008afc:	4413      	add	r3, r2
 8008afe:	3304      	adds	r3, #4
 8008b00:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008b02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b04:	69b9      	ldr	r1, [r7, #24]
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 f870 	bl	8008bec <USBH_ParseEPDesc>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008b12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b16:	3301      	adds	r3, #1
 8008b18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	791b      	ldrb	r3, [r3, #4]
 8008b20:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d204      	bcs.n	8008b32 <USBH_ParseCfgDesc+0x19e>
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	885a      	ldrh	r2, [r3, #2]
 8008b2c:	8afb      	ldrh	r3, [r7, #22]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d8b0      	bhi.n	8008a94 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	791b      	ldrb	r3, [r3, #4]
 8008b36:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d201      	bcs.n	8008b42 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e01c      	b.n	8008b7c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008b42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b46:	3301      	adds	r3, #1
 8008b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d805      	bhi.n	8008b60 <USBH_ParseCfgDesc+0x1cc>
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	885a      	ldrh	r2, [r3, #2]
 8008b58:	8afb      	ldrh	r3, [r7, #22]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	f63f af74 	bhi.w	8008a48 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	791b      	ldrb	r3, [r3, #4]
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	bf28      	it	cs
 8008b68:	2302      	movcs	r3, #2
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d201      	bcs.n	8008b78 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e001      	b.n	8008b7c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008b78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3730      	adds	r7, #48	@ 0x30
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781a      	ldrb	r2, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	785a      	ldrb	r2, [r3, #1]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	789a      	ldrb	r2, [r3, #2]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	78da      	ldrb	r2, [r3, #3]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	bf28      	it	cs
 8008bb8:	2302      	movcs	r3, #2
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	795a      	ldrb	r2, [r3, #5]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	799a      	ldrb	r2, [r3, #6]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	79da      	ldrb	r2, [r3, #7]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	7a1a      	ldrb	r2, [r3, #8]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	721a      	strb	r2, [r3, #8]
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	781a      	ldrb	r2, [r3, #0]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	785a      	ldrb	r2, [r3, #1]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	789a      	ldrb	r2, [r3, #2]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	78da      	ldrb	r2, [r3, #3]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	3305      	adds	r3, #5
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	021b      	lsls	r3, r3, #8
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	799a      	ldrb	r2, [r3, #6]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	889b      	ldrh	r3, [r3, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d009      	beq.n	8008c5a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c4e:	d804      	bhi.n	8008c5a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c58:	d901      	bls.n	8008c5e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d136      	bne.n	8008cd6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	78db      	ldrb	r3, [r3, #3]
 8008c6c:	f003 0303 	and.w	r3, r3, #3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d108      	bne.n	8008c86 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	889b      	ldrh	r3, [r3, #4]
 8008c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c7c:	f240 8097 	bls.w	8008dae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c80:	2303      	movs	r3, #3
 8008c82:	75fb      	strb	r3, [r7, #23]
 8008c84:	e093      	b.n	8008dae <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	78db      	ldrb	r3, [r3, #3]
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d107      	bne.n	8008ca2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	889b      	ldrh	r3, [r3, #4]
 8008c96:	2b40      	cmp	r3, #64	@ 0x40
 8008c98:	f240 8089 	bls.w	8008dae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	75fb      	strb	r3, [r7, #23]
 8008ca0:	e085      	b.n	8008dae <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	78db      	ldrb	r3, [r3, #3]
 8008ca6:	f003 0303 	and.w	r3, r3, #3
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d005      	beq.n	8008cba <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	78db      	ldrb	r3, [r3, #3]
 8008cb2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d10a      	bne.n	8008cd0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	799b      	ldrb	r3, [r3, #6]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <USBH_ParseEPDesc+0xde>
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	799b      	ldrb	r3, [r3, #6]
 8008cc6:	2b10      	cmp	r3, #16
 8008cc8:	d970      	bls.n	8008dac <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008cce:	e06d      	b.n	8008dac <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	75fb      	strb	r3, [r7, #23]
 8008cd4:	e06b      	b.n	8008dae <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d13c      	bne.n	8008d5a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	78db      	ldrb	r3, [r3, #3]
 8008ce4:	f003 0303 	and.w	r3, r3, #3
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d005      	beq.n	8008cf8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	78db      	ldrb	r3, [r3, #3]
 8008cf0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d106      	bne.n	8008d06 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	889b      	ldrh	r3, [r3, #4]
 8008cfc:	2b40      	cmp	r3, #64	@ 0x40
 8008cfe:	d956      	bls.n	8008dae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d00:	2303      	movs	r3, #3
 8008d02:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008d04:	e053      	b.n	8008dae <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	78db      	ldrb	r3, [r3, #3]
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d10e      	bne.n	8008d30 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	799b      	ldrb	r3, [r3, #6]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d007      	beq.n	8008d2a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008d1e:	2b10      	cmp	r3, #16
 8008d20:	d803      	bhi.n	8008d2a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008d26:	2b40      	cmp	r3, #64	@ 0x40
 8008d28:	d941      	bls.n	8008dae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	75fb      	strb	r3, [r7, #23]
 8008d2e:	e03e      	b.n	8008dae <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	78db      	ldrb	r3, [r3, #3]
 8008d34:	f003 0303 	and.w	r3, r3, #3
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d10b      	bne.n	8008d54 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	799b      	ldrb	r3, [r3, #6]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d004      	beq.n	8008d4e <USBH_ParseEPDesc+0x162>
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	889b      	ldrh	r3, [r3, #4]
 8008d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d4c:	d32f      	bcc.n	8008dae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	75fb      	strb	r3, [r7, #23]
 8008d52:	e02c      	b.n	8008dae <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d54:	2303      	movs	r3, #3
 8008d56:	75fb      	strb	r3, [r7, #23]
 8008d58:	e029      	b.n	8008dae <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d120      	bne.n	8008da6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	78db      	ldrb	r3, [r3, #3]
 8008d68:	f003 0303 	and.w	r3, r3, #3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d106      	bne.n	8008d7e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	889b      	ldrh	r3, [r3, #4]
 8008d74:	2b08      	cmp	r3, #8
 8008d76:	d01a      	beq.n	8008dae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	75fb      	strb	r3, [r7, #23]
 8008d7c:	e017      	b.n	8008dae <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	78db      	ldrb	r3, [r3, #3]
 8008d82:	f003 0303 	and.w	r3, r3, #3
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d10a      	bne.n	8008da0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	799b      	ldrb	r3, [r3, #6]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <USBH_ParseEPDesc+0x1ae>
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	889b      	ldrh	r3, [r3, #4]
 8008d96:	2b08      	cmp	r3, #8
 8008d98:	d909      	bls.n	8008dae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	75fb      	strb	r3, [r7, #23]
 8008d9e:	e006      	b.n	8008dae <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008da0:	2303      	movs	r3, #3
 8008da2:	75fb      	strb	r3, [r7, #23]
 8008da4:	e003      	b.n	8008dae <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008da6:	2303      	movs	r3, #3
 8008da8:	75fb      	strb	r3, [r7, #23]
 8008daa:	e000      	b.n	8008dae <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008dac:	bf00      	nop
  }

  return status;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	371c      	adds	r7, #28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	d120      	bne.n	8008e16 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	1e9a      	subs	r2, r3, #2
 8008dda:	88fb      	ldrh	r3, [r7, #6]
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	bf28      	it	cs
 8008de0:	4613      	movcs	r3, r2
 8008de2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3302      	adds	r3, #2
 8008de8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008dea:	2300      	movs	r3, #0
 8008dec:	82fb      	strh	r3, [r7, #22]
 8008dee:	e00b      	b.n	8008e08 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008df0:	8afb      	ldrh	r3, [r7, #22]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	4413      	add	r3, r2
 8008df6:	781a      	ldrb	r2, [r3, #0]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008e02:	8afb      	ldrh	r3, [r7, #22]
 8008e04:	3302      	adds	r3, #2
 8008e06:	82fb      	strh	r3, [r7, #22]
 8008e08:	8afa      	ldrh	r2, [r7, #22]
 8008e0a:	8abb      	ldrh	r3, [r7, #20]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d3ef      	bcc.n	8008df0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2200      	movs	r2, #0
 8008e14:	701a      	strb	r2, [r3, #0]
  }
}
 8008e16:	bf00      	nop
 8008e18:	371c      	adds	r7, #28
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b085      	sub	sp, #20
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	7812      	ldrb	r2, [r2, #0]
 8008e34:	4413      	add	r3, r2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4413      	add	r3, r2
 8008e46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e48:	68fb      	ldr	r3, [r7, #12]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b086      	sub	sp, #24
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	60f8      	str	r0, [r7, #12]
 8008e5e:	60b9      	str	r1, [r7, #8]
 8008e60:	4613      	mov	r3, r2
 8008e62:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008e64:	2301      	movs	r3, #1
 8008e66:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	789b      	ldrb	r3, [r3, #2]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d002      	beq.n	8008e76 <USBH_CtlReq+0x20>
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d00f      	beq.n	8008e94 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008e74:	e027      	b.n	8008ec6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	88fa      	ldrh	r2, [r7, #6]
 8008e80:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2201      	movs	r2, #1
 8008e86:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	75fb      	strb	r3, [r7, #23]
      break;
 8008e92:	e018      	b.n	8008ec6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 f81b 	bl	8008ed0 <USBH_HandleControl>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <USBH_CtlReq+0x54>
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d106      	bne.n	8008eb8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2201      	movs	r2, #1
 8008eae:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	761a      	strb	r2, [r3, #24]
      break;
 8008eb6:	e005      	b.n	8008ec4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d102      	bne.n	8008ec4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	709a      	strb	r2, [r3, #2]
      break;
 8008ec4:	bf00      	nop
  }
  return status;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af02      	add	r7, sp, #8
 8008ed6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	7e1b      	ldrb	r3, [r3, #24]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	2b0a      	cmp	r3, #10
 8008ee8:	f200 8156 	bhi.w	8009198 <USBH_HandleControl+0x2c8>
 8008eec:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef4 <USBH_HandleControl+0x24>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f21 	.word	0x08008f21
 8008ef8:	08008f3b 	.word	0x08008f3b
 8008efc:	08008fa5 	.word	0x08008fa5
 8008f00:	08008fcb 	.word	0x08008fcb
 8008f04:	08009003 	.word	0x08009003
 8008f08:	0800902d 	.word	0x0800902d
 8008f0c:	0800907f 	.word	0x0800907f
 8008f10:	080090a1 	.word	0x080090a1
 8008f14:	080090dd 	.word	0x080090dd
 8008f18:	08009103 	.word	0x08009103
 8008f1c:	08009141 	.word	0x08009141
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f103 0110 	add.w	r1, r3, #16
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	795b      	ldrb	r3, [r3, #5]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f943 	bl	80091b8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2202      	movs	r2, #2
 8008f36:	761a      	strb	r2, [r3, #24]
      break;
 8008f38:	e139      	b.n	80091ae <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	795b      	ldrb	r3, [r3, #5]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fcc5 	bl	80098d0 <USBH_LL_GetURBState>
 8008f46:	4603      	mov	r3, r0
 8008f48:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d11e      	bne.n	8008f8e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	7c1b      	ldrb	r3, [r3, #16]
 8008f54:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f58:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	8adb      	ldrh	r3, [r3, #22]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00a      	beq.n	8008f78 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f62:	7b7b      	ldrb	r3, [r7, #13]
 8008f64:	2b80      	cmp	r3, #128	@ 0x80
 8008f66:	d103      	bne.n	8008f70 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2203      	movs	r2, #3
 8008f6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f6e:	e115      	b.n	800919c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2205      	movs	r2, #5
 8008f74:	761a      	strb	r2, [r3, #24]
      break;
 8008f76:	e111      	b.n	800919c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008f78:	7b7b      	ldrb	r3, [r7, #13]
 8008f7a:	2b80      	cmp	r3, #128	@ 0x80
 8008f7c:	d103      	bne.n	8008f86 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2209      	movs	r2, #9
 8008f82:	761a      	strb	r2, [r3, #24]
      break;
 8008f84:	e10a      	b.n	800919c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2207      	movs	r2, #7
 8008f8a:	761a      	strb	r2, [r3, #24]
      break;
 8008f8c:	e106      	b.n	800919c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d003      	beq.n	8008f9c <USBH_HandleControl+0xcc>
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	f040 8100 	bne.w	800919c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	220b      	movs	r2, #11
 8008fa0:	761a      	strb	r2, [r3, #24]
      break;
 8008fa2:	e0fb      	b.n	800919c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6899      	ldr	r1, [r3, #8]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	899a      	ldrh	r2, [r3, #12]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	791b      	ldrb	r3, [r3, #4]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f93a 	bl	8009236 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2204      	movs	r2, #4
 8008fc6:	761a      	strb	r2, [r3, #24]
      break;
 8008fc8:	e0f1      	b.n	80091ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	791b      	ldrb	r3, [r3, #4]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fc7d 	bl	80098d0 <USBH_LL_GetURBState>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d102      	bne.n	8008fe6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2209      	movs	r2, #9
 8008fe4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	2b05      	cmp	r3, #5
 8008fea:	d102      	bne.n	8008ff2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008fec:	2303      	movs	r3, #3
 8008fee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ff0:	e0d6      	b.n	80091a0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	f040 80d3 	bne.w	80091a0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	220b      	movs	r2, #11
 8008ffe:	761a      	strb	r2, [r3, #24]
      break;
 8009000:	e0ce      	b.n	80091a0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6899      	ldr	r1, [r3, #8]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	899a      	ldrh	r2, [r3, #12]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	795b      	ldrb	r3, [r3, #5]
 800900e:	2001      	movs	r0, #1
 8009010:	9000      	str	r0, [sp, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f8ea 	bl	80091ec <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800901e:	b29a      	uxth	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2206      	movs	r2, #6
 8009028:	761a      	strb	r2, [r3, #24]
      break;
 800902a:	e0c0      	b.n	80091ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	795b      	ldrb	r3, [r3, #5]
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fc4c 	bl	80098d0 <USBH_LL_GetURBState>
 8009038:	4603      	mov	r3, r0
 800903a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d103      	bne.n	800904a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2207      	movs	r2, #7
 8009046:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009048:	e0ac      	b.n	80091a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	2b05      	cmp	r3, #5
 800904e:	d105      	bne.n	800905c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	220c      	movs	r2, #12
 8009054:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009056:	2303      	movs	r3, #3
 8009058:	73fb      	strb	r3, [r7, #15]
      break;
 800905a:	e0a3      	b.n	80091a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	2b02      	cmp	r3, #2
 8009060:	d103      	bne.n	800906a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2205      	movs	r2, #5
 8009066:	761a      	strb	r2, [r3, #24]
      break;
 8009068:	e09c      	b.n	80091a4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	2b04      	cmp	r3, #4
 800906e:	f040 8099 	bne.w	80091a4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	220b      	movs	r2, #11
 8009076:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009078:	2302      	movs	r3, #2
 800907a:	73fb      	strb	r3, [r7, #15]
      break;
 800907c:	e092      	b.n	80091a4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	791b      	ldrb	r3, [r3, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	2100      	movs	r1, #0
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f8d5 	bl	8009236 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009092:	b29a      	uxth	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2208      	movs	r2, #8
 800909c:	761a      	strb	r2, [r3, #24]

      break;
 800909e:	e086      	b.n	80091ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	791b      	ldrb	r3, [r3, #4]
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fc12 	bl	80098d0 <USBH_LL_GetURBState>
 80090ac:	4603      	mov	r3, r0
 80090ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d105      	bne.n	80090c2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	220d      	movs	r2, #13
 80090ba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090c0:	e072      	b.n	80091a8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	2b04      	cmp	r3, #4
 80090c6:	d103      	bne.n	80090d0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	220b      	movs	r2, #11
 80090cc:	761a      	strb	r2, [r3, #24]
      break;
 80090ce:	e06b      	b.n	80091a8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	2b05      	cmp	r3, #5
 80090d4:	d168      	bne.n	80091a8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80090d6:	2303      	movs	r3, #3
 80090d8:	73fb      	strb	r3, [r7, #15]
      break;
 80090da:	e065      	b.n	80091a8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	795b      	ldrb	r3, [r3, #5]
 80090e0:	2201      	movs	r2, #1
 80090e2:	9200      	str	r2, [sp, #0]
 80090e4:	2200      	movs	r2, #0
 80090e6:	2100      	movs	r1, #0
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f87f 	bl	80091ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	220a      	movs	r2, #10
 80090fe:	761a      	strb	r2, [r3, #24]
      break;
 8009100:	e055      	b.n	80091ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	795b      	ldrb	r3, [r3, #5]
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fbe1 	bl	80098d0 <USBH_LL_GetURBState>
 800910e:	4603      	mov	r3, r0
 8009110:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009112:	7bbb      	ldrb	r3, [r7, #14]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d105      	bne.n	8009124 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	220d      	movs	r2, #13
 8009120:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009122:	e043      	b.n	80091ac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	2b02      	cmp	r3, #2
 8009128:	d103      	bne.n	8009132 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2209      	movs	r2, #9
 800912e:	761a      	strb	r2, [r3, #24]
      break;
 8009130:	e03c      	b.n	80091ac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	2b04      	cmp	r3, #4
 8009136:	d139      	bne.n	80091ac <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	220b      	movs	r2, #11
 800913c:	761a      	strb	r2, [r3, #24]
      break;
 800913e:	e035      	b.n	80091ac <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	7e5b      	ldrb	r3, [r3, #25]
 8009144:	3301      	adds	r3, #1
 8009146:	b2da      	uxtb	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	765a      	strb	r2, [r3, #25]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	7e5b      	ldrb	r3, [r3, #25]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d806      	bhi.n	8009162 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2201      	movs	r2, #1
 800915e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009160:	e025      	b.n	80091ae <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009168:	2106      	movs	r1, #6
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	795b      	ldrb	r3, [r3, #5]
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f90c 	bl	8009398 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	791b      	ldrb	r3, [r3, #4]
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f906 	bl	8009398 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009192:	2302      	movs	r3, #2
 8009194:	73fb      	strb	r3, [r7, #15]
      break;
 8009196:	e00a      	b.n	80091ae <USBH_HandleControl+0x2de>

    default:
      break;
 8009198:	bf00      	nop
 800919a:	e008      	b.n	80091ae <USBH_HandleControl+0x2de>
      break;
 800919c:	bf00      	nop
 800919e:	e006      	b.n	80091ae <USBH_HandleControl+0x2de>
      break;
 80091a0:	bf00      	nop
 80091a2:	e004      	b.n	80091ae <USBH_HandleControl+0x2de>
      break;
 80091a4:	bf00      	nop
 80091a6:	e002      	b.n	80091ae <USBH_HandleControl+0x2de>
      break;
 80091a8:	bf00      	nop
 80091aa:	e000      	b.n	80091ae <USBH_HandleControl+0x2de>
      break;
 80091ac:	bf00      	nop
  }

  return status;
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af04      	add	r7, sp, #16
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	4613      	mov	r3, r2
 80091c4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091c6:	79f9      	ldrb	r1, [r7, #7]
 80091c8:	2300      	movs	r3, #0
 80091ca:	9303      	str	r3, [sp, #12]
 80091cc:	2308      	movs	r3, #8
 80091ce:	9302      	str	r3, [sp, #8]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	2300      	movs	r3, #0
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	2300      	movs	r3, #0
 80091da:	2200      	movs	r2, #0
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 fb46 	bl	800986e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af04      	add	r7, sp, #16
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4611      	mov	r1, r2
 80091f8:	461a      	mov	r2, r3
 80091fa:	460b      	mov	r3, r1
 80091fc:	80fb      	strh	r3, [r7, #6]
 80091fe:	4613      	mov	r3, r2
 8009200:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009210:	7979      	ldrb	r1, [r7, #5]
 8009212:	7e3b      	ldrb	r3, [r7, #24]
 8009214:	9303      	str	r3, [sp, #12]
 8009216:	88fb      	ldrh	r3, [r7, #6]
 8009218:	9302      	str	r3, [sp, #8]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	2301      	movs	r3, #1
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	2300      	movs	r3, #0
 8009224:	2200      	movs	r2, #0
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 fb21 	bl	800986e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b088      	sub	sp, #32
 800923a:	af04      	add	r7, sp, #16
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	4611      	mov	r1, r2
 8009242:	461a      	mov	r2, r3
 8009244:	460b      	mov	r3, r1
 8009246:	80fb      	strh	r3, [r7, #6]
 8009248:	4613      	mov	r3, r2
 800924a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800924c:	7979      	ldrb	r1, [r7, #5]
 800924e:	2300      	movs	r3, #0
 8009250:	9303      	str	r3, [sp, #12]
 8009252:	88fb      	ldrh	r3, [r7, #6]
 8009254:	9302      	str	r3, [sp, #8]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	9301      	str	r3, [sp, #4]
 800925a:	2301      	movs	r3, #1
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	2300      	movs	r3, #0
 8009260:	2201      	movs	r2, #1
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 fb03 	bl	800986e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009268:	2300      	movs	r3, #0

}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b088      	sub	sp, #32
 8009276:	af04      	add	r7, sp, #16
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	4611      	mov	r1, r2
 800927e:	461a      	mov	r2, r3
 8009280:	460b      	mov	r3, r1
 8009282:	80fb      	strh	r3, [r7, #6]
 8009284:	4613      	mov	r3, r2
 8009286:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009292:	2300      	movs	r3, #0
 8009294:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009296:	7979      	ldrb	r1, [r7, #5]
 8009298:	7e3b      	ldrb	r3, [r7, #24]
 800929a:	9303      	str	r3, [sp, #12]
 800929c:	88fb      	ldrh	r3, [r7, #6]
 800929e:	9302      	str	r3, [sp, #8]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	2301      	movs	r3, #1
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	2302      	movs	r3, #2
 80092aa:	2200      	movs	r2, #0
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 fade 	bl	800986e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b088      	sub	sp, #32
 80092c0:	af04      	add	r7, sp, #16
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	4611      	mov	r1, r2
 80092c8:	461a      	mov	r2, r3
 80092ca:	460b      	mov	r3, r1
 80092cc:	80fb      	strh	r3, [r7, #6]
 80092ce:	4613      	mov	r3, r2
 80092d0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092d2:	7979      	ldrb	r1, [r7, #5]
 80092d4:	2300      	movs	r3, #0
 80092d6:	9303      	str	r3, [sp, #12]
 80092d8:	88fb      	ldrh	r3, [r7, #6]
 80092da:	9302      	str	r3, [sp, #8]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	9301      	str	r3, [sp, #4]
 80092e0:	2301      	movs	r3, #1
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	2302      	movs	r3, #2
 80092e6:	2201      	movs	r2, #1
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 fac0 	bl	800986e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af04      	add	r7, sp, #16
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	4608      	mov	r0, r1
 8009302:	4611      	mov	r1, r2
 8009304:	461a      	mov	r2, r3
 8009306:	4603      	mov	r3, r0
 8009308:	70fb      	strb	r3, [r7, #3]
 800930a:	460b      	mov	r3, r1
 800930c:	70bb      	strb	r3, [r7, #2]
 800930e:	4613      	mov	r3, r2
 8009310:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009312:	7878      	ldrb	r0, [r7, #1]
 8009314:	78ba      	ldrb	r2, [r7, #2]
 8009316:	78f9      	ldrb	r1, [r7, #3]
 8009318:	8b3b      	ldrh	r3, [r7, #24]
 800931a:	9302      	str	r3, [sp, #8]
 800931c:	7d3b      	ldrb	r3, [r7, #20]
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	7c3b      	ldrb	r3, [r7, #16]
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	4603      	mov	r3, r0
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa53 	bl	80097d2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009342:	78fb      	ldrb	r3, [r7, #3]
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fa72 	bl	8009830 <USBH_LL_ClosePipe>

  return USBH_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b084      	sub	sp, #16
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	460b      	mov	r3, r1
 8009360:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f836 	bl	80093d4 <USBH_GetFreePipe>
 8009368:	4603      	mov	r3, r0
 800936a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800936c:	89fb      	ldrh	r3, [r7, #14]
 800936e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009372:	4293      	cmp	r3, r2
 8009374:	d00a      	beq.n	800938c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009376:	78fa      	ldrb	r2, [r7, #3]
 8009378:	89fb      	ldrh	r3, [r7, #14]
 800937a:	f003 030f 	and.w	r3, r3, #15
 800937e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	33e0      	adds	r3, #224	@ 0xe0
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	440b      	add	r3, r1
 800938a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800938c:	89fb      	ldrh	r3, [r7, #14]
 800938e:	b2db      	uxtb	r3, r3
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80093a4:	78fb      	ldrb	r3, [r7, #3]
 80093a6:	2b0f      	cmp	r3, #15
 80093a8:	d80d      	bhi.n	80093c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80093aa:	78fb      	ldrb	r3, [r7, #3]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	33e0      	adds	r3, #224	@ 0xe0
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	78fb      	ldrb	r3, [r7, #3]
 80093b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80093bc:	6879      	ldr	r1, [r7, #4]
 80093be:	33e0      	adds	r3, #224	@ 0xe0
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	440b      	add	r3, r1
 80093c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]
 80093e4:	e00f      	b.n	8009406 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	33e0      	adds	r3, #224	@ 0xe0
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	e007      	b.n	8009410 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009400:	7bfb      	ldrb	r3, [r7, #15]
 8009402:	3301      	adds	r3, #1
 8009404:	73fb      	strb	r3, [r7, #15]
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	2b0f      	cmp	r3, #15
 800940a:	d9ec      	bls.n	80093e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800940c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009420:	2201      	movs	r2, #1
 8009422:	490e      	ldr	r1, [pc, #56]	@ (800945c <MX_USB_HOST_Init+0x40>)
 8009424:	480e      	ldr	r0, [pc, #56]	@ (8009460 <MX_USB_HOST_Init+0x44>)
 8009426:	f7fe fb15 	bl	8007a54 <USBH_Init>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009430:	f7f7 fb44 	bl	8000abc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009434:	490b      	ldr	r1, [pc, #44]	@ (8009464 <MX_USB_HOST_Init+0x48>)
 8009436:	480a      	ldr	r0, [pc, #40]	@ (8009460 <MX_USB_HOST_Init+0x44>)
 8009438:	f7fe fbb9 	bl	8007bae <USBH_RegisterClass>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009442:	f7f7 fb3b 	bl	8000abc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009446:	4806      	ldr	r0, [pc, #24]	@ (8009460 <MX_USB_HOST_Init+0x44>)
 8009448:	f7fe fc3d 	bl	8007cc6 <USBH_Start>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009452:	f7f7 fb33 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009456:	bf00      	nop
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	0800947d 	.word	0x0800947d
 8009460:	20000248 	.word	0x20000248
 8009464:	2000000c 	.word	0x2000000c

08009468 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800946c:	4802      	ldr	r0, [pc, #8]	@ (8009478 <MX_USB_HOST_Process+0x10>)
 800946e:	f7fe fc3b 	bl	8007ce8 <USBH_Process>
}
 8009472:	bf00      	nop
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20000248 	.word	0x20000248

0800947c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009488:	78fb      	ldrb	r3, [r7, #3]
 800948a:	3b01      	subs	r3, #1
 800948c:	2b04      	cmp	r3, #4
 800948e:	d819      	bhi.n	80094c4 <USBH_UserProcess+0x48>
 8009490:	a201      	add	r2, pc, #4	@ (adr r2, 8009498 <USBH_UserProcess+0x1c>)
 8009492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009496:	bf00      	nop
 8009498:	080094c5 	.word	0x080094c5
 800949c:	080094b5 	.word	0x080094b5
 80094a0:	080094c5 	.word	0x080094c5
 80094a4:	080094bd 	.word	0x080094bd
 80094a8:	080094ad 	.word	0x080094ad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80094ac:	4b09      	ldr	r3, [pc, #36]	@ (80094d4 <USBH_UserProcess+0x58>)
 80094ae:	2203      	movs	r2, #3
 80094b0:	701a      	strb	r2, [r3, #0]
  break;
 80094b2:	e008      	b.n	80094c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80094b4:	4b07      	ldr	r3, [pc, #28]	@ (80094d4 <USBH_UserProcess+0x58>)
 80094b6:	2202      	movs	r2, #2
 80094b8:	701a      	strb	r2, [r3, #0]
  break;
 80094ba:	e004      	b.n	80094c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80094bc:	4b05      	ldr	r3, [pc, #20]	@ (80094d4 <USBH_UserProcess+0x58>)
 80094be:	2201      	movs	r2, #1
 80094c0:	701a      	strb	r2, [r3, #0]
  break;
 80094c2:	e000      	b.n	80094c6 <USBH_UserProcess+0x4a>

  default:
  break;
 80094c4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80094c6:	bf00      	nop
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	20000620 	.word	0x20000620

080094d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08a      	sub	sp, #40	@ 0x28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094e0:	f107 0314 	add.w	r3, r7, #20
 80094e4:	2200      	movs	r2, #0
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	605a      	str	r2, [r3, #4]
 80094ea:	609a      	str	r2, [r3, #8]
 80094ec:	60da      	str	r2, [r3, #12]
 80094ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094f8:	d147      	bne.n	800958a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094fa:	2300      	movs	r3, #0
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	4b25      	ldr	r3, [pc, #148]	@ (8009594 <HAL_HCD_MspInit+0xbc>)
 8009500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009502:	4a24      	ldr	r2, [pc, #144]	@ (8009594 <HAL_HCD_MspInit+0xbc>)
 8009504:	f043 0301 	orr.w	r3, r3, #1
 8009508:	6313      	str	r3, [r2, #48]	@ 0x30
 800950a:	4b22      	ldr	r3, [pc, #136]	@ (8009594 <HAL_HCD_MspInit+0xbc>)
 800950c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	613b      	str	r3, [r7, #16]
 8009514:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009516:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800951a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800951c:	2300      	movs	r3, #0
 800951e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009520:	2300      	movs	r3, #0
 8009522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009524:	f107 0314 	add.w	r3, r7, #20
 8009528:	4619      	mov	r1, r3
 800952a:	481b      	ldr	r0, [pc, #108]	@ (8009598 <HAL_HCD_MspInit+0xc0>)
 800952c:	f7f8 fe6c 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009530:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009536:	2302      	movs	r3, #2
 8009538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800953a:	2300      	movs	r3, #0
 800953c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800953e:	2300      	movs	r3, #0
 8009540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009542:	230a      	movs	r3, #10
 8009544:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009546:	f107 0314 	add.w	r3, r7, #20
 800954a:	4619      	mov	r1, r3
 800954c:	4812      	ldr	r0, [pc, #72]	@ (8009598 <HAL_HCD_MspInit+0xc0>)
 800954e:	f7f8 fe5b 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009552:	4b10      	ldr	r3, [pc, #64]	@ (8009594 <HAL_HCD_MspInit+0xbc>)
 8009554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009556:	4a0f      	ldr	r2, [pc, #60]	@ (8009594 <HAL_HCD_MspInit+0xbc>)
 8009558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800955c:	6353      	str	r3, [r2, #52]	@ 0x34
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	4b0c      	ldr	r3, [pc, #48]	@ (8009594 <HAL_HCD_MspInit+0xbc>)
 8009564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009566:	4a0b      	ldr	r2, [pc, #44]	@ (8009594 <HAL_HCD_MspInit+0xbc>)
 8009568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800956c:	6453      	str	r3, [r2, #68]	@ 0x44
 800956e:	4b09      	ldr	r3, [pc, #36]	@ (8009594 <HAL_HCD_MspInit+0xbc>)
 8009570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800957a:	2200      	movs	r2, #0
 800957c:	2100      	movs	r1, #0
 800957e:	2043      	movs	r0, #67	@ 0x43
 8009580:	f7f8 fa9b 	bl	8001aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009584:	2043      	movs	r0, #67	@ 0x43
 8009586:	f7f8 fab4 	bl	8001af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800958a:	bf00      	nop
 800958c:	3728      	adds	r7, #40	@ 0x28
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	40023800 	.word	0x40023800
 8009598:	40020000 	.word	0x40020000

0800959c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe ff73 	bl	8008496 <USBH_LL_IncTimer>
}
 80095b0:	bf00      	nop
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe ffab 	bl	8008522 <USBH_LL_Connect>
}
 80095cc:	bf00      	nop
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe ffb4 	bl	8008550 <USBH_LL_Disconnect>
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70fb      	strb	r3, [r7, #3]
 80095fc:	4613      	mov	r3, r2
 80095fe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe ff65 	bl	80084ea <USBH_LL_PortEnabled>
}
 8009620:	bf00      	nop
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe ff65 	bl	8008506 <USBH_LL_PortDisabled>
}
 800963c:	bf00      	nop
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009652:	2b01      	cmp	r3, #1
 8009654:	d12a      	bne.n	80096ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009656:	4a18      	ldr	r2, [pc, #96]	@ (80096b8 <USBH_LL_Init+0x74>)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a15      	ldr	r2, [pc, #84]	@ (80096b8 <USBH_LL_Init+0x74>)
 8009662:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009666:	4b14      	ldr	r3, [pc, #80]	@ (80096b8 <USBH_LL_Init+0x74>)
 8009668:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800966c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800966e:	4b12      	ldr	r3, [pc, #72]	@ (80096b8 <USBH_LL_Init+0x74>)
 8009670:	2208      	movs	r2, #8
 8009672:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009674:	4b10      	ldr	r3, [pc, #64]	@ (80096b8 <USBH_LL_Init+0x74>)
 8009676:	2201      	movs	r2, #1
 8009678:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800967a:	4b0f      	ldr	r3, [pc, #60]	@ (80096b8 <USBH_LL_Init+0x74>)
 800967c:	2200      	movs	r2, #0
 800967e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009680:	4b0d      	ldr	r3, [pc, #52]	@ (80096b8 <USBH_LL_Init+0x74>)
 8009682:	2202      	movs	r2, #2
 8009684:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009686:	4b0c      	ldr	r3, [pc, #48]	@ (80096b8 <USBH_LL_Init+0x74>)
 8009688:	2200      	movs	r2, #0
 800968a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800968c:	480a      	ldr	r0, [pc, #40]	@ (80096b8 <USBH_LL_Init+0x74>)
 800968e:	f7f8 ff70 	bl	8002572 <HAL_HCD_Init>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009698:	f7f7 fa10 	bl	8000abc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800969c:	4806      	ldr	r0, [pc, #24]	@ (80096b8 <USBH_LL_Init+0x74>)
 800969e:	f7f9 fbd1 	bl	8002e44 <HAL_HCD_GetCurrentFrame>
 80096a2:	4603      	mov	r3, r0
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7fe fee6 	bl	8008478 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20000624 	.word	0x20000624

080096bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7f9 fb3e 	bl	8002d54 <HAL_HCD_Start>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 f95e 	bl	80099a0 <USBH_Get_USB_Status>
 80096e4:	4603      	mov	r3, r0
 80096e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009708:	4618      	mov	r0, r3
 800970a:	f7f9 fb46 	bl	8002d9a <HAL_HCD_Stop>
 800970e:	4603      	mov	r3, r0
 8009710:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	4618      	mov	r0, r3
 8009716:	f000 f943 	bl	80099a0 <USBH_Get_USB_Status>
 800971a:	4603      	mov	r3, r0
 800971c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800971e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009730:	2301      	movs	r3, #1
 8009732:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800973a:	4618      	mov	r0, r3
 800973c:	f7f9 fb90 	bl	8002e60 <HAL_HCD_GetCurrentSpeed>
 8009740:	4603      	mov	r3, r0
 8009742:	2b02      	cmp	r3, #2
 8009744:	d00c      	beq.n	8009760 <USBH_LL_GetSpeed+0x38>
 8009746:	2b02      	cmp	r3, #2
 8009748:	d80d      	bhi.n	8009766 <USBH_LL_GetSpeed+0x3e>
 800974a:	2b00      	cmp	r3, #0
 800974c:	d002      	beq.n	8009754 <USBH_LL_GetSpeed+0x2c>
 800974e:	2b01      	cmp	r3, #1
 8009750:	d003      	beq.n	800975a <USBH_LL_GetSpeed+0x32>
 8009752:	e008      	b.n	8009766 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009754:	2300      	movs	r3, #0
 8009756:	73fb      	strb	r3, [r7, #15]
    break;
 8009758:	e008      	b.n	800976c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800975a:	2301      	movs	r3, #1
 800975c:	73fb      	strb	r3, [r7, #15]
    break;
 800975e:	e005      	b.n	800976c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009760:	2302      	movs	r3, #2
 8009762:	73fb      	strb	r3, [r7, #15]
    break;
 8009764:	e002      	b.n	800976c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009766:	2301      	movs	r3, #1
 8009768:	73fb      	strb	r3, [r7, #15]
    break;
 800976a:	bf00      	nop
  }
  return  speed;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800978c:	4618      	mov	r0, r3
 800978e:	f7f9 fb21 	bl	8002dd4 <HAL_HCD_ResetPort>
 8009792:	4603      	mov	r3, r0
 8009794:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	4618      	mov	r0, r3
 800979a:	f000 f901 	bl	80099a0 <USBH_Get_USB_Status>
 800979e:	4603      	mov	r3, r0
 80097a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097be:	78fa      	ldrb	r2, [r7, #3]
 80097c0:	4611      	mov	r1, r2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7f9 fb29 	bl	8002e1a <HAL_HCD_HC_GetXferCount>
 80097c8:	4603      	mov	r3, r0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80097d2:	b590      	push	{r4, r7, lr}
 80097d4:	b089      	sub	sp, #36	@ 0x24
 80097d6:	af04      	add	r7, sp, #16
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	4608      	mov	r0, r1
 80097dc:	4611      	mov	r1, r2
 80097de:	461a      	mov	r2, r3
 80097e0:	4603      	mov	r3, r0
 80097e2:	70fb      	strb	r3, [r7, #3]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70bb      	strb	r3, [r7, #2]
 80097e8:	4613      	mov	r3, r2
 80097ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80097fa:	787c      	ldrb	r4, [r7, #1]
 80097fc:	78ba      	ldrb	r2, [r7, #2]
 80097fe:	78f9      	ldrb	r1, [r7, #3]
 8009800:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009802:	9302      	str	r3, [sp, #8]
 8009804:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009808:	9301      	str	r3, [sp, #4]
 800980a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	4623      	mov	r3, r4
 8009812:	f7f8 ff15 	bl	8002640 <HAL_HCD_HC_Init>
 8009816:	4603      	mov	r3, r0
 8009818:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 f8bf 	bl	80099a0 <USBH_Get_USB_Status>
 8009822:	4603      	mov	r3, r0
 8009824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009826:	7bbb      	ldrb	r3, [r7, #14]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	bd90      	pop	{r4, r7, pc}

08009830 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800984a:	78fa      	ldrb	r2, [r7, #3]
 800984c:	4611      	mov	r1, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f7f8 ffae 	bl	80027b0 <HAL_HCD_HC_Halt>
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	4618      	mov	r0, r3
 800985c:	f000 f8a0 	bl	80099a0 <USBH_Get_USB_Status>
 8009860:	4603      	mov	r3, r0
 8009862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009864:	7bbb      	ldrb	r3, [r7, #14]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800986e:	b590      	push	{r4, r7, lr}
 8009870:	b089      	sub	sp, #36	@ 0x24
 8009872:	af04      	add	r7, sp, #16
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	4608      	mov	r0, r1
 8009878:	4611      	mov	r1, r2
 800987a:	461a      	mov	r2, r3
 800987c:	4603      	mov	r3, r0
 800987e:	70fb      	strb	r3, [r7, #3]
 8009880:	460b      	mov	r3, r1
 8009882:	70bb      	strb	r3, [r7, #2]
 8009884:	4613      	mov	r3, r2
 8009886:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009896:	787c      	ldrb	r4, [r7, #1]
 8009898:	78ba      	ldrb	r2, [r7, #2]
 800989a:	78f9      	ldrb	r1, [r7, #3]
 800989c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80098a0:	9303      	str	r3, [sp, #12]
 80098a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80098a4:	9302      	str	r3, [sp, #8]
 80098a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	4623      	mov	r3, r4
 80098b2:	f7f8 ffa1 	bl	80027f8 <HAL_HCD_HC_SubmitRequest>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 f86f 	bl	80099a0 <USBH_Get_USB_Status>
 80098c2:	4603      	mov	r3, r0
 80098c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd90      	pop	{r4, r7, pc}

080098d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098e2:	78fa      	ldrb	r2, [r7, #3]
 80098e4:	4611      	mov	r1, r2
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7f9 fa82 	bl	8002df0 <HAL_HCD_HC_GetURBState>
 80098ec:	4603      	mov	r3, r0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b082      	sub	sp, #8
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	460b      	mov	r3, r1
 8009900:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009908:	2b01      	cmp	r3, #1
 800990a:	d103      	bne.n	8009914 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	4618      	mov	r0, r3
 8009910:	f000 f872 	bl	80099f8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009914:	20c8      	movs	r0, #200	@ 0xc8
 8009916:	f7f7 fbc9 	bl	80010ac <HAL_Delay>
  return USBH_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	70fb      	strb	r3, [r7, #3]
 8009930:	4613      	mov	r3, r2
 8009932:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800993a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800993c:	78fa      	ldrb	r2, [r7, #3]
 800993e:	68f9      	ldr	r1, [r7, #12]
 8009940:	4613      	mov	r3, r2
 8009942:	011b      	lsls	r3, r3, #4
 8009944:	1a9b      	subs	r3, r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	440b      	add	r3, r1
 800994a:	3317      	adds	r3, #23
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009952:	78fa      	ldrb	r2, [r7, #3]
 8009954:	68f9      	ldr	r1, [r7, #12]
 8009956:	4613      	mov	r3, r2
 8009958:	011b      	lsls	r3, r3, #4
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	440b      	add	r3, r1
 8009960:	333c      	adds	r3, #60	@ 0x3c
 8009962:	78ba      	ldrb	r2, [r7, #2]
 8009964:	701a      	strb	r2, [r3, #0]
 8009966:	e009      	b.n	800997c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009968:	78fa      	ldrb	r2, [r7, #3]
 800996a:	68f9      	ldr	r1, [r7, #12]
 800996c:	4613      	mov	r3, r2
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	1a9b      	subs	r3, r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	440b      	add	r3, r1
 8009976:	333d      	adds	r3, #61	@ 0x3d
 8009978:	78ba      	ldrb	r2, [r7, #2]
 800997a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7f7 fb8a 	bl	80010ac <HAL_Delay>
}
 8009998:	bf00      	nop
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	2b03      	cmp	r3, #3
 80099b2:	d817      	bhi.n	80099e4 <USBH_Get_USB_Status+0x44>
 80099b4:	a201      	add	r2, pc, #4	@ (adr r2, 80099bc <USBH_Get_USB_Status+0x1c>)
 80099b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ba:	bf00      	nop
 80099bc:	080099cd 	.word	0x080099cd
 80099c0:	080099d3 	.word	0x080099d3
 80099c4:	080099d9 	.word	0x080099d9
 80099c8:	080099df 	.word	0x080099df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73fb      	strb	r3, [r7, #15]
    break;
 80099d0:	e00b      	b.n	80099ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80099d2:	2302      	movs	r3, #2
 80099d4:	73fb      	strb	r3, [r7, #15]
    break;
 80099d6:	e008      	b.n	80099ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80099d8:	2301      	movs	r3, #1
 80099da:	73fb      	strb	r3, [r7, #15]
    break;
 80099dc:	e005      	b.n	80099ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80099de:	2302      	movs	r3, #2
 80099e0:	73fb      	strb	r3, [r7, #15]
    break;
 80099e2:	e002      	b.n	80099ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80099e4:	2302      	movs	r3, #2
 80099e6:	73fb      	strb	r3, [r7, #15]
    break;
 80099e8:	bf00      	nop
  }
  return usb_status;
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009a06:	79fb      	ldrb	r3, [r7, #7]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d102      	bne.n	8009a12 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
 8009a10:	e001      	b.n	8009a16 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009a12:	2301      	movs	r3, #1
 8009a14:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	4803      	ldr	r0, [pc, #12]	@ (8009a2c <MX_DriverVbusFS+0x34>)
 8009a1e:	f7f8 fd8f 	bl	8002540 <HAL_GPIO_WritePin>
}
 8009a22:	bf00      	nop
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	40020800 	.word	0x40020800

08009a30 <malloc>:
 8009a30:	4b02      	ldr	r3, [pc, #8]	@ (8009a3c <malloc+0xc>)
 8009a32:	4601      	mov	r1, r0
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	f000 b82d 	b.w	8009a94 <_malloc_r>
 8009a3a:	bf00      	nop
 8009a3c:	2000002c 	.word	0x2000002c

08009a40 <free>:
 8009a40:	4b02      	ldr	r3, [pc, #8]	@ (8009a4c <free+0xc>)
 8009a42:	4601      	mov	r1, r0
 8009a44:	6818      	ldr	r0, [r3, #0]
 8009a46:	f000 b8f5 	b.w	8009c34 <_free_r>
 8009a4a:	bf00      	nop
 8009a4c:	2000002c 	.word	0x2000002c

08009a50 <sbrk_aligned>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	4e0f      	ldr	r6, [pc, #60]	@ (8009a90 <sbrk_aligned+0x40>)
 8009a54:	460c      	mov	r4, r1
 8009a56:	6831      	ldr	r1, [r6, #0]
 8009a58:	4605      	mov	r5, r0
 8009a5a:	b911      	cbnz	r1, 8009a62 <sbrk_aligned+0x12>
 8009a5c:	f000 f8ae 	bl	8009bbc <_sbrk_r>
 8009a60:	6030      	str	r0, [r6, #0]
 8009a62:	4621      	mov	r1, r4
 8009a64:	4628      	mov	r0, r5
 8009a66:	f000 f8a9 	bl	8009bbc <_sbrk_r>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d103      	bne.n	8009a76 <sbrk_aligned+0x26>
 8009a6e:	f04f 34ff 	mov.w	r4, #4294967295
 8009a72:	4620      	mov	r0, r4
 8009a74:	bd70      	pop	{r4, r5, r6, pc}
 8009a76:	1cc4      	adds	r4, r0, #3
 8009a78:	f024 0403 	bic.w	r4, r4, #3
 8009a7c:	42a0      	cmp	r0, r4
 8009a7e:	d0f8      	beq.n	8009a72 <sbrk_aligned+0x22>
 8009a80:	1a21      	subs	r1, r4, r0
 8009a82:	4628      	mov	r0, r5
 8009a84:	f000 f89a 	bl	8009bbc <_sbrk_r>
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d1f2      	bne.n	8009a72 <sbrk_aligned+0x22>
 8009a8c:	e7ef      	b.n	8009a6e <sbrk_aligned+0x1e>
 8009a8e:	bf00      	nop
 8009a90:	20000a04 	.word	0x20000a04

08009a94 <_malloc_r>:
 8009a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a98:	1ccd      	adds	r5, r1, #3
 8009a9a:	f025 0503 	bic.w	r5, r5, #3
 8009a9e:	3508      	adds	r5, #8
 8009aa0:	2d0c      	cmp	r5, #12
 8009aa2:	bf38      	it	cc
 8009aa4:	250c      	movcc	r5, #12
 8009aa6:	2d00      	cmp	r5, #0
 8009aa8:	4606      	mov	r6, r0
 8009aaa:	db01      	blt.n	8009ab0 <_malloc_r+0x1c>
 8009aac:	42a9      	cmp	r1, r5
 8009aae:	d904      	bls.n	8009aba <_malloc_r+0x26>
 8009ab0:	230c      	movs	r3, #12
 8009ab2:	6033      	str	r3, [r6, #0]
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b90 <_malloc_r+0xfc>
 8009abe:	f000 f869 	bl	8009b94 <__malloc_lock>
 8009ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ac6:	461c      	mov	r4, r3
 8009ac8:	bb44      	cbnz	r4, 8009b1c <_malloc_r+0x88>
 8009aca:	4629      	mov	r1, r5
 8009acc:	4630      	mov	r0, r6
 8009ace:	f7ff ffbf 	bl	8009a50 <sbrk_aligned>
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	d158      	bne.n	8009b8a <_malloc_r+0xf6>
 8009ad8:	f8d8 4000 	ldr.w	r4, [r8]
 8009adc:	4627      	mov	r7, r4
 8009ade:	2f00      	cmp	r7, #0
 8009ae0:	d143      	bne.n	8009b6a <_malloc_r+0xd6>
 8009ae2:	2c00      	cmp	r4, #0
 8009ae4:	d04b      	beq.n	8009b7e <_malloc_r+0xea>
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	4639      	mov	r1, r7
 8009aea:	4630      	mov	r0, r6
 8009aec:	eb04 0903 	add.w	r9, r4, r3
 8009af0:	f000 f864 	bl	8009bbc <_sbrk_r>
 8009af4:	4581      	cmp	r9, r0
 8009af6:	d142      	bne.n	8009b7e <_malloc_r+0xea>
 8009af8:	6821      	ldr	r1, [r4, #0]
 8009afa:	1a6d      	subs	r5, r5, r1
 8009afc:	4629      	mov	r1, r5
 8009afe:	4630      	mov	r0, r6
 8009b00:	f7ff ffa6 	bl	8009a50 <sbrk_aligned>
 8009b04:	3001      	adds	r0, #1
 8009b06:	d03a      	beq.n	8009b7e <_malloc_r+0xea>
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	442b      	add	r3, r5
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	bb62      	cbnz	r2, 8009b70 <_malloc_r+0xdc>
 8009b16:	f8c8 7000 	str.w	r7, [r8]
 8009b1a:	e00f      	b.n	8009b3c <_malloc_r+0xa8>
 8009b1c:	6822      	ldr	r2, [r4, #0]
 8009b1e:	1b52      	subs	r2, r2, r5
 8009b20:	d420      	bmi.n	8009b64 <_malloc_r+0xd0>
 8009b22:	2a0b      	cmp	r2, #11
 8009b24:	d917      	bls.n	8009b56 <_malloc_r+0xc2>
 8009b26:	1961      	adds	r1, r4, r5
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	6025      	str	r5, [r4, #0]
 8009b2c:	bf18      	it	ne
 8009b2e:	6059      	strne	r1, [r3, #4]
 8009b30:	6863      	ldr	r3, [r4, #4]
 8009b32:	bf08      	it	eq
 8009b34:	f8c8 1000 	streq.w	r1, [r8]
 8009b38:	5162      	str	r2, [r4, r5]
 8009b3a:	604b      	str	r3, [r1, #4]
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f000 f82f 	bl	8009ba0 <__malloc_unlock>
 8009b42:	f104 000b 	add.w	r0, r4, #11
 8009b46:	1d23      	adds	r3, r4, #4
 8009b48:	f020 0007 	bic.w	r0, r0, #7
 8009b4c:	1ac2      	subs	r2, r0, r3
 8009b4e:	bf1c      	itt	ne
 8009b50:	1a1b      	subne	r3, r3, r0
 8009b52:	50a3      	strne	r3, [r4, r2]
 8009b54:	e7af      	b.n	8009ab6 <_malloc_r+0x22>
 8009b56:	6862      	ldr	r2, [r4, #4]
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	bf0c      	ite	eq
 8009b5c:	f8c8 2000 	streq.w	r2, [r8]
 8009b60:	605a      	strne	r2, [r3, #4]
 8009b62:	e7eb      	b.n	8009b3c <_malloc_r+0xa8>
 8009b64:	4623      	mov	r3, r4
 8009b66:	6864      	ldr	r4, [r4, #4]
 8009b68:	e7ae      	b.n	8009ac8 <_malloc_r+0x34>
 8009b6a:	463c      	mov	r4, r7
 8009b6c:	687f      	ldr	r7, [r7, #4]
 8009b6e:	e7b6      	b.n	8009ade <_malloc_r+0x4a>
 8009b70:	461a      	mov	r2, r3
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	42a3      	cmp	r3, r4
 8009b76:	d1fb      	bne.n	8009b70 <_malloc_r+0xdc>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	6053      	str	r3, [r2, #4]
 8009b7c:	e7de      	b.n	8009b3c <_malloc_r+0xa8>
 8009b7e:	230c      	movs	r3, #12
 8009b80:	6033      	str	r3, [r6, #0]
 8009b82:	4630      	mov	r0, r6
 8009b84:	f000 f80c 	bl	8009ba0 <__malloc_unlock>
 8009b88:	e794      	b.n	8009ab4 <_malloc_r+0x20>
 8009b8a:	6005      	str	r5, [r0, #0]
 8009b8c:	e7d6      	b.n	8009b3c <_malloc_r+0xa8>
 8009b8e:	bf00      	nop
 8009b90:	20000a08 	.word	0x20000a08

08009b94 <__malloc_lock>:
 8009b94:	4801      	ldr	r0, [pc, #4]	@ (8009b9c <__malloc_lock+0x8>)
 8009b96:	f000 b84b 	b.w	8009c30 <__retarget_lock_acquire_recursive>
 8009b9a:	bf00      	nop
 8009b9c:	20000b48 	.word	0x20000b48

08009ba0 <__malloc_unlock>:
 8009ba0:	4801      	ldr	r0, [pc, #4]	@ (8009ba8 <__malloc_unlock+0x8>)
 8009ba2:	f000 b846 	b.w	8009c32 <__retarget_lock_release_recursive>
 8009ba6:	bf00      	nop
 8009ba8:	20000b48 	.word	0x20000b48

08009bac <memset>:
 8009bac:	4402      	add	r2, r0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d100      	bne.n	8009bb6 <memset+0xa>
 8009bb4:	4770      	bx	lr
 8009bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8009bba:	e7f9      	b.n	8009bb0 <memset+0x4>

08009bbc <_sbrk_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4d06      	ldr	r5, [pc, #24]	@ (8009bd8 <_sbrk_r+0x1c>)
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	4608      	mov	r0, r1
 8009bc6:	602b      	str	r3, [r5, #0]
 8009bc8:	f7f7 f98c 	bl	8000ee4 <_sbrk>
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	d102      	bne.n	8009bd6 <_sbrk_r+0x1a>
 8009bd0:	682b      	ldr	r3, [r5, #0]
 8009bd2:	b103      	cbz	r3, 8009bd6 <_sbrk_r+0x1a>
 8009bd4:	6023      	str	r3, [r4, #0]
 8009bd6:	bd38      	pop	{r3, r4, r5, pc}
 8009bd8:	20000b44 	.word	0x20000b44

08009bdc <__errno>:
 8009bdc:	4b01      	ldr	r3, [pc, #4]	@ (8009be4 <__errno+0x8>)
 8009bde:	6818      	ldr	r0, [r3, #0]
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	2000002c 	.word	0x2000002c

08009be8 <__libc_init_array>:
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	4d0d      	ldr	r5, [pc, #52]	@ (8009c20 <__libc_init_array+0x38>)
 8009bec:	4c0d      	ldr	r4, [pc, #52]	@ (8009c24 <__libc_init_array+0x3c>)
 8009bee:	1b64      	subs	r4, r4, r5
 8009bf0:	10a4      	asrs	r4, r4, #2
 8009bf2:	2600      	movs	r6, #0
 8009bf4:	42a6      	cmp	r6, r4
 8009bf6:	d109      	bne.n	8009c0c <__libc_init_array+0x24>
 8009bf8:	4d0b      	ldr	r5, [pc, #44]	@ (8009c28 <__libc_init_array+0x40>)
 8009bfa:	4c0c      	ldr	r4, [pc, #48]	@ (8009c2c <__libc_init_array+0x44>)
 8009bfc:	f000 f864 	bl	8009cc8 <_init>
 8009c00:	1b64      	subs	r4, r4, r5
 8009c02:	10a4      	asrs	r4, r4, #2
 8009c04:	2600      	movs	r6, #0
 8009c06:	42a6      	cmp	r6, r4
 8009c08:	d105      	bne.n	8009c16 <__libc_init_array+0x2e>
 8009c0a:	bd70      	pop	{r4, r5, r6, pc}
 8009c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c10:	4798      	blx	r3
 8009c12:	3601      	adds	r6, #1
 8009c14:	e7ee      	b.n	8009bf4 <__libc_init_array+0xc>
 8009c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c1a:	4798      	blx	r3
 8009c1c:	3601      	adds	r6, #1
 8009c1e:	e7f2      	b.n	8009c06 <__libc_init_array+0x1e>
 8009c20:	08009d0c 	.word	0x08009d0c
 8009c24:	08009d0c 	.word	0x08009d0c
 8009c28:	08009d0c 	.word	0x08009d0c
 8009c2c:	08009d10 	.word	0x08009d10

08009c30 <__retarget_lock_acquire_recursive>:
 8009c30:	4770      	bx	lr

08009c32 <__retarget_lock_release_recursive>:
 8009c32:	4770      	bx	lr

08009c34 <_free_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4605      	mov	r5, r0
 8009c38:	2900      	cmp	r1, #0
 8009c3a:	d041      	beq.n	8009cc0 <_free_r+0x8c>
 8009c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c40:	1f0c      	subs	r4, r1, #4
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	bfb8      	it	lt
 8009c46:	18e4      	addlt	r4, r4, r3
 8009c48:	f7ff ffa4 	bl	8009b94 <__malloc_lock>
 8009c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8009cc4 <_free_r+0x90>)
 8009c4e:	6813      	ldr	r3, [r2, #0]
 8009c50:	b933      	cbnz	r3, 8009c60 <_free_r+0x2c>
 8009c52:	6063      	str	r3, [r4, #4]
 8009c54:	6014      	str	r4, [r2, #0]
 8009c56:	4628      	mov	r0, r5
 8009c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c5c:	f7ff bfa0 	b.w	8009ba0 <__malloc_unlock>
 8009c60:	42a3      	cmp	r3, r4
 8009c62:	d908      	bls.n	8009c76 <_free_r+0x42>
 8009c64:	6820      	ldr	r0, [r4, #0]
 8009c66:	1821      	adds	r1, r4, r0
 8009c68:	428b      	cmp	r3, r1
 8009c6a:	bf01      	itttt	eq
 8009c6c:	6819      	ldreq	r1, [r3, #0]
 8009c6e:	685b      	ldreq	r3, [r3, #4]
 8009c70:	1809      	addeq	r1, r1, r0
 8009c72:	6021      	streq	r1, [r4, #0]
 8009c74:	e7ed      	b.n	8009c52 <_free_r+0x1e>
 8009c76:	461a      	mov	r2, r3
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	b10b      	cbz	r3, 8009c80 <_free_r+0x4c>
 8009c7c:	42a3      	cmp	r3, r4
 8009c7e:	d9fa      	bls.n	8009c76 <_free_r+0x42>
 8009c80:	6811      	ldr	r1, [r2, #0]
 8009c82:	1850      	adds	r0, r2, r1
 8009c84:	42a0      	cmp	r0, r4
 8009c86:	d10b      	bne.n	8009ca0 <_free_r+0x6c>
 8009c88:	6820      	ldr	r0, [r4, #0]
 8009c8a:	4401      	add	r1, r0
 8009c8c:	1850      	adds	r0, r2, r1
 8009c8e:	4283      	cmp	r3, r0
 8009c90:	6011      	str	r1, [r2, #0]
 8009c92:	d1e0      	bne.n	8009c56 <_free_r+0x22>
 8009c94:	6818      	ldr	r0, [r3, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	6053      	str	r3, [r2, #4]
 8009c9a:	4408      	add	r0, r1
 8009c9c:	6010      	str	r0, [r2, #0]
 8009c9e:	e7da      	b.n	8009c56 <_free_r+0x22>
 8009ca0:	d902      	bls.n	8009ca8 <_free_r+0x74>
 8009ca2:	230c      	movs	r3, #12
 8009ca4:	602b      	str	r3, [r5, #0]
 8009ca6:	e7d6      	b.n	8009c56 <_free_r+0x22>
 8009ca8:	6820      	ldr	r0, [r4, #0]
 8009caa:	1821      	adds	r1, r4, r0
 8009cac:	428b      	cmp	r3, r1
 8009cae:	bf04      	itt	eq
 8009cb0:	6819      	ldreq	r1, [r3, #0]
 8009cb2:	685b      	ldreq	r3, [r3, #4]
 8009cb4:	6063      	str	r3, [r4, #4]
 8009cb6:	bf04      	itt	eq
 8009cb8:	1809      	addeq	r1, r1, r0
 8009cba:	6021      	streq	r1, [r4, #0]
 8009cbc:	6054      	str	r4, [r2, #4]
 8009cbe:	e7ca      	b.n	8009c56 <_free_r+0x22>
 8009cc0:	bd38      	pop	{r3, r4, r5, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20000a08 	.word	0x20000a08

08009cc8 <_init>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	bf00      	nop
 8009ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cce:	bc08      	pop	{r3}
 8009cd0:	469e      	mov	lr, r3
 8009cd2:	4770      	bx	lr

08009cd4 <_fini>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	bf00      	nop
 8009cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cda:	bc08      	pop	{r3}
 8009cdc:	469e      	mov	lr, r3
 8009cde:	4770      	bx	lr
