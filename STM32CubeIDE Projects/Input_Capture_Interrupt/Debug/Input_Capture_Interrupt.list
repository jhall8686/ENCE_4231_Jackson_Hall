
Input_Capture_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b0c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009c94  08009c94  0000ac94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cb0  08009cb0  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009cb0  08009cb0  0000acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cb8  08009cb8  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cb8  08009cb8  0000acb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cbc  08009cbc  0000acbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009cc0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a74  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000af0  20000af0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001997a  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dee  00000000  00000000  00024a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  00028818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000117f  00000000  00000000  00029eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024392  00000000  00000000  0002b037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d97f  00000000  00000000  0004f3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4105  00000000  00000000  0006cd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140e4d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006368  00000000  00000000  00140e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000091  00000000  00000000  001471f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009c7c 	.word	0x08009c7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009c7c 	.word	0x08009c7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fd00 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f816 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f982 	bl	8000808 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f87c 	bl	8000600 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8a8 	bl	800065c <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8d6 	bl	80006bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f008 ff5e 	bl	80093d0 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000514:	f000 f908 	bl	8000728 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000518:	2100      	movs	r1, #0
 800051a:	4803      	ldr	r0, [pc, #12]	@ (8000528 <main+0x34>)
 800051c:	f004 fe5c 	bl	80051d8 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000520:	f008 ff7c 	bl	800941c <MX_USB_HOST_Process>
 8000524:	e7fc      	b.n	8000520 <main+0x2c>
 8000526:	bf00      	nop
 8000528:	2000018c 	.word	0x2000018c

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	@ 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	@ 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f009 fb10 	bl	8009b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	@ (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	@ (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	@ (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 ff18 	bl	80043e8 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005be:	f000 fa5b 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2105      	movs	r1, #5
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 f979 	bl	80048d8 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ec:	f000 fa44 	bl	8000a78 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	@ 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_I2C1_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_I2C1_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <MX_I2C1_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_I2C1_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <MX_I2C1_Init+0x50>)
 800063e:	f003 f8ef 	bl	8003820 <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 fa16 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000098 	.word	0x20000098
 8000654:	40005400 	.word	0x40005400
 8000658:	000186a0 	.word	0x000186a0

0800065c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000660:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000662:	4a14      	ldr	r2, [pc, #80]	@ (80006b4 <MX_I2S3_Init+0x58>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000666:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800066c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067a:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000680:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000684:	4a0c      	ldr	r2, [pc, #48]	@ (80006b8 <MX_I2S3_Init+0x5c>)
 8000686:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_I2S3_Init+0x54>)
 800069c:	f003 fa04 	bl	8003aa8 <HAL_I2S_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006a6:	f000 f9e7 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000ec 	.word	0x200000ec
 80006b4:	40003c00 	.word	0x40003c00
 80006b8:	00017700 	.word	0x00017700

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	@ (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f004 fc31 	bl	8004f74 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f9ae 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000134 	.word	0x20000134
 8000724:	40013000 	.word	0x40013000

08000728 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	@ 0x28
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000752:	4b2c      	ldr	r3, [pc, #176]	@ (8000804 <MX_TIM2_Init+0xdc>)
 8000754:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000758:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 800075a:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <MX_TIM2_Init+0xdc>)
 800075c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000760:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <MX_TIM2_Init+0xdc>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8000768:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <MX_TIM2_Init+0xdc>)
 800076a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800076e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <MX_TIM2_Init+0xdc>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <MX_TIM2_Init+0xdc>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800077c:	4821      	ldr	r0, [pc, #132]	@ (8000804 <MX_TIM2_Init+0xdc>)
 800077e:	f004 fc82 	bl	8005086 <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000788:	f000 f976 	bl	8000a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000790:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4619      	mov	r1, r3
 8000798:	481a      	ldr	r0, [pc, #104]	@ (8000804 <MX_TIM2_Init+0xdc>)
 800079a:	f004 ffd1 	bl	8005740 <HAL_TIM_ConfigClockSource>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80007a4:	f000 f968 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007a8:	4816      	ldr	r0, [pc, #88]	@ (8000804 <MX_TIM2_Init+0xdc>)
 80007aa:	f004 fcbb 	bl	8005124 <HAL_TIM_IC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007b4:	f000 f960 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	480f      	ldr	r0, [pc, #60]	@ (8000804 <MX_TIM2_Init+0xdc>)
 80007c8:	f005 fb84 	bl	8005ed4 <HAL_TIMEx_MasterConfigSynchronization>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80007d2:	f000 f951 	bl	8000a78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007da:	2301      	movs	r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_TIM2_Init+0xdc>)
 80007ee:	f004 ff0b 	bl	8005608 <HAL_TIM_IC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80007f8:	f000 f93e 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	@ 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000018c 	.word	0x2000018c

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	@ 0x30
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	4b6b      	ldr	r3, [pc, #428]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a6a      	ldr	r2, [pc, #424]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 8000828:	f043 0310 	orr.w	r3, r3, #16
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b68      	ldr	r3, [pc, #416]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0310 	and.w	r3, r3, #16
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	4b64      	ldr	r3, [pc, #400]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a63      	ldr	r2, [pc, #396]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b61      	ldr	r3, [pc, #388]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b5d      	ldr	r3, [pc, #372]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a5c      	ldr	r2, [pc, #368]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b5a      	ldr	r3, [pc, #360]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b56      	ldr	r3, [pc, #344]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a55      	ldr	r2, [pc, #340]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b53      	ldr	r3, [pc, #332]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b4f      	ldr	r3, [pc, #316]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a4e      	ldr	r2, [pc, #312]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b4c      	ldr	r3, [pc, #304]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b48      	ldr	r3, [pc, #288]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a47      	ldr	r2, [pc, #284]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b45      	ldr	r3, [pc, #276]	@ (80009d0 <MX_GPIO_Init+0x1c8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2108      	movs	r1, #8
 80008ca:	4842      	ldr	r0, [pc, #264]	@ (80009d4 <MX_GPIO_Init+0x1cc>)
 80008cc:	f000 fe5a 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	4840      	ldr	r0, [pc, #256]	@ (80009d8 <MX_GPIO_Init+0x1d0>)
 80008d6:	f000 fe55 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008da:	2200      	movs	r2, #0
 80008dc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008e0:	483e      	ldr	r0, [pc, #248]	@ (80009dc <MX_GPIO_Init+0x1d4>)
 80008e2:	f000 fe4f 	bl	8001584 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008e6:	2308      	movs	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4835      	ldr	r0, [pc, #212]	@ (80009d4 <MX_GPIO_Init+0x1cc>)
 80008fe:	f000 fca5 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	482f      	ldr	r0, [pc, #188]	@ (80009d8 <MX_GPIO_Init+0x1d0>)
 800091a:	f000 fc97 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800091e:	2308      	movs	r3, #8
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092e:	2305      	movs	r3, #5
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4827      	ldr	r0, [pc, #156]	@ (80009d8 <MX_GPIO_Init+0x1d0>)
 800093a:	f000 fc87 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800093e:	2304      	movs	r3, #4
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4823      	ldr	r0, [pc, #140]	@ (80009e0 <MX_GPIO_Init+0x1d8>)
 8000952:	f000 fc7b 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000968:	2305      	movs	r3, #5
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	481b      	ldr	r0, [pc, #108]	@ (80009e0 <MX_GPIO_Init+0x1d8>)
 8000974:	f000 fc6a 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000978:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800097c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4812      	ldr	r0, [pc, #72]	@ (80009dc <MX_GPIO_Init+0x1d4>)
 8000992:	f000 fc5b 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000996:	2320      	movs	r3, #32
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <MX_GPIO_Init+0x1d4>)
 80009aa:	f000 fc4f 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_GPIO_Init+0x1cc>)
 80009c4:	f000 fc42 	bl	800124c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c8:	bf00      	nop
 80009ca:	3730      	adds	r7, #48	@ 0x30
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	40020400 	.word	0x40020400

080009e4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009f4:	d133      	bne.n	8000a5e <HAL_TIM_IC_CaptureCallback+0x7a>
	{
		if(gCaptureFlag == 0)
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <HAL_TIM_IC_CaptureCallback+0x84>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d10a      	bne.n	8000a14 <HAL_TIM_IC_CaptureCallback+0x30>
		{
			gCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80009fe:	2100      	movs	r1, #0
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f004 ff65 	bl	80058d0 <HAL_TIM_ReadCapturedValue>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a0a:	6013      	str	r3, [r2, #0]
			gCaptureFlag = 1;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
				gPeriod = (0xFFFF - gCaptureValue1) + gCaptureValue2 + 1;
			}
		gCaptureFlag = 0;
		}
	}
}
 8000a12:	e024      	b.n	8000a5e <HAL_TIM_IC_CaptureCallback+0x7a>
		else if(gCaptureFlag == 1)
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d120      	bne.n	8000a5e <HAL_TIM_IC_CaptureCallback+0x7a>
			gCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f004 ff56 	bl	80058d0 <HAL_TIM_ReadCapturedValue>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000a28:	6013      	str	r3, [r2, #0]
			if(gCaptureValue2 > gCaptureValue1)
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d907      	bls.n	8000a46 <HAL_TIM_IC_CaptureCallback+0x62>
				gPeriod = gCaptureValue2 - gCaptureValue1;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	e008      	b.n	8000a58 <HAL_TIM_IC_CaptureCallback+0x74>
				gPeriod = (0xFFFF - gCaptureValue1) + gCaptureValue2 + 1;
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000a54:	4a07      	ldr	r2, [pc, #28]	@ (8000a74 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000a56:	6013      	str	r3, [r2, #0]
		gCaptureFlag = 0;
 8000a58:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200001d4 	.word	0x200001d4
 8000a6c:	200001d8 	.word	0x200001d8
 8000a70:	200001dc 	.word	0x200001dc
 8000a74:	200001e0 	.word	0x200001e0

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <Error_Handler+0x8>

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad0 <HAL_MspInit+0x4c>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	4a08      	ldr	r2, [pc, #32]	@ (8000ad0 <HAL_MspInit+0x4c>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ac2:	2007      	movs	r0, #7
 8000ac4:	f000 fb80 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <HAL_I2C_MspInit+0x84>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12c      	bne.n	8000b50 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <HAL_I2C_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a17      	ldr	r2, [pc, #92]	@ (8000b5c <HAL_I2C_MspInit+0x88>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_I2C_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b12:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b18:	2312      	movs	r3, #18
 8000b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b24:	2304      	movs	r3, #4
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <HAL_I2C_MspInit+0x8c>)
 8000b30:	f000 fb8c 	bl	800124c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <HAL_I2C_MspInit+0x88>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_I2C_MspInit+0x88>)
 8000b3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <HAL_I2C_MspInit+0x88>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	@ 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40005400 	.word	0x40005400
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020400 	.word	0x40020400

08000b64 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	@ 0x38
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a31      	ldr	r2, [pc, #196]	@ (8000c54 <HAL_I2S_MspInit+0xf0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d15a      	bne.n	8000c4a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b94:	2301      	movs	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b98:	23c0      	movs	r3, #192	@ 0xc0
 8000b9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 f8a3 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bb0:	f7ff ff62 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <HAL_I2S_MspInit+0xf4>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	4a26      	ldr	r2, [pc, #152]	@ (8000c58 <HAL_I2S_MspInit+0xf4>)
 8000bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc4:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <HAL_I2S_MspInit+0xf4>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	4b20      	ldr	r3, [pc, #128]	@ (8000c58 <HAL_I2S_MspInit+0xf4>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c58 <HAL_I2S_MspInit+0xf4>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <HAL_I2S_MspInit+0xf4>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <HAL_I2S_MspInit+0xf4>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf4:	4a18      	ldr	r2, [pc, #96]	@ (8000c58 <HAL_I2S_MspInit+0xf4>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfc:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <HAL_I2S_MspInit+0xf4>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c18:	2306      	movs	r3, #6
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	480e      	ldr	r0, [pc, #56]	@ (8000c5c <HAL_I2S_MspInit+0xf8>)
 8000c24:	f000 fb12 	bl	800124c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c28:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c3a:	2306      	movs	r3, #6
 8000c3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4806      	ldr	r0, [pc, #24]	@ (8000c60 <HAL_I2S_MspInit+0xfc>)
 8000c46:	f000 fb01 	bl	800124c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3738      	adds	r7, #56	@ 0x38
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40003c00 	.word	0x40003c00
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40020800 	.word	0x40020800

08000c64 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	@ (8000ce8 <HAL_SPI_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12b      	bne.n	8000cde <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <HAL_SPI_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <HAL_SPI_MspInit+0x88>)
 8000c90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <HAL_SPI_MspInit+0x88>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <HAL_SPI_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a10      	ldr	r2, [pc, #64]	@ (8000cec <HAL_SPI_MspInit+0x88>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_SPI_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cbe:	23e0      	movs	r3, #224	@ 0xe0
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cce:	2305      	movs	r3, #5
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <HAL_SPI_MspInit+0x8c>)
 8000cda:	f000 fab7 	bl	800124c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	@ 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40013000 	.word	0x40013000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d14:	d133      	bne.n	8000d7e <HAL_TIM_Base_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <HAL_TIM_Base_MspInit+0x94>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8000d88 <HAL_TIM_Base_MspInit+0x94>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_TIM_Base_MspInit+0x94>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <HAL_TIM_Base_MspInit+0x94>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a13      	ldr	r2, [pc, #76]	@ (8000d88 <HAL_TIM_Base_MspInit+0x94>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <HAL_TIM_Base_MspInit+0x94>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4808      	ldr	r0, [pc, #32]	@ (8000d8c <HAL_TIM_Base_MspInit+0x98>)
 8000d6a:	f000 fa6f 	bl	800124c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	201c      	movs	r0, #28
 8000d74:	f000 fa33 	bl	80011de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d78:	201c      	movs	r0, #28
 8000d7a:	f000 fa4c 	bl	8001216 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	@ 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <NMI_Handler+0x4>

08000d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <MemManage_Handler+0x4>

08000da8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de6:	f000 f8db 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <TIM2_IRQHandler+0x10>)
 8000df6:	f004 fb17 	bl	8005428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000018c 	.word	0x2000018c

08000e04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <OTG_FS_IRQHandler+0x10>)
 8000e0a:	f000 feb5 	bl	8001b78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200005c8 	.word	0x200005c8

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	@ (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	@ (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f008 fea2 	bl	8009b90 <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20020000 	.word	0x20020000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	200001e4 	.word	0x200001e4
 8000e80:	20000af0 	.word	0x20000af0

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eac:	f7ff ffea 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb0:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eb2:	490d      	ldr	r1, [pc, #52]	@ (8000ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f008 fe61 	bl	8009b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fb0b 	bl	80004f4 <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000eec:	08009cc0 	.word	0x08009cc0
  ldr r2, =_sbss
 8000ef0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ef4:	20000af0 	.word	0x20000af0

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	@ (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f94f 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fda8 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f967 	bl	8001232 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f92f 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	200001e8 	.word	0x200001e8

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200001e8 	.word	0x200001e8

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	@ (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	@ (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	@ (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	@ (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	@ 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	@ 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff29 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff3e 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff8e 	bl	800111c <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff31 	bl	800108c <__NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa2 	bl	8001184 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e16b      	b.n	8001540 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 815a 	bne.w	800153a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d005      	beq.n	800129e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129a:	2b02      	cmp	r3, #2
 800129c:	d130      	bne.n	8001300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 0201 	and.w	r2, r3, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b03      	cmp	r3, #3
 800130a:	d017      	beq.n	800133c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d123      	bne.n	8001390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0203 	and.w	r2, r3, #3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80b4 	beq.w	800153a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b60      	ldr	r3, [pc, #384]	@ (8001558 <HAL_GPIO_Init+0x30c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	4a5f      	ldr	r2, [pc, #380]	@ (8001558 <HAL_GPIO_Init+0x30c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001558 <HAL_GPIO_Init+0x30c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ee:	4a5b      	ldr	r2, [pc, #364]	@ (800155c <HAL_GPIO_Init+0x310>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	220f      	movs	r2, #15
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a52      	ldr	r2, [pc, #328]	@ (8001560 <HAL_GPIO_Init+0x314>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d02b      	beq.n	8001472 <HAL_GPIO_Init+0x226>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a51      	ldr	r2, [pc, #324]	@ (8001564 <HAL_GPIO_Init+0x318>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d025      	beq.n	800146e <HAL_GPIO_Init+0x222>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a50      	ldr	r2, [pc, #320]	@ (8001568 <HAL_GPIO_Init+0x31c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d01f      	beq.n	800146a <HAL_GPIO_Init+0x21e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4f      	ldr	r2, [pc, #316]	@ (800156c <HAL_GPIO_Init+0x320>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d019      	beq.n	8001466 <HAL_GPIO_Init+0x21a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4e      	ldr	r2, [pc, #312]	@ (8001570 <HAL_GPIO_Init+0x324>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0x216>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4d      	ldr	r2, [pc, #308]	@ (8001574 <HAL_GPIO_Init+0x328>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00d      	beq.n	800145e <HAL_GPIO_Init+0x212>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4c      	ldr	r2, [pc, #304]	@ (8001578 <HAL_GPIO_Init+0x32c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d007      	beq.n	800145a <HAL_GPIO_Init+0x20e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4b      	ldr	r2, [pc, #300]	@ (800157c <HAL_GPIO_Init+0x330>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_GPIO_Init+0x20a>
 8001452:	2307      	movs	r3, #7
 8001454:	e00e      	b.n	8001474 <HAL_GPIO_Init+0x228>
 8001456:	2308      	movs	r3, #8
 8001458:	e00c      	b.n	8001474 <HAL_GPIO_Init+0x228>
 800145a:	2306      	movs	r3, #6
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x228>
 800145e:	2305      	movs	r3, #5
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x228>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x228>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x228>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x228>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x228>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4935      	ldr	r1, [pc, #212]	@ (800155c <HAL_GPIO_Init+0x310>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b3b      	ldr	r3, [pc, #236]	@ (8001580 <HAL_GPIO_Init+0x334>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b6:	4a32      	ldr	r2, [pc, #200]	@ (8001580 <HAL_GPIO_Init+0x334>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014bc:	4b30      	ldr	r3, [pc, #192]	@ (8001580 <HAL_GPIO_Init+0x334>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e0:	4a27      	ldr	r2, [pc, #156]	@ (8001580 <HAL_GPIO_Init+0x334>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e6:	4b26      	ldr	r3, [pc, #152]	@ (8001580 <HAL_GPIO_Init+0x334>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150a:	4a1d      	ldr	r2, [pc, #116]	@ (8001580 <HAL_GPIO_Init+0x334>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <HAL_GPIO_Init+0x334>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001534:	4a12      	ldr	r2, [pc, #72]	@ (8001580 <HAL_GPIO_Init+0x334>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f ae90 	bls.w	8001268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3724      	adds	r7, #36	@ 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40021400 	.word	0x40021400
 8001578:	40021800 	.word	0x40021800
 800157c:	40021c00 	.word	0x40021c00
 8001580:	40013c00 	.word	0x40013c00

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a0:	e003      	b.n	80015aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	041a      	lsls	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af02      	add	r7, sp, #8
 80015bc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e059      	b.n	800167c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d106      	bne.n	80015e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f007 ff52 	bl	800948c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2203      	movs	r2, #3
 80015ec:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015f6:	d102      	bne.n	80015fe <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fd6b 	bl	80060de <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7c1a      	ldrb	r2, [r3, #16]
 8001610:	f88d 2000 	strb.w	r2, [sp]
 8001614:	3304      	adds	r3, #4
 8001616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001618:	f004 fcec 	bl	8005ff4 <USB_CoreInit>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2202      	movs	r2, #2
 8001626:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e026      	b.n	800167c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2101      	movs	r1, #1
 8001634:	4618      	mov	r0, r3
 8001636:	f004 fd63 	bl	8006100 <USB_SetCurrentMode>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e017      	b.n	800167c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7c1a      	ldrb	r2, [r3, #16]
 8001654:	f88d 2000 	strb.w	r2, [sp]
 8001658:	3304      	adds	r3, #4
 800165a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800165c:	f004 ff06 	bl	800646c <USB_HostInit>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2202      	movs	r2, #2
 800166a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e004      	b.n	800167c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b08b      	sub	sp, #44	@ 0x2c
 8001688:	af04      	add	r7, sp, #16
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4603      	mov	r3, r0
 8001694:	70fb      	strb	r3, [r7, #3]
 8001696:	460b      	mov	r3, r1
 8001698:	70bb      	strb	r3, [r7, #2]
 800169a:	4613      	mov	r3, r2
 800169c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800169e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80016a0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_HCD_HC_Init+0x2c>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e09d      	b.n	80017ec <HAL_HCD_HC_Init+0x168>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	3319      	adds	r3, #25
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	3314      	adds	r3, #20
 80016dc:	787a      	ldrb	r2, [r7, #1]
 80016de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	3315      	adds	r3, #21
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	3326      	adds	r3, #38	@ 0x26
 8001704:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001708:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	78bb      	ldrb	r3, [r7, #2]
 800170e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001712:	b2d8      	uxtb	r0, r3
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	3316      	adds	r3, #22
 8001722:	4602      	mov	r2, r0
 8001724:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	4619      	mov	r1, r3
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fbc8 	bl	8001ec0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001730:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001734:	2b00      	cmp	r3, #0
 8001736:	da0a      	bge.n	800174e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	1a9b      	subs	r3, r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	3317      	adds	r3, #23
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	e009      	b.n	8001762 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	1a9b      	subs	r3, r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	3317      	adds	r3, #23
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f004 ffe4 	bl	8006734 <USB_GetHostSpeed>
 800176c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800176e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10b      	bne.n	800178e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001776:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_HCD_HC_Init+0x10a>
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d104      	bne.n	800178e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2bbc      	cmp	r3, #188	@ 0xbc
 8001788:	d901      	bls.n	800178e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800178a:	23bc      	movs	r3, #188	@ 0xbc
 800178c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	3318      	adds	r3, #24
 800179e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80017a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	b298      	uxth	r0, r3
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	3328      	adds	r3, #40	@ 0x28
 80017b8:	4602      	mov	r2, r0
 80017ba:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	787c      	ldrb	r4, [r7, #1]
 80017c6:	78ba      	ldrb	r2, [r7, #2]
 80017c8:	78f9      	ldrb	r1, [r7, #3]
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	4623      	mov	r3, r4
 80017da:	f004 ffd3 	bl	8006784 <USB_HC_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd90      	pop	{r4, r7, pc}

080017f4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_HCD_HC_Halt+0x1e>
 800180e:	2302      	movs	r3, #2
 8001810:	e00f      	b.n	8001832 <HAL_HCD_HC_Halt+0x3e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f005 fb65 	bl	8006ef2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4603      	mov	r3, r0
 800184c:	70fb      	strb	r3, [r7, #3]
 800184e:	460b      	mov	r3, r1
 8001850:	70bb      	strb	r3, [r7, #2]
 8001852:	4613      	mov	r3, r2
 8001854:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	3317      	adds	r3, #23
 8001866:	78ba      	ldrb	r2, [r7, #2]
 8001868:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	3326      	adds	r3, #38	@ 0x26
 800187a:	787a      	ldrb	r2, [r7, #1]
 800187c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800187e:	7c3b      	ldrb	r3, [r7, #16]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d114      	bne.n	80018ae <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	332a      	adds	r3, #42	@ 0x2a
 8001894:	2203      	movs	r2, #3
 8001896:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	3319      	adds	r3, #25
 80018a8:	7f3a      	ldrb	r2, [r7, #28]
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	e009      	b.n	80018c2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	332a      	adds	r3, #42	@ 0x2a
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018c2:	787b      	ldrb	r3, [r7, #1]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	f200 8102 	bhi.w	8001ace <HAL_HCD_HC_SubmitRequest+0x292>
 80018ca:	a201      	add	r2, pc, #4	@ (adr r2, 80018d0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80018cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d0:	080018e1 	.word	0x080018e1
 80018d4:	08001ab9 	.word	0x08001ab9
 80018d8:	080019a5 	.word	0x080019a5
 80018dc:	08001a2f 	.word	0x08001a2f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80018e0:	7c3b      	ldrb	r3, [r7, #16]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	f040 80f5 	bne.w	8001ad2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80018e8:	78bb      	ldrb	r3, [r7, #2]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d12d      	bne.n	800194a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80018ee:	8b3b      	ldrh	r3, [r7, #24]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d109      	bne.n	8001908 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	333d      	adds	r3, #61	@ 0x3d
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	333d      	adds	r3, #61	@ 0x3d
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10a      	bne.n	8001934 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	332a      	adds	r3, #42	@ 0x2a
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001932:	e0ce      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	332a      	adds	r3, #42	@ 0x2a
 8001944:	2202      	movs	r2, #2
 8001946:	701a      	strb	r2, [r3, #0]
      break;
 8001948:	e0c3      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	331a      	adds	r3, #26
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	f040 80b8 	bne.w	8001ad2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	333c      	adds	r3, #60	@ 0x3c
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10a      	bne.n	800198e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	332a      	adds	r3, #42	@ 0x2a
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
      break;
 800198c:	e0a1      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	332a      	adds	r3, #42	@ 0x2a
 800199e:	2202      	movs	r2, #2
 80019a0:	701a      	strb	r2, [r3, #0]
      break;
 80019a2:	e096      	b.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019a4:	78bb      	ldrb	r3, [r7, #2]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d120      	bne.n	80019ec <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	333d      	adds	r3, #61	@ 0x3d
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10a      	bne.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	332a      	adds	r3, #42	@ 0x2a
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019d4:	e07e      	b.n	8001ad4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	1a9b      	subs	r3, r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	332a      	adds	r3, #42	@ 0x2a
 80019e6:	2202      	movs	r2, #2
 80019e8:	701a      	strb	r2, [r3, #0]
      break;
 80019ea:	e073      	b.n	8001ad4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	333c      	adds	r3, #60	@ 0x3c
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10a      	bne.n	8001a18 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	332a      	adds	r3, #42	@ 0x2a
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
      break;
 8001a16:	e05d      	b.n	8001ad4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	332a      	adds	r3, #42	@ 0x2a
 8001a28:	2202      	movs	r2, #2
 8001a2a:	701a      	strb	r2, [r3, #0]
      break;
 8001a2c:	e052      	b.n	8001ad4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a2e:	78bb      	ldrb	r3, [r7, #2]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d120      	bne.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	333d      	adds	r3, #61	@ 0x3d
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10a      	bne.n	8001a60 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a4a:	78fa      	ldrb	r2, [r7, #3]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	332a      	adds	r3, #42	@ 0x2a
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a5e:	e039      	b.n	8001ad4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	332a      	adds	r3, #42	@ 0x2a
 8001a70:	2202      	movs	r2, #2
 8001a72:	701a      	strb	r2, [r3, #0]
      break;
 8001a74:	e02e      	b.n	8001ad4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	333c      	adds	r3, #60	@ 0x3c
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10a      	bne.n	8001aa2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	332a      	adds	r3, #42	@ 0x2a
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
      break;
 8001aa0:	e018      	b.n	8001ad4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	332a      	adds	r3, #42	@ 0x2a
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	701a      	strb	r2, [r3, #0]
      break;
 8001ab6:	e00d      	b.n	8001ad4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	332a      	adds	r3, #42	@ 0x2a
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
      break;
 8001acc:	e002      	b.n	8001ad4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001ace:	bf00      	nop
 8001ad0:	e000      	b.n	8001ad4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001ad2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	332c      	adds	r3, #44	@ 0x2c
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ae8:	78fa      	ldrb	r2, [r7, #3]
 8001aea:	8b39      	ldrh	r1, [r7, #24]
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4403      	add	r3, r0
 8001af8:	3334      	adds	r3, #52	@ 0x34
 8001afa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	334c      	adds	r3, #76	@ 0x4c
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3338      	adds	r3, #56	@ 0x38
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b24:	78fa      	ldrb	r2, [r7, #3]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	3315      	adds	r3, #21
 8001b34:	78fa      	ldrb	r2, [r7, #3]
 8001b36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	334d      	adds	r3, #77	@ 0x4d
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	4613      	mov	r3, r2
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	3310      	adds	r3, #16
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	1d19      	adds	r1, r3, #4
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	799b      	ldrb	r3, [r3, #6]
 8001b66:	461a      	mov	r2, r3
 8001b68:	f004 ff38 	bl	80069dc <USB_HC_StartXfer>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop

08001b78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 fc2c 	bl	80063ec <USB_GetMode>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	f040 80fb 	bne.w	8001d92 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 fbef 	bl	8006384 <USB_ReadInterrupts>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80f1 	beq.w	8001d90 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 fbe6 	bl	8006384 <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001bc2:	d104      	bne.n	8001bce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001bcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 fbd6 	bl	8006384 <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001be2:	d104      	bne.n	8001bee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001bec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 fbc6 	bl	8006384 <USB_ReadInterrupts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c02:	d104      	bne.n	8001c0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 fbb6 	bl	8006384 <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d103      	bne.n	8001c2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2202      	movs	r2, #2
 8001c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f004 fba8 	bl	8006384 <USB_ReadInterrupts>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c3e:	d120      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d113      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	6938      	ldr	r0, [r7, #16]
 8001c5e:	f004 fa9b 	bl	8006198 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c62:	6938      	ldr	r0, [r7, #16]
 8001c64:	f004 faca 	bl	80061fc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7a5b      	ldrb	r3, [r3, #9]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d105      	bne.n	8001c7c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2101      	movs	r1, #1
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 fcbc 	bl	80065f4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f007 fc83 	bl	8009588 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 fb7c 	bl	8006384 <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c96:	d102      	bne.n	8001c9e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f001 fd4d 	bl	8003738 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fb6e 	bl	8006384 <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d106      	bne.n	8001cc0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f007 fc4c 	bl	8009550 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 fb5d 	bl	8006384 <USB_ReadInterrupts>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cd4:	d139      	bne.n	8001d4a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f005 f8f8 	bl	8006ed0 <USB_HC_ReadInterrupt>
 8001ce0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e025      	b.n	8001d34 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d018      	beq.n	8001d2e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d12:	d106      	bne.n	8001d22 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f905 	bl	8001f2a <HCD_HC_IN_IRQHandler>
 8001d20:	e005      	b.n	8001d2e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 ff67 	bl	8002bfc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	795b      	ldrb	r3, [r3, #5]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d3d3      	bcc.n	8001ce8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 fb18 	bl	8006384 <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d101      	bne.n	8001d62 <HAL_HCD_IRQHandler+0x1ea>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_HCD_IRQHandler+0x1ec>
 8001d62:	2300      	movs	r3, #0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d014      	beq.n	8001d92 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0210 	bic.w	r2, r2, #16
 8001d76:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f001 fbfe 	bl	800357a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0210 	orr.w	r2, r2, #16
 8001d8c:	619a      	str	r2, [r3, #24]
 8001d8e:	e000      	b.n	8001d92 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d90:	bf00      	nop
    }
  }
}
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_HCD_Start+0x16>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e013      	b.n	8001dd6 <HAL_HCD_Start+0x3e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f004 fc80 	bl	80066c2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 f978 	bl	80060bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_HCD_Stop+0x16>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e00d      	b.n	8001e10 <HAL_HCD_Stop+0x32>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f005 f9d3 	bl	80071ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 fc22 	bl	800666e <USB_ResetPort>
 8001e2a:	4603      	mov	r3, r0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	334c      	adds	r3, #76	@ 0x4c
 8001e50:	781b      	ldrb	r3, [r3, #0]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	3338      	adds	r3, #56	@ 0x38
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 fc64 	bl	8006762 <USB_GetCurrentFrame>
 8001e9a:	4603      	mov	r3, r0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 fc3f 	bl	8006734 <USB_GetHostSpeed>
 8001eb6:	4603      	mov	r3, r0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	331a      	adds	r3, #26
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	331b      	adds	r3, #27
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	3325      	adds	r3, #37	@ 0x25
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	3324      	adds	r3, #36	@ 0x24
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	460b      	mov	r3, r1
 8001f34:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f004 fa2e 	bl	80063aa <USB_ReadChInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d11a      	bne.n	8001f8e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f64:	461a      	mov	r2, r3
 8001f66:	2304      	movs	r3, #4
 8001f68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	334d      	adds	r3, #77	@ 0x4d
 8001f7a:	2207      	movs	r2, #7
 8001f7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f004 ffb3 	bl	8006ef2 <USB_HC_Halt>
 8001f8c:	e09e      	b.n	80020cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 fa07 	bl	80063aa <USB_ReadChInterrupts>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fa6:	d11b      	bne.n	8001fe0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	334d      	adds	r3, #77	@ 0x4d
 8001fcc:	2208      	movs	r2, #8
 8001fce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f004 ff8a 	bl	8006ef2 <USB_HC_Halt>
 8001fde:	e075      	b.n	80020cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f004 f9de 	bl	80063aa <USB_ReadChInterrupts>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d11a      	bne.n	800202e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002004:	461a      	mov	r2, r3
 8002006:	2308      	movs	r3, #8
 8002008:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	334d      	adds	r3, #77	@ 0x4d
 800201a:	2206      	movs	r2, #6
 800201c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f004 ff63 	bl	8006ef2 <USB_HC_Halt>
 800202c:	e04e      	b.n	80020cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f004 f9b7 	bl	80063aa <USB_ReadChInterrupts>
 800203c:	4603      	mov	r3, r0
 800203e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002046:	d11b      	bne.n	8002080 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002054:	461a      	mov	r2, r3
 8002056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800205a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	334d      	adds	r3, #77	@ 0x4d
 800206c:	2209      	movs	r2, #9
 800206e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f004 ff3a 	bl	8006ef2 <USB_HC_Halt>
 800207e:	e025      	b.n	80020cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f004 f98e 	bl	80063aa <USB_ReadChInterrupts>
 800208e:	4603      	mov	r3, r0
 8002090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002094:	2b80      	cmp	r3, #128	@ 0x80
 8002096:	d119      	bne.n	80020cc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a4:	461a      	mov	r2, r3
 80020a6:	2380      	movs	r3, #128	@ 0x80
 80020a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	334d      	adds	r3, #77	@ 0x4d
 80020ba:	2207      	movs	r2, #7
 80020bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 ff13 	bl	8006ef2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f004 f968 	bl	80063aa <USB_ReadChInterrupts>
 80020da:	4603      	mov	r3, r0
 80020dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020e4:	d112      	bne.n	800210c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f004 feff 	bl	8006ef2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002100:	461a      	mov	r2, r3
 8002102:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002106:	6093      	str	r3, [r2, #8]
 8002108:	f000 bd75 	b.w	8002bf6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f004 f948 	bl	80063aa <USB_ReadChInterrupts>
 800211a:	4603      	mov	r3, r0
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	f040 8128 	bne.w	8002376 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002132:	461a      	mov	r2, r3
 8002134:	2320      	movs	r3, #32
 8002136:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	331b      	adds	r3, #27
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d119      	bne.n	8002182 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	331b      	adds	r3, #27
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	0151      	lsls	r1, r2, #5
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	440a      	add	r2, r1
 8002178:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800217c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002180:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	799b      	ldrb	r3, [r3, #6]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d01b      	beq.n	80021c2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	3330      	adds	r3, #48	@ 0x30
 800219a:	6819      	ldr	r1, [r3, #0]
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	1ac9      	subs	r1, r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4403      	add	r3, r0
 80021be:	3338      	adds	r3, #56	@ 0x38
 80021c0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	334d      	adds	r3, #77	@ 0x4d
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	3344      	adds	r3, #68	@ 0x44
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021f6:	461a      	mov	r2, r3
 80021f8:	2301      	movs	r3, #1
 80021fa:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3326      	adds	r3, #38	@ 0x26
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	3326      	adds	r3, #38	@ 0x26
 8002222:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002224:	2b02      	cmp	r3, #2
 8002226:	d110      	bne.n	800224a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f004 fe5e 	bl	8006ef2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002242:	461a      	mov	r2, r3
 8002244:	2310      	movs	r3, #16
 8002246:	6093      	str	r3, [r2, #8]
 8002248:	e03d      	b.n	80022c6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	3326      	adds	r3, #38	@ 0x26
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d00a      	beq.n	8002276 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	3326      	adds	r3, #38	@ 0x26
 8002270:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002272:	2b01      	cmp	r3, #1
 8002274:	d127      	bne.n	80022c6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	0151      	lsls	r1, r2, #5
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	440a      	add	r2, r1
 800228c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002290:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002294:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	334c      	adds	r3, #76	@ 0x4c
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	334c      	adds	r3, #76	@ 0x4c
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	4619      	mov	r1, r3
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f007 f96f 	bl	80095a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	799b      	ldrb	r3, [r3, #6]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d13b      	bne.n	8002346 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	3338      	adds	r3, #56	@ 0x38
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4403      	add	r3, r0
 80022ee:	3328      	adds	r3, #40	@ 0x28
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	440b      	add	r3, r1
 80022f4:	1e59      	subs	r1, r3, #1
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4403      	add	r3, r0
 8002304:	3328      	adds	r3, #40	@ 0x28
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	fbb1 f3f3 	udiv	r3, r1, r3
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 8470 	beq.w	8002bf6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	333c      	adds	r3, #60	@ 0x3c
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	f083 0301 	eor.w	r3, r3, #1
 800232e:	b2d8      	uxtb	r0, r3
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	333c      	adds	r3, #60	@ 0x3c
 800233e:	4602      	mov	r2, r0
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	f000 bc58 	b.w	8002bf6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	333c      	adds	r3, #60	@ 0x3c
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	f083 0301 	eor.w	r3, r3, #1
 800235e:	b2d8      	uxtb	r0, r3
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	333c      	adds	r3, #60	@ 0x3c
 800236e:	4602      	mov	r2, r0
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	f000 bc40 	b.w	8002bf6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f004 f813 	bl	80063aa <USB_ReadChInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b20      	cmp	r3, #32
 800238c:	d131      	bne.n	80023f2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4413      	add	r3, r2
 8002396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800239a:	461a      	mov	r2, r3
 800239c:	2320      	movs	r3, #32
 800239e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	331a      	adds	r3, #26
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	f040 841f 	bne.w	8002bf6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	331b      	adds	r3, #27
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	334d      	adds	r3, #77	@ 0x4d
 80023dc:	2203      	movs	r2, #3
 80023de:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f004 fd82 	bl	8006ef2 <USB_HC_Halt>
 80023ee:	f000 bc02 	b.w	8002bf6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 ffd5 	bl	80063aa <USB_ReadChInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b02      	cmp	r3, #2
 8002408:	f040 8305 	bne.w	8002a16 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002418:	461a      	mov	r2, r3
 800241a:	2302      	movs	r3, #2
 800241c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	334d      	adds	r3, #77	@ 0x4d
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d114      	bne.n	800245e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	334d      	adds	r3, #77	@ 0x4d
 8002444:	2202      	movs	r2, #2
 8002446:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	334c      	adds	r3, #76	@ 0x4c
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e2cc      	b.n	80029f8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	334d      	adds	r3, #77	@ 0x4d
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b06      	cmp	r3, #6
 8002472:	d114      	bne.n	800249e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	334d      	adds	r3, #77	@ 0x4d
 8002484:	2202      	movs	r2, #2
 8002486:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	334c      	adds	r3, #76	@ 0x4c
 8002498:	2205      	movs	r2, #5
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	e2ac      	b.n	80029f8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	334d      	adds	r3, #77	@ 0x4d
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b07      	cmp	r3, #7
 80024b2:	d00b      	beq.n	80024cc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	334d      	adds	r3, #77	@ 0x4d
 80024c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024c6:	2b09      	cmp	r3, #9
 80024c8:	f040 80a6 	bne.w	8002618 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	334d      	adds	r3, #77	@ 0x4d
 80024dc:	2202      	movs	r2, #2
 80024de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	3344      	adds	r3, #68	@ 0x44
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	1c59      	adds	r1, r3, #1
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4403      	add	r3, r0
 8002500:	3344      	adds	r3, #68	@ 0x44
 8002502:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	3344      	adds	r3, #68	@ 0x44
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d943      	bls.n	80025a2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	3344      	adds	r3, #68	@ 0x44
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	331a      	adds	r3, #26
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d123      	bne.n	800258c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	331b      	adds	r3, #27
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	331c      	adds	r3, #28
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	0151      	lsls	r1, r2, #5
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	440a      	add	r2, r1
 8002582:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	334c      	adds	r3, #76	@ 0x4c
 800259c:	2204      	movs	r2, #4
 800259e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025a0:	e229      	b.n	80029f6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	334c      	adds	r3, #76	@ 0x4c
 80025b2:	2202      	movs	r2, #2
 80025b4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3326      	adds	r3, #38	@ 0x26
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00b      	beq.n	80025e4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	3326      	adds	r3, #38	@ 0x26
 80025dc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025de:	2b02      	cmp	r3, #2
 80025e0:	f040 8209 	bne.w	80029f6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025fa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002602:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002610:	461a      	mov	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002616:	e1ee      	b.n	80029f6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	334d      	adds	r3, #77	@ 0x4d
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b05      	cmp	r3, #5
 800262c:	f040 80c8 	bne.w	80027c0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	334d      	adds	r3, #77	@ 0x4d
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	331b      	adds	r3, #27
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	f040 81ce 	bne.w	80029f8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	3326      	adds	r3, #38	@ 0x26
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d16b      	bne.n	800274a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	3348      	adds	r3, #72	@ 0x48
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	1c59      	adds	r1, r3, #1
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4403      	add	r3, r0
 8002692:	3348      	adds	r3, #72	@ 0x48
 8002694:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	3348      	adds	r3, #72	@ 0x48
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d943      	bls.n	8002734 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3348      	adds	r3, #72	@ 0x48
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	331b      	adds	r3, #27
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	3344      	adds	r3, #68	@ 0x44
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d809      	bhi.n	80026fe <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	331c      	adds	r3, #28
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	0151      	lsls	r1, r2, #5
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	440a      	add	r2, r1
 8002714:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800271c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	334c      	adds	r3, #76	@ 0x4c
 800272e:	2204      	movs	r2, #4
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	e014      	b.n	800275e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	334c      	adds	r3, #76	@ 0x4c
 8002744:	2202      	movs	r2, #2
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e009      	b.n	800275e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	334c      	adds	r3, #76	@ 0x4c
 800275a:	2202      	movs	r2, #2
 800275c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	3326      	adds	r3, #38	@ 0x26
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00b      	beq.n	800278c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3326      	adds	r3, #38	@ 0x26
 8002784:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002786:	2b02      	cmp	r3, #2
 8002788:	f040 8136 	bne.w	80029f8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027a2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027aa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b8:	461a      	mov	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e11b      	b.n	80029f8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	334d      	adds	r3, #77	@ 0x4d
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	f040 8081 	bne.w	80028da <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	334d      	adds	r3, #77	@ 0x4d
 80027e8:	2202      	movs	r2, #2
 80027ea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	331b      	adds	r3, #27
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	f040 80fa 	bne.w	80029f8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	334c      	adds	r3, #76	@ 0x4c
 8002814:	2202      	movs	r2, #2
 8002816:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	0151      	lsls	r1, r2, #5
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	440a      	add	r2, r1
 800282e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002836:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	0151      	lsls	r1, r2, #5
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	440a      	add	r2, r1
 800284e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002856:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	0151      	lsls	r1, r2, #5
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	440a      	add	r2, r1
 800286e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002872:	f023 0320 	bic.w	r3, r3, #32
 8002876:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	3326      	adds	r3, #38	@ 0x26
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	3326      	adds	r3, #38	@ 0x26
 800289e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	f040 80a9 	bne.w	80029f8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028bc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028c4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	e08e      	b.n	80029f8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	334d      	adds	r3, #77	@ 0x4d
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d143      	bne.n	8002978 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	334d      	adds	r3, #77	@ 0x4d
 8002900:	2202      	movs	r2, #2
 8002902:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	334c      	adds	r3, #76	@ 0x4c
 8002914:	2202      	movs	r2, #2
 8002916:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3326      	adds	r3, #38	@ 0x26
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	3326      	adds	r3, #38	@ 0x26
 800293e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002940:	2b02      	cmp	r3, #2
 8002942:	d159      	bne.n	80029f8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800295a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002962:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002970:	461a      	mov	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e03f      	b.n	80029f8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334d      	adds	r3, #77	@ 0x4d
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b08      	cmp	r3, #8
 800298c:	d126      	bne.n	80029dc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	334d      	adds	r3, #77	@ 0x4d
 800299e:	2202      	movs	r2, #2
 80029a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3344      	adds	r3, #68	@ 0x44
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	1c59      	adds	r1, r3, #1
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4403      	add	r3, r0
 80029c2:	3344      	adds	r3, #68	@ 0x44
 80029c4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	334c      	adds	r3, #76	@ 0x4c
 80029d6:	2204      	movs	r2, #4
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	e00d      	b.n	80029f8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	334d      	adds	r3, #77	@ 0x4d
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	f000 8100 	beq.w	8002bf4 <HCD_HC_IN_IRQHandler+0xcca>
 80029f4:	e000      	b.n	80029f8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029f6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	334c      	adds	r3, #76	@ 0x4c
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f006 fdc8 	bl	80095a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a14:	e0ef      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 fcc3 	bl	80063aa <USB_ReadChInterrupts>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2a:	2b40      	cmp	r3, #64	@ 0x40
 8002a2c:	d12f      	bne.n	8002a8e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2340      	movs	r3, #64	@ 0x40
 8002a3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	334d      	adds	r3, #77	@ 0x4d
 8002a50:	2205      	movs	r2, #5
 8002a52:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	331a      	adds	r3, #26
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3344      	adds	r3, #68	@ 0x44
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 fa33 	bl	8006ef2 <USB_HC_Halt>
 8002a8c:	e0b3      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 fc87 	bl	80063aa <USB_ReadChInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	f040 80a7 	bne.w	8002bf6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3326      	adds	r3, #38	@ 0x26
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d11b      	bne.n	8002af6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	3344      	adds	r3, #68	@ 0x44
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	334d      	adds	r3, #77	@ 0x4d
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 f9ff 	bl	8006ef2 <USB_HC_Halt>
 8002af4:	e03f      	b.n	8002b76 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3326      	adds	r3, #38	@ 0x26
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3326      	adds	r3, #38	@ 0x26
 8002b1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d129      	bne.n	8002b76 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3344      	adds	r3, #68	@ 0x44
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	799b      	ldrb	r3, [r3, #6]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HCD_HC_IN_IRQHandler+0xc2a>
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	331b      	adds	r3, #27
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d110      	bne.n	8002b76 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	334d      	adds	r3, #77	@ 0x4d
 8002b64:	2204      	movs	r2, #4
 8002b66:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 f9be 	bl	8006ef2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	331b      	adds	r3, #27
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d129      	bne.n	8002be0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	331b      	adds	r3, #27
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	0151      	lsls	r1, r2, #5
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	440a      	add	r2, r1
 8002bb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bbe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	0151      	lsls	r1, r2, #5
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	440a      	add	r2, r1
 8002bd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bda:	f043 0320 	orr.w	r3, r3, #32
 8002bde:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bec:	461a      	mov	r2, r3
 8002bee:	2310      	movs	r3, #16
 8002bf0:	6093      	str	r3, [r2, #8]
 8002bf2:	e000      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002bf4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 fbc5 	bl	80063aa <USB_ReadChInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d11b      	bne.n	8002c62 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c36:	461a      	mov	r2, r3
 8002c38:	2304      	movs	r3, #4
 8002c3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	334d      	adds	r3, #77	@ 0x4d
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 f94a 	bl	8006ef2 <USB_HC_Halt>
 8002c5e:	f000 bc89 	b.w	8003574 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 fb9d 	bl	80063aa <USB_ReadChInterrupts>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	f040 8082 	bne.w	8002d80 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3319      	adds	r3, #25
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d124      	bne.n	8002cee <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3319      	adds	r3, #25
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	334c      	adds	r3, #76	@ 0x4c
 8002cc8:	2202      	movs	r2, #2
 8002cca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	334d      	adds	r3, #77	@ 0x4d
 8002cdc:	2203      	movs	r2, #3
 8002cde:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f004 f902 	bl	8006ef2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	331a      	adds	r3, #26
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	f040 8437 	bne.w	8003574 <HCD_HC_OUT_IRQHandler+0x978>
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	331b      	adds	r3, #27
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 842b 	bne.w	8003574 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3326      	adds	r3, #38	@ 0x26
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d009      	beq.n	8002d48 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	331b      	adds	r3, #27
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	334d      	adds	r3, #77	@ 0x4d
 8002d58:	2203      	movs	r2, #3
 8002d5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f004 f8c4 	bl	8006ef2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	3344      	adds	r3, #68	@ 0x44
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e3f9      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fb0e 	bl	80063aa <USB_ReadChInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d98:	d111      	bne.n	8002dbe <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da6:	461a      	mov	r2, r3
 8002da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 f89b 	bl	8006ef2 <USB_HC_Halt>
 8002dbc:	e3da      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 faef 	bl	80063aa <USB_ReadChInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d168      	bne.n	8002ea8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	3344      	adds	r3, #68	@ 0x44
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fad9 	bl	80063aa <USB_ReadChInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfe:	2b40      	cmp	r3, #64	@ 0x40
 8002e00:	d112      	bne.n	8002e28 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3319      	adds	r3, #25
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e22:	461a      	mov	r2, r3
 8002e24:	2340      	movs	r3, #64	@ 0x40
 8002e26:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	331b      	adds	r3, #27
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d019      	beq.n	8002e72 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	331b      	adds	r3, #27
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	0151      	lsls	r1, r2, #5
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	440a      	add	r2, r1
 8002e68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e70:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2301      	movs	r3, #1
 8002e82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	334d      	adds	r3, #77	@ 0x4d
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 f826 	bl	8006ef2 <USB_HC_Halt>
 8002ea6:	e365      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 fa7a 	bl	80063aa <USB_ReadChInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebc:	2b40      	cmp	r3, #64	@ 0x40
 8002ebe:	d139      	bne.n	8002f34 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	334d      	adds	r3, #77	@ 0x4d
 8002ed0:	2205      	movs	r2, #5
 8002ed2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	331a      	adds	r3, #26
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3319      	adds	r3, #25
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3344      	adds	r3, #68	@ 0x44
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 ffe9 	bl	8006ef2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2340      	movs	r3, #64	@ 0x40
 8002f30:	6093      	str	r3, [r2, #8]
 8002f32:	e31f      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fa34 	bl	80063aa <USB_ReadChInterrupts>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d11a      	bne.n	8002f82 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	334d      	adds	r3, #77	@ 0x4d
 8002f6e:	2206      	movs	r2, #6
 8002f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f003 ffb9 	bl	8006ef2 <USB_HC_Halt>
 8002f80:	e2f8      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f003 fa0d 	bl	80063aa <USB_ReadChInterrupts>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b10      	cmp	r3, #16
 8002f98:	d144      	bne.n	8003024 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3344      	adds	r3, #68	@ 0x44
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	334d      	adds	r3, #77	@ 0x4d
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3319      	adds	r3, #25
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d114      	bne.n	8003002 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3318      	adds	r3, #24
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3319      	adds	r3, #25
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f003 ff71 	bl	8006ef2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4413      	add	r3, r2
 8003018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800301c:	461a      	mov	r2, r3
 800301e:	2310      	movs	r3, #16
 8003020:	6093      	str	r3, [r2, #8]
 8003022:	e2a7      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f003 f9bc 	bl	80063aa <USB_ReadChInterrupts>
 8003032:	4603      	mov	r3, r0
 8003034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003038:	2b80      	cmp	r3, #128	@ 0x80
 800303a:	f040 8083 	bne.w	8003144 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	799b      	ldrb	r3, [r3, #6]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d111      	bne.n	800306a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	334d      	adds	r3, #77	@ 0x4d
 8003056:	2207      	movs	r2, #7
 8003058:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f003 ff45 	bl	8006ef2 <USB_HC_Halt>
 8003068:	e062      	b.n	8003130 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	3344      	adds	r3, #68	@ 0x44
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	1c59      	adds	r1, r3, #1
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4403      	add	r3, r0
 800308a:	3344      	adds	r3, #68	@ 0x44
 800308c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3344      	adds	r3, #68	@ 0x44
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d922      	bls.n	80030ea <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	3344      	adds	r3, #68	@ 0x44
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	334c      	adds	r3, #76	@ 0x4c
 80030c8:	2204      	movs	r2, #4
 80030ca:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	334c      	adds	r3, #76	@ 0x4c
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	4619      	mov	r1, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f006 fa5e 	bl	80095a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030e8:	e022      	b.n	8003130 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	334c      	adds	r3, #76	@ 0x4c
 80030fa:	2202      	movs	r2, #2
 80030fc:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003114:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800311c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800313c:	461a      	mov	r2, r3
 800313e:	2380      	movs	r3, #128	@ 0x80
 8003140:	6093      	str	r3, [r2, #8]
 8003142:	e217      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f003 f92c 	bl	80063aa <USB_ReadChInterrupts>
 8003152:	4603      	mov	r3, r0
 8003154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800315c:	d11b      	bne.n	8003196 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	334d      	adds	r3, #77	@ 0x4d
 800316e:	2209      	movs	r2, #9
 8003170:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f003 feb9 	bl	8006ef2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318c:	461a      	mov	r2, r3
 800318e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003192:	6093      	str	r3, [r2, #8]
 8003194:	e1ee      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f003 f903 	bl	80063aa <USB_ReadChInterrupts>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	f040 81df 	bne.w	800356e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031bc:	461a      	mov	r2, r3
 80031be:	2302      	movs	r3, #2
 80031c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	334d      	adds	r3, #77	@ 0x4d
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f040 8093 	bne.w	8003300 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	334d      	adds	r3, #77	@ 0x4d
 80031ea:	2202      	movs	r2, #2
 80031ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	334c      	adds	r3, #76	@ 0x4c
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	3326      	adds	r3, #38	@ 0x26
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d00b      	beq.n	8003230 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	3326      	adds	r3, #38	@ 0x26
 8003228:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800322a:	2b03      	cmp	r3, #3
 800322c:	f040 8190 	bne.w	8003550 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	799b      	ldrb	r3, [r3, #6]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d115      	bne.n	8003264 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	333d      	adds	r3, #61	@ 0x3d
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	f083 0301 	eor.w	r3, r3, #1
 8003250:	b2d8      	uxtb	r0, r3
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	333d      	adds	r3, #61	@ 0x3d
 8003260:	4602      	mov	r2, r0
 8003262:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	799b      	ldrb	r3, [r3, #6]
 8003268:	2b01      	cmp	r3, #1
 800326a:	f040 8171 	bne.w	8003550 <HCD_HC_OUT_IRQHandler+0x954>
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	3334      	adds	r3, #52	@ 0x34
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8165 	beq.w	8003550 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	3334      	adds	r3, #52	@ 0x34
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4403      	add	r3, r0
 80032a6:	3328      	adds	r3, #40	@ 0x28
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	440b      	add	r3, r1
 80032ac:	1e59      	subs	r1, r3, #1
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4403      	add	r3, r0
 80032bc:	3328      	adds	r3, #40	@ 0x28
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 813f 	beq.w	8003550 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	333d      	adds	r3, #61	@ 0x3d
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	f083 0301 	eor.w	r3, r3, #1
 80032ea:	b2d8      	uxtb	r0, r3
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	333d      	adds	r3, #61	@ 0x3d
 80032fa:	4602      	mov	r2, r0
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e127      	b.n	8003550 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	334d      	adds	r3, #77	@ 0x4d
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d120      	bne.n	8003358 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	334d      	adds	r3, #77	@ 0x4d
 8003326:	2202      	movs	r2, #2
 8003328:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	331b      	adds	r3, #27
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	f040 8107 	bne.w	8003550 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	334c      	adds	r3, #76	@ 0x4c
 8003352:	2202      	movs	r2, #2
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e0fb      	b.n	8003550 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	334d      	adds	r3, #77	@ 0x4d
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b04      	cmp	r3, #4
 800336c:	d13a      	bne.n	80033e4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	334d      	adds	r3, #77	@ 0x4d
 800337e:	2202      	movs	r2, #2
 8003380:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	334c      	adds	r3, #76	@ 0x4c
 8003392:	2202      	movs	r2, #2
 8003394:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	331b      	adds	r3, #27
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	f040 80d1 	bne.w	8003550 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	331b      	adds	r3, #27
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	0151      	lsls	r1, r2, #5
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	440a      	add	r2, r1
 80033d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e0:	6053      	str	r3, [r2, #4]
 80033e2:	e0b5      	b.n	8003550 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334d      	adds	r3, #77	@ 0x4d
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	d114      	bne.n	8003424 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	334d      	adds	r3, #77	@ 0x4d
 800340a:	2202      	movs	r2, #2
 800340c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	334c      	adds	r3, #76	@ 0x4c
 800341e:	2202      	movs	r2, #2
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e095      	b.n	8003550 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	334d      	adds	r3, #77	@ 0x4d
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b06      	cmp	r3, #6
 8003438:	d114      	bne.n	8003464 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	334d      	adds	r3, #77	@ 0x4d
 800344a:	2202      	movs	r2, #2
 800344c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	334c      	adds	r3, #76	@ 0x4c
 800345e:	2205      	movs	r2, #5
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	e075      	b.n	8003550 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	334d      	adds	r3, #77	@ 0x4d
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b07      	cmp	r3, #7
 8003478:	d00a      	beq.n	8003490 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	334d      	adds	r3, #77	@ 0x4d
 800348a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800348c:	2b09      	cmp	r3, #9
 800348e:	d170      	bne.n	8003572 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	334d      	adds	r3, #77	@ 0x4d
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	3344      	adds	r3, #68	@ 0x44
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	1c59      	adds	r1, r3, #1
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4403      	add	r3, r0
 80034c4:	3344      	adds	r3, #68	@ 0x44
 80034c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	3344      	adds	r3, #68	@ 0x44
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d914      	bls.n	8003508 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3344      	adds	r3, #68	@ 0x44
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	334c      	adds	r3, #76	@ 0x4c
 8003502:	2204      	movs	r2, #4
 8003504:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003506:	e022      	b.n	800354e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	334c      	adds	r3, #76	@ 0x4c
 8003518:	2202      	movs	r2, #2
 800351a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003532:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800353a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003548:	461a      	mov	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800354e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	334c      	adds	r3, #76	@ 0x4c
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	4619      	mov	r1, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f006 f81c 	bl	80095a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800356c:	e002      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800356e:	bf00      	nop
 8003570:	e000      	b.n	8003574 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003572:	bf00      	nop
  }
}
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b08a      	sub	sp, #40	@ 0x28
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	0c5b      	lsrs	r3, r3, #17
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d004      	beq.n	80035c0 <HCD_RXQLVL_IRQHandler+0x46>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b05      	cmp	r3, #5
 80035ba:	f000 80b6 	beq.w	800372a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035be:	e0b7      	b.n	8003730 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80b3 	beq.w	800372e <HCD_RXQLVL_IRQHandler+0x1b4>
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4613      	mov	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	332c      	adds	r3, #44	@ 0x2c
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80a7 	beq.w	800372e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3338      	adds	r3, #56	@ 0x38
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	18d1      	adds	r1, r2, r3
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4403      	add	r3, r0
 8003604:	3334      	adds	r3, #52	@ 0x34
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4299      	cmp	r1, r3
 800360a:	f200 8083 	bhi.w	8003714 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	332c      	adds	r3, #44	@ 0x2c
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	b292      	uxth	r2, r2
 8003628:	4619      	mov	r1, r3
 800362a:	f002 fe53 	bl	80062d4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	332c      	adds	r3, #44	@ 0x2c
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	18d1      	adds	r1, r2, r3
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4403      	add	r3, r0
 8003652:	332c      	adds	r3, #44	@ 0x2c
 8003654:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	3338      	adds	r3, #56	@ 0x38
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	18d1      	adds	r1, r2, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4403      	add	r3, r0
 800367a:	3338      	adds	r3, #56	@ 0x38
 800367c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	4413      	add	r3, r2
 8003686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	0cdb      	lsrs	r3, r3, #19
 800368e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003692:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	3328      	adds	r3, #40	@ 0x28
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d13f      	bne.n	800372e <HCD_RXQLVL_IRQHandler+0x1b4>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d03c      	beq.n	800372e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036ca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036d2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e0:	461a      	mov	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4613      	mov	r3, r2
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	333c      	adds	r3, #60	@ 0x3c
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	f083 0301 	eor.w	r3, r3, #1
 80036fc:	b2d8      	uxtb	r0, r3
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4613      	mov	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	333c      	adds	r3, #60	@ 0x3c
 800370e:	4602      	mov	r2, r0
 8003710:	701a      	strb	r2, [r3, #0]
      break;
 8003712:	e00c      	b.n	800372e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	334c      	adds	r3, #76	@ 0x4c
 8003724:	2204      	movs	r2, #4
 8003726:	701a      	strb	r2, [r3, #0]
      break;
 8003728:	e001      	b.n	800372e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800372e:	bf00      	nop
  }
}
 8003730:	bf00      	nop
 8003732:	3728      	adds	r7, #40	@ 0x28
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003764:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b02      	cmp	r3, #2
 800376e:	d10b      	bne.n	8003788 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d102      	bne.n	8003780 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f005 fef6 	bl	800956c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f043 0302 	orr.w	r3, r3, #2
 8003786:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b08      	cmp	r3, #8
 8003790:	d132      	bne.n	80037f8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f043 0308 	orr.w	r3, r3, #8
 8003798:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d126      	bne.n	80037f2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	7a5b      	ldrb	r3, [r3, #9]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d113      	bne.n	80037d4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80037b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037b6:	d106      	bne.n	80037c6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2102      	movs	r1, #2
 80037be:	4618      	mov	r0, r3
 80037c0:	f002 ff18 	bl	80065f4 <USB_InitFSLSPClkSel>
 80037c4:	e011      	b.n	80037ea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2101      	movs	r1, #1
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 ff11 	bl	80065f4 <USB_InitFSLSPClkSel>
 80037d2:	e00a      	b.n	80037ea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	79db      	ldrb	r3, [r3, #7]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d106      	bne.n	80037ea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037e2:	461a      	mov	r2, r3
 80037e4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80037e8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f005 fee8 	bl	80095c0 <HAL_HCD_PortEnabled_Callback>
 80037f0:	e002      	b.n	80037f8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f005 fef2 	bl	80095dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d103      	bne.n	800380a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f043 0320 	orr.w	r3, r3, #32
 8003808:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003810:	461a      	mov	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6013      	str	r3, [r2, #0]
}
 8003816:	bf00      	nop
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e12b      	b.n	8003a8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd f944 	bl	8000ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2224      	movs	r2, #36	@ 0x24
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0201 	bic.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003872:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003882:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003884:	f001 fa20 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 8003888:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4a81      	ldr	r2, [pc, #516]	@ (8003a94 <HAL_I2C_Init+0x274>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d807      	bhi.n	80038a4 <HAL_I2C_Init+0x84>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4a80      	ldr	r2, [pc, #512]	@ (8003a98 <HAL_I2C_Init+0x278>)
 8003898:	4293      	cmp	r3, r2
 800389a:	bf94      	ite	ls
 800389c:	2301      	movls	r3, #1
 800389e:	2300      	movhi	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e006      	b.n	80038b2 <HAL_I2C_Init+0x92>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a7d      	ldr	r2, [pc, #500]	@ (8003a9c <HAL_I2C_Init+0x27c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	bf94      	ite	ls
 80038ac:	2301      	movls	r3, #1
 80038ae:	2300      	movhi	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0e7      	b.n	8003a8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a78      	ldr	r2, [pc, #480]	@ (8003aa0 <HAL_I2C_Init+0x280>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	0c9b      	lsrs	r3, r3, #18
 80038c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4a6a      	ldr	r2, [pc, #424]	@ (8003a94 <HAL_I2C_Init+0x274>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d802      	bhi.n	80038f4 <HAL_I2C_Init+0xd4>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3301      	adds	r3, #1
 80038f2:	e009      	b.n	8003908 <HAL_I2C_Init+0xe8>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	4a69      	ldr	r2, [pc, #420]	@ (8003aa4 <HAL_I2C_Init+0x284>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	3301      	adds	r3, #1
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	430b      	orrs	r3, r1
 800390e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800391a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	495c      	ldr	r1, [pc, #368]	@ (8003a94 <HAL_I2C_Init+0x274>)
 8003924:	428b      	cmp	r3, r1
 8003926:	d819      	bhi.n	800395c <HAL_I2C_Init+0x13c>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1e59      	subs	r1, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	fbb1 f3f3 	udiv	r3, r1, r3
 8003936:	1c59      	adds	r1, r3, #1
 8003938:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800393c:	400b      	ands	r3, r1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_I2C_Init+0x138>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1e59      	subs	r1, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003950:	3301      	adds	r3, #1
 8003952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003956:	e051      	b.n	80039fc <HAL_I2C_Init+0x1dc>
 8003958:	2304      	movs	r3, #4
 800395a:	e04f      	b.n	80039fc <HAL_I2C_Init+0x1dc>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d111      	bne.n	8003988 <HAL_I2C_Init+0x168>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e58      	subs	r0, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	440b      	add	r3, r1
 8003972:	fbb0 f3f3 	udiv	r3, r0, r3
 8003976:	3301      	adds	r3, #1
 8003978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e012      	b.n	80039ae <HAL_I2C_Init+0x18e>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e58      	subs	r0, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	0099      	lsls	r1, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	fbb0 f3f3 	udiv	r3, r0, r3
 800399e:	3301      	adds	r3, #1
 80039a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Init+0x196>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e022      	b.n	80039fc <HAL_I2C_Init+0x1dc>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10e      	bne.n	80039dc <HAL_I2C_Init+0x1bc>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1e58      	subs	r0, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6859      	ldr	r1, [r3, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	440b      	add	r3, r1
 80039cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d0:	3301      	adds	r3, #1
 80039d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039da:	e00f      	b.n	80039fc <HAL_I2C_Init+0x1dc>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	1e58      	subs	r0, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6859      	ldr	r1, [r3, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	0099      	lsls	r1, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f2:	3301      	adds	r3, #1
 80039f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	6809      	ldr	r1, [r1, #0]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69da      	ldr	r2, [r3, #28]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6911      	ldr	r1, [r2, #16]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68d2      	ldr	r2, [r2, #12]
 8003a36:	4311      	orrs	r1, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	000186a0 	.word	0x000186a0
 8003a98:	001e847f 	.word	0x001e847f
 8003a9c:	003d08ff 	.word	0x003d08ff
 8003aa0:	431bde83 	.word	0x431bde83
 8003aa4:	10624dd3 	.word	0x10624dd3

08003aa8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e128      	b.n	8003d0c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a90      	ldr	r2, [pc, #576]	@ (8003d14 <HAL_I2S_Init+0x26c>)
 8003ad2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fd f845 	bl	8000b64 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003af0:	f023 030f 	bic.w	r3, r3, #15
 8003af4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2202      	movs	r2, #2
 8003afc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d060      	beq.n	8003bc8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d102      	bne.n	8003b14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b0e:	2310      	movs	r3, #16
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e001      	b.n	8003b18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b14:	2320      	movs	r3, #32
 8003b16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d802      	bhi.n	8003b26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b26:	2001      	movs	r0, #1
 8003b28:	f001 f9c4 	bl	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b2c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b36:	d125      	bne.n	8003b84 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d010      	beq.n	8003b62 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	461a      	mov	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5c:	3305      	adds	r3, #5
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	e01f      	b.n	8003ba2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	461a      	mov	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	3305      	adds	r3, #5
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	e00e      	b.n	8003ba2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	461a      	mov	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	3305      	adds	r3, #5
 8003ba0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4a5c      	ldr	r2, [pc, #368]	@ (8003d18 <HAL_I2S_Init+0x270>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	08db      	lsrs	r3, r3, #3
 8003bac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	e003      	b.n	8003bd0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d902      	bls.n	8003bdc <HAL_I2S_Init+0x134>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2bff      	cmp	r3, #255	@ 0xff
 8003bda:	d907      	bls.n	8003bec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be0:	f043 0210 	orr.w	r2, r3, #16
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e08f      	b.n	8003d0c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	ea42 0103 	orr.w	r1, r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c0a:	f023 030f 	bic.w	r3, r3, #15
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6851      	ldr	r1, [r2, #4]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6892      	ldr	r2, [r2, #8]
 8003c16:	4311      	orrs	r1, r2
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68d2      	ldr	r2, [r2, #12]
 8003c1c:	4311      	orrs	r1, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6992      	ldr	r2, [r2, #24]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d161      	bne.n	8003cfc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a38      	ldr	r2, [pc, #224]	@ (8003d1c <HAL_I2S_Init+0x274>)
 8003c3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a37      	ldr	r2, [pc, #220]	@ (8003d20 <HAL_I2S_Init+0x278>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d101      	bne.n	8003c4c <HAL_I2S_Init+0x1a4>
 8003c48:	4b36      	ldr	r3, [pc, #216]	@ (8003d24 <HAL_I2S_Init+0x27c>)
 8003c4a:	e001      	b.n	8003c50 <HAL_I2S_Init+0x1a8>
 8003c4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	4932      	ldr	r1, [pc, #200]	@ (8003d20 <HAL_I2S_Init+0x278>)
 8003c58:	428a      	cmp	r2, r1
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2S_Init+0x1b8>
 8003c5c:	4a31      	ldr	r2, [pc, #196]	@ (8003d24 <HAL_I2S_Init+0x27c>)
 8003c5e:	e001      	b.n	8003c64 <HAL_I2S_Init+0x1bc>
 8003c60:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003c64:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c68:	f023 030f 	bic.w	r3, r3, #15
 8003c6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2b      	ldr	r2, [pc, #172]	@ (8003d20 <HAL_I2S_Init+0x278>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d101      	bne.n	8003c7c <HAL_I2S_Init+0x1d4>
 8003c78:	4b2a      	ldr	r3, [pc, #168]	@ (8003d24 <HAL_I2S_Init+0x27c>)
 8003c7a:	e001      	b.n	8003c80 <HAL_I2S_Init+0x1d8>
 8003c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c80:	2202      	movs	r2, #2
 8003c82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a25      	ldr	r2, [pc, #148]	@ (8003d20 <HAL_I2S_Init+0x278>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2S_Init+0x1ea>
 8003c8e:	4b25      	ldr	r3, [pc, #148]	@ (8003d24 <HAL_I2S_Init+0x27c>)
 8003c90:	e001      	b.n	8003c96 <HAL_I2S_Init+0x1ee>
 8003c92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca2:	d003      	beq.n	8003cac <HAL_I2S_Init+0x204>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d103      	bne.n	8003cb4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	e001      	b.n	8003cb8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	897b      	ldrh	r3, [r7, #10]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ce4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a0d      	ldr	r2, [pc, #52]	@ (8003d20 <HAL_I2S_Init+0x278>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_I2S_Init+0x24c>
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d24 <HAL_I2S_Init+0x27c>)
 8003cf2:	e001      	b.n	8003cf8 <HAL_I2S_Init+0x250>
 8003cf4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cf8:	897a      	ldrh	r2, [r7, #10]
 8003cfa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	08003e1f 	.word	0x08003e1f
 8003d18:	cccccccd 	.word	0xcccccccd
 8003d1c:	08003f35 	.word	0x08003f35
 8003d20:	40003800 	.word	0x40003800
 8003d24:	40003400 	.word	0x40003400

08003d28 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10e      	bne.n	8003db8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003da8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff ffb8 	bl	8003d28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003db8:	bf00      	nop
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dda:	1c9a      	adds	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10e      	bne.n	8003e16 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff93 	bl	8003d3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d13a      	bne.n	8003eb0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d109      	bne.n	8003e58 <I2S_IRQHandler+0x3a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4e:	2b40      	cmp	r3, #64	@ 0x40
 8003e50:	d102      	bne.n	8003e58 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff ffb4 	bl	8003dc0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5e:	2b40      	cmp	r3, #64	@ 0x40
 8003e60:	d126      	bne.n	8003eb0 <I2S_IRQHandler+0x92>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d11f      	bne.n	8003eb0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	f043 0202 	orr.w	r2, r3, #2
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff ff50 	bl	8003d50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d136      	bne.n	8003f2a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d109      	bne.n	8003eda <I2S_IRQHandler+0xbc>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed0:	2b80      	cmp	r3, #128	@ 0x80
 8003ed2:	d102      	bne.n	8003eda <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff45 	bl	8003d64 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d122      	bne.n	8003f2a <I2S_IRQHandler+0x10c>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d11b      	bne.n	8003f2a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f00:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1c:	f043 0204 	orr.w	r2, r3, #4
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff13 	bl	8003d50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a92      	ldr	r2, [pc, #584]	@ (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f4e:	4b92      	ldr	r3, [pc, #584]	@ (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f50:	e001      	b.n	8003f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a8b      	ldr	r2, [pc, #556]	@ (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d101      	bne.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f6c:	4b8a      	ldr	r3, [pc, #552]	@ (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f6e:	e001      	b.n	8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f80:	d004      	beq.n	8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f040 8099 	bne.w	80040be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d107      	bne.n	8003fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f925 	bl	80041f0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d107      	bne.n	8003fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f9c8 	bl	8004350 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc6:	2b40      	cmp	r3, #64	@ 0x40
 8003fc8:	d13a      	bne.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d035      	beq.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a6e      	ldr	r2, [pc, #440]	@ (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003fde:	4b6e      	ldr	r3, [pc, #440]	@ (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fe0:	e001      	b.n	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003fe2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4969      	ldr	r1, [pc, #420]	@ (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fee:	428b      	cmp	r3, r1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ff2:	4b69      	ldr	r3, [pc, #420]	@ (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff4:	e001      	b.n	8003ffa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ff6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ffa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ffe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800400e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	f043 0202 	orr.w	r2, r3, #2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff fe88 	bl	8003d50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b08      	cmp	r3, #8
 8004048:	f040 80c3 	bne.w	80041d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 80bd 	beq.w	80041d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004066:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a49      	ldr	r2, [pc, #292]	@ (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d101      	bne.n	8004076 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004072:	4b49      	ldr	r3, [pc, #292]	@ (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004074:	e001      	b.n	800407a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004076:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4944      	ldr	r1, [pc, #272]	@ (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004082:	428b      	cmp	r3, r1
 8004084:	d101      	bne.n	800408a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004086:	4b44      	ldr	r3, [pc, #272]	@ (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004088:	e001      	b.n	800408e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800408a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800408e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004092:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004094:	2300      	movs	r3, #0
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ae:	f043 0204 	orr.w	r2, r3, #4
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff fe4a 	bl	8003d50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040bc:	e089      	b.n	80041d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d107      	bne.n	80040d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f8be 	bl	8004254 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d107      	bne.n	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f8fd 	bl	80042ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d12f      	bne.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d02a      	beq.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004114:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1e      	ldr	r2, [pc, #120]	@ (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d101      	bne.n	8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004120:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004122:	e001      	b.n	8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004124:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4919      	ldr	r1, [pc, #100]	@ (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004130:	428b      	cmp	r3, r1
 8004132:	d101      	bne.n	8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004134:	4b18      	ldr	r3, [pc, #96]	@ (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004136:	e001      	b.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800413c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004140:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414e:	f043 0202 	orr.w	r2, r3, #2
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fdfa 	bl	8003d50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	d136      	bne.n	80041d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d031      	beq.n	80041d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a07      	ldr	r2, [pc, #28]	@ (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d101      	bne.n	800417e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800417a:	4b07      	ldr	r3, [pc, #28]	@ (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800417c:	e001      	b.n	8004182 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800417e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4902      	ldr	r1, [pc, #8]	@ (8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800418a:	428b      	cmp	r3, r1
 800418c:	d106      	bne.n	800419c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800418e:	4b02      	ldr	r3, [pc, #8]	@ (8004198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004190:	e006      	b.n	80041a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004192:	bf00      	nop
 8004194:	40003800 	.word	0x40003800
 8004198:	40003400 	.word	0x40003400
 800419c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041a4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	f043 0204 	orr.w	r2, r3, #4
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff fdc0 	bl	8003d50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041d0:	e000      	b.n	80041d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041d2:	bf00      	nop
}
 80041d4:	bf00      	nop
 80041d6:	3720      	adds	r7, #32
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	1c99      	adds	r1, r3, #2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6251      	str	r1, [r2, #36]	@ 0x24
 8004202:	881a      	ldrh	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d113      	bne.n	800424a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004230:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ffc9 	bl	80041dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	1c99      	adds	r1, r3, #2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6251      	str	r1, [r2, #36]	@ 0x24
 8004266:	8819      	ldrh	r1, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1d      	ldr	r2, [pc, #116]	@ (80042e4 <I2SEx_TxISR_I2SExt+0x90>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d101      	bne.n	8004276 <I2SEx_TxISR_I2SExt+0x22>
 8004272:	4b1d      	ldr	r3, [pc, #116]	@ (80042e8 <I2SEx_TxISR_I2SExt+0x94>)
 8004274:	e001      	b.n	800427a <I2SEx_TxISR_I2SExt+0x26>
 8004276:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800427a:	460a      	mov	r2, r1
 800427c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d121      	bne.n	80042da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a12      	ldr	r2, [pc, #72]	@ (80042e4 <I2SEx_TxISR_I2SExt+0x90>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <I2SEx_TxISR_I2SExt+0x50>
 80042a0:	4b11      	ldr	r3, [pc, #68]	@ (80042e8 <I2SEx_TxISR_I2SExt+0x94>)
 80042a2:	e001      	b.n	80042a8 <I2SEx_TxISR_I2SExt+0x54>
 80042a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	490d      	ldr	r1, [pc, #52]	@ (80042e4 <I2SEx_TxISR_I2SExt+0x90>)
 80042b0:	428b      	cmp	r3, r1
 80042b2:	d101      	bne.n	80042b8 <I2SEx_TxISR_I2SExt+0x64>
 80042b4:	4b0c      	ldr	r3, [pc, #48]	@ (80042e8 <I2SEx_TxISR_I2SExt+0x94>)
 80042b6:	e001      	b.n	80042bc <I2SEx_TxISR_I2SExt+0x68>
 80042b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff81 	bl	80041dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40003800 	.word	0x40003800
 80042e8:	40003400 	.word	0x40003400

080042ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68d8      	ldr	r0, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fe:	1c99      	adds	r1, r3, #2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004304:	b282      	uxth	r2, r0
 8004306:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d113      	bne.n	8004348 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800432e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ff4a 	bl	80041dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a20      	ldr	r2, [pc, #128]	@ (80043e0 <I2SEx_RxISR_I2SExt+0x90>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <I2SEx_RxISR_I2SExt+0x16>
 8004362:	4b20      	ldr	r3, [pc, #128]	@ (80043e4 <I2SEx_RxISR_I2SExt+0x94>)
 8004364:	e001      	b.n	800436a <I2SEx_RxISR_I2SExt+0x1a>
 8004366:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800436a:	68d8      	ldr	r0, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	1c99      	adds	r1, r3, #2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004376:	b282      	uxth	r2, r0
 8004378:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d121      	bne.n	80043d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a12      	ldr	r2, [pc, #72]	@ (80043e0 <I2SEx_RxISR_I2SExt+0x90>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <I2SEx_RxISR_I2SExt+0x50>
 800439c:	4b11      	ldr	r3, [pc, #68]	@ (80043e4 <I2SEx_RxISR_I2SExt+0x94>)
 800439e:	e001      	b.n	80043a4 <I2SEx_RxISR_I2SExt+0x54>
 80043a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	490d      	ldr	r1, [pc, #52]	@ (80043e0 <I2SEx_RxISR_I2SExt+0x90>)
 80043ac:	428b      	cmp	r3, r1
 80043ae:	d101      	bne.n	80043b4 <I2SEx_RxISR_I2SExt+0x64>
 80043b0:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <I2SEx_RxISR_I2SExt+0x94>)
 80043b2:	e001      	b.n	80043b8 <I2SEx_RxISR_I2SExt+0x68>
 80043b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ff03 	bl	80041dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40003800 	.word	0x40003800
 80043e4:	40003400 	.word	0x40003400

080043e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e267      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d075      	beq.n	80044f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004406:	4b88      	ldr	r3, [pc, #544]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b04      	cmp	r3, #4
 8004410:	d00c      	beq.n	800442c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004412:	4b85      	ldr	r3, [pc, #532]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800441a:	2b08      	cmp	r3, #8
 800441c:	d112      	bne.n	8004444 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441e:	4b82      	ldr	r3, [pc, #520]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004426:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800442a:	d10b      	bne.n	8004444 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	4b7e      	ldr	r3, [pc, #504]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d05b      	beq.n	80044f0 <HAL_RCC_OscConfig+0x108>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d157      	bne.n	80044f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e242      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800444c:	d106      	bne.n	800445c <HAL_RCC_OscConfig+0x74>
 800444e:	4b76      	ldr	r3, [pc, #472]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a75      	ldr	r2, [pc, #468]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e01d      	b.n	8004498 <HAL_RCC_OscConfig+0xb0>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x98>
 8004466:	4b70      	ldr	r3, [pc, #448]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6f      	ldr	r2, [pc, #444]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 800446c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	4b6d      	ldr	r3, [pc, #436]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6c      	ldr	r2, [pc, #432]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e00b      	b.n	8004498 <HAL_RCC_OscConfig+0xb0>
 8004480:	4b69      	ldr	r3, [pc, #420]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a68      	ldr	r2, [pc, #416]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	4b66      	ldr	r3, [pc, #408]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a65      	ldr	r2, [pc, #404]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d013      	beq.n	80044c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a0:	f7fc fd92 	bl	8000fc8 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a8:	f7fc fd8e 	bl	8000fc8 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b64      	cmp	r3, #100	@ 0x64
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e207      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0xc0>
 80044c6:	e014      	b.n	80044f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fc fd7e 	bl	8000fc8 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d0:	f7fc fd7a 	bl	8000fc8 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	@ 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e1f3      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e2:	4b51      	ldr	r3, [pc, #324]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0xe8>
 80044ee:	e000      	b.n	80044f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d063      	beq.n	80045c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450a:	4b47      	ldr	r3, [pc, #284]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004512:	2b08      	cmp	r3, #8
 8004514:	d11c      	bne.n	8004550 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004516:	4b44      	ldr	r3, [pc, #272]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d116      	bne.n	8004550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004522:	4b41      	ldr	r3, [pc, #260]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_RCC_OscConfig+0x152>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d001      	beq.n	800453a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e1c7      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453a:	4b3b      	ldr	r3, [pc, #236]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4937      	ldr	r1, [pc, #220]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454e:	e03a      	b.n	80045c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004558:	4b34      	ldr	r3, [pc, #208]	@ (800462c <HAL_RCC_OscConfig+0x244>)
 800455a:	2201      	movs	r2, #1
 800455c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fc fd33 	bl	8000fc8 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004566:	f7fc fd2f 	bl	8000fc8 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e1a8      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004578:	4b2b      	ldr	r3, [pc, #172]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004584:	4b28      	ldr	r3, [pc, #160]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	4925      	ldr	r1, [pc, #148]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]
 8004598:	e015      	b.n	80045c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800459a:	4b24      	ldr	r3, [pc, #144]	@ (800462c <HAL_RCC_OscConfig+0x244>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fc fd12 	bl	8000fc8 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a8:	f7fc fd0e 	bl	8000fc8 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e187      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d036      	beq.n	8004640 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045da:	4b15      	ldr	r3, [pc, #84]	@ (8004630 <HAL_RCC_OscConfig+0x248>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fc fcf2 	bl	8000fc8 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e8:	f7fc fcee 	bl	8000fc8 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e167      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004628 <HAL_RCC_OscConfig+0x240>)
 80045fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x200>
 8004606:	e01b      	b.n	8004640 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004608:	4b09      	ldr	r3, [pc, #36]	@ (8004630 <HAL_RCC_OscConfig+0x248>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460e:	f7fc fcdb 	bl	8000fc8 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004614:	e00e      	b.n	8004634 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004616:	f7fc fcd7 	bl	8000fc8 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d907      	bls.n	8004634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e150      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
 8004628:	40023800 	.word	0x40023800
 800462c:	42470000 	.word	0x42470000
 8004630:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004634:	4b88      	ldr	r3, [pc, #544]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ea      	bne.n	8004616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8097 	beq.w	800477c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004652:	4b81      	ldr	r3, [pc, #516]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10f      	bne.n	800467e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	4b7d      	ldr	r3, [pc, #500]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	4a7c      	ldr	r2, [pc, #496]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800466c:	6413      	str	r3, [r2, #64]	@ 0x40
 800466e:	4b7a      	ldr	r3, [pc, #488]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467e:	4b77      	ldr	r3, [pc, #476]	@ (800485c <HAL_RCC_OscConfig+0x474>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d118      	bne.n	80046bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800468a:	4b74      	ldr	r3, [pc, #464]	@ (800485c <HAL_RCC_OscConfig+0x474>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a73      	ldr	r2, [pc, #460]	@ (800485c <HAL_RCC_OscConfig+0x474>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004696:	f7fc fc97 	bl	8000fc8 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469e:	f7fc fc93 	bl	8000fc8 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e10c      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b0:	4b6a      	ldr	r3, [pc, #424]	@ (800485c <HAL_RCC_OscConfig+0x474>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d106      	bne.n	80046d2 <HAL_RCC_OscConfig+0x2ea>
 80046c4:	4b64      	ldr	r3, [pc, #400]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c8:	4a63      	ldr	r2, [pc, #396]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80046d0:	e01c      	b.n	800470c <HAL_RCC_OscConfig+0x324>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x30c>
 80046da:	4b5f      	ldr	r3, [pc, #380]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	4a5e      	ldr	r2, [pc, #376]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f2:	e00b      	b.n	800470c <HAL_RCC_OscConfig+0x324>
 80046f4:	4b58      	ldr	r3, [pc, #352]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f8:	4a57      	ldr	r2, [pc, #348]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004700:	4b55      	ldr	r3, [pc, #340]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004704:	4a54      	ldr	r2, [pc, #336]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004706:	f023 0304 	bic.w	r3, r3, #4
 800470a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d015      	beq.n	8004740 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fc fc58 	bl	8000fc8 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471a:	e00a      	b.n	8004732 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7fc fc54 	bl	8000fc8 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e0cb      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004732:	4b49      	ldr	r3, [pc, #292]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0ee      	beq.n	800471c <HAL_RCC_OscConfig+0x334>
 800473e:	e014      	b.n	800476a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004740:	f7fc fc42 	bl	8000fc8 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004746:	e00a      	b.n	800475e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fc fc3e 	bl	8000fc8 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e0b5      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475e:	4b3e      	ldr	r3, [pc, #248]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1ee      	bne.n	8004748 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004770:	4b39      	ldr	r3, [pc, #228]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004774:	4a38      	ldr	r2, [pc, #224]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800477a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80a1 	beq.w	80048c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004786:	4b34      	ldr	r3, [pc, #208]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b08      	cmp	r3, #8
 8004790:	d05c      	beq.n	800484c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d141      	bne.n	800481e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479a:	4b31      	ldr	r3, [pc, #196]	@ (8004860 <HAL_RCC_OscConfig+0x478>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fc fc12 	bl	8000fc8 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fc fc0e 	bl	8000fc8 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e087      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	4b27      	ldr	r3, [pc, #156]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	019b      	lsls	r3, r3, #6
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	3b01      	subs	r3, #1
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	491b      	ldr	r1, [pc, #108]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004860 <HAL_RCC_OscConfig+0x478>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f6:	f7fc fbe7 	bl	8000fc8 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fe:	f7fc fbe3 	bl	8000fc8 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e05c      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004810:	4b11      	ldr	r3, [pc, #68]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <HAL_RCC_OscConfig+0x416>
 800481c:	e054      	b.n	80048c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481e:	4b10      	ldr	r3, [pc, #64]	@ (8004860 <HAL_RCC_OscConfig+0x478>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004824:	f7fc fbd0 	bl	8000fc8 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482c:	f7fc fbcc 	bl	8000fc8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e045      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <HAL_RCC_OscConfig+0x470>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x444>
 800484a:	e03d      	b.n	80048c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e038      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
 8004858:	40023800 	.word	0x40023800
 800485c:	40007000 	.word	0x40007000
 8004860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004864:	4b1b      	ldr	r3, [pc, #108]	@ (80048d4 <HAL_RCC_OscConfig+0x4ec>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d028      	beq.n	80048c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d121      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d11a      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004894:	4013      	ands	r3, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800489a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800489c:	4293      	cmp	r3, r2
 800489e:	d111      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	3b01      	subs	r3, #1
 80048ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d107      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800

080048d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0cc      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ec:	4b68      	ldr	r3, [pc, #416]	@ (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d90c      	bls.n	8004914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fa:	4b65      	ldr	r3, [pc, #404]	@ (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	4b63      	ldr	r3, [pc, #396]	@ (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0b8      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800492c:	4b59      	ldr	r3, [pc, #356]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4a58      	ldr	r2, [pc, #352]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004936:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004944:	4b53      	ldr	r3, [pc, #332]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a52      	ldr	r2, [pc, #328]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800494e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004950:	4b50      	ldr	r3, [pc, #320]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	494d      	ldr	r1, [pc, #308]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d044      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d107      	bne.n	8004986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004976:	4b47      	ldr	r3, [pc, #284]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d119      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e07f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d003      	beq.n	8004996 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004992:	2b03      	cmp	r3, #3
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004996:	4b3f      	ldr	r3, [pc, #252]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e06f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e067      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b6:	4b37      	ldr	r3, [pc, #220]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f023 0203 	bic.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4934      	ldr	r1, [pc, #208]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c8:	f7fc fafe 	bl	8000fc8 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d0:	f7fc fafa 	bl	8000fc8 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e04f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 020c 	and.w	r2, r3, #12
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d1eb      	bne.n	80049d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049f8:	4b25      	ldr	r3, [pc, #148]	@ (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d20c      	bcs.n	8004a20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a06:	4b22      	ldr	r3, [pc, #136]	@ (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	4b20      	ldr	r3, [pc, #128]	@ (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e032      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d008      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a2c:	4b19      	ldr	r3, [pc, #100]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4916      	ldr	r1, [pc, #88]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a4a:	4b12      	ldr	r3, [pc, #72]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	490e      	ldr	r1, [pc, #56]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a5e:	f000 f821 	bl	8004aa4 <HAL_RCC_GetSysClockFreq>
 8004a62:	4602      	mov	r2, r0
 8004a64:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	490a      	ldr	r1, [pc, #40]	@ (8004a98 <HAL_RCC_ClockConfig+0x1c0>)
 8004a70:	5ccb      	ldrb	r3, [r1, r3]
 8004a72:	fa22 f303 	lsr.w	r3, r2, r3
 8004a76:	4a09      	ldr	r2, [pc, #36]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a7a:	4b09      	ldr	r3, [pc, #36]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fc fa5e 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023c00 	.word	0x40023c00
 8004a94:	40023800 	.word	0x40023800
 8004a98:	08009c98 	.word	0x08009c98
 8004a9c:	20000000 	.word	0x20000000
 8004aa0:	20000004 	.word	0x20000004

08004aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa8:	b094      	sub	sp, #80	@ 0x50
 8004aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004abc:	4b79      	ldr	r3, [pc, #484]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 030c 	and.w	r3, r3, #12
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d00d      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	f200 80e1 	bhi.w	8004c90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d003      	beq.n	8004ade <HAL_RCC_GetSysClockFreq+0x3a>
 8004ad6:	e0db      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad8:	4b73      	ldr	r3, [pc, #460]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ada:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004adc:	e0db      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ade:	4b73      	ldr	r3, [pc, #460]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x208>)
 8004ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ae2:	e0d8      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae4:	4b6f      	ldr	r3, [pc, #444]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aee:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d063      	beq.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afa:	4b6a      	ldr	r3, [pc, #424]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	099b      	lsrs	r3, r3, #6
 8004b00:	2200      	movs	r2, #0
 8004b02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b0e:	2300      	movs	r3, #0
 8004b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b16:	4622      	mov	r2, r4
 8004b18:	462b      	mov	r3, r5
 8004b1a:	f04f 0000 	mov.w	r0, #0
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	0159      	lsls	r1, r3, #5
 8004b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b28:	0150      	lsls	r0, r2, #5
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4621      	mov	r1, r4
 8004b30:	1a51      	subs	r1, r2, r1
 8004b32:	6139      	str	r1, [r7, #16]
 8004b34:	4629      	mov	r1, r5
 8004b36:	eb63 0301 	sbc.w	r3, r3, r1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b48:	4659      	mov	r1, fp
 8004b4a:	018b      	lsls	r3, r1, #6
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b52:	4651      	mov	r1, sl
 8004b54:	018a      	lsls	r2, r1, #6
 8004b56:	4651      	mov	r1, sl
 8004b58:	ebb2 0801 	subs.w	r8, r2, r1
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b76:	4690      	mov	r8, r2
 8004b78:	4699      	mov	r9, r3
 8004b7a:	4623      	mov	r3, r4
 8004b7c:	eb18 0303 	adds.w	r3, r8, r3
 8004b80:	60bb      	str	r3, [r7, #8]
 8004b82:	462b      	mov	r3, r5
 8004b84:	eb49 0303 	adc.w	r3, r9, r3
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b96:	4629      	mov	r1, r5
 8004b98:	024b      	lsls	r3, r1, #9
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	024a      	lsls	r2, r1, #9
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004baa:	2200      	movs	r2, #0
 8004bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bb4:	f7fb fb08 	bl	80001c8 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bc0:	e058      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc2:	4b38      	ldr	r3, [pc, #224]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	2200      	movs	r2, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	4611      	mov	r1, r2
 8004bce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bd2:	623b      	str	r3, [r7, #32]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bdc:	4642      	mov	r2, r8
 8004bde:	464b      	mov	r3, r9
 8004be0:	f04f 0000 	mov.w	r0, #0
 8004be4:	f04f 0100 	mov.w	r1, #0
 8004be8:	0159      	lsls	r1, r3, #5
 8004bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bee:	0150      	lsls	r0, r2, #5
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c14:	ebb2 040a 	subs.w	r4, r2, sl
 8004c18:	eb63 050b 	sbc.w	r5, r3, fp
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	00eb      	lsls	r3, r5, #3
 8004c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c2a:	00e2      	lsls	r2, r4, #3
 8004c2c:	4614      	mov	r4, r2
 8004c2e:	461d      	mov	r5, r3
 8004c30:	4643      	mov	r3, r8
 8004c32:	18e3      	adds	r3, r4, r3
 8004c34:	603b      	str	r3, [r7, #0]
 8004c36:	464b      	mov	r3, r9
 8004c38:	eb45 0303 	adc.w	r3, r5, r3
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	028b      	lsls	r3, r1, #10
 8004c4e:	4621      	mov	r1, r4
 8004c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c54:	4621      	mov	r1, r4
 8004c56:	028a      	lsls	r2, r1, #10
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c5e:	2200      	movs	r2, #0
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	61fa      	str	r2, [r7, #28]
 8004c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c68:	f7fb faae 	bl	80001c8 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4613      	mov	r3, r2
 8004c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	0c1b      	lsrs	r3, r3, #16
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c8e:	e002      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c90:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3750      	adds	r7, #80	@ 0x50
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	00f42400 	.word	0x00f42400
 8004cac:	007a1200 	.word	0x007a1200

08004cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb4:	4b03      	ldr	r3, [pc, #12]	@ (8004cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000000 	.word	0x20000000

08004cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ccc:	f7ff fff0 	bl	8004cb0 <HAL_RCC_GetHCLKFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	0a9b      	lsrs	r3, r3, #10
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	4903      	ldr	r1, [pc, #12]	@ (8004cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	08009ca8 	.word	0x08009ca8

08004cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d035      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d18:	4b62      	ldr	r3, [pc, #392]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d1e:	f7fc f953 	bl	8000fc8 <HAL_GetTick>
 8004d22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d24:	e008      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d26:	f7fc f94f 	bl	8000fc8 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e0b0      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d38:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1f0      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	019a      	lsls	r2, r3, #6
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	071b      	lsls	r3, r3, #28
 8004d50:	4955      	ldr	r1, [pc, #340]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d58:	4b52      	ldr	r3, [pc, #328]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d5e:	f7fc f933 	bl	8000fc8 <HAL_GetTick>
 8004d62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d66:	f7fc f92f 	bl	8000fc8 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e090      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d78:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8083 	beq.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	4b44      	ldr	r3, [pc, #272]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	4a43      	ldr	r2, [pc, #268]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004da2:	4b41      	ldr	r3, [pc, #260]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dae:	4b3f      	ldr	r3, [pc, #252]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a3e      	ldr	r2, [pc, #248]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004db8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dba:	f7fc f905 	bl	8000fc8 <HAL_GetTick>
 8004dbe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc2:	f7fc f901 	bl	8000fc8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e062      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004dd4:	4b35      	ldr	r3, [pc, #212]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004de0:	4b31      	ldr	r3, [pc, #196]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02f      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d028      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e08:	4b29      	ldr	r3, [pc, #164]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e0e:	4b28      	ldr	r3, [pc, #160]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e14:	4a24      	ldr	r2, [pc, #144]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e1a:	4b23      	ldr	r3, [pc, #140]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d114      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e26:	f7fc f8cf 	bl	8000fc8 <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7fc f8cb 	bl	8000fc8 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e02a      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e44:	4b18      	ldr	r3, [pc, #96]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0ee      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e5c:	d10d      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e5e:	4b12      	ldr	r3, [pc, #72]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e72:	490d      	ldr	r1, [pc, #52]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	608b      	str	r3, [r1, #8]
 8004e78:	e005      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e80:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e84:	6093      	str	r3, [r2, #8]
 8004e86:	4b08      	ldr	r3, [pc, #32]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e88:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e92:	4905      	ldr	r1, [pc, #20]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	42470068 	.word	0x42470068
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	40007000 	.word	0x40007000
 8004eb0:	42470e40 	.word	0x42470e40

08004eb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d13f      	bne.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ed2:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eda:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d006      	beq.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ee8:	d12f      	bne.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004eea:	4b1f      	ldr	r3, [pc, #124]	@ (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004eec:	617b      	str	r3, [r7, #20]
          break;
 8004eee:	e02f      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004efc:	d108      	bne.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004efe:	4b19      	ldr	r3, [pc, #100]	@ (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f06:	4a19      	ldr	r2, [pc, #100]	@ (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e007      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f10:	4b14      	ldr	r3, [pc, #80]	@ (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f18:	4a15      	ldr	r2, [pc, #84]	@ (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f20:	4b10      	ldr	r3, [pc, #64]	@ (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f34:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f3a:	0f1b      	lsrs	r3, r3, #28
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f46:	617b      	str	r3, [r7, #20]
          break;
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
          break;
 8004f4e:	bf00      	nop
        }
      }
      break;
 8004f50:	e000      	b.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004f52:	bf00      	nop
    }
  }
  return frequency;
 8004f54:	697b      	ldr	r3, [r7, #20]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40023800 	.word	0x40023800
 8004f68:	00bb8000 	.word	0x00bb8000
 8004f6c:	007a1200 	.word	0x007a1200
 8004f70:	00f42400 	.word	0x00f42400

08004f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e07b      	b.n	800507e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d108      	bne.n	8004fa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f96:	d009      	beq.n	8004fac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	61da      	str	r2, [r3, #28]
 8004f9e:	e005      	b.n	8004fac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fb fe4c 	bl	8000c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fe2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005030:	ea42 0103 	orr.w	r1, r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005038:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	f003 0104 	and.w	r1, r3, #4
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	f003 0210 	and.w	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800506c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e041      	b.n	800511c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fb fe21 	bl	8000cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3304      	adds	r3, #4
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f000 fc6f 	bl	80059a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e041      	b.n	80051ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f839 	bl	80051c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f000 fc20 	bl	80059a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_IC_Start_IT+0x1e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	e013      	b.n	800521e <HAL_TIM_IC_Start_IT+0x46>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d104      	bne.n	8005206 <HAL_TIM_IC_Start_IT+0x2e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005202:	b2db      	uxtb	r3, r3
 8005204:	e00b      	b.n	800521e <HAL_TIM_IC_Start_IT+0x46>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b08      	cmp	r3, #8
 800520a:	d104      	bne.n	8005216 <HAL_TIM_IC_Start_IT+0x3e>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005212:	b2db      	uxtb	r3, r3
 8005214:	e003      	b.n	800521e <HAL_TIM_IC_Start_IT+0x46>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800521c:	b2db      	uxtb	r3, r3
 800521e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d104      	bne.n	8005230 <HAL_TIM_IC_Start_IT+0x58>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800522c:	b2db      	uxtb	r3, r3
 800522e:	e013      	b.n	8005258 <HAL_TIM_IC_Start_IT+0x80>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b04      	cmp	r3, #4
 8005234:	d104      	bne.n	8005240 <HAL_TIM_IC_Start_IT+0x68>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800523c:	b2db      	uxtb	r3, r3
 800523e:	e00b      	b.n	8005258 <HAL_TIM_IC_Start_IT+0x80>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b08      	cmp	r3, #8
 8005244:	d104      	bne.n	8005250 <HAL_TIM_IC_Start_IT+0x78>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800524c:	b2db      	uxtb	r3, r3
 800524e:	e003      	b.n	8005258 <HAL_TIM_IC_Start_IT+0x80>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005256:	b2db      	uxtb	r3, r3
 8005258:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800525a:	7bbb      	ldrb	r3, [r7, #14]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d102      	bne.n	8005266 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005260:	7b7b      	ldrb	r3, [r7, #13]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d001      	beq.n	800526a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e0cc      	b.n	8005404 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <HAL_TIM_IC_Start_IT+0xa2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005278:	e013      	b.n	80052a2 <HAL_TIM_IC_Start_IT+0xca>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b04      	cmp	r3, #4
 800527e:	d104      	bne.n	800528a <HAL_TIM_IC_Start_IT+0xb2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005288:	e00b      	b.n	80052a2 <HAL_TIM_IC_Start_IT+0xca>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b08      	cmp	r3, #8
 800528e:	d104      	bne.n	800529a <HAL_TIM_IC_Start_IT+0xc2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005298:	e003      	b.n	80052a2 <HAL_TIM_IC_Start_IT+0xca>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_IC_Start_IT+0xda>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052b0:	e013      	b.n	80052da <HAL_TIM_IC_Start_IT+0x102>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_IC_Start_IT+0xea>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052c0:	e00b      	b.n	80052da <HAL_TIM_IC_Start_IT+0x102>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_IC_Start_IT+0xfa>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052d0:	e003      	b.n	80052da <HAL_TIM_IC_Start_IT+0x102>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	d841      	bhi.n	8005364 <HAL_TIM_IC_Start_IT+0x18c>
 80052e0:	a201      	add	r2, pc, #4	@ (adr r2, 80052e8 <HAL_TIM_IC_Start_IT+0x110>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	0800531d 	.word	0x0800531d
 80052ec:	08005365 	.word	0x08005365
 80052f0:	08005365 	.word	0x08005365
 80052f4:	08005365 	.word	0x08005365
 80052f8:	0800532f 	.word	0x0800532f
 80052fc:	08005365 	.word	0x08005365
 8005300:	08005365 	.word	0x08005365
 8005304:	08005365 	.word	0x08005365
 8005308:	08005341 	.word	0x08005341
 800530c:	08005365 	.word	0x08005365
 8005310:	08005365 	.word	0x08005365
 8005314:	08005365 	.word	0x08005365
 8005318:	08005353 	.word	0x08005353
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0202 	orr.w	r2, r2, #2
 800532a:	60da      	str	r2, [r3, #12]
      break;
 800532c:	e01d      	b.n	800536a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0204 	orr.w	r2, r2, #4
 800533c:	60da      	str	r2, [r3, #12]
      break;
 800533e:	e014      	b.n	800536a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0208 	orr.w	r2, r2, #8
 800534e:	60da      	str	r2, [r3, #12]
      break;
 8005350:	e00b      	b.n	800536a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0210 	orr.w	r2, r2, #16
 8005360:	60da      	str	r2, [r3, #12]
      break;
 8005362:	e002      	b.n	800536a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	73fb      	strb	r3, [r7, #15]
      break;
 8005368:	bf00      	nop
  }

  if (status == HAL_OK)
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d148      	bne.n	8005402 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2201      	movs	r2, #1
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fd85 	bl	8005e88 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a22      	ldr	r2, [pc, #136]	@ (800540c <HAL_TIM_IC_Start_IT+0x234>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d022      	beq.n	80053ce <HAL_TIM_IC_Start_IT+0x1f6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005390:	d01d      	beq.n	80053ce <HAL_TIM_IC_Start_IT+0x1f6>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1e      	ldr	r2, [pc, #120]	@ (8005410 <HAL_TIM_IC_Start_IT+0x238>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d018      	beq.n	80053ce <HAL_TIM_IC_Start_IT+0x1f6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005414 <HAL_TIM_IC_Start_IT+0x23c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <HAL_TIM_IC_Start_IT+0x1f6>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005418 <HAL_TIM_IC_Start_IT+0x240>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00e      	beq.n	80053ce <HAL_TIM_IC_Start_IT+0x1f6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a19      	ldr	r2, [pc, #100]	@ (800541c <HAL_TIM_IC_Start_IT+0x244>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_TIM_IC_Start_IT+0x1f6>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a18      	ldr	r2, [pc, #96]	@ (8005420 <HAL_TIM_IC_Start_IT+0x248>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_TIM_IC_Start_IT+0x1f6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a16      	ldr	r2, [pc, #88]	@ (8005424 <HAL_TIM_IC_Start_IT+0x24c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d111      	bne.n	80053f2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b06      	cmp	r3, #6
 80053de:	d010      	beq.n	8005402 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	e007      	b.n	8005402 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005402:	7bfb      	ldrb	r3, [r7, #15]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40010000 	.word	0x40010000
 8005410:	40000400 	.word	0x40000400
 8005414:	40000800 	.word	0x40000800
 8005418:	40000c00 	.word	0x40000c00
 800541c:	40010400 	.word	0x40010400
 8005420:	40014000 	.word	0x40014000
 8005424:	40001800 	.word	0x40001800

08005428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d020      	beq.n	800548c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01b      	beq.n	800548c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0202 	mvn.w	r2, #2
 800545c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fb fab6 	bl	80009e4 <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa76 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fa7d 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d020      	beq.n	80054d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01b      	beq.n	80054d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0204 	mvn.w	r2, #4
 80054a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fb fa90 	bl	80009e4 <HAL_TIM_IC_CaptureCallback>
 80054c4:	e005      	b.n	80054d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa50 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fa57 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d020      	beq.n	8005524 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01b      	beq.n	8005524 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0208 	mvn.w	r2, #8
 80054f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2204      	movs	r2, #4
 80054fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fb fa6a 	bl	80009e4 <HAL_TIM_IC_CaptureCallback>
 8005510:	e005      	b.n	800551e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa2a 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fa31 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 0310 	and.w	r3, r3, #16
 800552a:	2b00      	cmp	r3, #0
 800552c:	d020      	beq.n	8005570 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01b      	beq.n	8005570 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0210 	mvn.w	r2, #16
 8005540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2208      	movs	r2, #8
 8005546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fb fa44 	bl	80009e4 <HAL_TIM_IC_CaptureCallback>
 800555c:	e005      	b.n	800556a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa04 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fa0b 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00c      	beq.n	8005594 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0201 	mvn.w	r2, #1
 800558c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f9e2 	bl	8005958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00c      	beq.n	80055b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fd14 	bl	8005fe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00c      	beq.n	80055dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f9dc 	bl	8005994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00c      	beq.n	8005600 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0220 	mvn.w	r2, #32
 80055f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fce6 	bl	8005fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005622:	2302      	movs	r3, #2
 8005624:	e088      	b.n	8005738 <HAL_TIM_IC_ConfigChannel+0x130>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d11b      	bne.n	800566c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005644:	f000 fa5c 	bl	8005b00 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 020c 	bic.w	r2, r2, #12
 8005656:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6999      	ldr	r1, [r3, #24]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	619a      	str	r2, [r3, #24]
 800566a:	e060      	b.n	800572e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b04      	cmp	r3, #4
 8005670:	d11c      	bne.n	80056ac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005682:	f000 fae0 	bl	8005c46 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005694:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6999      	ldr	r1, [r3, #24]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	021a      	lsls	r2, r3, #8
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	619a      	str	r2, [r3, #24]
 80056aa:	e040      	b.n	800572e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d11b      	bne.n	80056ea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80056c2:	f000 fb2d 	bl	8005d20 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 020c 	bic.w	r2, r2, #12
 80056d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69d9      	ldr	r1, [r3, #28]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	61da      	str	r2, [r3, #28]
 80056e8:	e021      	b.n	800572e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b0c      	cmp	r3, #12
 80056ee:	d11c      	bne.n	800572a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005700:	f000 fb4a 	bl	8005d98 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69da      	ldr	r2, [r3, #28]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005712:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69d9      	ldr	r1, [r3, #28]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	021a      	lsls	r2, r3, #8
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	61da      	str	r2, [r3, #28]
 8005728:	e001      	b.n	800572e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005736:	7dfb      	ldrb	r3, [r7, #23]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_TIM_ConfigClockSource+0x1c>
 8005758:	2302      	movs	r3, #2
 800575a:	e0b4      	b.n	80058c6 <HAL_TIM_ConfigClockSource+0x186>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800577a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005794:	d03e      	beq.n	8005814 <HAL_TIM_ConfigClockSource+0xd4>
 8005796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800579a:	f200 8087 	bhi.w	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a2:	f000 8086 	beq.w	80058b2 <HAL_TIM_ConfigClockSource+0x172>
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057aa:	d87f      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057ac:	2b70      	cmp	r3, #112	@ 0x70
 80057ae:	d01a      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0xa6>
 80057b0:	2b70      	cmp	r3, #112	@ 0x70
 80057b2:	d87b      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057b4:	2b60      	cmp	r3, #96	@ 0x60
 80057b6:	d050      	beq.n	800585a <HAL_TIM_ConfigClockSource+0x11a>
 80057b8:	2b60      	cmp	r3, #96	@ 0x60
 80057ba:	d877      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057bc:	2b50      	cmp	r3, #80	@ 0x50
 80057be:	d03c      	beq.n	800583a <HAL_TIM_ConfigClockSource+0xfa>
 80057c0:	2b50      	cmp	r3, #80	@ 0x50
 80057c2:	d873      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057c4:	2b40      	cmp	r3, #64	@ 0x40
 80057c6:	d058      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x13a>
 80057c8:	2b40      	cmp	r3, #64	@ 0x40
 80057ca:	d86f      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057cc:	2b30      	cmp	r3, #48	@ 0x30
 80057ce:	d064      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x15a>
 80057d0:	2b30      	cmp	r3, #48	@ 0x30
 80057d2:	d86b      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d060      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x15a>
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d867      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d05c      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x15a>
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d05a      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x15a>
 80057e4:	e062      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057f6:	f000 fb27 	bl	8005e48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	609a      	str	r2, [r3, #8]
      break;
 8005812:	e04f      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005824:	f000 fb10 	bl	8005e48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005836:	609a      	str	r2, [r3, #8]
      break;
 8005838:	e03c      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005846:	461a      	mov	r2, r3
 8005848:	f000 f9ce 	bl	8005be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2150      	movs	r1, #80	@ 0x50
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fadd 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005858:	e02c      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005866:	461a      	mov	r2, r3
 8005868:	f000 fa2a 	bl	8005cc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2160      	movs	r1, #96	@ 0x60
 8005872:	4618      	mov	r0, r3
 8005874:	f000 facd 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005878:	e01c      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005886:	461a      	mov	r2, r3
 8005888:	f000 f9ae 	bl	8005be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2140      	movs	r1, #64	@ 0x40
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fabd 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005898:	e00c      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f000 fab4 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 80058aa:	e003      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	73fb      	strb	r3, [r7, #15]
      break;
 80058b0:	e000      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b0c      	cmp	r3, #12
 80058e2:	d831      	bhi.n	8005948 <HAL_TIM_ReadCapturedValue+0x78>
 80058e4:	a201      	add	r2, pc, #4	@ (adr r2, 80058ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80058e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ea:	bf00      	nop
 80058ec:	08005921 	.word	0x08005921
 80058f0:	08005949 	.word	0x08005949
 80058f4:	08005949 	.word	0x08005949
 80058f8:	08005949 	.word	0x08005949
 80058fc:	0800592b 	.word	0x0800592b
 8005900:	08005949 	.word	0x08005949
 8005904:	08005949 	.word	0x08005949
 8005908:	08005949 	.word	0x08005949
 800590c:	08005935 	.word	0x08005935
 8005910:	08005949 	.word	0x08005949
 8005914:	08005949 	.word	0x08005949
 8005918:	08005949 	.word	0x08005949
 800591c:	0800593f 	.word	0x0800593f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005926:	60fb      	str	r3, [r7, #12]

      break;
 8005928:	e00f      	b.n	800594a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005930:	60fb      	str	r3, [r7, #12]

      break;
 8005932:	e00a      	b.n	800594a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593a:	60fb      	str	r3, [r7, #12]

      break;
 800593c:	e005      	b.n	800594a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005944:	60fb      	str	r3, [r7, #12]

      break;
 8005946:	e000      	b.n	800594a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005948:	bf00      	nop
  }

  return tmpreg;
 800594a:	68fb      	ldr	r3, [r7, #12]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a46      	ldr	r2, [pc, #280]	@ (8005ad4 <TIM_Base_SetConfig+0x12c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d013      	beq.n	80059e8 <TIM_Base_SetConfig+0x40>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c6:	d00f      	beq.n	80059e8 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a43      	ldr	r2, [pc, #268]	@ (8005ad8 <TIM_Base_SetConfig+0x130>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00b      	beq.n	80059e8 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a42      	ldr	r2, [pc, #264]	@ (8005adc <TIM_Base_SetConfig+0x134>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d007      	beq.n	80059e8 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a41      	ldr	r2, [pc, #260]	@ (8005ae0 <TIM_Base_SetConfig+0x138>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a40      	ldr	r2, [pc, #256]	@ (8005ae4 <TIM_Base_SetConfig+0x13c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d108      	bne.n	80059fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a35      	ldr	r2, [pc, #212]	@ (8005ad4 <TIM_Base_SetConfig+0x12c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d02b      	beq.n	8005a5a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a08:	d027      	beq.n	8005a5a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a32      	ldr	r2, [pc, #200]	@ (8005ad8 <TIM_Base_SetConfig+0x130>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d023      	beq.n	8005a5a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a31      	ldr	r2, [pc, #196]	@ (8005adc <TIM_Base_SetConfig+0x134>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d01f      	beq.n	8005a5a <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a30      	ldr	r2, [pc, #192]	@ (8005ae0 <TIM_Base_SetConfig+0x138>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d01b      	beq.n	8005a5a <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae4 <TIM_Base_SetConfig+0x13c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d017      	beq.n	8005a5a <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ae8 <TIM_Base_SetConfig+0x140>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d013      	beq.n	8005a5a <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2d      	ldr	r2, [pc, #180]	@ (8005aec <TIM_Base_SetConfig+0x144>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00f      	beq.n	8005a5a <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005af0 <TIM_Base_SetConfig+0x148>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00b      	beq.n	8005a5a <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2b      	ldr	r2, [pc, #172]	@ (8005af4 <TIM_Base_SetConfig+0x14c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d007      	beq.n	8005a5a <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8005af8 <TIM_Base_SetConfig+0x150>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d003      	beq.n	8005a5a <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a29      	ldr	r2, [pc, #164]	@ (8005afc <TIM_Base_SetConfig+0x154>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d108      	bne.n	8005a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a10      	ldr	r2, [pc, #64]	@ (8005ad4 <TIM_Base_SetConfig+0x12c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_Base_SetConfig+0xf8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a12      	ldr	r2, [pc, #72]	@ (8005ae4 <TIM_Base_SetConfig+0x13c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d103      	bne.n	8005aa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d105      	bne.n	8005ac6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f023 0201 	bic.w	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	611a      	str	r2, [r3, #16]
  }
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40000800 	.word	0x40000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	40010400 	.word	0x40010400
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800
 8005af4:	40001800 	.word	0x40001800
 8005af8:	40001c00 	.word	0x40001c00
 8005afc:	40002000 	.word	0x40002000

08005b00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	f023 0201 	bic.w	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a28      	ldr	r2, [pc, #160]	@ (8005bcc <TIM_TI1_SetConfig+0xcc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01b      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b34:	d017      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a25      	ldr	r2, [pc, #148]	@ (8005bd0 <TIM_TI1_SetConfig+0xd0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d013      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4a24      	ldr	r2, [pc, #144]	@ (8005bd4 <TIM_TI1_SetConfig+0xd4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00f      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a23      	ldr	r2, [pc, #140]	@ (8005bd8 <TIM_TI1_SetConfig+0xd8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00b      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a22      	ldr	r2, [pc, #136]	@ (8005bdc <TIM_TI1_SetConfig+0xdc>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d007      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4a21      	ldr	r2, [pc, #132]	@ (8005be0 <TIM_TI1_SetConfig+0xe0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d003      	beq.n	8005b66 <TIM_TI1_SetConfig+0x66>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4a20      	ldr	r2, [pc, #128]	@ (8005be4 <TIM_TI1_SetConfig+0xe4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d101      	bne.n	8005b6a <TIM_TI1_SetConfig+0x6a>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <TIM_TI1_SetConfig+0x6c>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e003      	b.n	8005b8a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f023 030a 	bic.w	r3, r3, #10
 8005ba4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f003 030a 	and.w	r3, r3, #10
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40000c00 	.word	0x40000c00
 8005bdc:	40010400 	.word	0x40010400
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40001800 	.word	0x40001800

08005be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 0201 	bic.w	r2, r3, #1
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f023 030a 	bic.w	r3, r3, #10
 8005c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b087      	sub	sp, #28
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0210 	bic.w	r2, r3, #16
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	031b      	lsls	r3, r3, #12
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c98:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f023 0210 	bic.w	r2, r3, #16
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	031b      	lsls	r3, r3, #12
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	621a      	str	r2, [r3, #32]
}
 8005d14:	bf00      	nop
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f023 0303 	bic.w	r3, r3, #3
 8005d4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005d70:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	621a      	str	r2, [r3, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dc4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dd6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	031b      	lsls	r3, r3, #12
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005dea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	031b      	lsls	r3, r3, #12
 8005df0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f043 0307 	orr.w	r3, r3, #7
 8005e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	609a      	str	r2, [r3, #8]
}
 8005e3c:	bf00      	nop
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	021a      	lsls	r2, r3, #8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	609a      	str	r2, [r3, #8]
}
 8005e7c:	bf00      	nop
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	401a      	ands	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a1a      	ldr	r2, [r3, #32]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 031f 	and.w	r3, r3, #31
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
	...

08005ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e05a      	b.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a21      	ldr	r2, [pc, #132]	@ (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d022      	beq.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f38:	d01d      	beq.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d018      	beq.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a1b      	ldr	r2, [pc, #108]	@ (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a1a      	ldr	r2, [pc, #104]	@ (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00e      	beq.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a18      	ldr	r2, [pc, #96]	@ (8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d009      	beq.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a17      	ldr	r2, [pc, #92]	@ (8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d004      	beq.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a15      	ldr	r2, [pc, #84]	@ (8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d10c      	bne.n	8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800
 8005fbc:	40000c00 	.word	0x40000c00
 8005fc0:	40010400 	.word	0x40010400
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40001800 	.word	0x40001800

08005fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	f107 001c 	add.w	r0, r7, #28
 8006002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006006:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800600a:	2b01      	cmp	r3, #1
 800600c:	d123      	bne.n	8006056 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006012:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006022:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006036:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800603a:	2b01      	cmp	r3, #1
 800603c:	d105      	bne.n	800604a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f9dc 	bl	8006408 <USB_CoreReset>
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]
 8006054:	e01b      	b.n	800608e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9d0 	bl	8006408 <USB_CoreReset>
 8006068:	4603      	mov	r3, r0
 800606a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800606c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006070:	2b00      	cmp	r3, #0
 8006072:	d106      	bne.n	8006082 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006078:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006080:	e005      	b.n	800608e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006086:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800608e:	7fbb      	ldrb	r3, [r7, #30]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d10b      	bne.n	80060ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f043 0206 	orr.w	r2, r3, #6
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f043 0220 	orr.w	r2, r3, #32
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060b8:	b004      	add	sp, #16
 80060ba:	4770      	bx	lr

080060bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f043 0201 	orr.w	r2, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f023 0201 	bic.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800611c:	78fb      	ldrb	r3, [r7, #3]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d115      	bne.n	800614e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800612e:	200a      	movs	r0, #10
 8006130:	f7fa ff56 	bl	8000fe0 <HAL_Delay>
      ms += 10U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	330a      	adds	r3, #10
 8006138:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f956 	bl	80063ec <USB_GetMode>
 8006140:	4603      	mov	r3, r0
 8006142:	2b01      	cmp	r3, #1
 8006144:	d01e      	beq.n	8006184 <USB_SetCurrentMode+0x84>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2bc7      	cmp	r3, #199	@ 0xc7
 800614a:	d9f0      	bls.n	800612e <USB_SetCurrentMode+0x2e>
 800614c:	e01a      	b.n	8006184 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d115      	bne.n	8006180 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006160:	200a      	movs	r0, #10
 8006162:	f7fa ff3d 	bl	8000fe0 <HAL_Delay>
      ms += 10U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	330a      	adds	r3, #10
 800616a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f93d 	bl	80063ec <USB_GetMode>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <USB_SetCurrentMode+0x84>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2bc7      	cmp	r3, #199	@ 0xc7
 800617c:	d9f0      	bls.n	8006160 <USB_SetCurrentMode+0x60>
 800617e:	e001      	b.n	8006184 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e005      	b.n	8006190 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2bc8      	cmp	r3, #200	@ 0xc8
 8006188:	d101      	bne.n	800618e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3301      	adds	r3, #1
 80061aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061b2:	d901      	bls.n	80061b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e01b      	b.n	80061f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	daf2      	bge.n	80061a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	019b      	lsls	r3, r3, #6
 80061c8:	f043 0220 	orr.w	r2, r3, #32
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061dc:	d901      	bls.n	80061e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e006      	b.n	80061f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d0f0      	beq.n	80061d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3301      	adds	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006214:	d901      	bls.n	800621a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e018      	b.n	800624c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	daf2      	bge.n	8006208 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2210      	movs	r2, #16
 800622a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3301      	adds	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006238:	d901      	bls.n	800623e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e006      	b.n	800624c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	2b10      	cmp	r3, #16
 8006248:	d0f0      	beq.n	800622c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006258:	b480      	push	{r7}
 800625a:	b089      	sub	sp, #36	@ 0x24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	4611      	mov	r1, r2
 8006264:	461a      	mov	r2, r3
 8006266:	460b      	mov	r3, r1
 8006268:	71fb      	strb	r3, [r7, #7]
 800626a:	4613      	mov	r3, r2
 800626c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006276:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	d123      	bne.n	80062c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800627e:	88bb      	ldrh	r3, [r7, #4]
 8006280:	3303      	adds	r3, #3
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	e018      	b.n	80062be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	031a      	lsls	r2, r3, #12
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4413      	add	r3, r2
 8006294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006298:	461a      	mov	r2, r3
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	3301      	adds	r3, #1
 80062a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	3301      	adds	r3, #1
 80062aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	3301      	adds	r3, #1
 80062b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	3301      	adds	r3, #1
 80062b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	3301      	adds	r3, #1
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d3e2      	bcc.n	800628c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3724      	adds	r7, #36	@ 0x24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b08b      	sub	sp, #44	@ 0x2c
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	089b      	lsrs	r3, r3, #2
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062f2:	88fb      	ldrh	r3, [r7, #6]
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062fa:	2300      	movs	r3, #0
 80062fc:	623b      	str	r3, [r7, #32]
 80062fe:	e014      	b.n	800632a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	601a      	str	r2, [r3, #0]
    pDest++;
 800630c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630e:	3301      	adds	r3, #1
 8006310:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	3301      	adds	r3, #1
 8006316:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	3301      	adds	r3, #1
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	3301      	adds	r3, #1
 8006322:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	3301      	adds	r3, #1
 8006328:	623b      	str	r3, [r7, #32]
 800632a:	6a3a      	ldr	r2, [r7, #32]
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	429a      	cmp	r2, r3
 8006330:	d3e6      	bcc.n	8006300 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006332:	8bfb      	ldrh	r3, [r7, #30]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d01e      	beq.n	8006376 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006342:	461a      	mov	r2, r3
 8006344:	f107 0310 	add.w	r3, r7, #16
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	fa22 f303 	lsr.w	r3, r2, r3
 8006358:	b2da      	uxtb	r2, r3
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	701a      	strb	r2, [r3, #0]
      i++;
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	3301      	adds	r3, #1
 8006362:	623b      	str	r3, [r7, #32]
      pDest++;
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	3301      	adds	r3, #1
 8006368:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800636a:	8bfb      	ldrh	r3, [r7, #30]
 800636c:	3b01      	subs	r3, #1
 800636e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006370:	8bfb      	ldrh	r3, [r7, #30]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1ea      	bne.n	800634c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006378:	4618      	mov	r0, r3
 800637a:	372c      	adds	r7, #44	@ 0x2c
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4013      	ands	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	460b      	mov	r3, r1
 80063b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	4013      	ands	r3, r2
 80063dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063de:	68bb      	ldr	r3, [r7, #8]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f003 0301 	and.w	r3, r3, #1
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006420:	d901      	bls.n	8006426 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e01b      	b.n	800645e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	daf2      	bge.n	8006414 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f043 0201 	orr.w	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3301      	adds	r3, #1
 8006442:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800644a:	d901      	bls.n	8006450 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e006      	b.n	800645e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b01      	cmp	r3, #1
 800645a:	d0f0      	beq.n	800643e <USB_CoreReset+0x36>

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800646c:	b084      	sub	sp, #16
 800646e:	b580      	push	{r7, lr}
 8006470:	b086      	sub	sp, #24
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800647a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800648c:	461a      	mov	r2, r3
 800648e:	2300      	movs	r3, #0
 8006490:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006496:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d119      	bne.n	80064f6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80064c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10a      	bne.n	80064e0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064d8:	f043 0304 	orr.w	r3, r3, #4
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	e014      	b.n	800650a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064ee:	f023 0304 	bic.w	r3, r3, #4
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	e009      	b.n	800650a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006504:	f023 0304 	bic.w	r3, r3, #4
 8006508:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800650a:	2110      	movs	r1, #16
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff fe43 	bl	8006198 <USB_FlushTxFifo>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff fe6d 	bl	80061fc <USB_FlushRxFifo>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800652c:	2300      	movs	r3, #0
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	e015      	b.n	800655e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800653e:	461a      	mov	r2, r3
 8006540:	f04f 33ff 	mov.w	r3, #4294967295
 8006544:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006552:	461a      	mov	r2, r3
 8006554:	2300      	movs	r3, #0
 8006556:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	3301      	adds	r3, #1
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006562:	461a      	mov	r2, r3
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	4293      	cmp	r3, r2
 8006568:	d3e3      	bcc.n	8006532 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f04f 32ff 	mov.w	r2, #4294967295
 8006576:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a18      	ldr	r2, [pc, #96]	@ (80065dc <USB_HostInit+0x170>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d10b      	bne.n	8006598 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006586:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a15      	ldr	r2, [pc, #84]	@ (80065e0 <USB_HostInit+0x174>)
 800658c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a14      	ldr	r2, [pc, #80]	@ (80065e4 <USB_HostInit+0x178>)
 8006592:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006596:	e009      	b.n	80065ac <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2280      	movs	r2, #128	@ 0x80
 800659c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a11      	ldr	r2, [pc, #68]	@ (80065e8 <USB_HostInit+0x17c>)
 80065a2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a11      	ldr	r2, [pc, #68]	@ (80065ec <USB_HostInit+0x180>)
 80065a8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d105      	bne.n	80065c0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	f043 0210 	orr.w	r2, r3, #16
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699a      	ldr	r2, [r3, #24]
 80065c4:	4b0a      	ldr	r3, [pc, #40]	@ (80065f0 <USB_HostInit+0x184>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065d8:	b004      	add	sp, #16
 80065da:	4770      	bx	lr
 80065dc:	40040000 	.word	0x40040000
 80065e0:	01000200 	.word	0x01000200
 80065e4:	00e00300 	.word	0x00e00300
 80065e8:	00600080 	.word	0x00600080
 80065ec:	004000e0 	.word	0x004000e0
 80065f0:	a3200008 	.word	0xa3200008

080065f4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006612:	f023 0303 	bic.w	r3, r3, #3
 8006616:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800662c:	4313      	orrs	r3, r2
 800662e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d107      	bne.n	8006646 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800663c:	461a      	mov	r2, r3
 800663e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006642:	6053      	str	r3, [r2, #4]
 8006644:	e00c      	b.n	8006660 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d107      	bne.n	800665c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006652:	461a      	mov	r2, r3
 8006654:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006658:	6053      	str	r3, [r2, #4]
 800665a:	e001      	b.n	8006660 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800668e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800669c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800669e:	2064      	movs	r0, #100	@ 0x64
 80066a0:	f7fa fc9e 	bl	8000fe0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066b0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80066b2:	200a      	movs	r0, #10
 80066b4:	f7fa fc94 	bl	8000fe0 <HAL_Delay>

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	460b      	mov	r3, r1
 80066cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80066e6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d109      	bne.n	8006706 <USB_DriveVbus+0x44>
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d106      	bne.n	8006706 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006700:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006704:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800670c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006710:	d109      	bne.n	8006726 <USB_DriveVbus+0x64>
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d106      	bne.n	8006726 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006720:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006724:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	0c5b      	lsrs	r3, r3, #17
 8006752:	f003 0303 	and.w	r3, r3, #3
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	b29b      	uxth	r3, r3
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	4608      	mov	r0, r1
 800678e:	4611      	mov	r1, r2
 8006790:	461a      	mov	r2, r3
 8006792:	4603      	mov	r3, r0
 8006794:	70fb      	strb	r3, [r7, #3]
 8006796:	460b      	mov	r3, r1
 8006798:	70bb      	strb	r3, [r7, #2]
 800679a:	4613      	mov	r3, r2
 800679c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b2:	461a      	mov	r2, r3
 80067b4:	f04f 33ff 	mov.w	r3, #4294967295
 80067b8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80067ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d87c      	bhi.n	80068bc <USB_HC_Init+0x138>
 80067c2:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <USB_HC_Init+0x44>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	0800687f 	.word	0x0800687f
 80067d0:	080067d9 	.word	0x080067d9
 80067d4:	08006841 	.word	0x08006841
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e4:	461a      	mov	r2, r3
 80067e6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80067ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80067ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	da10      	bge.n	8006816 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	78fa      	ldrb	r2, [r7, #3]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	440a      	add	r2, r1
 800680a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800680e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006812:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006814:	e055      	b.n	80068c2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a6f      	ldr	r2, [pc, #444]	@ (80069d8 <USB_HC_Init+0x254>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d151      	bne.n	80068c2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	4413      	add	r3, r2
 8006826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	78fa      	ldrb	r2, [r7, #3]
 800682e:	0151      	lsls	r1, r2, #5
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	440a      	add	r2, r1
 8006834:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006838:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800683c:	60d3      	str	r3, [r2, #12]
      break;
 800683e:	e040      	b.n	80068c2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	4413      	add	r3, r2
 8006848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800684c:	461a      	mov	r2, r3
 800684e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006852:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006854:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006858:	2b00      	cmp	r3, #0
 800685a:	da34      	bge.n	80068c6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	4413      	add	r3, r2
 8006864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	78fa      	ldrb	r2, [r7, #3]
 800686c:	0151      	lsls	r1, r2, #5
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	440a      	add	r2, r1
 8006872:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800687a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800687c:	e023      	b.n	80068c6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	4413      	add	r3, r2
 8006886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800688a:	461a      	mov	r2, r3
 800688c:	f240 2325 	movw	r3, #549	@ 0x225
 8006890:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006892:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006896:	2b00      	cmp	r3, #0
 8006898:	da17      	bge.n	80068ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	78fa      	ldrb	r2, [r7, #3]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068b4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80068b8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80068ba:	e006      	b.n	80068ca <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	77fb      	strb	r3, [r7, #31]
      break;
 80068c0:	e004      	b.n	80068cc <USB_HC_Init+0x148>
      break;
 80068c2:	bf00      	nop
 80068c4:	e002      	b.n	80068cc <USB_HC_Init+0x148>
      break;
 80068c6:	bf00      	nop
 80068c8:	e000      	b.n	80068cc <USB_HC_Init+0x148>
      break;
 80068ca:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d8:	461a      	mov	r2, r3
 80068da:	2300      	movs	r3, #0
 80068dc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	78fa      	ldrb	r2, [r7, #3]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068f8:	f043 0302 	orr.w	r3, r3, #2
 80068fc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006904:	699a      	ldr	r2, [r3, #24]
 8006906:	78fb      	ldrb	r3, [r7, #3]
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	2101      	movs	r1, #1
 800690e:	fa01 f303 	lsl.w	r3, r1, r3
 8006912:	6939      	ldr	r1, [r7, #16]
 8006914:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006918:	4313      	orrs	r3, r2
 800691a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006928:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800692c:	2b00      	cmp	r3, #0
 800692e:	da03      	bge.n	8006938 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006930:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	e001      	b.n	800693c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff fef9 	bl	8006734 <USB_GetHostSpeed>
 8006942:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006944:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006948:	2b02      	cmp	r3, #2
 800694a:	d106      	bne.n	800695a <USB_HC_Init+0x1d6>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d003      	beq.n	800695a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006952:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	e001      	b.n	800695e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800695e:	787b      	ldrb	r3, [r7, #1]
 8006960:	059b      	lsls	r3, r3, #22
 8006962:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006966:	78bb      	ldrb	r3, [r7, #2]
 8006968:	02db      	lsls	r3, r3, #11
 800696a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800696e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006970:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006974:	049b      	lsls	r3, r3, #18
 8006976:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800697a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800697c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800697e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006982:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	431a      	orrs	r2, r3
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800698c:	78fa      	ldrb	r2, [r7, #3]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	440a      	add	r2, r1
 8006994:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006998:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800699c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800699e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d003      	beq.n	80069ae <USB_HC_Init+0x22a>
 80069a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d10f      	bne.n	80069ce <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	78fa      	ldrb	r2, [r7, #3]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069cc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80069ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3720      	adds	r7, #32
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40040000 	.word	0x40040000

080069dc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08c      	sub	sp, #48	@ 0x30
 80069e0:	af02      	add	r7, sp, #8
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	4613      	mov	r3, r2
 80069e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80069f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069f8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4a5d      	ldr	r2, [pc, #372]	@ (8006b74 <USB_HC_StartXfer+0x198>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d12f      	bne.n	8006a62 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d11c      	bne.n	8006a42 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	7c9b      	ldrb	r3, [r3, #18]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <USB_HC_StartXfer+0x3c>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	7c9b      	ldrb	r3, [r3, #18]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d124      	bne.n	8006a62 <USB_HC_StartXfer+0x86>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	799b      	ldrb	r3, [r3, #6]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d120      	bne.n	8006a62 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	6a3a      	ldr	r2, [r7, #32]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3e:	60d3      	str	r3, [r2, #12]
 8006a40:	e00f      	b.n	8006a62 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	791b      	ldrb	r3, [r3, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <USB_HC_StartXfer+0x86>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	795b      	ldrb	r3, [r3, #5]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d107      	bne.n	8006a62 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	785b      	ldrb	r3, [r3, #1]
 8006a56:	4619      	mov	r1, r3
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 fb6b 	bl	8007134 <USB_DoPing>
        return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e232      	b.n	8006ec8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	799b      	ldrb	r3, [r3, #6]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d158      	bne.n	8006b1c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	78db      	ldrb	r3, [r3, #3]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d007      	beq.n	8006a86 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	8a92      	ldrh	r2, [r2, #20]
 8006a7c:	fb03 f202 	mul.w	r2, r3, r2
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	61da      	str	r2, [r3, #28]
 8006a84:	e07c      	b.n	8006b80 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	7c9b      	ldrb	r3, [r3, #18]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d130      	bne.n	8006af0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	2bbc      	cmp	r3, #188	@ 0xbc
 8006a94:	d918      	bls.n	8006ac8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	8a9b      	ldrh	r3, [r3, #20]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	69da      	ldr	r2, [r3, #28]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d003      	beq.n	8006ab8 <USB_HC_StartXfer+0xdc>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d103      	bne.n	8006ac0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2202      	movs	r2, #2
 8006abc:	60da      	str	r2, [r3, #12]
 8006abe:	e05f      	b.n	8006b80 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	60da      	str	r2, [r3, #12]
 8006ac6:	e05b      	b.n	8006b80 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	6a1a      	ldr	r2, [r3, #32]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d007      	beq.n	8006ae8 <USB_HC_StartXfer+0x10c>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d003      	beq.n	8006ae8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	60da      	str	r2, [r3, #12]
 8006ae6:	e04b      	b.n	8006b80 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2203      	movs	r2, #3
 8006aec:	60da      	str	r2, [r3, #12]
 8006aee:	e047      	b.n	8006b80 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d10d      	bne.n	8006b12 <USB_HC_StartXfer+0x136>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	8a92      	ldrh	r2, [r2, #20]
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d907      	bls.n	8006b12 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	8a92      	ldrh	r2, [r2, #20]
 8006b08:	fb03 f202 	mul.w	r2, r3, r2
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	61da      	str	r2, [r3, #28]
 8006b10:	e036      	b.n	8006b80 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	6a1a      	ldr	r2, [r3, #32]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	61da      	str	r2, [r3, #28]
 8006b1a:	e031      	b.n	8006b80 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d018      	beq.n	8006b56 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	8a92      	ldrh	r2, [r2, #20]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	8a92      	ldrh	r2, [r2, #20]
 8006b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b38:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006b3a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006b3c:	8b7b      	ldrh	r3, [r7, #26]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d90b      	bls.n	8006b5a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006b42:	8b7b      	ldrh	r3, [r7, #26]
 8006b44:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	8a92      	ldrh	r2, [r2, #20]
 8006b4c:	fb03 f202 	mul.w	r2, r3, r2
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	61da      	str	r2, [r3, #28]
 8006b54:	e001      	b.n	8006b5a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006b56:	2301      	movs	r3, #1
 8006b58:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	78db      	ldrb	r3, [r3, #3]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	8a92      	ldrh	r2, [r2, #20]
 8006b68:	fb03 f202 	mul.w	r2, r3, r2
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	61da      	str	r2, [r3, #28]
 8006b70:	e006      	b.n	8006b80 <USB_HC_StartXfer+0x1a4>
 8006b72:	bf00      	nop
 8006b74:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	6a1a      	ldr	r2, [r3, #32]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b8a:	04d9      	lsls	r1, r3, #19
 8006b8c:	4ba3      	ldr	r3, [pc, #652]	@ (8006e1c <USB_HC_StartXfer+0x440>)
 8006b8e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b90:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	7d9b      	ldrb	r3, [r3, #22]
 8006b96:	075b      	lsls	r3, r3, #29
 8006b98:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b9c:	69f9      	ldr	r1, [r7, #28]
 8006b9e:	0148      	lsls	r0, r1, #5
 8006ba0:	6a39      	ldr	r1, [r7, #32]
 8006ba2:	4401      	add	r1, r0
 8006ba4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ba8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006baa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d009      	beq.n	8006bc6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6999      	ldr	r1, [r3, #24]
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bc2:	460a      	mov	r2, r1
 8006bc4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bf0c      	ite	eq
 8006bd6:	2301      	moveq	r3, #1
 8006bd8:	2300      	movne	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69fa      	ldr	r2, [r7, #28]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	6a3a      	ldr	r2, [r7, #32]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bf8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bfc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	7e7b      	ldrb	r3, [r7, #25]
 8006c0e:	075b      	lsls	r3, r3, #29
 8006c10:	69f9      	ldr	r1, [r7, #28]
 8006c12:	0148      	lsls	r0, r1, #5
 8006c14:	6a39      	ldr	r1, [r7, #32]
 8006c16:	4401      	add	r1, r0
 8006c18:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	799b      	ldrb	r3, [r3, #6]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	f040 80c3 	bne.w	8006db0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	7c5b      	ldrb	r3, [r3, #17]
 8006c2e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c34:	4313      	orrs	r3, r2
 8006c36:	69fa      	ldr	r2, [r7, #28]
 8006c38:	0151      	lsls	r1, r2, #5
 8006c3a:	6a3a      	ldr	r2, [r7, #32]
 8006c3c:	440a      	add	r2, r1
 8006c3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006c42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c46:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	69fa      	ldr	r2, [r7, #28]
 8006c58:	0151      	lsls	r1, r2, #5
 8006c5a:	6a3a      	ldr	r2, [r7, #32]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c62:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006c66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	79db      	ldrb	r3, [r3, #7]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d123      	bne.n	8006cb8 <USB_HC_StartXfer+0x2dc>
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	78db      	ldrb	r3, [r3, #3]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d11f      	bne.n	8006cb8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	0151      	lsls	r1, r2, #5
 8006c8a:	6a3a      	ldr	r2, [r7, #32]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c96:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	0151      	lsls	r1, r2, #5
 8006caa:	6a3a      	ldr	r2, [r7, #32]
 8006cac:	440a      	add	r2, r1
 8006cae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cb6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	7c9b      	ldrb	r3, [r3, #18]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d003      	beq.n	8006cc8 <USB_HC_StartXfer+0x2ec>
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	7c9b      	ldrb	r3, [r3, #18]
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d117      	bne.n	8006cf8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d113      	bne.n	8006cf8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	78db      	ldrb	r3, [r3, #3]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d10f      	bne.n	8006cf8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	6a3a      	ldr	r2, [r7, #32]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cf6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	7c9b      	ldrb	r3, [r3, #18]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d162      	bne.n	8006dc6 <USB_HC_StartXfer+0x3ea>
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	78db      	ldrb	r3, [r3, #3]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d15e      	bne.n	8006dc6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d858      	bhi.n	8006dc4 <USB_HC_StartXfer+0x3e8>
 8006d12:	a201      	add	r2, pc, #4	@ (adr r2, 8006d18 <USB_HC_StartXfer+0x33c>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d29 	.word	0x08006d29
 8006d1c:	08006d4b 	.word	0x08006d4b
 8006d20:	08006d6d 	.word	0x08006d6d
 8006d24:	08006d8f 	.word	0x08006d8f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	6a3a      	ldr	r2, [r7, #32]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d46:	6053      	str	r3, [r2, #4]
          break;
 8006d48:	e03d      	b.n	8006dc6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	6a3a      	ldr	r2, [r7, #32]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d64:	f043 030e 	orr.w	r3, r3, #14
 8006d68:	6053      	str	r3, [r2, #4]
          break;
 8006d6a:	e02c      	b.n	8006dc6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	0151      	lsls	r1, r2, #5
 8006d7e:	6a3a      	ldr	r2, [r7, #32]
 8006d80:	440a      	add	r2, r1
 8006d82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d8a:	6053      	str	r3, [r2, #4]
          break;
 8006d8c:	e01b      	b.n	8006dc6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	69fa      	ldr	r2, [r7, #28]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	6a3a      	ldr	r2, [r7, #32]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006da8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dac:	6053      	str	r3, [r2, #4]
          break;
 8006dae:	e00a      	b.n	8006dc6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	6053      	str	r3, [r2, #4]
 8006dc2:	e000      	b.n	8006dc6 <USB_HC_StartXfer+0x3ea>
          break;
 8006dc4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ddc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	78db      	ldrb	r3, [r3, #3]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d004      	beq.n	8006df0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	e003      	b.n	8006df8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006df6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006dfe:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	e055      	b.n	8006ec8 <USB_HC_StartXfer+0x4ec>
 8006e1c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	78db      	ldrb	r3, [r3, #3]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d14e      	bne.n	8006ec6 <USB_HC_StartXfer+0x4ea>
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d04a      	beq.n	8006ec6 <USB_HC_StartXfer+0x4ea>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	79db      	ldrb	r3, [r3, #7]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d146      	bne.n	8006ec6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	7c9b      	ldrb	r3, [r3, #18]
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d831      	bhi.n	8006ea4 <USB_HC_StartXfer+0x4c8>
 8006e40:	a201      	add	r2, pc, #4	@ (adr r2, 8006e48 <USB_HC_StartXfer+0x46c>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e59 	.word	0x08006e59
 8006e4c:	08006e7d 	.word	0x08006e7d
 8006e50:	08006e59 	.word	0x08006e59
 8006e54:	08006e7d 	.word	0x08006e7d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	3303      	adds	r3, #3
 8006e5e:	089b      	lsrs	r3, r3, #2
 8006e60:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006e62:	8afa      	ldrh	r2, [r7, #22]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d91c      	bls.n	8006ea8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f043 0220 	orr.w	r2, r3, #32
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e7a:	e015      	b.n	8006ea8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	3303      	adds	r3, #3
 8006e82:	089b      	lsrs	r3, r3, #2
 8006e84:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006e86:	8afa      	ldrh	r2, [r7, #22]
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d90a      	bls.n	8006eac <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ea2:	e003      	b.n	8006eac <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006ea4:	bf00      	nop
 8006ea6:	e002      	b.n	8006eae <USB_HC_StartXfer+0x4d2>
        break;
 8006ea8:	bf00      	nop
 8006eaa:	e000      	b.n	8006eae <USB_HC_StartXfer+0x4d2>
        break;
 8006eac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6999      	ldr	r1, [r3, #24]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	785a      	ldrb	r2, [r3, #1]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	9000      	str	r0, [sp, #0]
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7ff f9c9 	bl	8006258 <USB_WritePacket>
  }

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3728      	adds	r7, #40	@ 0x28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	b29b      	uxth	r3, r3
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b089      	sub	sp, #36	@ 0x24
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	460b      	mov	r3, r1
 8006efc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	0c9b      	lsrs	r3, r3, #18
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	0fdb      	lsrs	r3, r3, #31
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	0fdb      	lsrs	r3, r3, #31
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 0320 	and.w	r3, r3, #32
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d10d      	bne.n	8006f74 <USB_HC_Halt+0x82>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <USB_HC_Halt+0x82>
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d002      	beq.n	8006f70 <USB_HC_Halt+0x7e>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d101      	bne.n	8006f74 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	e0d8      	b.n	8007126 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <USB_HC_Halt+0x8e>
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d173      	bne.n	8007068 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f9e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f003 0320 	and.w	r3, r3, #32
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d14a      	bne.n	8007042 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d133      	bne.n	8007020 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	0151      	lsls	r1, r2, #5
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	440a      	add	r2, r1
 8006fce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fd6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	69fa      	ldr	r2, [r7, #28]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ff2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ff6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007004:	d82e      	bhi.n	8007064 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	4413      	add	r3, r2
 800700e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007018:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800701c:	d0ec      	beq.n	8006ff8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800701e:	e081      	b.n	8007124 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	4413      	add	r3, r2
 8007028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	0151      	lsls	r1, r2, #5
 8007032:	69fa      	ldr	r2, [r7, #28]
 8007034:	440a      	add	r2, r1
 8007036:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800703a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800703e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007040:	e070      	b.n	8007124 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	0151      	lsls	r1, r2, #5
 8007054:	69fa      	ldr	r2, [r7, #28]
 8007056:	440a      	add	r2, r1
 8007058:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800705c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007060:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007062:	e05f      	b.n	8007124 <USB_HC_Halt+0x232>
            break;
 8007064:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007066:	e05d      	b.n	8007124 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	440a      	add	r2, r1
 800707e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007082:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007086:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d133      	bne.n	8007100 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	0151      	lsls	r1, r2, #5
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	440a      	add	r2, r1
 80070ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070d6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	3301      	adds	r3, #1
 80070dc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070e4:	d81d      	bhi.n	8007122 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070fc:	d0ec      	beq.n	80070d8 <USB_HC_Halt+0x1e6>
 80070fe:	e011      	b.n	8007124 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	4413      	add	r3, r2
 8007108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	440a      	add	r2, r1
 8007116:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800711a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	e000      	b.n	8007124 <USB_HC_Halt+0x232>
          break;
 8007122:	bf00      	nop
    }
  }

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3724      	adds	r7, #36	@ 0x24
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
	...

08007134 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007148:	2301      	movs	r3, #1
 800714a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	04da      	lsls	r2, r3, #19
 8007150:	4b15      	ldr	r3, [pc, #84]	@ (80071a8 <USB_DoPing+0x74>)
 8007152:	4013      	ands	r3, r2
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	440a      	add	r2, r1
 800715c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007160:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007164:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	4413      	add	r3, r2
 800716e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800717c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007184:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	4413      	add	r3, r2
 800718e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007192:	461a      	mov	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	1ff80000 	.word	0x1ff80000

080071ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7fe ff8c 	bl	80060de <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071c6:	2110      	movs	r1, #16
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7fe ffe5 	bl	8006198 <USB_FlushTxFifo>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff f80f 	bl	80061fc <USB_FlushRxFifo>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80071e8:	2300      	movs	r3, #0
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	e01f      	b.n	800722e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007204:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800720c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007214:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	4413      	add	r3, r2
 800721e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007222:	461a      	mov	r2, r3
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	3301      	adds	r3, #1
 800722c:	61bb      	str	r3, [r7, #24]
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	2b0f      	cmp	r3, #15
 8007232:	d9dc      	bls.n	80071ee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007234:	2300      	movs	r3, #0
 8007236:	61bb      	str	r3, [r7, #24]
 8007238:	e034      	b.n	80072a4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	4413      	add	r3, r2
 8007242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007250:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007258:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007260:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	4413      	add	r3, r2
 800726a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800726e:	461a      	mov	r2, r3
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007280:	d80c      	bhi.n	800729c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	4413      	add	r3, r2
 800728a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007294:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007298:	d0ec      	beq.n	8007274 <USB_StopHost+0xc8>
 800729a:	e000      	b.n	800729e <USB_StopHost+0xf2>
        break;
 800729c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	3301      	adds	r3, #1
 80072a2:	61bb      	str	r3, [r7, #24]
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b0f      	cmp	r3, #15
 80072a8:	d9c7      	bls.n	800723a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072b0:	461a      	mov	r2, r3
 80072b2:	f04f 33ff 	mov.w	r3, #4294967295
 80072b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f04f 32ff 	mov.w	r2, #4294967295
 80072be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7fe fefb 	bl	80060bc <USB_EnableGlobalInt>

  return ret;
 80072c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80072d0:	b590      	push	{r4, r7, lr}
 80072d2:	b089      	sub	sp, #36	@ 0x24
 80072d4:	af04      	add	r7, sp, #16
 80072d6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80072d8:	2301      	movs	r3, #1
 80072da:	2202      	movs	r2, #2
 80072dc:	2102      	movs	r1, #2
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fc85 	bl	8007bee <USBH_FindInterface>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	2bff      	cmp	r3, #255	@ 0xff
 80072ec:	d002      	beq.n	80072f4 <USBH_CDC_InterfaceInit+0x24>
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d901      	bls.n	80072f8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80072f4:	2302      	movs	r3, #2
 80072f6:	e13d      	b.n	8007574 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fc5a 	bl	8007bb6 <USBH_SelectInterface>
 8007302:	4603      	mov	r3, r0
 8007304:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800730c:	2302      	movs	r3, #2
 800730e:	e131      	b.n	8007574 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007316:	2050      	movs	r0, #80	@ 0x50
 8007318:	f002 fb64 	bl	80099e4 <malloc>
 800731c:	4603      	mov	r3, r0
 800731e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007330:	2302      	movs	r3, #2
 8007332:	e11f      	b.n	8007574 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007334:	2250      	movs	r2, #80	@ 0x50
 8007336:	2100      	movs	r1, #0
 8007338:	68b8      	ldr	r0, [r7, #8]
 800733a:	f002 fc11 	bl	8009b60 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	211a      	movs	r1, #26
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	4413      	add	r3, r2
 800734a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b25b      	sxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	da15      	bge.n	8007382 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	211a      	movs	r1, #26
 800735c:	fb01 f303 	mul.w	r3, r1, r3
 8007360:	4413      	add	r3, r2
 8007362:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007366:	781a      	ldrb	r2, [r3, #0]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	211a      	movs	r1, #26
 8007372:	fb01 f303 	mul.w	r3, r1, r3
 8007376:	4413      	add	r3, r2
 8007378:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800737c:	881a      	ldrh	r2, [r3, #0]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 ffbe 	bl	800930a <USBH_AllocPipe>
 800738e:	4603      	mov	r3, r0
 8007390:	461a      	mov	r2, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	7819      	ldrb	r1, [r3, #0]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	7858      	ldrb	r0, [r3, #1]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	8952      	ldrh	r2, [r2, #10]
 80073ae:	9202      	str	r2, [sp, #8]
 80073b0:	2203      	movs	r2, #3
 80073b2:	9201      	str	r2, [sp, #4]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	4623      	mov	r3, r4
 80073b8:	4602      	mov	r2, r0
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 ff76 	bl	80092ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2200      	movs	r2, #0
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f002 fa85 	bl	80098d8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80073ce:	2300      	movs	r3, #0
 80073d0:	2200      	movs	r2, #0
 80073d2:	210a      	movs	r1, #10
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fc0a 	bl	8007bee <USBH_FindInterface>
 80073da:	4603      	mov	r3, r0
 80073dc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	2bff      	cmp	r3, #255	@ 0xff
 80073e2:	d002      	beq.n	80073ea <USBH_CDC_InterfaceInit+0x11a>
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d901      	bls.n	80073ee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073ea:	2302      	movs	r3, #2
 80073ec:	e0c2      	b.n	8007574 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	211a      	movs	r1, #26
 80073f4:	fb01 f303 	mul.w	r3, r1, r3
 80073f8:	4413      	add	r3, r2
 80073fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	b25b      	sxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	da16      	bge.n	8007434 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	211a      	movs	r1, #26
 800740c:	fb01 f303 	mul.w	r3, r1, r3
 8007410:	4413      	add	r3, r2
 8007412:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007416:	781a      	ldrb	r2, [r3, #0]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	211a      	movs	r1, #26
 8007422:	fb01 f303 	mul.w	r3, r1, r3
 8007426:	4413      	add	r3, r2
 8007428:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	835a      	strh	r2, [r3, #26]
 8007432:	e015      	b.n	8007460 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	211a      	movs	r1, #26
 800743a:	fb01 f303 	mul.w	r3, r1, r3
 800743e:	4413      	add	r3, r2
 8007440:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	211a      	movs	r1, #26
 8007450:	fb01 f303 	mul.w	r3, r1, r3
 8007454:	4413      	add	r3, r2
 8007456:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800745a:	881a      	ldrh	r2, [r3, #0]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	211a      	movs	r1, #26
 8007466:	fb01 f303 	mul.w	r3, r1, r3
 800746a:	4413      	add	r3, r2
 800746c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	b25b      	sxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	da16      	bge.n	80074a6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	211a      	movs	r1, #26
 800747e:	fb01 f303 	mul.w	r3, r1, r3
 8007482:	4413      	add	r3, r2
 8007484:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007488:	781a      	ldrb	r2, [r3, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	211a      	movs	r1, #26
 8007494:	fb01 f303 	mul.w	r3, r1, r3
 8007498:	4413      	add	r3, r2
 800749a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800749e:	881a      	ldrh	r2, [r3, #0]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	835a      	strh	r2, [r3, #26]
 80074a4:	e015      	b.n	80074d2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	211a      	movs	r1, #26
 80074ac:	fb01 f303 	mul.w	r3, r1, r3
 80074b0:	4413      	add	r3, r2
 80074b2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074b6:	781a      	ldrb	r2, [r3, #0]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	211a      	movs	r1, #26
 80074c2:	fb01 f303 	mul.w	r3, r1, r3
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80074cc:	881a      	ldrh	r2, [r3, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	7b9b      	ldrb	r3, [r3, #14]
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 ff16 	bl	800930a <USBH_AllocPipe>
 80074de:	4603      	mov	r3, r0
 80074e0:	461a      	mov	r2, r3
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	7bdb      	ldrb	r3, [r3, #15]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 ff0c 	bl	800930a <USBH_AllocPipe>
 80074f2:	4603      	mov	r3, r0
 80074f4:	461a      	mov	r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	7b59      	ldrb	r1, [r3, #13]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	7b98      	ldrb	r0, [r3, #14]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	8b12      	ldrh	r2, [r2, #24]
 8007512:	9202      	str	r2, [sp, #8]
 8007514:	2202      	movs	r2, #2
 8007516:	9201      	str	r2, [sp, #4]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	4623      	mov	r3, r4
 800751c:	4602      	mov	r2, r0
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 fec4 	bl	80092ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	7b19      	ldrb	r1, [r3, #12]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	7bd8      	ldrb	r0, [r3, #15]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	8b52      	ldrh	r2, [r2, #26]
 800753c:	9202      	str	r2, [sp, #8]
 800753e:	2202      	movs	r2, #2
 8007540:	9201      	str	r2, [sp, #4]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	4623      	mov	r3, r4
 8007546:	4602      	mov	r2, r0
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f001 feaf 	bl	80092ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	7b5b      	ldrb	r3, [r3, #13]
 800755a:	2200      	movs	r2, #0
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f002 f9ba 	bl	80098d8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	7b1b      	ldrb	r3, [r3, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f002 f9b3 	bl	80098d8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	bd90      	pop	{r4, r7, pc}

0800757c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00e      	beq.n	80075b4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fea4 	bl	80092ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 fecf 	bl	800934c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	7b1b      	ldrb	r3, [r3, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00e      	beq.n	80075da <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	7b1b      	ldrb	r3, [r3, #12]
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fe91 	bl	80092ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	7b1b      	ldrb	r3, [r3, #12]
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 febc 	bl	800934c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	7b5b      	ldrb	r3, [r3, #13]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00e      	beq.n	8007600 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	7b5b      	ldrb	r3, [r3, #13]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fe7e 	bl	80092ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	7b5b      	ldrb	r3, [r3, #13]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fea9 	bl	800934c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	4618      	mov	r0, r3
 8007616:	f002 f9ed 	bl	80099f4 <free>
    phost->pActiveClass->pData = 0U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007620:	2200      	movs	r2, #0
 8007622:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3340      	adds	r3, #64	@ 0x40
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f8b1 	bl	80077ae <GetLineCoding>
 800764c:	4603      	mov	r3, r0
 800764e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007650:	7afb      	ldrb	r3, [r7, #11]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d105      	bne.n	8007662 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800765c:	2102      	movs	r1, #2
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007662:	7afb      	ldrb	r3, [r7, #11]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007674:	2301      	movs	r3, #1
 8007676:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800768c:	2b04      	cmp	r3, #4
 800768e:	d877      	bhi.n	8007780 <USBH_CDC_Process+0x114>
 8007690:	a201      	add	r2, pc, #4	@ (adr r2, 8007698 <USBH_CDC_Process+0x2c>)
 8007692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007696:	bf00      	nop
 8007698:	080076ad 	.word	0x080076ad
 800769c:	080076b3 	.word	0x080076b3
 80076a0:	080076e3 	.word	0x080076e3
 80076a4:	08007757 	.word	0x08007757
 80076a8:	08007765 	.word	0x08007765
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73fb      	strb	r3, [r7, #15]
      break;
 80076b0:	e06d      	b.n	800778e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f897 	bl	80077ec <SetLineCoding>
 80076be:	4603      	mov	r3, r0
 80076c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80076d0:	e058      	b.n	8007784 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d055      	beq.n	8007784 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2204      	movs	r2, #4
 80076dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80076e0:	e050      	b.n	8007784 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	3340      	adds	r3, #64	@ 0x40
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f860 	bl	80077ae <GetLineCoding>
 80076ee:	4603      	mov	r3, r0
 80076f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076f2:	7bbb      	ldrb	r3, [r7, #14]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d126      	bne.n	8007746 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800770a:	791b      	ldrb	r3, [r3, #4]
 800770c:	429a      	cmp	r2, r3
 800770e:	d13b      	bne.n	8007788 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800771a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800771c:	429a      	cmp	r2, r3
 800771e:	d133      	bne.n	8007788 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800772a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800772c:	429a      	cmp	r2, r3
 800772e:	d12b      	bne.n	8007788 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007738:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800773a:	429a      	cmp	r2, r3
 800773c:	d124      	bne.n	8007788 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f958 	bl	80079f4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007744:	e020      	b.n	8007788 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d01d      	beq.n	8007788 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2204      	movs	r2, #4
 8007750:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007754:	e018      	b.n	8007788 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f867 	bl	800782a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f8da 	bl	8007916 <CDC_ProcessReception>
      break;
 8007762:	e014      	b.n	800778e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007764:	2100      	movs	r1, #0
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 f81a 	bl	80087a0 <USBH_ClrFeature>
 800776c:	4603      	mov	r3, r0
 800776e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10a      	bne.n	800778c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800777e:	e005      	b.n	800778c <USBH_CDC_Process+0x120>

    default:
      break;
 8007780:	bf00      	nop
 8007782:	e004      	b.n	800778e <USBH_CDC_Process+0x122>
      break;
 8007784:	bf00      	nop
 8007786:	e002      	b.n	800778e <USBH_CDC_Process+0x122>
      break;
 8007788:	bf00      	nop
 800778a:	e000      	b.n	800778e <USBH_CDC_Process+0x122>
      break;
 800778c:	bf00      	nop

  }

  return status;
 800778e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b082      	sub	sp, #8
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	22a1      	movs	r2, #161	@ 0xa1
 80077bc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2221      	movs	r2, #33	@ 0x21
 80077c2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2207      	movs	r2, #7
 80077d4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2207      	movs	r2, #7
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 fb14 	bl	8008e0a <USBH_CtlReq>
 80077e2:	4603      	mov	r3, r0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2221      	movs	r2, #33	@ 0x21
 80077fa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2207      	movs	r2, #7
 8007812:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2207      	movs	r2, #7
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 faf5 	bl	8008e0a <USBH_CtlReq>
 8007820:	4603      	mov	r3, r0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b086      	sub	sp, #24
 800782e:	af02      	add	r7, sp, #8
 8007830:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800783c:	2300      	movs	r3, #0
 800783e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007846:	2b01      	cmp	r3, #1
 8007848:	d002      	beq.n	8007850 <CDC_ProcessTransmission+0x26>
 800784a:	2b02      	cmp	r3, #2
 800784c:	d023      	beq.n	8007896 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800784e:	e05e      	b.n	800790e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	8b12      	ldrh	r2, [r2, #24]
 8007858:	4293      	cmp	r3, r2
 800785a:	d90b      	bls.n	8007874 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	69d9      	ldr	r1, [r3, #28]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8b1a      	ldrh	r2, [r3, #24]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	7b5b      	ldrb	r3, [r3, #13]
 8007868:	2001      	movs	r0, #1
 800786a:	9000      	str	r0, [sp, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 fcda 	bl	8009226 <USBH_BulkSendData>
 8007872:	e00b      	b.n	800788c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	7b5b      	ldrb	r3, [r3, #13]
 8007882:	2001      	movs	r0, #1
 8007884:	9000      	str	r0, [sp, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 fccd 	bl	8009226 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007894:	e03b      	b.n	800790e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	7b5b      	ldrb	r3, [r3, #13]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 fff1 	bl	8009884 <USBH_LL_GetURBState>
 80078a2:	4603      	mov	r3, r0
 80078a4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80078a6:	7afb      	ldrb	r3, [r7, #11]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d128      	bne.n	80078fe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	8b12      	ldrh	r2, [r2, #24]
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d90e      	bls.n	80078d6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	8b12      	ldrh	r2, [r2, #24]
 80078c0:	1a9a      	subs	r2, r3, r2
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	8b12      	ldrh	r2, [r2, #24]
 80078ce:	441a      	add	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	61da      	str	r2, [r3, #28]
 80078d4:	e002      	b.n	80078dc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d004      	beq.n	80078ee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80078ec:	e00e      	b.n	800790c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f868 	bl	80079cc <USBH_CDC_TransmitCallback>
      break;
 80078fc:	e006      	b.n	800790c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80078fe:	7afb      	ldrb	r3, [r7, #11]
 8007900:	2b02      	cmp	r3, #2
 8007902:	d103      	bne.n	800790c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800790c:	bf00      	nop
  }
}
 800790e:	bf00      	nop
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007928:	2300      	movs	r3, #0
 800792a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007932:	2b03      	cmp	r3, #3
 8007934:	d002      	beq.n	800793c <CDC_ProcessReception+0x26>
 8007936:	2b04      	cmp	r3, #4
 8007938:	d00e      	beq.n	8007958 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800793a:	e043      	b.n	80079c4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	6a19      	ldr	r1, [r3, #32]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	8b5a      	ldrh	r2, [r3, #26]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	7b1b      	ldrb	r3, [r3, #12]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 fc91 	bl	8009270 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2204      	movs	r2, #4
 8007952:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007956:	e035      	b.n	80079c4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	7b1b      	ldrb	r3, [r3, #12]
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f001 ff90 	bl	8009884 <USBH_LL_GetURBState>
 8007964:	4603      	mov	r3, r0
 8007966:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007968:	7cfb      	ldrb	r3, [r7, #19]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d129      	bne.n	80079c2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	7b1b      	ldrb	r3, [r3, #12]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 fef3 	bl	8009760 <USBH_LL_GetLastXferSize>
 800797a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	429a      	cmp	r2, r3
 8007984:	d016      	beq.n	80079b4 <CDC_ProcessReception+0x9e>
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	8b5b      	ldrh	r3, [r3, #26]
 800798a:	461a      	mov	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4293      	cmp	r3, r2
 8007990:	d110      	bne.n	80079b4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	1ad2      	subs	r2, r2, r3
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	6a1a      	ldr	r2, [r3, #32]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	441a      	add	r2, r3
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2203      	movs	r2, #3
 80079ae:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80079b2:	e006      	b.n	80079c2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f80f 	bl	80079e0 <USBH_CDC_ReceiveCallback>
      break;
 80079c2:	bf00      	nop
  }
}
 80079c4:	bf00      	nop
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	4613      	mov	r3, r2
 8007a14:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e029      	b.n	8007a74 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	79fa      	ldrb	r2, [r7, #7]
 8007a24:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f81f 	bl	8007a7c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f001 fdc3 	bl	80095f8 <USBH_LL_Init>

  return USBH_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	e009      	b.n	8007aa2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	33e0      	adds	r3, #224	@ 0xe0
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	2200      	movs	r2, #0
 8007a9a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b0f      	cmp	r3, #15
 8007aa6:	d9f2      	bls.n	8007a8e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	e009      	b.n	8007ac2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007ab8:	2200      	movs	r2, #0
 8007aba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ac8:	d3f1      	bcc.n	8007aae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2240      	movs	r2, #64	@ 0x40
 8007aee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	331c      	adds	r3, #28
 8007b1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b1e:	2100      	movs	r1, #0
 8007b20:	4618      	mov	r0, r3
 8007b22:	f002 f81d 	bl	8009b60 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b30:	2100      	movs	r1, #0
 8007b32:	4618      	mov	r0, r3
 8007b34:	f002 f814 	bl	8009b60 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007b3e:	2212      	movs	r2, #18
 8007b40:	2100      	movs	r1, #0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f002 f80c 	bl	8009b60 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007b4e:	223e      	movs	r2, #62	@ 0x3e
 8007b50:	2100      	movs	r1, #0
 8007b52:	4618      	mov	r0, r3
 8007b54:	f002 f804 	bl	8009b60 <memset>

  return USBH_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b085      	sub	sp, #20
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d016      	beq.n	8007ba4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10e      	bne.n	8007b9e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b86:	1c59      	adds	r1, r3, #1
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	33de      	adds	r3, #222	@ 0xde
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]
 8007b9c:	e004      	b.n	8007ba8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	73fb      	strb	r3, [r7, #15]
 8007ba2:	e001      	b.n	8007ba8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d204      	bcs.n	8007bdc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	78fa      	ldrb	r2, [r7, #3]
 8007bd6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007bda:	e001      	b.n	8007be0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b087      	sub	sp, #28
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	4608      	mov	r0, r1
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	70fb      	strb	r3, [r7, #3]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70bb      	strb	r3, [r7, #2]
 8007c04:	4613      	mov	r3, r2
 8007c06:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007c16:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c18:	e025      	b.n	8007c66 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	221a      	movs	r2, #26
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	3308      	adds	r3, #8
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	3302      	adds	r3, #2
 8007c2a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	795b      	ldrb	r3, [r3, #5]
 8007c30:	78fa      	ldrb	r2, [r7, #3]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d002      	beq.n	8007c3c <USBH_FindInterface+0x4e>
 8007c36:	78fb      	ldrb	r3, [r7, #3]
 8007c38:	2bff      	cmp	r3, #255	@ 0xff
 8007c3a:	d111      	bne.n	8007c60 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c40:	78ba      	ldrb	r2, [r7, #2]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d002      	beq.n	8007c4c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c46:	78bb      	ldrb	r3, [r7, #2]
 8007c48:	2bff      	cmp	r3, #255	@ 0xff
 8007c4a:	d109      	bne.n	8007c60 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c50:	787a      	ldrb	r2, [r7, #1]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d002      	beq.n	8007c5c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c56:	787b      	ldrb	r3, [r7, #1]
 8007c58:	2bff      	cmp	r3, #255	@ 0xff
 8007c5a:	d101      	bne.n	8007c60 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	e006      	b.n	8007c6e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	3301      	adds	r3, #1
 8007c64:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d9d6      	bls.n	8007c1a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007c6c:	23ff      	movs	r3, #255	@ 0xff
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fcf4 	bl	8009670 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007c88:	2101      	movs	r1, #1
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 fe0d 	bl	80098aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af04      	add	r7, sp, #16
 8007ca2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d102      	bne.n	8007cbe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2203      	movs	r2, #3
 8007cbc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b0b      	cmp	r3, #11
 8007cc6:	f200 81bb 	bhi.w	8008040 <USBH_Process+0x3a4>
 8007cca:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd0 <USBH_Process+0x34>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007d01 	.word	0x08007d01
 8007cd4:	08007d33 	.word	0x08007d33
 8007cd8:	08007d9b 	.word	0x08007d9b
 8007cdc:	08007fdb 	.word	0x08007fdb
 8007ce0:	08008041 	.word	0x08008041
 8007ce4:	08007e3b 	.word	0x08007e3b
 8007ce8:	08007f81 	.word	0x08007f81
 8007cec:	08007e71 	.word	0x08007e71
 8007cf0:	08007e91 	.word	0x08007e91
 8007cf4:	08007eaf 	.word	0x08007eaf
 8007cf8:	08007ef3 	.word	0x08007ef3
 8007cfc:	08007fc3 	.word	0x08007fc3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 819b 	beq.w	8008044 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007d14:	20c8      	movs	r0, #200	@ 0xc8
 8007d16:	f001 fe12 	bl	800993e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 fd05 	bl	800972a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d30:	e188      	b.n	8008044 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d107      	bne.n	8007d4c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d4a:	e18a      	b.n	8008062 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d56:	d914      	bls.n	8007d82 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007d5e:	3301      	adds	r3, #1
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d903      	bls.n	8007d7a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	220d      	movs	r2, #13
 8007d76:	701a      	strb	r2, [r3, #0]
      break;
 8007d78:	e173      	b.n	8008062 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
      break;
 8007d80:	e16f      	b.n	8008062 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d88:	f103 020a 	add.w	r2, r3, #10
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007d92:	200a      	movs	r0, #10
 8007d94:	f001 fdd3 	bl	800993e <USBH_Delay>
      break;
 8007d98:	e163      	b.n	8008062 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007daa:	2104      	movs	r1, #4
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007db0:	2064      	movs	r0, #100	@ 0x64
 8007db2:	f001 fdc4 	bl	800993e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 fc90 	bl	80096dc <USBH_LL_GetSpeed>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2205      	movs	r2, #5
 8007dca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007dcc:	2100      	movs	r1, #0
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 fa9b 	bl	800930a <USBH_AllocPipe>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007ddc:	2180      	movs	r1, #128	@ 0x80
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f001 fa93 	bl	800930a <USBH_AllocPipe>
 8007de4:	4603      	mov	r3, r0
 8007de6:	461a      	mov	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7919      	ldrb	r1, [r3, #4]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e00:	9202      	str	r2, [sp, #8]
 8007e02:	2200      	movs	r2, #0
 8007e04:	9201      	str	r2, [sp, #4]
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2280      	movs	r2, #128	@ 0x80
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 fa4d 	bl	80092ac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	7959      	ldrb	r1, [r3, #5]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e26:	9202      	str	r2, [sp, #8]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	9201      	str	r2, [sp, #4]
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2200      	movs	r2, #0
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 fa3a 	bl	80092ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e38:	e113      	b.n	8008062 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f916 	bl	800806c <USBH_HandleEnum>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f040 80fd 	bne.w	8008048 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d103      	bne.n	8007e68 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2208      	movs	r2, #8
 8007e64:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e66:	e0ef      	b.n	8008048 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2207      	movs	r2, #7
 8007e6c:	701a      	strb	r2, [r3, #0]
      break;
 8007e6e:	e0eb      	b.n	8008048 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 80e8 	beq.w	800804c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e82:	2101      	movs	r1, #1
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007e8e:	e0dd      	b.n	800804c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fc3a 	bl	8008712 <USBH_SetCfg>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f040 80d5 	bne.w	8008050 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2209      	movs	r2, #9
 8007eaa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007eac:	e0d0      	b.n	8008050 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d016      	beq.n	8007eea <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fc4a 	bl	8008758 <USBH_SetFeature>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d103      	bne.n	8007ed8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	220a      	movs	r2, #10
 8007ed4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ed6:	e0bd      	b.n	8008054 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	f040 80b9 	bne.w	8008054 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	220a      	movs	r2, #10
 8007ee6:	701a      	strb	r2, [r3, #0]
      break;
 8007ee8:	e0b4      	b.n	8008054 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	220a      	movs	r2, #10
 8007eee:	701a      	strb	r2, [r3, #0]
      break;
 8007ef0:	e0b0      	b.n	8008054 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 80ad 	beq.w	8008058 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]
 8007f0a:	e016      	b.n	8007f3a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007f0c:	7bfa      	ldrb	r2, [r7, #15]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	32de      	adds	r2, #222	@ 0xde
 8007f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f16:	791a      	ldrb	r2, [r3, #4]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d108      	bne.n	8007f34 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007f22:	7bfa      	ldrb	r2, [r7, #15]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	32de      	adds	r2, #222	@ 0xde
 8007f28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007f32:	e005      	b.n	8007f40 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	3301      	adds	r3, #1
 8007f38:	73fb      	strb	r3, [r7, #15]
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0e5      	beq.n	8007f0c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d016      	beq.n	8007f78 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	4798      	blx	r3
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d109      	bne.n	8007f70 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2206      	movs	r2, #6
 8007f60:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f68:	2103      	movs	r1, #3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f6e:	e073      	b.n	8008058 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	220d      	movs	r2, #13
 8007f74:	701a      	strb	r2, [r3, #0]
      break;
 8007f76:	e06f      	b.n	8008058 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	220d      	movs	r2, #13
 8007f7c:	701a      	strb	r2, [r3, #0]
      break;
 8007f7e:	e06b      	b.n	8008058 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d017      	beq.n	8007fba <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d103      	bne.n	8007faa <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	220b      	movs	r2, #11
 8007fa6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fa8:	e058      	b.n	800805c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d154      	bne.n	800805c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	220d      	movs	r2, #13
 8007fb6:	701a      	strb	r2, [r3, #0]
      break;
 8007fb8:	e050      	b.n	800805c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	220d      	movs	r2, #13
 8007fbe:	701a      	strb	r2, [r3, #0]
      break;
 8007fc0:	e04c      	b.n	800805c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d049      	beq.n	8008060 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	4798      	blx	r3
      }
      break;
 8007fd8:	e042      	b.n	8008060 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff fd4a 	bl	8007a7c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d005      	beq.n	800801c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008016:	2105      	movs	r1, #5
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b01      	cmp	r3, #1
 8008026:	d107      	bne.n	8008038 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff fe22 	bl	8007c7a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008036:	e014      	b.n	8008062 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 fb19 	bl	8009670 <USBH_LL_Start>
      break;
 800803e:	e010      	b.n	8008062 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008040:	bf00      	nop
 8008042:	e00e      	b.n	8008062 <USBH_Process+0x3c6>
      break;
 8008044:	bf00      	nop
 8008046:	e00c      	b.n	8008062 <USBH_Process+0x3c6>
      break;
 8008048:	bf00      	nop
 800804a:	e00a      	b.n	8008062 <USBH_Process+0x3c6>
    break;
 800804c:	bf00      	nop
 800804e:	e008      	b.n	8008062 <USBH_Process+0x3c6>
      break;
 8008050:	bf00      	nop
 8008052:	e006      	b.n	8008062 <USBH_Process+0x3c6>
      break;
 8008054:	bf00      	nop
 8008056:	e004      	b.n	8008062 <USBH_Process+0x3c6>
      break;
 8008058:	bf00      	nop
 800805a:	e002      	b.n	8008062 <USBH_Process+0x3c6>
      break;
 800805c:	bf00      	nop
 800805e:	e000      	b.n	8008062 <USBH_Process+0x3c6>
      break;
 8008060:	bf00      	nop
  }
  return USBH_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b088      	sub	sp, #32
 8008070:	af04      	add	r7, sp, #16
 8008072:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008074:	2301      	movs	r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008078:	2301      	movs	r3, #1
 800807a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	785b      	ldrb	r3, [r3, #1]
 8008080:	2b07      	cmp	r3, #7
 8008082:	f200 81bd 	bhi.w	8008400 <USBH_HandleEnum+0x394>
 8008086:	a201      	add	r2, pc, #4	@ (adr r2, 800808c <USBH_HandleEnum+0x20>)
 8008088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808c:	080080ad 	.word	0x080080ad
 8008090:	08008167 	.word	0x08008167
 8008094:	080081d1 	.word	0x080081d1
 8008098:	0800825b 	.word	0x0800825b
 800809c:	080082c5 	.word	0x080082c5
 80080a0:	08008335 	.word	0x08008335
 80080a4:	0800837b 	.word	0x0800837b
 80080a8:	080083c1 	.word	0x080083c1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80080ac:	2108      	movs	r1, #8
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fa4c 	bl	800854c <USBH_Get_DevDesc>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d12e      	bne.n	800811c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	7919      	ldrb	r1, [r3, #4]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80080e2:	9202      	str	r2, [sp, #8]
 80080e4:	2200      	movs	r2, #0
 80080e6:	9201      	str	r2, [sp, #4]
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	4603      	mov	r3, r0
 80080ec:	2280      	movs	r2, #128	@ 0x80
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 f8dc 	bl	80092ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	7959      	ldrb	r1, [r3, #5]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008108:	9202      	str	r2, [sp, #8]
 800810a:	2200      	movs	r2, #0
 800810c:	9201      	str	r2, [sp, #4]
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	4603      	mov	r3, r0
 8008112:	2200      	movs	r2, #0
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 f8c9 	bl	80092ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800811a:	e173      	b.n	8008404 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	2b03      	cmp	r3, #3
 8008120:	f040 8170 	bne.w	8008404 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800812a:	3301      	adds	r3, #1
 800812c:	b2da      	uxtb	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800813a:	2b03      	cmp	r3, #3
 800813c:	d903      	bls.n	8008146 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	220d      	movs	r2, #13
 8008142:	701a      	strb	r2, [r3, #0]
      break;
 8008144:	e15e      	b.n	8008404 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	795b      	ldrb	r3, [r3, #5]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 f8fd 	bl	800934c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	791b      	ldrb	r3, [r3, #4]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 f8f7 	bl	800934c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]
      break;
 8008164:	e14e      	b.n	8008404 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008166:	2112      	movs	r1, #18
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f9ef 	bl	800854c <USBH_Get_DevDesc>
 800816e:	4603      	mov	r3, r0
 8008170:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d103      	bne.n	8008180 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800817e:	e143      	b.n	8008408 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	2b03      	cmp	r3, #3
 8008184:	f040 8140 	bne.w	8008408 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800818e:	3301      	adds	r3, #1
 8008190:	b2da      	uxtb	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d903      	bls.n	80081aa <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	220d      	movs	r2, #13
 80081a6:	701a      	strb	r2, [r3, #0]
      break;
 80081a8:	e12e      	b.n	8008408 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	795b      	ldrb	r3, [r3, #5]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 f8cb 	bl	800934c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	791b      	ldrb	r3, [r3, #4]
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 f8c5 	bl	800934c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	701a      	strb	r2, [r3, #0]
      break;
 80081ce:	e11b      	b.n	8008408 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80081d0:	2101      	movs	r1, #1
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa79 	bl	80086ca <USBH_SetAddress>
 80081d8:	4603      	mov	r3, r0
 80081da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d130      	bne.n	8008244 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80081e2:	2002      	movs	r0, #2
 80081e4:	f001 fbab 	bl	800993e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2203      	movs	r2, #3
 80081f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	7919      	ldrb	r1, [r3, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800820a:	9202      	str	r2, [sp, #8]
 800820c:	2200      	movs	r2, #0
 800820e:	9201      	str	r2, [sp, #4]
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	4603      	mov	r3, r0
 8008214:	2280      	movs	r2, #128	@ 0x80
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f001 f848 	bl	80092ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	7959      	ldrb	r1, [r3, #5]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008230:	9202      	str	r2, [sp, #8]
 8008232:	2200      	movs	r2, #0
 8008234:	9201      	str	r2, [sp, #4]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	4603      	mov	r3, r0
 800823a:	2200      	movs	r2, #0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 f835 	bl	80092ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008242:	e0e3      	b.n	800840c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	2b03      	cmp	r3, #3
 8008248:	f040 80e0 	bne.w	800840c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	220d      	movs	r2, #13
 8008250:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	705a      	strb	r2, [r3, #1]
      break;
 8008258:	e0d8      	b.n	800840c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800825a:	2109      	movs	r1, #9
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f9a1 	bl	80085a4 <USBH_Get_CfgDesc>
 8008262:	4603      	mov	r3, r0
 8008264:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d103      	bne.n	8008274 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2204      	movs	r2, #4
 8008270:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008272:	e0cd      	b.n	8008410 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008274:	7bbb      	ldrb	r3, [r7, #14]
 8008276:	2b03      	cmp	r3, #3
 8008278:	f040 80ca 	bne.w	8008410 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008282:	3301      	adds	r3, #1
 8008284:	b2da      	uxtb	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008292:	2b03      	cmp	r3, #3
 8008294:	d903      	bls.n	800829e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	220d      	movs	r2, #13
 800829a:	701a      	strb	r2, [r3, #0]
      break;
 800829c:	e0b8      	b.n	8008410 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	795b      	ldrb	r3, [r3, #5]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 f851 	bl	800934c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	791b      	ldrb	r3, [r3, #4]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 f84b 	bl	800934c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	701a      	strb	r2, [r3, #0]
      break;
 80082c2:	e0a5      	b.n	8008410 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f969 	bl	80085a4 <USBH_Get_CfgDesc>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2205      	movs	r2, #5
 80082e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082e2:	e097      	b.n	8008414 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	f040 8094 	bne.w	8008414 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082f2:	3301      	adds	r3, #1
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008302:	2b03      	cmp	r3, #3
 8008304:	d903      	bls.n	800830e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	220d      	movs	r2, #13
 800830a:	701a      	strb	r2, [r3, #0]
      break;
 800830c:	e082      	b.n	8008414 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	795b      	ldrb	r3, [r3, #5]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 f819 	bl	800934c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	791b      	ldrb	r3, [r3, #4]
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 f813 	bl	800934c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	701a      	strb	r2, [r3, #0]
      break;
 8008332:	e06f      	b.n	8008414 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800833a:	2b00      	cmp	r3, #0
 800833c:	d019      	beq.n	8008372 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800834a:	23ff      	movs	r3, #255	@ 0xff
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f953 	bl	80085f8 <USBH_Get_StringDesc>
 8008352:	4603      	mov	r3, r0
 8008354:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008356:	7bbb      	ldrb	r3, [r7, #14]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d103      	bne.n	8008364 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2206      	movs	r2, #6
 8008360:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008362:	e059      	b.n	8008418 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b03      	cmp	r3, #3
 8008368:	d156      	bne.n	8008418 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2206      	movs	r2, #6
 800836e:	705a      	strb	r2, [r3, #1]
      break;
 8008370:	e052      	b.n	8008418 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2206      	movs	r2, #6
 8008376:	705a      	strb	r2, [r3, #1]
      break;
 8008378:	e04e      	b.n	8008418 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008380:	2b00      	cmp	r3, #0
 8008382:	d019      	beq.n	80083b8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008390:	23ff      	movs	r3, #255	@ 0xff
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f930 	bl	80085f8 <USBH_Get_StringDesc>
 8008398:	4603      	mov	r3, r0
 800839a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800839c:	7bbb      	ldrb	r3, [r7, #14]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d103      	bne.n	80083aa <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2207      	movs	r2, #7
 80083a6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80083a8:	e038      	b.n	800841c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d135      	bne.n	800841c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2207      	movs	r2, #7
 80083b4:	705a      	strb	r2, [r3, #1]
      break;
 80083b6:	e031      	b.n	800841c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2207      	movs	r2, #7
 80083bc:	705a      	strb	r2, [r3, #1]
      break;
 80083be:	e02d      	b.n	800841c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d017      	beq.n	80083fa <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80083d6:	23ff      	movs	r3, #255	@ 0xff
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f90d 	bl	80085f8 <USBH_Get_StringDesc>
 80083de:	4603      	mov	r3, r0
 80083e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80083ec:	e018      	b.n	8008420 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d115      	bne.n	8008420 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
      break;
 80083f8:	e012      	b.n	8008420 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
      break;
 80083fe:	e00f      	b.n	8008420 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008400:	bf00      	nop
 8008402:	e00e      	b.n	8008422 <USBH_HandleEnum+0x3b6>
      break;
 8008404:	bf00      	nop
 8008406:	e00c      	b.n	8008422 <USBH_HandleEnum+0x3b6>
      break;
 8008408:	bf00      	nop
 800840a:	e00a      	b.n	8008422 <USBH_HandleEnum+0x3b6>
      break;
 800840c:	bf00      	nop
 800840e:	e008      	b.n	8008422 <USBH_HandleEnum+0x3b6>
      break;
 8008410:	bf00      	nop
 8008412:	e006      	b.n	8008422 <USBH_HandleEnum+0x3b6>
      break;
 8008414:	bf00      	nop
 8008416:	e004      	b.n	8008422 <USBH_HandleEnum+0x3b6>
      break;
 8008418:	bf00      	nop
 800841a:	e002      	b.n	8008422 <USBH_HandleEnum+0x3b6>
      break;
 800841c:	bf00      	nop
 800841e:	e000      	b.n	8008422 <USBH_HandleEnum+0x3b6>
      break;
 8008420:	bf00      	nop
  }
  return Status;
 8008422:	7bfb      	ldrb	r3, [r7, #15]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f804 	bl	800846e <USBH_HandleSof>
}
 8008466:	bf00      	nop
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b0b      	cmp	r3, #11
 800847e:	d10a      	bne.n	8008496 <USBH_HandleSof+0x28>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	4798      	blx	r3
  }
}
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800849e:	b480      	push	{r7}
 80084a0:	b083      	sub	sp, #12
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80084ae:	bf00      	nop
}
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80084ca:	bf00      	nop
}
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f001 f8be 	bl	80096a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	791b      	ldrb	r3, [r3, #4]
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 ff0b 	bl	800934c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	795b      	ldrb	r3, [r3, #5]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 ff05 	bl	800934c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af02      	add	r7, sp, #8
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008558:	887b      	ldrh	r3, [r7, #2]
 800855a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800855e:	d901      	bls.n	8008564 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008560:	2303      	movs	r3, #3
 8008562:	e01b      	b.n	800859c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800856a:	887b      	ldrh	r3, [r7, #2]
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	4613      	mov	r3, r2
 8008570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008574:	2100      	movs	r1, #0
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f872 	bl	8008660 <USBH_GetDescriptor>
 800857c:	4603      	mov	r3, r0
 800857e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d109      	bne.n	800859a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800858c:	887a      	ldrh	r2, [r7, #2]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f929 	bl	80087e8 <USBH_ParseDevDesc>
 8008596:	4603      	mov	r3, r0
 8008598:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800859a:	7bfb      	ldrb	r3, [r7, #15]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af02      	add	r7, sp, #8
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	331c      	adds	r3, #28
 80085b4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80085b6:	887b      	ldrh	r3, [r7, #2]
 80085b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085bc:	d901      	bls.n	80085c2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80085be:	2303      	movs	r3, #3
 80085c0:	e016      	b.n	80085f0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80085c2:	887b      	ldrh	r3, [r7, #2]
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085cc:	2100      	movs	r1, #0
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f846 	bl	8008660 <USBH_GetDescriptor>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d107      	bne.n	80085ee <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80085de:	887b      	ldrh	r3, [r7, #2]
 80085e0:	461a      	mov	r2, r3
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f9af 	bl	8008948 <USBH_ParseCfgDesc>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b088      	sub	sp, #32
 80085fc:	af02      	add	r7, sp, #8
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	461a      	mov	r2, r3
 8008604:	460b      	mov	r3, r1
 8008606:	72fb      	strb	r3, [r7, #11]
 8008608:	4613      	mov	r3, r2
 800860a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800860c:	893b      	ldrh	r3, [r7, #8]
 800860e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008612:	d802      	bhi.n	800861a <USBH_Get_StringDesc+0x22>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800861a:	2303      	movs	r3, #3
 800861c:	e01c      	b.n	8008658 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800861e:	7afb      	ldrb	r3, [r7, #11]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008626:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800862e:	893b      	ldrh	r3, [r7, #8]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	460b      	mov	r3, r1
 8008634:	2100      	movs	r1, #0
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 f812 	bl	8008660 <USBH_GetDescriptor>
 800863c:	4603      	mov	r3, r0
 800863e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008640:	7dfb      	ldrb	r3, [r7, #23]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d107      	bne.n	8008656 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800864c:	893a      	ldrh	r2, [r7, #8]
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fb8d 	bl	8008d70 <USBH_ParseStringDesc>
  }

  return status;
 8008656:	7dfb      	ldrb	r3, [r7, #23]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	607b      	str	r3, [r7, #4]
 800866a:	460b      	mov	r3, r1
 800866c:	72fb      	strb	r3, [r7, #11]
 800866e:	4613      	mov	r3, r2
 8008670:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	789b      	ldrb	r3, [r3, #2]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d11c      	bne.n	80086b4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008680:	b2da      	uxtb	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2206      	movs	r2, #6
 800868a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	893a      	ldrh	r2, [r7, #8]
 8008690:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008692:	893b      	ldrh	r3, [r7, #8]
 8008694:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800869c:	d104      	bne.n	80086a8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f240 4209 	movw	r2, #1033	@ 0x409
 80086a4:	829a      	strh	r2, [r3, #20]
 80086a6:	e002      	b.n	80086ae <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8b3a      	ldrh	r2, [r7, #24]
 80086b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80086b4:	8b3b      	ldrh	r3, [r7, #24]
 80086b6:	461a      	mov	r2, r3
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 fba5 	bl	8008e0a <USBH_CtlReq>
 80086c0:	4603      	mov	r3, r0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b082      	sub	sp, #8
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	789b      	ldrb	r3, [r3, #2]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d10f      	bne.n	80086fe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2205      	movs	r2, #5
 80086e8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80086ea:	78fb      	ldrb	r3, [r7, #3]
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086fe:	2200      	movs	r2, #0
 8008700:	2100      	movs	r1, #0
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fb81 	bl	8008e0a <USBH_CtlReq>
 8008708:	4603      	mov	r3, r0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b082      	sub	sp, #8
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	460b      	mov	r3, r1
 800871c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	789b      	ldrb	r3, [r3, #2]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d10e      	bne.n	8008744 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2209      	movs	r2, #9
 8008730:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	887a      	ldrh	r2, [r7, #2]
 8008736:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008744:	2200      	movs	r2, #0
 8008746:	2100      	movs	r1, #0
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fb5e 	bl	8008e0a <USBH_CtlReq>
 800874e:	4603      	mov	r3, r0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	789b      	ldrb	r3, [r3, #2]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d10f      	bne.n	800878c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2203      	movs	r2, #3
 8008776:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008778:	78fb      	ldrb	r3, [r7, #3]
 800877a:	b29a      	uxth	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800878c:	2200      	movs	r2, #0
 800878e:	2100      	movs	r1, #0
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fb3a 	bl	8008e0a <USBH_CtlReq>
 8008796:	4603      	mov	r3, r0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	789b      	ldrb	r3, [r3, #2]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d10f      	bne.n	80087d4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80087c6:	78fb      	ldrb	r3, [r7, #3]
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087d4:	2200      	movs	r2, #0
 80087d6:	2100      	movs	r1, #0
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fb16 	bl	8008e0a <USBH_CtlReq>
 80087de:	4603      	mov	r3, r0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	4613      	mov	r3, r2
 80087f4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80087fc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008808:	2302      	movs	r3, #2
 800880a:	e094      	b.n	8008936 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	781a      	ldrb	r2, [r3, #0]
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	785a      	ldrb	r2, [r3, #1]
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	3302      	adds	r3, #2
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	3303      	adds	r3, #3
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	021b      	lsls	r3, r3, #8
 800882c:	b29b      	uxth	r3, r3
 800882e:	4313      	orrs	r3, r2
 8008830:	b29a      	uxth	r2, r3
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	791a      	ldrb	r2, [r3, #4]
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	795a      	ldrb	r2, [r3, #5]
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	799a      	ldrb	r2, [r3, #6]
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	79da      	ldrb	r2, [r3, #7]
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800885c:	2b00      	cmp	r3, #0
 800885e:	d004      	beq.n	800886a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008866:	2b01      	cmp	r3, #1
 8008868:	d11b      	bne.n	80088a2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	79db      	ldrb	r3, [r3, #7]
 800886e:	2b20      	cmp	r3, #32
 8008870:	dc0f      	bgt.n	8008892 <USBH_ParseDevDesc+0xaa>
 8008872:	2b08      	cmp	r3, #8
 8008874:	db0f      	blt.n	8008896 <USBH_ParseDevDesc+0xae>
 8008876:	3b08      	subs	r3, #8
 8008878:	4a32      	ldr	r2, [pc, #200]	@ (8008944 <USBH_ParseDevDesc+0x15c>)
 800887a:	fa22 f303 	lsr.w	r3, r2, r3
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	bf14      	ite	ne
 8008886:	2301      	movne	r3, #1
 8008888:	2300      	moveq	r3, #0
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b00      	cmp	r3, #0
 800888e:	d106      	bne.n	800889e <USBH_ParseDevDesc+0xb6>
 8008890:	e001      	b.n	8008896 <USBH_ParseDevDesc+0xae>
 8008892:	2b40      	cmp	r3, #64	@ 0x40
 8008894:	d003      	beq.n	800889e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2208      	movs	r2, #8
 800889a:	71da      	strb	r2, [r3, #7]
        break;
 800889c:	e000      	b.n	80088a0 <USBH_ParseDevDesc+0xb8>
        break;
 800889e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80088a0:	e00e      	b.n	80088c0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d107      	bne.n	80088bc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	79db      	ldrb	r3, [r3, #7]
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d005      	beq.n	80088c0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	2208      	movs	r2, #8
 80088b8:	71da      	strb	r2, [r3, #7]
 80088ba:	e001      	b.n	80088c0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80088bc:	2303      	movs	r3, #3
 80088be:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80088c0:	88fb      	ldrh	r3, [r7, #6]
 80088c2:	2b08      	cmp	r3, #8
 80088c4:	d936      	bls.n	8008934 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	3308      	adds	r3, #8
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	3309      	adds	r3, #9
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	021b      	lsls	r3, r3, #8
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	4313      	orrs	r3, r2
 80088da:	b29a      	uxth	r2, r3
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	330a      	adds	r3, #10
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	330b      	adds	r3, #11
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	021b      	lsls	r3, r3, #8
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	4313      	orrs	r3, r2
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	330c      	adds	r3, #12
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	330d      	adds	r3, #13
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	b29b      	uxth	r3, r3
 800890c:	4313      	orrs	r3, r2
 800890e:	b29a      	uxth	r2, r3
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	7b9a      	ldrb	r2, [r3, #14]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	7bda      	ldrb	r2, [r3, #15]
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	7c1a      	ldrb	r2, [r3, #16]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	7c5a      	ldrb	r2, [r3, #17]
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
}
 8008936:	4618      	mov	r0, r3
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	01000101 	.word	0x01000101

08008948 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08c      	sub	sp, #48	@ 0x30
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4613      	mov	r3, r2
 8008954:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800895c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008976:	2302      	movs	r3, #2
 8008978:	e0da      	b.n	8008b30 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800897e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	2b09      	cmp	r3, #9
 8008984:	d002      	beq.n	800898c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008988:	2209      	movs	r2, #9
 800898a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	781a      	ldrb	r2, [r3, #0]
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	785a      	ldrb	r2, [r3, #1]
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	3302      	adds	r3, #2
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	3303      	adds	r3, #3
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	021b      	lsls	r3, r3, #8
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	4313      	orrs	r3, r2
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b6:	bf28      	it	cs
 80089b8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80089bc:	b29a      	uxth	r2, r3
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	791a      	ldrb	r2, [r3, #4]
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	795a      	ldrb	r2, [r3, #5]
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	799a      	ldrb	r2, [r3, #6]
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	79da      	ldrb	r2, [r3, #7]
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	7a1a      	ldrb	r2, [r3, #8]
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	f240 809d 	bls.w	8008b2c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80089f2:	2309      	movs	r3, #9
 80089f4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80089f6:	2300      	movs	r3, #0
 80089f8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80089fa:	e081      	b.n	8008b00 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089fc:	f107 0316 	add.w	r3, r7, #22
 8008a00:	4619      	mov	r1, r3
 8008a02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a04:	f000 f9e7 	bl	8008dd6 <USBH_GetNextDesc>
 8008a08:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0c:	785b      	ldrb	r3, [r3, #1]
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d176      	bne.n	8008b00 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b09      	cmp	r3, #9
 8008a18:	d002      	beq.n	8008a20 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1c:	2209      	movs	r2, #9
 8008a1e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a24:	221a      	movs	r2, #26
 8008a26:	fb02 f303 	mul.w	r3, r2, r3
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	6a3a      	ldr	r2, [r7, #32]
 8008a2e:	4413      	add	r3, r2
 8008a30:	3302      	adds	r3, #2
 8008a32:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a36:	69f8      	ldr	r0, [r7, #28]
 8008a38:	f000 f87e 	bl	8008b38 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a46:	e043      	b.n	8008ad0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a48:	f107 0316 	add.w	r3, r7, #22
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a50:	f000 f9c1 	bl	8008dd6 <USBH_GetNextDesc>
 8008a54:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a58:	785b      	ldrb	r3, [r3, #1]
 8008a5a:	2b05      	cmp	r3, #5
 8008a5c:	d138      	bne.n	8008ad0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	795b      	ldrb	r3, [r3, #5]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d113      	bne.n	8008a8e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d003      	beq.n	8008a76 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	799b      	ldrb	r3, [r3, #6]
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d10b      	bne.n	8008a8e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	79db      	ldrb	r3, [r3, #7]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10b      	bne.n	8008a96 <USBH_ParseCfgDesc+0x14e>
 8008a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	2b09      	cmp	r3, #9
 8008a84:	d007      	beq.n	8008a96 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a88:	2209      	movs	r2, #9
 8008a8a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a8c:	e003      	b.n	8008a96 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	2207      	movs	r2, #7
 8008a92:	701a      	strb	r2, [r3, #0]
 8008a94:	e000      	b.n	8008a98 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a96:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a9c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008aa0:	3201      	adds	r2, #1
 8008aa2:	00d2      	lsls	r2, r2, #3
 8008aa4:	211a      	movs	r1, #26
 8008aa6:	fb01 f303 	mul.w	r3, r1, r3
 8008aaa:	4413      	add	r3, r2
 8008aac:	3308      	adds	r3, #8
 8008aae:	6a3a      	ldr	r2, [r7, #32]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008ab6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ab8:	69b9      	ldr	r1, [r7, #24]
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f000 f870 	bl	8008ba0 <USBH_ParseEPDesc>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008ac6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008aca:	3301      	adds	r3, #1
 8008acc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	791b      	ldrb	r3, [r3, #4]
 8008ad4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d204      	bcs.n	8008ae6 <USBH_ParseCfgDesc+0x19e>
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	885a      	ldrh	r2, [r3, #2]
 8008ae0:	8afb      	ldrh	r3, [r7, #22]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d8b0      	bhi.n	8008a48 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	791b      	ldrb	r3, [r3, #4]
 8008aea:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d201      	bcs.n	8008af6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e01c      	b.n	8008b30 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008af6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008afa:	3301      	adds	r3, #1
 8008afc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d805      	bhi.n	8008b14 <USBH_ParseCfgDesc+0x1cc>
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	885a      	ldrh	r2, [r3, #2]
 8008b0c:	8afb      	ldrh	r3, [r7, #22]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	f63f af74 	bhi.w	80089fc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	791b      	ldrb	r3, [r3, #4]
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	bf28      	it	cs
 8008b1c:	2302      	movcs	r3, #2
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d201      	bcs.n	8008b2c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e001      	b.n	8008b30 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008b2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3730      	adds	r7, #48	@ 0x30
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781a      	ldrb	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	785a      	ldrb	r2, [r3, #1]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	789a      	ldrb	r2, [r3, #2]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	78da      	ldrb	r2, [r3, #3]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	3304      	adds	r3, #4
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	bf28      	it	cs
 8008b6c:	2302      	movcs	r3, #2
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	795a      	ldrb	r2, [r3, #5]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	799a      	ldrb	r2, [r3, #6]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	79da      	ldrb	r2, [r3, #7]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	7a1a      	ldrb	r2, [r3, #8]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	721a      	strb	r2, [r3, #8]
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	781a      	ldrb	r2, [r3, #0]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	785a      	ldrb	r2, [r3, #1]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	789a      	ldrb	r2, [r3, #2]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	78da      	ldrb	r2, [r3, #3]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	3305      	adds	r3, #5
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	021b      	lsls	r3, r3, #8
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	4313      	orrs	r3, r2
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	799a      	ldrb	r2, [r3, #6]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	889b      	ldrh	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d009      	beq.n	8008c0e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c02:	d804      	bhi.n	8008c0e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c0c:	d901      	bls.n	8008c12 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d136      	bne.n	8008c8a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	78db      	ldrb	r3, [r3, #3]
 8008c20:	f003 0303 	and.w	r3, r3, #3
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d108      	bne.n	8008c3a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	889b      	ldrh	r3, [r3, #4]
 8008c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c30:	f240 8097 	bls.w	8008d62 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c34:	2303      	movs	r3, #3
 8008c36:	75fb      	strb	r3, [r7, #23]
 8008c38:	e093      	b.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	78db      	ldrb	r3, [r3, #3]
 8008c3e:	f003 0303 	and.w	r3, r3, #3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d107      	bne.n	8008c56 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	889b      	ldrh	r3, [r3, #4]
 8008c4a:	2b40      	cmp	r3, #64	@ 0x40
 8008c4c:	f240 8089 	bls.w	8008d62 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c50:	2303      	movs	r3, #3
 8008c52:	75fb      	strb	r3, [r7, #23]
 8008c54:	e085      	b.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	78db      	ldrb	r3, [r3, #3]
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d005      	beq.n	8008c6e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	78db      	ldrb	r3, [r3, #3]
 8008c66:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	d10a      	bne.n	8008c84 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	799b      	ldrb	r3, [r3, #6]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <USBH_ParseEPDesc+0xde>
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	799b      	ldrb	r3, [r3, #6]
 8008c7a:	2b10      	cmp	r3, #16
 8008c7c:	d970      	bls.n	8008d60 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c82:	e06d      	b.n	8008d60 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c84:	2303      	movs	r3, #3
 8008c86:	75fb      	strb	r3, [r7, #23]
 8008c88:	e06b      	b.n	8008d62 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d13c      	bne.n	8008d0e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	78db      	ldrb	r3, [r3, #3]
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d005      	beq.n	8008cac <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	78db      	ldrb	r3, [r3, #3]
 8008ca4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d106      	bne.n	8008cba <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	889b      	ldrh	r3, [r3, #4]
 8008cb0:	2b40      	cmp	r3, #64	@ 0x40
 8008cb2:	d956      	bls.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008cb8:	e053      	b.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	78db      	ldrb	r3, [r3, #3]
 8008cbe:	f003 0303 	and.w	r3, r3, #3
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d10e      	bne.n	8008ce4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	799b      	ldrb	r3, [r3, #6]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d007      	beq.n	8008cde <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008cd2:	2b10      	cmp	r3, #16
 8008cd4:	d803      	bhi.n	8008cde <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008cda:	2b40      	cmp	r3, #64	@ 0x40
 8008cdc:	d941      	bls.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	75fb      	strb	r3, [r7, #23]
 8008ce2:	e03e      	b.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	78db      	ldrb	r3, [r3, #3]
 8008ce8:	f003 0303 	and.w	r3, r3, #3
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d10b      	bne.n	8008d08 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	799b      	ldrb	r3, [r3, #6]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <USBH_ParseEPDesc+0x162>
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	889b      	ldrh	r3, [r3, #4]
 8008cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d00:	d32f      	bcc.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d02:	2303      	movs	r3, #3
 8008d04:	75fb      	strb	r3, [r7, #23]
 8008d06:	e02c      	b.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	75fb      	strb	r3, [r7, #23]
 8008d0c:	e029      	b.n	8008d62 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d120      	bne.n	8008d5a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	78db      	ldrb	r3, [r3, #3]
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d106      	bne.n	8008d32 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	889b      	ldrh	r3, [r3, #4]
 8008d28:	2b08      	cmp	r3, #8
 8008d2a:	d01a      	beq.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	75fb      	strb	r3, [r7, #23]
 8008d30:	e017      	b.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	78db      	ldrb	r3, [r3, #3]
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d10a      	bne.n	8008d54 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	799b      	ldrb	r3, [r3, #6]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <USBH_ParseEPDesc+0x1ae>
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	889b      	ldrh	r3, [r3, #4]
 8008d4a:	2b08      	cmp	r3, #8
 8008d4c:	d909      	bls.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	75fb      	strb	r3, [r7, #23]
 8008d52:	e006      	b.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d54:	2303      	movs	r3, #3
 8008d56:	75fb      	strb	r3, [r7, #23]
 8008d58:	e003      	b.n	8008d62 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	75fb      	strb	r3, [r7, #23]
 8008d5e:	e000      	b.n	8008d62 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d60:	bf00      	nop
  }

  return status;
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3301      	adds	r3, #1
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d120      	bne.n	8008dca <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	1e9a      	subs	r2, r3, #2
 8008d8e:	88fb      	ldrh	r3, [r7, #6]
 8008d90:	4293      	cmp	r3, r2
 8008d92:	bf28      	it	cs
 8008d94:	4613      	movcs	r3, r2
 8008d96:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	3302      	adds	r3, #2
 8008d9c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d9e:	2300      	movs	r3, #0
 8008da0:	82fb      	strh	r3, [r7, #22]
 8008da2:	e00b      	b.n	8008dbc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008da4:	8afb      	ldrh	r3, [r7, #22]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	4413      	add	r3, r2
 8008daa:	781a      	ldrb	r2, [r3, #0]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	3301      	adds	r3, #1
 8008db4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008db6:	8afb      	ldrh	r3, [r7, #22]
 8008db8:	3302      	adds	r3, #2
 8008dba:	82fb      	strh	r3, [r7, #22]
 8008dbc:	8afa      	ldrh	r2, [r7, #22]
 8008dbe:	8abb      	ldrh	r3, [r7, #20]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d3ef      	bcc.n	8008da4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	701a      	strb	r2, [r3, #0]
  }
}
 8008dca:	bf00      	nop
 8008dcc:	371c      	adds	r7, #28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b085      	sub	sp, #20
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	881b      	ldrh	r3, [r3, #0]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	7812      	ldrb	r2, [r2, #0]
 8008de8:	4413      	add	r3, r2
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4413      	add	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	60b9      	str	r1, [r7, #8]
 8008e14:	4613      	mov	r3, r2
 8008e16:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	789b      	ldrb	r3, [r3, #2]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d002      	beq.n	8008e2a <USBH_CtlReq+0x20>
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d00f      	beq.n	8008e48 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008e28:	e027      	b.n	8008e7a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	88fa      	ldrh	r2, [r7, #6]
 8008e34:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008e42:	2301      	movs	r3, #1
 8008e44:	75fb      	strb	r3, [r7, #23]
      break;
 8008e46:	e018      	b.n	8008e7a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 f81b 	bl	8008e84 <USBH_HandleControl>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <USBH_CtlReq+0x54>
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d106      	bne.n	8008e6c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	761a      	strb	r2, [r3, #24]
      break;
 8008e6a:	e005      	b.n	8008e78 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008e6c:	7dfb      	ldrb	r3, [r7, #23]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d102      	bne.n	8008e78 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2201      	movs	r2, #1
 8008e76:	709a      	strb	r2, [r3, #2]
      break;
 8008e78:	bf00      	nop
  }
  return status;
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3718      	adds	r7, #24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af02      	add	r7, sp, #8
 8008e8a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	7e1b      	ldrb	r3, [r3, #24]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	2b0a      	cmp	r3, #10
 8008e9c:	f200 8156 	bhi.w	800914c <USBH_HandleControl+0x2c8>
 8008ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea8 <USBH_HandleControl+0x24>)
 8008ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea6:	bf00      	nop
 8008ea8:	08008ed5 	.word	0x08008ed5
 8008eac:	08008eef 	.word	0x08008eef
 8008eb0:	08008f59 	.word	0x08008f59
 8008eb4:	08008f7f 	.word	0x08008f7f
 8008eb8:	08008fb7 	.word	0x08008fb7
 8008ebc:	08008fe1 	.word	0x08008fe1
 8008ec0:	08009033 	.word	0x08009033
 8008ec4:	08009055 	.word	0x08009055
 8008ec8:	08009091 	.word	0x08009091
 8008ecc:	080090b7 	.word	0x080090b7
 8008ed0:	080090f5 	.word	0x080090f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f103 0110 	add.w	r1, r3, #16
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	795b      	ldrb	r3, [r3, #5]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f943 	bl	800916c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2202      	movs	r2, #2
 8008eea:	761a      	strb	r2, [r3, #24]
      break;
 8008eec:	e139      	b.n	8009162 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	795b      	ldrb	r3, [r3, #5]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fcc5 	bl	8009884 <USBH_LL_GetURBState>
 8008efa:	4603      	mov	r3, r0
 8008efc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d11e      	bne.n	8008f42 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	7c1b      	ldrb	r3, [r3, #16]
 8008f08:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f0c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	8adb      	ldrh	r3, [r3, #22]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f16:	7b7b      	ldrb	r3, [r7, #13]
 8008f18:	2b80      	cmp	r3, #128	@ 0x80
 8008f1a:	d103      	bne.n	8008f24 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2203      	movs	r2, #3
 8008f20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f22:	e115      	b.n	8009150 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2205      	movs	r2, #5
 8008f28:	761a      	strb	r2, [r3, #24]
      break;
 8008f2a:	e111      	b.n	8009150 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008f2c:	7b7b      	ldrb	r3, [r7, #13]
 8008f2e:	2b80      	cmp	r3, #128	@ 0x80
 8008f30:	d103      	bne.n	8008f3a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2209      	movs	r2, #9
 8008f36:	761a      	strb	r2, [r3, #24]
      break;
 8008f38:	e10a      	b.n	8009150 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2207      	movs	r2, #7
 8008f3e:	761a      	strb	r2, [r3, #24]
      break;
 8008f40:	e106      	b.n	8009150 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	d003      	beq.n	8008f50 <USBH_HandleControl+0xcc>
 8008f48:	7bbb      	ldrb	r3, [r7, #14]
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	f040 8100 	bne.w	8009150 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	220b      	movs	r2, #11
 8008f54:	761a      	strb	r2, [r3, #24]
      break;
 8008f56:	e0fb      	b.n	8009150 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6899      	ldr	r1, [r3, #8]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	899a      	ldrh	r2, [r3, #12]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	791b      	ldrb	r3, [r3, #4]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f93a 	bl	80091ea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2204      	movs	r2, #4
 8008f7a:	761a      	strb	r2, [r3, #24]
      break;
 8008f7c:	e0f1      	b.n	8009162 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	791b      	ldrb	r3, [r3, #4]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fc7d 	bl	8009884 <USBH_LL_GetURBState>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d102      	bne.n	8008f9a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2209      	movs	r2, #9
 8008f98:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	2b05      	cmp	r3, #5
 8008f9e:	d102      	bne.n	8008fa6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008fa4:	e0d6      	b.n	8009154 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	f040 80d3 	bne.w	8009154 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	220b      	movs	r2, #11
 8008fb2:	761a      	strb	r2, [r3, #24]
      break;
 8008fb4:	e0ce      	b.n	8009154 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6899      	ldr	r1, [r3, #8]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	899a      	ldrh	r2, [r3, #12]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	795b      	ldrb	r3, [r3, #5]
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	9000      	str	r0, [sp, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f8ea 	bl	80091a0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2206      	movs	r2, #6
 8008fdc:	761a      	strb	r2, [r3, #24]
      break;
 8008fde:	e0c0      	b.n	8009162 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	795b      	ldrb	r3, [r3, #5]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fc4c 	bl	8009884 <USBH_LL_GetURBState>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d103      	bne.n	8008ffe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2207      	movs	r2, #7
 8008ffa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ffc:	e0ac      	b.n	8009158 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	2b05      	cmp	r3, #5
 8009002:	d105      	bne.n	8009010 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	220c      	movs	r2, #12
 8009008:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800900a:	2303      	movs	r3, #3
 800900c:	73fb      	strb	r3, [r7, #15]
      break;
 800900e:	e0a3      	b.n	8009158 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d103      	bne.n	800901e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2205      	movs	r2, #5
 800901a:	761a      	strb	r2, [r3, #24]
      break;
 800901c:	e09c      	b.n	8009158 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	2b04      	cmp	r3, #4
 8009022:	f040 8099 	bne.w	8009158 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	220b      	movs	r2, #11
 800902a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800902c:	2302      	movs	r3, #2
 800902e:	73fb      	strb	r3, [r7, #15]
      break;
 8009030:	e092      	b.n	8009158 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	791b      	ldrb	r3, [r3, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	2100      	movs	r1, #0
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f8d5 	bl	80091ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009046:	b29a      	uxth	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2208      	movs	r2, #8
 8009050:	761a      	strb	r2, [r3, #24]

      break;
 8009052:	e086      	b.n	8009162 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	791b      	ldrb	r3, [r3, #4]
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fc12 	bl	8009884 <USBH_LL_GetURBState>
 8009060:	4603      	mov	r3, r0
 8009062:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d105      	bne.n	8009076 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	220d      	movs	r2, #13
 800906e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009074:	e072      	b.n	800915c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009076:	7bbb      	ldrb	r3, [r7, #14]
 8009078:	2b04      	cmp	r3, #4
 800907a:	d103      	bne.n	8009084 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	220b      	movs	r2, #11
 8009080:	761a      	strb	r2, [r3, #24]
      break;
 8009082:	e06b      	b.n	800915c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	2b05      	cmp	r3, #5
 8009088:	d168      	bne.n	800915c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800908a:	2303      	movs	r3, #3
 800908c:	73fb      	strb	r3, [r7, #15]
      break;
 800908e:	e065      	b.n	800915c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	795b      	ldrb	r3, [r3, #5]
 8009094:	2201      	movs	r2, #1
 8009096:	9200      	str	r2, [sp, #0]
 8009098:	2200      	movs	r2, #0
 800909a:	2100      	movs	r1, #0
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f87f 	bl	80091a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	220a      	movs	r2, #10
 80090b2:	761a      	strb	r2, [r3, #24]
      break;
 80090b4:	e055      	b.n	8009162 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	795b      	ldrb	r3, [r3, #5]
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fbe1 	bl	8009884 <USBH_LL_GetURBState>
 80090c2:	4603      	mov	r3, r0
 80090c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80090c6:	7bbb      	ldrb	r3, [r7, #14]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d105      	bne.n	80090d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	220d      	movs	r2, #13
 80090d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090d6:	e043      	b.n	8009160 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d103      	bne.n	80090e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2209      	movs	r2, #9
 80090e2:	761a      	strb	r2, [r3, #24]
      break;
 80090e4:	e03c      	b.n	8009160 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	2b04      	cmp	r3, #4
 80090ea:	d139      	bne.n	8009160 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	220b      	movs	r2, #11
 80090f0:	761a      	strb	r2, [r3, #24]
      break;
 80090f2:	e035      	b.n	8009160 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	7e5b      	ldrb	r3, [r3, #25]
 80090f8:	3301      	adds	r3, #1
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	765a      	strb	r2, [r3, #25]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	7e5b      	ldrb	r3, [r3, #25]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d806      	bhi.n	8009116 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009114:	e025      	b.n	8009162 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800911c:	2106      	movs	r1, #6
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	795b      	ldrb	r3, [r3, #5]
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f90c 	bl	800934c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	791b      	ldrb	r3, [r3, #4]
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f906 	bl	800934c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009146:	2302      	movs	r3, #2
 8009148:	73fb      	strb	r3, [r7, #15]
      break;
 800914a:	e00a      	b.n	8009162 <USBH_HandleControl+0x2de>

    default:
      break;
 800914c:	bf00      	nop
 800914e:	e008      	b.n	8009162 <USBH_HandleControl+0x2de>
      break;
 8009150:	bf00      	nop
 8009152:	e006      	b.n	8009162 <USBH_HandleControl+0x2de>
      break;
 8009154:	bf00      	nop
 8009156:	e004      	b.n	8009162 <USBH_HandleControl+0x2de>
      break;
 8009158:	bf00      	nop
 800915a:	e002      	b.n	8009162 <USBH_HandleControl+0x2de>
      break;
 800915c:	bf00      	nop
 800915e:	e000      	b.n	8009162 <USBH_HandleControl+0x2de>
      break;
 8009160:	bf00      	nop
  }

  return status;
 8009162:	7bfb      	ldrb	r3, [r7, #15]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b088      	sub	sp, #32
 8009170:	af04      	add	r7, sp, #16
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4613      	mov	r3, r2
 8009178:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800917a:	79f9      	ldrb	r1, [r7, #7]
 800917c:	2300      	movs	r3, #0
 800917e:	9303      	str	r3, [sp, #12]
 8009180:	2308      	movs	r3, #8
 8009182:	9302      	str	r3, [sp, #8]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	2300      	movs	r3, #0
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	2300      	movs	r3, #0
 800918e:	2200      	movs	r2, #0
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f000 fb46 	bl	8009822 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af04      	add	r7, sp, #16
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	4611      	mov	r1, r2
 80091ac:	461a      	mov	r2, r3
 80091ae:	460b      	mov	r3, r1
 80091b0:	80fb      	strh	r3, [r7, #6]
 80091b2:	4613      	mov	r3, r2
 80091b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091c4:	7979      	ldrb	r1, [r7, #5]
 80091c6:	7e3b      	ldrb	r3, [r7, #24]
 80091c8:	9303      	str	r3, [sp, #12]
 80091ca:	88fb      	ldrh	r3, [r7, #6]
 80091cc:	9302      	str	r3, [sp, #8]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	2301      	movs	r3, #1
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	2300      	movs	r3, #0
 80091d8:	2200      	movs	r2, #0
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 fb21 	bl	8009822 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b088      	sub	sp, #32
 80091ee:	af04      	add	r7, sp, #16
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	4611      	mov	r1, r2
 80091f6:	461a      	mov	r2, r3
 80091f8:	460b      	mov	r3, r1
 80091fa:	80fb      	strh	r3, [r7, #6]
 80091fc:	4613      	mov	r3, r2
 80091fe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009200:	7979      	ldrb	r1, [r7, #5]
 8009202:	2300      	movs	r3, #0
 8009204:	9303      	str	r3, [sp, #12]
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	9302      	str	r3, [sp, #8]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	9301      	str	r3, [sp, #4]
 800920e:	2301      	movs	r3, #1
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	2300      	movs	r3, #0
 8009214:	2201      	movs	r2, #1
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 fb03 	bl	8009822 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800921c:	2300      	movs	r3, #0

}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b088      	sub	sp, #32
 800922a:	af04      	add	r7, sp, #16
 800922c:	60f8      	str	r0, [r7, #12]
 800922e:	60b9      	str	r1, [r7, #8]
 8009230:	4611      	mov	r1, r2
 8009232:	461a      	mov	r2, r3
 8009234:	460b      	mov	r3, r1
 8009236:	80fb      	strh	r3, [r7, #6]
 8009238:	4613      	mov	r3, r2
 800923a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800924a:	7979      	ldrb	r1, [r7, #5]
 800924c:	7e3b      	ldrb	r3, [r7, #24]
 800924e:	9303      	str	r3, [sp, #12]
 8009250:	88fb      	ldrh	r3, [r7, #6]
 8009252:	9302      	str	r3, [sp, #8]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	2301      	movs	r3, #1
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	2302      	movs	r3, #2
 800925e:	2200      	movs	r2, #0
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f000 fade 	bl	8009822 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af04      	add	r7, sp, #16
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4611      	mov	r1, r2
 800927c:	461a      	mov	r2, r3
 800927e:	460b      	mov	r3, r1
 8009280:	80fb      	strh	r3, [r7, #6]
 8009282:	4613      	mov	r3, r2
 8009284:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009286:	7979      	ldrb	r1, [r7, #5]
 8009288:	2300      	movs	r3, #0
 800928a:	9303      	str	r3, [sp, #12]
 800928c:	88fb      	ldrh	r3, [r7, #6]
 800928e:	9302      	str	r3, [sp, #8]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	9301      	str	r3, [sp, #4]
 8009294:	2301      	movs	r3, #1
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	2302      	movs	r3, #2
 800929a:	2201      	movs	r2, #1
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 fac0 	bl	8009822 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af04      	add	r7, sp, #16
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	4608      	mov	r0, r1
 80092b6:	4611      	mov	r1, r2
 80092b8:	461a      	mov	r2, r3
 80092ba:	4603      	mov	r3, r0
 80092bc:	70fb      	strb	r3, [r7, #3]
 80092be:	460b      	mov	r3, r1
 80092c0:	70bb      	strb	r3, [r7, #2]
 80092c2:	4613      	mov	r3, r2
 80092c4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80092c6:	7878      	ldrb	r0, [r7, #1]
 80092c8:	78ba      	ldrb	r2, [r7, #2]
 80092ca:	78f9      	ldrb	r1, [r7, #3]
 80092cc:	8b3b      	ldrh	r3, [r7, #24]
 80092ce:	9302      	str	r3, [sp, #8]
 80092d0:	7d3b      	ldrb	r3, [r7, #20]
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	7c3b      	ldrb	r3, [r7, #16]
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	4603      	mov	r3, r0
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fa53 	bl	8009786 <USBH_LL_OpenPipe>

  return USBH_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b082      	sub	sp, #8
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	460b      	mov	r3, r1
 80092f4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80092f6:	78fb      	ldrb	r3, [r7, #3]
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fa72 	bl	80097e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f836 	bl	8009388 <USBH_GetFreePipe>
 800931c:	4603      	mov	r3, r0
 800931e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009320:	89fb      	ldrh	r3, [r7, #14]
 8009322:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009326:	4293      	cmp	r3, r2
 8009328:	d00a      	beq.n	8009340 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	89fb      	ldrh	r3, [r7, #14]
 800932e:	f003 030f 	and.w	r3, r3, #15
 8009332:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009336:	6879      	ldr	r1, [r7, #4]
 8009338:	33e0      	adds	r3, #224	@ 0xe0
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	440b      	add	r3, r1
 800933e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009340:	89fb      	ldrh	r3, [r7, #14]
 8009342:	b2db      	uxtb	r3, r3
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	2b0f      	cmp	r3, #15
 800935c:	d80d      	bhi.n	800937a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800935e:	78fb      	ldrb	r3, [r7, #3]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	33e0      	adds	r3, #224	@ 0xe0
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009370:	6879      	ldr	r1, [r7, #4]
 8009372:	33e0      	adds	r3, #224	@ 0xe0
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	440b      	add	r3, r1
 8009378:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
 8009398:	e00f      	b.n	80093ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	33e0      	adds	r3, #224	@ 0xe0
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d102      	bne.n	80093b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	e007      	b.n	80093c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	3301      	adds	r3, #1
 80093b8:	73fb      	strb	r3, [r7, #15]
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
 80093bc:	2b0f      	cmp	r3, #15
 80093be:	d9ec      	bls.n	800939a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80093c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80093d4:	2201      	movs	r2, #1
 80093d6:	490e      	ldr	r1, [pc, #56]	@ (8009410 <MX_USB_HOST_Init+0x40>)
 80093d8:	480e      	ldr	r0, [pc, #56]	@ (8009414 <MX_USB_HOST_Init+0x44>)
 80093da:	f7fe fb15 	bl	8007a08 <USBH_Init>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80093e4:	f7f7 fb48 	bl	8000a78 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80093e8:	490b      	ldr	r1, [pc, #44]	@ (8009418 <MX_USB_HOST_Init+0x48>)
 80093ea:	480a      	ldr	r0, [pc, #40]	@ (8009414 <MX_USB_HOST_Init+0x44>)
 80093ec:	f7fe fbb9 	bl	8007b62 <USBH_RegisterClass>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80093f6:	f7f7 fb3f 	bl	8000a78 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80093fa:	4806      	ldr	r0, [pc, #24]	@ (8009414 <MX_USB_HOST_Init+0x44>)
 80093fc:	f7fe fc3d 	bl	8007c7a <USBH_Start>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009406:	f7f7 fb37 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800940a:	bf00      	nop
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	08009431 	.word	0x08009431
 8009414:	200001ec 	.word	0x200001ec
 8009418:	2000000c 	.word	0x2000000c

0800941c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009420:	4802      	ldr	r0, [pc, #8]	@ (800942c <MX_USB_HOST_Process+0x10>)
 8009422:	f7fe fc3b 	bl	8007c9c <USBH_Process>
}
 8009426:	bf00      	nop
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	200001ec 	.word	0x200001ec

08009430 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	3b01      	subs	r3, #1
 8009440:	2b04      	cmp	r3, #4
 8009442:	d819      	bhi.n	8009478 <USBH_UserProcess+0x48>
 8009444:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <USBH_UserProcess+0x1c>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	08009479 	.word	0x08009479
 8009450:	08009469 	.word	0x08009469
 8009454:	08009479 	.word	0x08009479
 8009458:	08009471 	.word	0x08009471
 800945c:	08009461 	.word	0x08009461
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009460:	4b09      	ldr	r3, [pc, #36]	@ (8009488 <USBH_UserProcess+0x58>)
 8009462:	2203      	movs	r2, #3
 8009464:	701a      	strb	r2, [r3, #0]
  break;
 8009466:	e008      	b.n	800947a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009468:	4b07      	ldr	r3, [pc, #28]	@ (8009488 <USBH_UserProcess+0x58>)
 800946a:	2202      	movs	r2, #2
 800946c:	701a      	strb	r2, [r3, #0]
  break;
 800946e:	e004      	b.n	800947a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009470:	4b05      	ldr	r3, [pc, #20]	@ (8009488 <USBH_UserProcess+0x58>)
 8009472:	2201      	movs	r2, #1
 8009474:	701a      	strb	r2, [r3, #0]
  break;
 8009476:	e000      	b.n	800947a <USBH_UserProcess+0x4a>

  default:
  break;
 8009478:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800947a:	bf00      	nop
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	200005c4 	.word	0x200005c4

0800948c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08a      	sub	sp, #40	@ 0x28
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009494:	f107 0314 	add.w	r3, r7, #20
 8009498:	2200      	movs	r2, #0
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	605a      	str	r2, [r3, #4]
 800949e:	609a      	str	r2, [r3, #8]
 80094a0:	60da      	str	r2, [r3, #12]
 80094a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094ac:	d147      	bne.n	800953e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
 80094b2:	4b25      	ldr	r3, [pc, #148]	@ (8009548 <HAL_HCD_MspInit+0xbc>)
 80094b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b6:	4a24      	ldr	r2, [pc, #144]	@ (8009548 <HAL_HCD_MspInit+0xbc>)
 80094b8:	f043 0301 	orr.w	r3, r3, #1
 80094bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80094be:	4b22      	ldr	r3, [pc, #136]	@ (8009548 <HAL_HCD_MspInit+0xbc>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	613b      	str	r3, [r7, #16]
 80094c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80094ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094d0:	2300      	movs	r3, #0
 80094d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80094d8:	f107 0314 	add.w	r3, r7, #20
 80094dc:	4619      	mov	r1, r3
 80094de:	481b      	ldr	r0, [pc, #108]	@ (800954c <HAL_HCD_MspInit+0xc0>)
 80094e0:	f7f7 feb4 	bl	800124c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80094e4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80094e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ea:	2302      	movs	r3, #2
 80094ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094f2:	2300      	movs	r3, #0
 80094f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094f6:	230a      	movs	r3, #10
 80094f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094fa:	f107 0314 	add.w	r3, r7, #20
 80094fe:	4619      	mov	r1, r3
 8009500:	4812      	ldr	r0, [pc, #72]	@ (800954c <HAL_HCD_MspInit+0xc0>)
 8009502:	f7f7 fea3 	bl	800124c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009506:	4b10      	ldr	r3, [pc, #64]	@ (8009548 <HAL_HCD_MspInit+0xbc>)
 8009508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800950a:	4a0f      	ldr	r2, [pc, #60]	@ (8009548 <HAL_HCD_MspInit+0xbc>)
 800950c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009510:	6353      	str	r3, [r2, #52]	@ 0x34
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	4b0c      	ldr	r3, [pc, #48]	@ (8009548 <HAL_HCD_MspInit+0xbc>)
 8009518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800951a:	4a0b      	ldr	r2, [pc, #44]	@ (8009548 <HAL_HCD_MspInit+0xbc>)
 800951c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009520:	6453      	str	r3, [r2, #68]	@ 0x44
 8009522:	4b09      	ldr	r3, [pc, #36]	@ (8009548 <HAL_HCD_MspInit+0xbc>)
 8009524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800952a:	60fb      	str	r3, [r7, #12]
 800952c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800952e:	2200      	movs	r2, #0
 8009530:	2100      	movs	r1, #0
 8009532:	2043      	movs	r0, #67	@ 0x43
 8009534:	f7f7 fe53 	bl	80011de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009538:	2043      	movs	r0, #67	@ 0x43
 800953a:	f7f7 fe6c 	bl	8001216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800953e:	bf00      	nop
 8009540:	3728      	adds	r7, #40	@ 0x28
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	40023800 	.word	0x40023800
 800954c:	40020000 	.word	0x40020000

08009550 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe ff73 	bl	800844a <USBH_LL_IncTimer>
}
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe ffab 	bl	80084d6 <USBH_LL_Connect>
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe ffb4 	bl	8008504 <USBH_LL_Disconnect>
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
 80095b0:	4613      	mov	r3, r2
 80095b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe ff65 	bl	800849e <USBH_LL_PortEnabled>
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fe ff65 	bl	80084ba <USBH_LL_PortDisabled>
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009606:	2b01      	cmp	r3, #1
 8009608:	d12a      	bne.n	8009660 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800960a:	4a18      	ldr	r2, [pc, #96]	@ (800966c <USBH_LL_Init+0x74>)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a15      	ldr	r2, [pc, #84]	@ (800966c <USBH_LL_Init+0x74>)
 8009616:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800961a:	4b14      	ldr	r3, [pc, #80]	@ (800966c <USBH_LL_Init+0x74>)
 800961c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009620:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009622:	4b12      	ldr	r3, [pc, #72]	@ (800966c <USBH_LL_Init+0x74>)
 8009624:	2208      	movs	r2, #8
 8009626:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009628:	4b10      	ldr	r3, [pc, #64]	@ (800966c <USBH_LL_Init+0x74>)
 800962a:	2201      	movs	r2, #1
 800962c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800962e:	4b0f      	ldr	r3, [pc, #60]	@ (800966c <USBH_LL_Init+0x74>)
 8009630:	2200      	movs	r2, #0
 8009632:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009634:	4b0d      	ldr	r3, [pc, #52]	@ (800966c <USBH_LL_Init+0x74>)
 8009636:	2202      	movs	r2, #2
 8009638:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800963a:	4b0c      	ldr	r3, [pc, #48]	@ (800966c <USBH_LL_Init+0x74>)
 800963c:	2200      	movs	r2, #0
 800963e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009640:	480a      	ldr	r0, [pc, #40]	@ (800966c <USBH_LL_Init+0x74>)
 8009642:	f7f7 ffb8 	bl	80015b6 <HAL_HCD_Init>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800964c:	f7f7 fa14 	bl	8000a78 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009650:	4806      	ldr	r0, [pc, #24]	@ (800966c <USBH_LL_Init+0x74>)
 8009652:	f7f8 fc19 	bl	8001e88 <HAL_HCD_GetCurrentFrame>
 8009656:	4603      	mov	r3, r0
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7fe fee6 	bl	800842c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	200005c8 	.word	0x200005c8

08009670 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009686:	4618      	mov	r0, r3
 8009688:	f7f8 fb86 	bl	8001d98 <HAL_HCD_Start>
 800968c:	4603      	mov	r3, r0
 800968e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	4618      	mov	r0, r3
 8009694:	f000 f95e 	bl	8009954 <USBH_Get_USB_Status>
 8009698:	4603      	mov	r3, r0
 800969a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800969c:	7bbb      	ldrb	r3, [r7, #14]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096bc:	4618      	mov	r0, r3
 80096be:	f7f8 fb8e 	bl	8001dde <HAL_HCD_Stop>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 f943 	bl	8009954 <USBH_Get_USB_Status>
 80096ce:	4603      	mov	r3, r0
 80096d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80096e4:	2301      	movs	r3, #1
 80096e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7f8 fbd8 	bl	8001ea4 <HAL_HCD_GetCurrentSpeed>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d00c      	beq.n	8009714 <USBH_LL_GetSpeed+0x38>
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d80d      	bhi.n	800971a <USBH_LL_GetSpeed+0x3e>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <USBH_LL_GetSpeed+0x2c>
 8009702:	2b01      	cmp	r3, #1
 8009704:	d003      	beq.n	800970e <USBH_LL_GetSpeed+0x32>
 8009706:	e008      	b.n	800971a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
    break;
 800970c:	e008      	b.n	8009720 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800970e:	2301      	movs	r3, #1
 8009710:	73fb      	strb	r3, [r7, #15]
    break;
 8009712:	e005      	b.n	8009720 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009714:	2302      	movs	r3, #2
 8009716:	73fb      	strb	r3, [r7, #15]
    break;
 8009718:	e002      	b.n	8009720 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800971a:	2301      	movs	r3, #1
 800971c:	73fb      	strb	r3, [r7, #15]
    break;
 800971e:	bf00      	nop
  }
  return  speed;
 8009720:	7bfb      	ldrb	r3, [r7, #15]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009740:	4618      	mov	r0, r3
 8009742:	f7f8 fb69 	bl	8001e18 <HAL_HCD_ResetPort>
 8009746:	4603      	mov	r3, r0
 8009748:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	4618      	mov	r0, r3
 800974e:	f000 f901 	bl	8009954 <USBH_Get_USB_Status>
 8009752:	4603      	mov	r3, r0
 8009754:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009756:	7bbb      	ldrb	r3, [r7, #14]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009772:	78fa      	ldrb	r2, [r7, #3]
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f7f8 fb71 	bl	8001e5e <HAL_HCD_HC_GetXferCount>
 800977c:	4603      	mov	r3, r0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009786:	b590      	push	{r4, r7, lr}
 8009788:	b089      	sub	sp, #36	@ 0x24
 800978a:	af04      	add	r7, sp, #16
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	4608      	mov	r0, r1
 8009790:	4611      	mov	r1, r2
 8009792:	461a      	mov	r2, r3
 8009794:	4603      	mov	r3, r0
 8009796:	70fb      	strb	r3, [r7, #3]
 8009798:	460b      	mov	r3, r1
 800979a:	70bb      	strb	r3, [r7, #2]
 800979c:	4613      	mov	r3, r2
 800979e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80097ae:	787c      	ldrb	r4, [r7, #1]
 80097b0:	78ba      	ldrb	r2, [r7, #2]
 80097b2:	78f9      	ldrb	r1, [r7, #3]
 80097b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097b6:	9302      	str	r3, [sp, #8]
 80097b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	4623      	mov	r3, r4
 80097c6:	f7f7 ff5d 	bl	8001684 <HAL_HCD_HC_Init>
 80097ca:	4603      	mov	r3, r0
 80097cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 f8bf 	bl	8009954 <USBH_Get_USB_Status>
 80097d6:	4603      	mov	r3, r0
 80097d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097da:	7bbb      	ldrb	r3, [r7, #14]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd90      	pop	{r4, r7, pc}

080097e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097fe:	78fa      	ldrb	r2, [r7, #3]
 8009800:	4611      	mov	r1, r2
 8009802:	4618      	mov	r0, r3
 8009804:	f7f7 fff6 	bl	80017f4 <HAL_HCD_HC_Halt>
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	4618      	mov	r0, r3
 8009810:	f000 f8a0 	bl	8009954 <USBH_Get_USB_Status>
 8009814:	4603      	mov	r3, r0
 8009816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009818:	7bbb      	ldrb	r3, [r7, #14]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009822:	b590      	push	{r4, r7, lr}
 8009824:	b089      	sub	sp, #36	@ 0x24
 8009826:	af04      	add	r7, sp, #16
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	4608      	mov	r0, r1
 800982c:	4611      	mov	r1, r2
 800982e:	461a      	mov	r2, r3
 8009830:	4603      	mov	r3, r0
 8009832:	70fb      	strb	r3, [r7, #3]
 8009834:	460b      	mov	r3, r1
 8009836:	70bb      	strb	r3, [r7, #2]
 8009838:	4613      	mov	r3, r2
 800983a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800984a:	787c      	ldrb	r4, [r7, #1]
 800984c:	78ba      	ldrb	r2, [r7, #2]
 800984e:	78f9      	ldrb	r1, [r7, #3]
 8009850:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009854:	9303      	str	r3, [sp, #12]
 8009856:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009858:	9302      	str	r3, [sp, #8]
 800985a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985c:	9301      	str	r3, [sp, #4]
 800985e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	4623      	mov	r3, r4
 8009866:	f7f7 ffe9 	bl	800183c <HAL_HCD_HC_SubmitRequest>
 800986a:	4603      	mov	r3, r0
 800986c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800986e:	7bfb      	ldrb	r3, [r7, #15]
 8009870:	4618      	mov	r0, r3
 8009872:	f000 f86f 	bl	8009954 <USBH_Get_USB_Status>
 8009876:	4603      	mov	r3, r0
 8009878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800987a:	7bbb      	ldrb	r3, [r7, #14]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	bd90      	pop	{r4, r7, pc}

08009884 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009896:	78fa      	ldrb	r2, [r7, #3]
 8009898:	4611      	mov	r1, r2
 800989a:	4618      	mov	r0, r3
 800989c:	f7f8 faca 	bl	8001e34 <HAL_HCD_HC_GetURBState>
 80098a0:	4603      	mov	r3, r0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d103      	bne.n	80098c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 f872 	bl	80099ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80098c8:	20c8      	movs	r0, #200	@ 0xc8
 80098ca:	f7f7 fb89 	bl	8000fe0 <HAL_Delay>
  return USBH_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	70fb      	strb	r3, [r7, #3]
 80098e4:	4613      	mov	r3, r2
 80098e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	68f9      	ldr	r1, [r7, #12]
 80098f4:	4613      	mov	r3, r2
 80098f6:	011b      	lsls	r3, r3, #4
 80098f8:	1a9b      	subs	r3, r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	440b      	add	r3, r1
 80098fe:	3317      	adds	r3, #23
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00a      	beq.n	800991c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009906:	78fa      	ldrb	r2, [r7, #3]
 8009908:	68f9      	ldr	r1, [r7, #12]
 800990a:	4613      	mov	r3, r2
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	1a9b      	subs	r3, r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	440b      	add	r3, r1
 8009914:	333c      	adds	r3, #60	@ 0x3c
 8009916:	78ba      	ldrb	r2, [r7, #2]
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	e009      	b.n	8009930 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800991c:	78fa      	ldrb	r2, [r7, #3]
 800991e:	68f9      	ldr	r1, [r7, #12]
 8009920:	4613      	mov	r3, r2
 8009922:	011b      	lsls	r3, r3, #4
 8009924:	1a9b      	subs	r3, r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	440b      	add	r3, r1
 800992a:	333d      	adds	r3, #61	@ 0x3d
 800992c:	78ba      	ldrb	r2, [r7, #2]
 800992e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b082      	sub	sp, #8
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7f7 fb4a 	bl	8000fe0 <HAL_Delay>
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	4603      	mov	r3, r0
 800995c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	2b03      	cmp	r3, #3
 8009966:	d817      	bhi.n	8009998 <USBH_Get_USB_Status+0x44>
 8009968:	a201      	add	r2, pc, #4	@ (adr r2, 8009970 <USBH_Get_USB_Status+0x1c>)
 800996a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996e:	bf00      	nop
 8009970:	08009981 	.word	0x08009981
 8009974:	08009987 	.word	0x08009987
 8009978:	0800998d 	.word	0x0800998d
 800997c:	08009993 	.word	0x08009993
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]
    break;
 8009984:	e00b      	b.n	800999e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009986:	2302      	movs	r3, #2
 8009988:	73fb      	strb	r3, [r7, #15]
    break;
 800998a:	e008      	b.n	800999e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800998c:	2301      	movs	r3, #1
 800998e:	73fb      	strb	r3, [r7, #15]
    break;
 8009990:	e005      	b.n	800999e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009992:	2302      	movs	r3, #2
 8009994:	73fb      	strb	r3, [r7, #15]
    break;
 8009996:	e002      	b.n	800999e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009998:	2302      	movs	r3, #2
 800999a:	73fb      	strb	r3, [r7, #15]
    break;
 800999c:	bf00      	nop
  }
  return usb_status;
 800999e:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	4603      	mov	r3, r0
 80099b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80099b6:	79fb      	ldrb	r3, [r7, #7]
 80099b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d102      	bne.n	80099c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73fb      	strb	r3, [r7, #15]
 80099c4:	e001      	b.n	80099ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80099c6:	2301      	movs	r3, #1
 80099c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	461a      	mov	r2, r3
 80099ce:	2101      	movs	r1, #1
 80099d0:	4803      	ldr	r0, [pc, #12]	@ (80099e0 <MX_DriverVbusFS+0x34>)
 80099d2:	f7f7 fdd7 	bl	8001584 <HAL_GPIO_WritePin>
}
 80099d6:	bf00      	nop
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	40020800 	.word	0x40020800

080099e4 <malloc>:
 80099e4:	4b02      	ldr	r3, [pc, #8]	@ (80099f0 <malloc+0xc>)
 80099e6:	4601      	mov	r1, r0
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	f000 b82d 	b.w	8009a48 <_malloc_r>
 80099ee:	bf00      	nop
 80099f0:	2000002c 	.word	0x2000002c

080099f4 <free>:
 80099f4:	4b02      	ldr	r3, [pc, #8]	@ (8009a00 <free+0xc>)
 80099f6:	4601      	mov	r1, r0
 80099f8:	6818      	ldr	r0, [r3, #0]
 80099fa:	f000 b8f5 	b.w	8009be8 <_free_r>
 80099fe:	bf00      	nop
 8009a00:	2000002c 	.word	0x2000002c

08009a04 <sbrk_aligned>:
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	4e0f      	ldr	r6, [pc, #60]	@ (8009a44 <sbrk_aligned+0x40>)
 8009a08:	460c      	mov	r4, r1
 8009a0a:	6831      	ldr	r1, [r6, #0]
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	b911      	cbnz	r1, 8009a16 <sbrk_aligned+0x12>
 8009a10:	f000 f8ae 	bl	8009b70 <_sbrk_r>
 8009a14:	6030      	str	r0, [r6, #0]
 8009a16:	4621      	mov	r1, r4
 8009a18:	4628      	mov	r0, r5
 8009a1a:	f000 f8a9 	bl	8009b70 <_sbrk_r>
 8009a1e:	1c43      	adds	r3, r0, #1
 8009a20:	d103      	bne.n	8009a2a <sbrk_aligned+0x26>
 8009a22:	f04f 34ff 	mov.w	r4, #4294967295
 8009a26:	4620      	mov	r0, r4
 8009a28:	bd70      	pop	{r4, r5, r6, pc}
 8009a2a:	1cc4      	adds	r4, r0, #3
 8009a2c:	f024 0403 	bic.w	r4, r4, #3
 8009a30:	42a0      	cmp	r0, r4
 8009a32:	d0f8      	beq.n	8009a26 <sbrk_aligned+0x22>
 8009a34:	1a21      	subs	r1, r4, r0
 8009a36:	4628      	mov	r0, r5
 8009a38:	f000 f89a 	bl	8009b70 <_sbrk_r>
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	d1f2      	bne.n	8009a26 <sbrk_aligned+0x22>
 8009a40:	e7ef      	b.n	8009a22 <sbrk_aligned+0x1e>
 8009a42:	bf00      	nop
 8009a44:	200009a8 	.word	0x200009a8

08009a48 <_malloc_r>:
 8009a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a4c:	1ccd      	adds	r5, r1, #3
 8009a4e:	f025 0503 	bic.w	r5, r5, #3
 8009a52:	3508      	adds	r5, #8
 8009a54:	2d0c      	cmp	r5, #12
 8009a56:	bf38      	it	cc
 8009a58:	250c      	movcc	r5, #12
 8009a5a:	2d00      	cmp	r5, #0
 8009a5c:	4606      	mov	r6, r0
 8009a5e:	db01      	blt.n	8009a64 <_malloc_r+0x1c>
 8009a60:	42a9      	cmp	r1, r5
 8009a62:	d904      	bls.n	8009a6e <_malloc_r+0x26>
 8009a64:	230c      	movs	r3, #12
 8009a66:	6033      	str	r3, [r6, #0]
 8009a68:	2000      	movs	r0, #0
 8009a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b44 <_malloc_r+0xfc>
 8009a72:	f000 f869 	bl	8009b48 <__malloc_lock>
 8009a76:	f8d8 3000 	ldr.w	r3, [r8]
 8009a7a:	461c      	mov	r4, r3
 8009a7c:	bb44      	cbnz	r4, 8009ad0 <_malloc_r+0x88>
 8009a7e:	4629      	mov	r1, r5
 8009a80:	4630      	mov	r0, r6
 8009a82:	f7ff ffbf 	bl	8009a04 <sbrk_aligned>
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	4604      	mov	r4, r0
 8009a8a:	d158      	bne.n	8009b3e <_malloc_r+0xf6>
 8009a8c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a90:	4627      	mov	r7, r4
 8009a92:	2f00      	cmp	r7, #0
 8009a94:	d143      	bne.n	8009b1e <_malloc_r+0xd6>
 8009a96:	2c00      	cmp	r4, #0
 8009a98:	d04b      	beq.n	8009b32 <_malloc_r+0xea>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	eb04 0903 	add.w	r9, r4, r3
 8009aa4:	f000 f864 	bl	8009b70 <_sbrk_r>
 8009aa8:	4581      	cmp	r9, r0
 8009aaa:	d142      	bne.n	8009b32 <_malloc_r+0xea>
 8009aac:	6821      	ldr	r1, [r4, #0]
 8009aae:	1a6d      	subs	r5, r5, r1
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7ff ffa6 	bl	8009a04 <sbrk_aligned>
 8009ab8:	3001      	adds	r0, #1
 8009aba:	d03a      	beq.n	8009b32 <_malloc_r+0xea>
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	442b      	add	r3, r5
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	bb62      	cbnz	r2, 8009b24 <_malloc_r+0xdc>
 8009aca:	f8c8 7000 	str.w	r7, [r8]
 8009ace:	e00f      	b.n	8009af0 <_malloc_r+0xa8>
 8009ad0:	6822      	ldr	r2, [r4, #0]
 8009ad2:	1b52      	subs	r2, r2, r5
 8009ad4:	d420      	bmi.n	8009b18 <_malloc_r+0xd0>
 8009ad6:	2a0b      	cmp	r2, #11
 8009ad8:	d917      	bls.n	8009b0a <_malloc_r+0xc2>
 8009ada:	1961      	adds	r1, r4, r5
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	6025      	str	r5, [r4, #0]
 8009ae0:	bf18      	it	ne
 8009ae2:	6059      	strne	r1, [r3, #4]
 8009ae4:	6863      	ldr	r3, [r4, #4]
 8009ae6:	bf08      	it	eq
 8009ae8:	f8c8 1000 	streq.w	r1, [r8]
 8009aec:	5162      	str	r2, [r4, r5]
 8009aee:	604b      	str	r3, [r1, #4]
 8009af0:	4630      	mov	r0, r6
 8009af2:	f000 f82f 	bl	8009b54 <__malloc_unlock>
 8009af6:	f104 000b 	add.w	r0, r4, #11
 8009afa:	1d23      	adds	r3, r4, #4
 8009afc:	f020 0007 	bic.w	r0, r0, #7
 8009b00:	1ac2      	subs	r2, r0, r3
 8009b02:	bf1c      	itt	ne
 8009b04:	1a1b      	subne	r3, r3, r0
 8009b06:	50a3      	strne	r3, [r4, r2]
 8009b08:	e7af      	b.n	8009a6a <_malloc_r+0x22>
 8009b0a:	6862      	ldr	r2, [r4, #4]
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	bf0c      	ite	eq
 8009b10:	f8c8 2000 	streq.w	r2, [r8]
 8009b14:	605a      	strne	r2, [r3, #4]
 8009b16:	e7eb      	b.n	8009af0 <_malloc_r+0xa8>
 8009b18:	4623      	mov	r3, r4
 8009b1a:	6864      	ldr	r4, [r4, #4]
 8009b1c:	e7ae      	b.n	8009a7c <_malloc_r+0x34>
 8009b1e:	463c      	mov	r4, r7
 8009b20:	687f      	ldr	r7, [r7, #4]
 8009b22:	e7b6      	b.n	8009a92 <_malloc_r+0x4a>
 8009b24:	461a      	mov	r2, r3
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	d1fb      	bne.n	8009b24 <_malloc_r+0xdc>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	6053      	str	r3, [r2, #4]
 8009b30:	e7de      	b.n	8009af0 <_malloc_r+0xa8>
 8009b32:	230c      	movs	r3, #12
 8009b34:	6033      	str	r3, [r6, #0]
 8009b36:	4630      	mov	r0, r6
 8009b38:	f000 f80c 	bl	8009b54 <__malloc_unlock>
 8009b3c:	e794      	b.n	8009a68 <_malloc_r+0x20>
 8009b3e:	6005      	str	r5, [r0, #0]
 8009b40:	e7d6      	b.n	8009af0 <_malloc_r+0xa8>
 8009b42:	bf00      	nop
 8009b44:	200009ac 	.word	0x200009ac

08009b48 <__malloc_lock>:
 8009b48:	4801      	ldr	r0, [pc, #4]	@ (8009b50 <__malloc_lock+0x8>)
 8009b4a:	f000 b84b 	b.w	8009be4 <__retarget_lock_acquire_recursive>
 8009b4e:	bf00      	nop
 8009b50:	20000aec 	.word	0x20000aec

08009b54 <__malloc_unlock>:
 8009b54:	4801      	ldr	r0, [pc, #4]	@ (8009b5c <__malloc_unlock+0x8>)
 8009b56:	f000 b846 	b.w	8009be6 <__retarget_lock_release_recursive>
 8009b5a:	bf00      	nop
 8009b5c:	20000aec 	.word	0x20000aec

08009b60 <memset>:
 8009b60:	4402      	add	r2, r0
 8009b62:	4603      	mov	r3, r0
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d100      	bne.n	8009b6a <memset+0xa>
 8009b68:	4770      	bx	lr
 8009b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b6e:	e7f9      	b.n	8009b64 <memset+0x4>

08009b70 <_sbrk_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4d06      	ldr	r5, [pc, #24]	@ (8009b8c <_sbrk_r+0x1c>)
 8009b74:	2300      	movs	r3, #0
 8009b76:	4604      	mov	r4, r0
 8009b78:	4608      	mov	r0, r1
 8009b7a:	602b      	str	r3, [r5, #0]
 8009b7c:	f7f7 f94c 	bl	8000e18 <_sbrk>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d102      	bne.n	8009b8a <_sbrk_r+0x1a>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	b103      	cbz	r3, 8009b8a <_sbrk_r+0x1a>
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	20000ae8 	.word	0x20000ae8

08009b90 <__errno>:
 8009b90:	4b01      	ldr	r3, [pc, #4]	@ (8009b98 <__errno+0x8>)
 8009b92:	6818      	ldr	r0, [r3, #0]
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	2000002c 	.word	0x2000002c

08009b9c <__libc_init_array>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8009bd4 <__libc_init_array+0x38>)
 8009ba0:	4c0d      	ldr	r4, [pc, #52]	@ (8009bd8 <__libc_init_array+0x3c>)
 8009ba2:	1b64      	subs	r4, r4, r5
 8009ba4:	10a4      	asrs	r4, r4, #2
 8009ba6:	2600      	movs	r6, #0
 8009ba8:	42a6      	cmp	r6, r4
 8009baa:	d109      	bne.n	8009bc0 <__libc_init_array+0x24>
 8009bac:	4d0b      	ldr	r5, [pc, #44]	@ (8009bdc <__libc_init_array+0x40>)
 8009bae:	4c0c      	ldr	r4, [pc, #48]	@ (8009be0 <__libc_init_array+0x44>)
 8009bb0:	f000 f864 	bl	8009c7c <_init>
 8009bb4:	1b64      	subs	r4, r4, r5
 8009bb6:	10a4      	asrs	r4, r4, #2
 8009bb8:	2600      	movs	r6, #0
 8009bba:	42a6      	cmp	r6, r4
 8009bbc:	d105      	bne.n	8009bca <__libc_init_array+0x2e>
 8009bbe:	bd70      	pop	{r4, r5, r6, pc}
 8009bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc4:	4798      	blx	r3
 8009bc6:	3601      	adds	r6, #1
 8009bc8:	e7ee      	b.n	8009ba8 <__libc_init_array+0xc>
 8009bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bce:	4798      	blx	r3
 8009bd0:	3601      	adds	r6, #1
 8009bd2:	e7f2      	b.n	8009bba <__libc_init_array+0x1e>
 8009bd4:	08009cb8 	.word	0x08009cb8
 8009bd8:	08009cb8 	.word	0x08009cb8
 8009bdc:	08009cb8 	.word	0x08009cb8
 8009be0:	08009cbc 	.word	0x08009cbc

08009be4 <__retarget_lock_acquire_recursive>:
 8009be4:	4770      	bx	lr

08009be6 <__retarget_lock_release_recursive>:
 8009be6:	4770      	bx	lr

08009be8 <_free_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4605      	mov	r5, r0
 8009bec:	2900      	cmp	r1, #0
 8009bee:	d041      	beq.n	8009c74 <_free_r+0x8c>
 8009bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf4:	1f0c      	subs	r4, r1, #4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	bfb8      	it	lt
 8009bfa:	18e4      	addlt	r4, r4, r3
 8009bfc:	f7ff ffa4 	bl	8009b48 <__malloc_lock>
 8009c00:	4a1d      	ldr	r2, [pc, #116]	@ (8009c78 <_free_r+0x90>)
 8009c02:	6813      	ldr	r3, [r2, #0]
 8009c04:	b933      	cbnz	r3, 8009c14 <_free_r+0x2c>
 8009c06:	6063      	str	r3, [r4, #4]
 8009c08:	6014      	str	r4, [r2, #0]
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c10:	f7ff bfa0 	b.w	8009b54 <__malloc_unlock>
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	d908      	bls.n	8009c2a <_free_r+0x42>
 8009c18:	6820      	ldr	r0, [r4, #0]
 8009c1a:	1821      	adds	r1, r4, r0
 8009c1c:	428b      	cmp	r3, r1
 8009c1e:	bf01      	itttt	eq
 8009c20:	6819      	ldreq	r1, [r3, #0]
 8009c22:	685b      	ldreq	r3, [r3, #4]
 8009c24:	1809      	addeq	r1, r1, r0
 8009c26:	6021      	streq	r1, [r4, #0]
 8009c28:	e7ed      	b.n	8009c06 <_free_r+0x1e>
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	b10b      	cbz	r3, 8009c34 <_free_r+0x4c>
 8009c30:	42a3      	cmp	r3, r4
 8009c32:	d9fa      	bls.n	8009c2a <_free_r+0x42>
 8009c34:	6811      	ldr	r1, [r2, #0]
 8009c36:	1850      	adds	r0, r2, r1
 8009c38:	42a0      	cmp	r0, r4
 8009c3a:	d10b      	bne.n	8009c54 <_free_r+0x6c>
 8009c3c:	6820      	ldr	r0, [r4, #0]
 8009c3e:	4401      	add	r1, r0
 8009c40:	1850      	adds	r0, r2, r1
 8009c42:	4283      	cmp	r3, r0
 8009c44:	6011      	str	r1, [r2, #0]
 8009c46:	d1e0      	bne.n	8009c0a <_free_r+0x22>
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	6053      	str	r3, [r2, #4]
 8009c4e:	4408      	add	r0, r1
 8009c50:	6010      	str	r0, [r2, #0]
 8009c52:	e7da      	b.n	8009c0a <_free_r+0x22>
 8009c54:	d902      	bls.n	8009c5c <_free_r+0x74>
 8009c56:	230c      	movs	r3, #12
 8009c58:	602b      	str	r3, [r5, #0]
 8009c5a:	e7d6      	b.n	8009c0a <_free_r+0x22>
 8009c5c:	6820      	ldr	r0, [r4, #0]
 8009c5e:	1821      	adds	r1, r4, r0
 8009c60:	428b      	cmp	r3, r1
 8009c62:	bf04      	itt	eq
 8009c64:	6819      	ldreq	r1, [r3, #0]
 8009c66:	685b      	ldreq	r3, [r3, #4]
 8009c68:	6063      	str	r3, [r4, #4]
 8009c6a:	bf04      	itt	eq
 8009c6c:	1809      	addeq	r1, r1, r0
 8009c6e:	6021      	streq	r1, [r4, #0]
 8009c70:	6054      	str	r4, [r2, #4]
 8009c72:	e7ca      	b.n	8009c0a <_free_r+0x22>
 8009c74:	bd38      	pop	{r3, r4, r5, pc}
 8009c76:	bf00      	nop
 8009c78:	200009ac 	.word	0x200009ac

08009c7c <_init>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	bf00      	nop
 8009c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c82:	bc08      	pop	{r3}
 8009c84:	469e      	mov	lr, r3
 8009c86:	4770      	bx	lr

08009c88 <_fini>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	bf00      	nop
 8009c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c8e:	bc08      	pop	{r3}
 8009c90:	469e      	mov	lr, r3
 8009c92:	4770      	bx	lr
