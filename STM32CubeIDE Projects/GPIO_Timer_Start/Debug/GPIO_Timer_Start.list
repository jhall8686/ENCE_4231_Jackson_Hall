
GPIO_Timer_Start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009b5c  08009b5c  0000ab5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b78  08009b78  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b78  08009b78  0000ab78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b80  08009b80  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b80  08009b80  0000ab80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b84  08009b84  0000ab84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009b88  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a64  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019250  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d74  00000000  00000000  000242fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  00028070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001178  00000000  00000000  00029708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243e2  00000000  00000000  0002a880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d996  00000000  00000000  0004ec62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4168  00000000  00000000  0006c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140760  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000634c  00000000  00000000  001407a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008a  00000000  00000000  00146af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009b44 	.word	0x08009b44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009b44 	.word	0x08009b44

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fd52 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f826 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9d2 	bl	80008a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f88c 	bl	8000620 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8b8 	bl	800067c <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8e6 	bl	80006dc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f008 fec2 	bl	8009298 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000514:	f000 f918 	bl	8000748 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1);
 8000518:	2100      	movs	r1, #0
 800051a:	480a      	ldr	r0, [pc, #40]	@ (8000544 <main+0x50>)
 800051c:	f004 ff08 	bl	8005330 <HAL_TIM_OnePulse_Start>

  HAL_GPIO_WritePin(Timer1_Enable_GPIO_Port,Timer1_Enable_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2120      	movs	r1, #32
 8000524:	4808      	ldr	r0, [pc, #32]	@ (8000548 <main+0x54>)
 8000526:	f001 f87f 	bl	8001628 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800052a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052e:	f000 fda9 	bl	8001084 <HAL_Delay>
  HAL_GPIO_WritePin(Timer1_Enable_GPIO_Port,Timer1_Enable_Pin, GPIO_PIN_SET);
 8000532:	2201      	movs	r2, #1
 8000534:	2120      	movs	r1, #32
 8000536:	4804      	ldr	r0, [pc, #16]	@ (8000548 <main+0x54>)
 8000538:	f001 f876 	bl	8001628 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800053c:	f008 fed2 	bl	80092e4 <MX_USB_HOST_Process>
 8000540:	e7fc      	b.n	800053c <main+0x48>
 8000542:	bf00      	nop
 8000544:	2000018c 	.word	0x2000018c
 8000548:	40020800 	.word	0x40020800

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	@ 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f009 fa64 	bl	8009a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b28      	ldr	r3, [pc, #160]	@ (8000618 <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	4a27      	ldr	r2, [pc, #156]	@ (8000618 <SystemClock_Config+0xcc>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000580:	4b25      	ldr	r3, [pc, #148]	@ (8000618 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b22      	ldr	r3, [pc, #136]	@ (800061c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a21      	ldr	r2, [pc, #132]	@ (800061c <SystemClock_Config+0xd0>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1f      	ldr	r3, [pc, #124]	@ (800061c <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005bc:	2308      	movs	r3, #8
 80005be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ca:	2307      	movs	r3, #7
 80005cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 ff5a 	bl	800448c <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005de:	f000 fa73 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2105      	movs	r1, #5
 8000600:	4618      	mov	r0, r3
 8000602:	f004 f9bb 	bl	800497c <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800060c:	f000 fa5c 	bl	8000ac8 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	@ 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f003 f931 	bl	80038c4 <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 fa2e 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000098 	.word	0x20000098
 8000674:	40005400 	.word	0x40005400
 8000678:	000186a0 	.word	0x000186a0

0800067c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000680:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <MX_I2S3_Init+0x54>)
 8000682:	4a14      	ldr	r2, [pc, #80]	@ (80006d4 <MX_I2S3_Init+0x58>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_I2S3_Init+0x54>)
 8000688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800068c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000694:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <MX_I2S3_Init+0x54>)
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006a4:	4a0c      	ldr	r2, [pc, #48]	@ (80006d8 <MX_I2S3_Init+0x5c>)
 80006a6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006bc:	f003 fa46 	bl	8003b4c <HAL_I2S_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006c6:	f000 f9ff 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000ec 	.word	0x200000ec
 80006d4:	40003c00 	.word	0x40003c00
 80006d8:	00017700 	.word	0x00017700

080006dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e0:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <MX_SPI1_Init+0x64>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	@ (8000744 <MX_SPI1_Init+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800070c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_SPI1_Init+0x64>)
 8000728:	220a      	movs	r2, #10
 800072a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_SPI1_Init+0x64>)
 800072e:	f004 fc73 	bl	8005018 <HAL_SPI_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000738:	f000 f9c6 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000134 	.word	0x20000134
 8000744:	40013000 	.word	0x40013000

08000748 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b096      	sub	sp, #88	@ 0x58
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800074e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800077c:	463b      	mov	r3, r7
 800077e:	2220      	movs	r2, #32
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f009 f950 	bl	8009a28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000788:	4b45      	ldr	r3, [pc, #276]	@ (80008a0 <MX_TIM1_Init+0x158>)
 800078a:	4a46      	ldr	r2, [pc, #280]	@ (80008a4 <MX_TIM1_Init+0x15c>)
 800078c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800078e:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <MX_TIM1_Init+0x158>)
 8000790:	22a7      	movs	r2, #167	@ 0xa7
 8000792:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b42      	ldr	r3, [pc, #264]	@ (80008a0 <MX_TIM1_Init+0x158>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 800079a:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <MX_TIM1_Init+0x158>)
 800079c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80007a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a2:	4b3f      	ldr	r3, [pc, #252]	@ (80008a0 <MX_TIM1_Init+0x158>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007a8:	4b3d      	ldr	r3, [pc, #244]	@ (80008a0 <MX_TIM1_Init+0x158>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ae:	4b3c      	ldr	r3, [pc, #240]	@ (80008a0 <MX_TIM1_Init+0x158>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b4:	483a      	ldr	r0, [pc, #232]	@ (80008a0 <MX_TIM1_Init+0x158>)
 80007b6:	f004 fcb8 	bl	800512a <HAL_TIM_Base_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007c0:	f000 f982 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007c4:	4836      	ldr	r0, [pc, #216]	@ (80008a0 <MX_TIM1_Init+0x158>)
 80007c6:	f004 fcff 	bl	80051c8 <HAL_TIM_PWM_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80007d0:	f000 f97a 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80007d4:	2108      	movs	r1, #8
 80007d6:	4832      	ldr	r0, [pc, #200]	@ (80008a0 <MX_TIM1_Init+0x158>)
 80007d8:	f004 fd4f 	bl	800527a <HAL_TIM_OnePulse_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80007e2:	f000 f971 	bl	8000ac8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007e6:	2306      	movs	r3, #6
 80007e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80007ea:	2360      	movs	r3, #96	@ 0x60
 80007ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80007ee:	2300      	movs	r3, #0
 80007f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sSlaveConfig.TriggerFilter = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007f6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007fa:	4619      	mov	r1, r3
 80007fc:	4828      	ldr	r0, [pc, #160]	@ (80008a0 <MX_TIM1_Init+0x158>)
 80007fe:	f004 febb 	bl	8005578 <HAL_TIM_SlaveConfigSynchro>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000808:	f000 f95e 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000814:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000818:	4619      	mov	r1, r3
 800081a:	4821      	ldr	r0, [pc, #132]	@ (80008a0 <MX_TIM1_Init+0x158>)
 800081c:	f005 fa80 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8000826:	f000 f94f 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800082a:	2370      	movs	r3, #112	@ 0x70
 800082c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 10000-1;
 800082e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	2200      	movs	r2, #0
 800084e:	4619      	mov	r1, r3
 8000850:	4813      	ldr	r0, [pc, #76]	@ (80008a0 <MX_TIM1_Init+0x158>)
 8000852:	f004 fdcf 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800085c:	f000 f934 	bl	8000ac8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000878:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <MX_TIM1_Init+0x158>)
 8000884:	f005 fac8 	bl	8005e18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800088e:	f000 f91b 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000892:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MX_TIM1_Init+0x158>)
 8000894:	f000 fa9e 	bl	8000dd4 <HAL_TIM_MspPostInit>

}
 8000898:	bf00      	nop
 800089a:	3758      	adds	r7, #88	@ 0x58
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000018c 	.word	0x2000018c
 80008a4:	40010000 	.word	0x40010000

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	@ 0x30
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	4b7b      	ldr	r3, [pc, #492]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a7a      	ldr	r2, [pc, #488]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b78      	ldr	r3, [pc, #480]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	4b74      	ldr	r3, [pc, #464]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a73      	ldr	r2, [pc, #460]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b71      	ldr	r3, [pc, #452]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b6d      	ldr	r3, [pc, #436]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a6c      	ldr	r2, [pc, #432]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b6a      	ldr	r3, [pc, #424]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b66      	ldr	r3, [pc, #408]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a65      	ldr	r2, [pc, #404]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b63      	ldr	r3, [pc, #396]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b5f      	ldr	r3, [pc, #380]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a5e      	ldr	r2, [pc, #376]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b58      	ldr	r3, [pc, #352]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a57      	ldr	r2, [pc, #348]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b55      	ldr	r3, [pc, #340]	@ (8000ab0 <MX_GPIO_Init+0x208>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2108      	movs	r1, #8
 800096a:	4852      	ldr	r0, [pc, #328]	@ (8000ab4 <MX_GPIO_Init+0x20c>)
 800096c:	f000 fe5c 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2101      	movs	r1, #1
 8000974:	4850      	ldr	r0, [pc, #320]	@ (8000ab8 <MX_GPIO_Init+0x210>)
 8000976:	f000 fe57 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Timer1_Enable_GPIO_Port, Timer1_Enable_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2120      	movs	r1, #32
 800097e:	484e      	ldr	r0, [pc, #312]	@ (8000ab8 <MX_GPIO_Init+0x210>)
 8000980:	f000 fe52 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000984:	2200      	movs	r2, #0
 8000986:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800098a:	484c      	ldr	r0, [pc, #304]	@ (8000abc <MX_GPIO_Init+0x214>)
 800098c:	f000 fe4c 	bl	8001628 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000990:	2308      	movs	r3, #8
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4843      	ldr	r0, [pc, #268]	@ (8000ab4 <MX_GPIO_Init+0x20c>)
 80009a8:	f000 fca2 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Timer1_Enable_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Timer1_Enable_Pin;
 80009ac:	2321      	movs	r3, #33	@ 0x21
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	483d      	ldr	r0, [pc, #244]	@ (8000ab8 <MX_GPIO_Init+0x210>)
 80009c4:	f000 fc94 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009c8:	2308      	movs	r3, #8
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d8:	2305      	movs	r3, #5
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4835      	ldr	r0, [pc, #212]	@ (8000ab8 <MX_GPIO_Init+0x210>)
 80009e4:	f000 fc84 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ec:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4830      	ldr	r0, [pc, #192]	@ (8000ac0 <MX_GPIO_Init+0x218>)
 80009fe:	f000 fc77 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a02:	2304      	movs	r3, #4
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	482b      	ldr	r0, [pc, #172]	@ (8000ac4 <MX_GPIO_Init+0x21c>)
 8000a16:	f000 fc6b 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4823      	ldr	r0, [pc, #140]	@ (8000ac4 <MX_GPIO_Init+0x21c>)
 8000a38:	f000 fc5a 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a46:	2302      	movs	r3, #2
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481a      	ldr	r0, [pc, #104]	@ (8000abc <MX_GPIO_Init+0x214>)
 8000a52:	f000 fc4d 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a56:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a5a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4813      	ldr	r0, [pc, #76]	@ (8000abc <MX_GPIO_Init+0x214>)
 8000a70:	f000 fc3e 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a74:	2320      	movs	r3, #32
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	@ (8000abc <MX_GPIO_Init+0x214>)
 8000a88:	f000 fc32 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a90:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <MX_GPIO_Init+0x20c>)
 8000aa2:	f000 fc25 	bl	80012f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	@ 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <Error_Handler+0x8>

08000ad4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f000 fbaa 	bl	800126c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	@ (8000ba8 <HAL_I2C_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12c      	bne.n	8000ba0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <HAL_I2C_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <HAL_I2C_MspInit+0x88>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b62:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b74:	2304      	movs	r3, #4
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <HAL_I2C_MspInit+0x8c>)
 8000b80:	f000 fbb6 	bl	80012f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	4a07      	ldr	r2, [pc, #28]	@ (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <HAL_I2C_MspInit+0x88>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	@ 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40005400 	.word	0x40005400
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	@ 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a31      	ldr	r2, [pc, #196]	@ (8000ca4 <HAL_I2S_MspInit+0xf0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d15a      	bne.n	8000c9a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000be4:	2301      	movs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000be8:	23c0      	movs	r3, #192	@ 0xc0
 8000bea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f004 f8cd 	bl	8004d94 <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c00:	f7ff ff62 	bl	8000ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0c:	4a26      	ldr	r2, [pc, #152]	@ (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c14:	4b24      	ldr	r3, [pc, #144]	@ (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	4a1f      	ldr	r2, [pc, #124]	@ (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c44:	4a18      	ldr	r2, [pc, #96]	@ (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c68:	2306      	movs	r3, #6
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	480e      	ldr	r0, [pc, #56]	@ (8000cac <HAL_I2S_MspInit+0xf8>)
 8000c74:	f000 fb3c 	bl	80012f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c78:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c8a:	2306      	movs	r3, #6
 8000c8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	4806      	ldr	r0, [pc, #24]	@ (8000cb0 <HAL_I2S_MspInit+0xfc>)
 8000c96:	f000 fb2b 	bl	80012f0 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3738      	adds	r7, #56	@ 0x38
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40003c00 	.word	0x40003c00
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020800 	.word	0x40020800

08000cb4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	@ 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	@ (8000d38 <HAL_SPI_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12b      	bne.n	8000d2e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	@ (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_SPI_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d0e:	23e0      	movs	r3, #224	@ 0xe0
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <HAL_SPI_MspInit+0x8c>)
 8000d2a:	f000 fae1 	bl	80012f0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	@ 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40013000 	.word	0x40013000
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12c      	bne.n	8000dc0 <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <HAL_TIM_Base_MspInit+0x88>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	4a17      	ldr	r2, [pc, #92]	@ (8000dcc <HAL_TIM_Base_MspInit+0x88>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <HAL_TIM_Base_MspInit+0x88>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <HAL_TIM_Base_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <HAL_TIM_Base_MspInit+0x88>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_TIM_Base_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x8c>)
 8000dbc:	f000 fa98 	bl	80012f0 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	@ 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <HAL_TIM_MspPostInit+0x68>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d11e      	bne.n	8000e34 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <HAL_TIM_MspPostInit+0x6c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a10      	ldr	r2, [pc, #64]	@ (8000e40 <HAL_TIM_MspPostInit+0x6c>)
 8000e00:	f043 0310 	orr.w	r3, r3, #16
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <HAL_TIM_MspPostInit+0x6c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0310 	and.w	r3, r3, #16
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <HAL_TIM_MspPostInit+0x70>)
 8000e30:	f000 fa5e 	bl	80012f0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40010000 	.word	0x40010000
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40021000 	.word	0x40021000

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <NMI_Handler+0x4>

08000e50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <MemManage_Handler+0x4>

08000e60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9e:	f000 f8d1 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000eac:	4802      	ldr	r0, [pc, #8]	@ (8000eb8 <OTG_FS_IRQHandler+0x10>)
 8000eae:	f000 feb5 	bl	8001c1c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200005b8 	.word	0x200005b8

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	@ (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f008 fdb4 	bl	8009a58 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20020000 	.word	0x20020000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	200001d4 	.word	0x200001d4
 8000f24:	20000ae0 	.word	0x20000ae0

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f008 fd73 	bl	8009a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fab9 	bl	80004f4 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f90:	08009b88 	.word	0x08009b88
  ldr r2, =_sbss
 8000f94:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f98:	20000ae0 	.word	0x20000ae0

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f94f 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fd7e 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f967 	bl	80012d6 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f92f 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	@ (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	200001d8 	.word	0x200001d8

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	@ (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200001d8 	.word	0x200001d8

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	@ (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	@ (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	@ (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	@ 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	@ 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	e16b      	b.n	80015e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	f040 815a 	bne.w	80015de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d005      	beq.n	8001342 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133e:	2b02      	cmp	r3, #2
 8001340:	d130      	bne.n	80013a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 0201 	and.w	r2, r3, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d017      	beq.n	80013e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d123      	bne.n	8001434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	08da      	lsrs	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3208      	adds	r2, #8
 80013f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3208      	adds	r2, #8
 800142e:	69b9      	ldr	r1, [r7, #24]
 8001430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0203 	and.w	r2, r3, #3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80b4 	beq.w	80015de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b60      	ldr	r3, [pc, #384]	@ (80015fc <HAL_GPIO_Init+0x30c>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	4a5f      	ldr	r2, [pc, #380]	@ (80015fc <HAL_GPIO_Init+0x30c>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001484:	6453      	str	r3, [r2, #68]	@ 0x44
 8001486:	4b5d      	ldr	r3, [pc, #372]	@ (80015fc <HAL_GPIO_Init+0x30c>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001492:	4a5b      	ldr	r2, [pc, #364]	@ (8001600 <HAL_GPIO_Init+0x310>)
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a52      	ldr	r2, [pc, #328]	@ (8001604 <HAL_GPIO_Init+0x314>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d02b      	beq.n	8001516 <HAL_GPIO_Init+0x226>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a51      	ldr	r2, [pc, #324]	@ (8001608 <HAL_GPIO_Init+0x318>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d025      	beq.n	8001512 <HAL_GPIO_Init+0x222>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a50      	ldr	r2, [pc, #320]	@ (800160c <HAL_GPIO_Init+0x31c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01f      	beq.n	800150e <HAL_GPIO_Init+0x21e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001610 <HAL_GPIO_Init+0x320>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x21a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001614 <HAL_GPIO_Init+0x324>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x216>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001618 <HAL_GPIO_Init+0x328>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x212>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4c      	ldr	r2, [pc, #304]	@ (800161c <HAL_GPIO_Init+0x32c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x20e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001620 <HAL_GPIO_Init+0x330>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x20a>
 80014f6:	2307      	movs	r3, #7
 80014f8:	e00e      	b.n	8001518 <HAL_GPIO_Init+0x228>
 80014fa:	2308      	movs	r3, #8
 80014fc:	e00c      	b.n	8001518 <HAL_GPIO_Init+0x228>
 80014fe:	2306      	movs	r3, #6
 8001500:	e00a      	b.n	8001518 <HAL_GPIO_Init+0x228>
 8001502:	2305      	movs	r3, #5
 8001504:	e008      	b.n	8001518 <HAL_GPIO_Init+0x228>
 8001506:	2304      	movs	r3, #4
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x228>
 800150a:	2303      	movs	r3, #3
 800150c:	e004      	b.n	8001518 <HAL_GPIO_Init+0x228>
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x228>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x228>
 8001516:	2300      	movs	r3, #0
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	f002 0203 	and.w	r2, r2, #3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4093      	lsls	r3, r2
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001528:	4935      	ldr	r1, [pc, #212]	@ (8001600 <HAL_GPIO_Init+0x310>)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001536:	4b3b      	ldr	r3, [pc, #236]	@ (8001624 <HAL_GPIO_Init+0x334>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800155a:	4a32      	ldr	r2, [pc, #200]	@ (8001624 <HAL_GPIO_Init+0x334>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001560:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <HAL_GPIO_Init+0x334>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001584:	4a27      	ldr	r2, [pc, #156]	@ (8001624 <HAL_GPIO_Init+0x334>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800158a:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <HAL_GPIO_Init+0x334>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001624 <HAL_GPIO_Init+0x334>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <HAL_GPIO_Init+0x334>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d8:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <HAL_GPIO_Init+0x334>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	f67f ae90 	bls.w	800130c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3724      	adds	r7, #36	@ 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40013800 	.word	0x40013800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	40020800 	.word	0x40020800
 8001610:	40020c00 	.word	0x40020c00
 8001614:	40021000 	.word	0x40021000
 8001618:	40021400 	.word	0x40021400
 800161c:	40021800 	.word	0x40021800
 8001620:	40021c00 	.word	0x40021c00
 8001624:	40013c00 	.word	0x40013c00

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001644:	e003      	b.n	800164e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	041a      	lsls	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af02      	add	r7, sp, #8
 8001660:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e059      	b.n	8001720 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d106      	bne.n	800168c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f007 fe64 	bl	8009354 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2203      	movs	r2, #3
 8001690:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800169a:	d102      	bne.n	80016a2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f004 fc7d 	bl	8005fa6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7c1a      	ldrb	r2, [r3, #16]
 80016b4:	f88d 2000 	strb.w	r2, [sp]
 80016b8:	3304      	adds	r3, #4
 80016ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016bc:	f004 fbfe 	bl	8005ebc <USB_CoreInit>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2202      	movs	r2, #2
 80016ca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e026      	b.n	8001720 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2101      	movs	r1, #1
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 fc75 	bl	8005fc8 <USB_SetCurrentMode>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2202      	movs	r2, #2
 80016e8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e017      	b.n	8001720 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7c1a      	ldrb	r2, [r3, #16]
 80016f8:	f88d 2000 	strb.w	r2, [sp]
 80016fc:	3304      	adds	r3, #4
 80016fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001700:	f004 fe18 	bl	8006334 <USB_HostInit>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d005      	beq.n	8001716 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2202      	movs	r2, #2
 800170e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e004      	b.n	8001720 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b08b      	sub	sp, #44	@ 0x2c
 800172c:	af04      	add	r7, sp, #16
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	4608      	mov	r0, r1
 8001732:	4611      	mov	r1, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4603      	mov	r3, r0
 8001738:	70fb      	strb	r3, [r7, #3]
 800173a:	460b      	mov	r3, r1
 800173c:	70bb      	strb	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001742:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001744:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_HCD_HC_Init+0x2c>
 8001750:	2302      	movs	r3, #2
 8001752:	e09d      	b.n	8001890 <HAL_HCD_HC_Init+0x168>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	3319      	adds	r3, #25
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	1a9b      	subs	r3, r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3314      	adds	r3, #20
 8001780:	787a      	ldrb	r2, [r7, #1]
 8001782:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	1a9b      	subs	r3, r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	3315      	adds	r3, #21
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	3326      	adds	r3, #38	@ 0x26
 80017a8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80017ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	78bb      	ldrb	r3, [r7, #2]
 80017b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017b6:	b2d8      	uxtb	r0, r3
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	1a9b      	subs	r3, r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	3316      	adds	r3, #22
 80017c6:	4602      	mov	r2, r0
 80017c8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fbc8 	bl	8001f64 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80017d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da0a      	bge.n	80017f2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	3317      	adds	r3, #23
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e009      	b.n	8001806 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3317      	adds	r3, #23
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f004 fef6 	bl	80065fc <USB_GetHostSpeed>
 8001810:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001812:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001816:	2b01      	cmp	r3, #1
 8001818:	d10b      	bne.n	8001832 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800181a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800181e:	2b01      	cmp	r3, #1
 8001820:	d107      	bne.n	8001832 <HAL_HCD_HC_Init+0x10a>
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d104      	bne.n	8001832 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2bbc      	cmp	r3, #188	@ 0xbc
 800182c:	d901      	bls.n	8001832 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800182e:	23bc      	movs	r3, #188	@ 0xbc
 8001830:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	3318      	adds	r3, #24
 8001842:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001846:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	b298      	uxth	r0, r3
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	3328      	adds	r3, #40	@ 0x28
 800185c:	4602      	mov	r2, r0
 800185e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	b29b      	uxth	r3, r3
 8001868:	787c      	ldrb	r4, [r7, #1]
 800186a:	78ba      	ldrb	r2, [r7, #2]
 800186c:	78f9      	ldrb	r1, [r7, #3]
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	4623      	mov	r3, r4
 800187e:	f004 fee5 	bl	800664c <USB_HC_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001890:	4618      	mov	r0, r3
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}

08001898 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_HCD_HC_Halt+0x1e>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e00f      	b.n	80018d6 <HAL_HCD_HC_Halt+0x3e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	78fa      	ldrb	r2, [r7, #3]
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f005 fa77 	bl	8006dba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4603      	mov	r3, r0
 80018f0:	70fb      	strb	r3, [r7, #3]
 80018f2:	460b      	mov	r3, r1
 80018f4:	70bb      	strb	r3, [r7, #2]
 80018f6:	4613      	mov	r3, r2
 80018f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	3317      	adds	r3, #23
 800190a:	78ba      	ldrb	r2, [r7, #2]
 800190c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3326      	adds	r3, #38	@ 0x26
 800191e:	787a      	ldrb	r2, [r7, #1]
 8001920:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001922:	7c3b      	ldrb	r3, [r7, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d114      	bne.n	8001952 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001928:	78fa      	ldrb	r2, [r7, #3]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	332a      	adds	r3, #42	@ 0x2a
 8001938:	2203      	movs	r2, #3
 800193a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	3319      	adds	r3, #25
 800194c:	7f3a      	ldrb	r2, [r7, #28]
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e009      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	332a      	adds	r3, #42	@ 0x2a
 8001962:	2202      	movs	r2, #2
 8001964:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001966:	787b      	ldrb	r3, [r7, #1]
 8001968:	2b03      	cmp	r3, #3
 800196a:	f200 8102 	bhi.w	8001b72 <HAL_HCD_HC_SubmitRequest+0x292>
 800196e:	a201      	add	r2, pc, #4	@ (adr r2, 8001974 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	08001985 	.word	0x08001985
 8001978:	08001b5d 	.word	0x08001b5d
 800197c:	08001a49 	.word	0x08001a49
 8001980:	08001ad3 	.word	0x08001ad3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001984:	7c3b      	ldrb	r3, [r7, #16]
 8001986:	2b01      	cmp	r3, #1
 8001988:	f040 80f5 	bne.w	8001b76 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800198c:	78bb      	ldrb	r3, [r7, #2]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d12d      	bne.n	80019ee <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001992:	8b3b      	ldrh	r3, [r7, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d109      	bne.n	80019ac <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	333d      	adds	r3, #61	@ 0x3d
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	333d      	adds	r3, #61	@ 0x3d
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10a      	bne.n	80019d8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	332a      	adds	r3, #42	@ 0x2a
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80019d6:	e0ce      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	332a      	adds	r3, #42	@ 0x2a
 80019e8:	2202      	movs	r2, #2
 80019ea:	701a      	strb	r2, [r3, #0]
      break;
 80019ec:	e0c3      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	1a9b      	subs	r3, r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	331a      	adds	r3, #26
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	f040 80b8 	bne.w	8001b76 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	333c      	adds	r3, #60	@ 0x3c
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10a      	bne.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	332a      	adds	r3, #42	@ 0x2a
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
      break;
 8001a30:	e0a1      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	332a      	adds	r3, #42	@ 0x2a
 8001a42:	2202      	movs	r2, #2
 8001a44:	701a      	strb	r2, [r3, #0]
      break;
 8001a46:	e096      	b.n	8001b76 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a48:	78bb      	ldrb	r3, [r7, #2]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d120      	bne.n	8001a90 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a4e:	78fa      	ldrb	r2, [r7, #3]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	333d      	adds	r3, #61	@ 0x3d
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10a      	bne.n	8001a7a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	332a      	adds	r3, #42	@ 0x2a
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a78:	e07e      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	332a      	adds	r3, #42	@ 0x2a
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	701a      	strb	r2, [r3, #0]
      break;
 8001a8e:	e073      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	333c      	adds	r3, #60	@ 0x3c
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10a      	bne.n	8001abc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	332a      	adds	r3, #42	@ 0x2a
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
      break;
 8001aba:	e05d      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	332a      	adds	r3, #42	@ 0x2a
 8001acc:	2202      	movs	r2, #2
 8001ace:	701a      	strb	r2, [r3, #0]
      break;
 8001ad0:	e052      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ad2:	78bb      	ldrb	r3, [r7, #2]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d120      	bne.n	8001b1a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	333d      	adds	r3, #61	@ 0x3d
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10a      	bne.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	332a      	adds	r3, #42	@ 0x2a
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b02:	e039      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	332a      	adds	r3, #42	@ 0x2a
 8001b14:	2202      	movs	r2, #2
 8001b16:	701a      	strb	r2, [r3, #0]
      break;
 8001b18:	e02e      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b1a:	78fa      	ldrb	r2, [r7, #3]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	333c      	adds	r3, #60	@ 0x3c
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10a      	bne.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	332a      	adds	r3, #42	@ 0x2a
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
      break;
 8001b44:	e018      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b46:	78fa      	ldrb	r2, [r7, #3]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	332a      	adds	r3, #42	@ 0x2a
 8001b56:	2202      	movs	r2, #2
 8001b58:	701a      	strb	r2, [r3, #0]
      break;
 8001b5a:	e00d      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	332a      	adds	r3, #42	@ 0x2a
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
      break;
 8001b70:	e002      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001b72:	bf00      	nop
 8001b74:	e000      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001b76:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	332c      	adds	r3, #44	@ 0x2c
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	8b39      	ldrh	r1, [r7, #24]
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4403      	add	r3, r0
 8001b9c:	3334      	adds	r3, #52	@ 0x34
 8001b9e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	334c      	adds	r3, #76	@ 0x4c
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3338      	adds	r3, #56	@ 0x38
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3315      	adds	r3, #21
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	334d      	adds	r3, #77	@ 0x4d
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	3310      	adds	r3, #16
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	1d19      	adds	r1, r3, #4
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	799b      	ldrb	r3, [r3, #6]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f004 fe4a 	bl	80068a4 <USB_HC_StartXfer>
 8001c10:	4603      	mov	r3, r0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop

08001c1c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 fb3e 	bl	80062b4 <USB_GetMode>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	f040 80fb 	bne.w	8001e36 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f004 fb01 	bl	800624c <USB_ReadInterrupts>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80f1 	beq.w	8001e34 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f004 faf8 	bl	800624c <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c66:	d104      	bne.n	8001c72 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 fae8 	bl	800624c <USB_ReadInterrupts>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c86:	d104      	bne.n	8001c92 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 fad8 	bl	800624c <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ca2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ca6:	d104      	bne.n	8001cb2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f004 fac8 	bl	800624c <USB_ReadInterrupts>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d103      	bne.n	8001cce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 faba 	bl	800624c <USB_ReadInterrupts>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ce2:	d120      	bne.n	8001d26 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001cec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d113      	bne.n	8001d26 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001cfe:	2110      	movs	r1, #16
 8001d00:	6938      	ldr	r0, [r7, #16]
 8001d02:	f004 f9ad 	bl	8006060 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d06:	6938      	ldr	r0, [r7, #16]
 8001d08:	f004 f9dc 	bl	80060c4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7a5b      	ldrb	r3, [r3, #9]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d105      	bne.n	8001d20 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f004 fbce 	bl	80064bc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f007 fb95 	bl	8009450 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f004 fa8e 	bl	800624c <USB_ReadInterrupts>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d3a:	d102      	bne.n	8001d42 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f001 fd4d 	bl	80037dc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 fa80 	bl	800624c <USB_ReadInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d106      	bne.n	8001d64 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f007 fb5e 	bl	8009418 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2208      	movs	r2, #8
 8001d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 fa6f 	bl	800624c <USB_ReadInterrupts>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d78:	d139      	bne.n	8001dee <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f005 f80a 	bl	8006d98 <USB_HC_ReadInterrupt>
 8001d84:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e025      	b.n	8001dd8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d018      	beq.n	8001dd2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001db6:	d106      	bne.n	8001dc6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f905 	bl	8001fce <HCD_HC_IN_IRQHandler>
 8001dc4:	e005      	b.n	8001dd2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 ff67 	bl	8002ca0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	795b      	ldrb	r3, [r3, #5]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d3d3      	bcc.n	8001d8c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 fa2a 	bl	800624c <USB_ReadInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d101      	bne.n	8001e06 <HAL_HCD_IRQHandler+0x1ea>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_HCD_IRQHandler+0x1ec>
 8001e06:	2300      	movs	r3, #0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d014      	beq.n	8001e36 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0210 	bic.w	r2, r2, #16
 8001e1a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f001 fbfe 	bl	800361e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699a      	ldr	r2, [r3, #24]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0210 	orr.w	r2, r2, #16
 8001e30:	619a      	str	r2, [r3, #24]
 8001e32:	e000      	b.n	8001e36 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001e34:	bf00      	nop
    }
  }
}
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_HCD_Start+0x16>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e013      	b.n	8001e7a <HAL_HCD_Start+0x3e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f004 fb92 	bl	800658a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f004 f88a 	bl	8005f84 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_HCD_Stop+0x16>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e00d      	b.n	8001eb4 <HAL_HCD_Stop+0x32>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f005 f8e5 	bl	8007074 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f004 fb34 	bl	8006536 <USB_ResetPort>
 8001ece:	4603      	mov	r3, r0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	334c      	adds	r3, #76	@ 0x4c
 8001ef4:	781b      	ldrb	r3, [r3, #0]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3338      	adds	r3, #56	@ 0x38
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f004 fb76 	bl	800662a <USB_GetCurrentFrame>
 8001f3e:	4603      	mov	r3, r0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f004 fb51 	bl	80065fc <USB_GetHostSpeed>
 8001f5a:	4603      	mov	r3, r0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	331a      	adds	r3, #26
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	331b      	adds	r3, #27
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3325      	adds	r3, #37	@ 0x25
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3324      	adds	r3, #36	@ 0x24
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 f940 	bl	8006272 <USB_ReadChInterrupts>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d11a      	bne.n	8002032 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002008:	461a      	mov	r2, r3
 800200a:	2304      	movs	r3, #4
 800200c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	334d      	adds	r3, #77	@ 0x4d
 800201e:	2207      	movs	r2, #7
 8002020:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f004 fec5 	bl	8006dba <USB_HC_Halt>
 8002030:	e09e      	b.n	8002170 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f004 f919 	bl	8006272 <USB_ReadChInterrupts>
 8002040:	4603      	mov	r3, r0
 8002042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800204a:	d11b      	bne.n	8002084 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002058:	461a      	mov	r2, r3
 800205a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800205e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	334d      	adds	r3, #77	@ 0x4d
 8002070:	2208      	movs	r2, #8
 8002072:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f004 fe9c 	bl	8006dba <USB_HC_Halt>
 8002082:	e075      	b.n	8002170 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f004 f8f0 	bl	8006272 <USB_ReadChInterrupts>
 8002092:	4603      	mov	r3, r0
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b08      	cmp	r3, #8
 800209a:	d11a      	bne.n	80020d2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a8:	461a      	mov	r2, r3
 80020aa:	2308      	movs	r3, #8
 80020ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	334d      	adds	r3, #77	@ 0x4d
 80020be:	2206      	movs	r2, #6
 80020c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 fe75 	bl	8006dba <USB_HC_Halt>
 80020d0:	e04e      	b.n	8002170 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 f8c9 	bl	8006272 <USB_ReadChInterrupts>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ea:	d11b      	bne.n	8002124 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f8:	461a      	mov	r2, r3
 80020fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	334d      	adds	r3, #77	@ 0x4d
 8002110:	2209      	movs	r2, #9
 8002112:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f004 fe4c 	bl	8006dba <USB_HC_Halt>
 8002122:	e025      	b.n	8002170 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f004 f8a0 	bl	8006272 <USB_ReadChInterrupts>
 8002132:	4603      	mov	r3, r0
 8002134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002138:	2b80      	cmp	r3, #128	@ 0x80
 800213a:	d119      	bne.n	8002170 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002148:	461a      	mov	r2, r3
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	334d      	adds	r3, #77	@ 0x4d
 800215e:	2207      	movs	r2, #7
 8002160:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f004 fe25 	bl	8006dba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f004 f87a 	bl	8006272 <USB_ReadChInterrupts>
 800217e:	4603      	mov	r3, r0
 8002180:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002188:	d112      	bne.n	80021b0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f004 fe11 	bl	8006dba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a4:	461a      	mov	r2, r3
 80021a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021aa:	6093      	str	r3, [r2, #8]
 80021ac:	f000 bd75 	b.w	8002c9a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f004 f85a 	bl	8006272 <USB_ReadChInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	f040 8128 	bne.w	800241a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	2320      	movs	r3, #32
 80021da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	331b      	adds	r3, #27
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d119      	bne.n	8002226 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	331b      	adds	r3, #27
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	0151      	lsls	r1, r2, #5
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	440a      	add	r2, r1
 800221c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002224:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	799b      	ldrb	r3, [r3, #6]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01b      	beq.n	8002266 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	3330      	adds	r3, #48	@ 0x30
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	1ac9      	subs	r1, r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4403      	add	r3, r0
 8002262:	3338      	adds	r3, #56	@ 0x38
 8002264:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	334d      	adds	r3, #77	@ 0x4d
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	3344      	adds	r3, #68	@ 0x44
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800229a:	461a      	mov	r2, r3
 800229c:	2301      	movs	r3, #1
 800229e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	3326      	adds	r3, #38	@ 0x26
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	3326      	adds	r3, #38	@ 0x26
 80022c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d110      	bne.n	80022ee <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 fd70 	bl	8006dba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022e6:	461a      	mov	r2, r3
 80022e8:	2310      	movs	r3, #16
 80022ea:	6093      	str	r3, [r2, #8]
 80022ec:	e03d      	b.n	800236a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	3326      	adds	r3, #38	@ 0x26
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d00a      	beq.n	800231a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	3326      	adds	r3, #38	@ 0x26
 8002314:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002316:	2b01      	cmp	r3, #1
 8002318:	d127      	bne.n	800236a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	0151      	lsls	r1, r2, #5
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	440a      	add	r2, r1
 8002330:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002334:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002338:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	334c      	adds	r3, #76	@ 0x4c
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	334c      	adds	r3, #76	@ 0x4c
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	4619      	mov	r1, r3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f007 f881 	bl	800946c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	799b      	ldrb	r3, [r3, #6]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d13b      	bne.n	80023ea <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	3338      	adds	r3, #56	@ 0x38
 8002382:	6819      	ldr	r1, [r3, #0]
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4403      	add	r3, r0
 8002392:	3328      	adds	r3, #40	@ 0x28
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	440b      	add	r3, r1
 8002398:	1e59      	subs	r1, r3, #1
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4403      	add	r3, r0
 80023a8:	3328      	adds	r3, #40	@ 0x28
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8470 	beq.w	8002c9a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	333c      	adds	r3, #60	@ 0x3c
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2d8      	uxtb	r0, r3
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	333c      	adds	r3, #60	@ 0x3c
 80023e2:	4602      	mov	r2, r0
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	f000 bc58 	b.w	8002c9a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	333c      	adds	r3, #60	@ 0x3c
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	f083 0301 	eor.w	r3, r3, #1
 8002402:	b2d8      	uxtb	r0, r3
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	333c      	adds	r3, #60	@ 0x3c
 8002412:	4602      	mov	r2, r0
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	f000 bc40 	b.w	8002c9a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f003 ff25 	bl	8006272 <USB_ReadChInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b20      	cmp	r3, #32
 8002430:	d131      	bne.n	8002496 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800243e:	461a      	mov	r2, r3
 8002440:	2320      	movs	r3, #32
 8002442:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	331a      	adds	r3, #26
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	f040 841f 	bne.w	8002c9a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	331b      	adds	r3, #27
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	334d      	adds	r3, #77	@ 0x4d
 8002480:	2203      	movs	r2, #3
 8002482:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f004 fc94 	bl	8006dba <USB_HC_Halt>
 8002492:	f000 bc02 	b.w	8002c9a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 fee7 	bl	8006272 <USB_ReadChInterrupts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	f040 8305 	bne.w	8002aba <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024bc:	461a      	mov	r2, r3
 80024be:	2302      	movs	r3, #2
 80024c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	334d      	adds	r3, #77	@ 0x4d
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d114      	bne.n	8002502 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	334d      	adds	r3, #77	@ 0x4d
 80024e8:	2202      	movs	r2, #2
 80024ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	334c      	adds	r3, #76	@ 0x4c
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e2cc      	b.n	8002a9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	334d      	adds	r3, #77	@ 0x4d
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b06      	cmp	r3, #6
 8002516:	d114      	bne.n	8002542 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	334d      	adds	r3, #77	@ 0x4d
 8002528:	2202      	movs	r2, #2
 800252a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	334c      	adds	r3, #76	@ 0x4c
 800253c:	2205      	movs	r2, #5
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	e2ac      	b.n	8002a9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	334d      	adds	r3, #77	@ 0x4d
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b07      	cmp	r3, #7
 8002556:	d00b      	beq.n	8002570 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	334d      	adds	r3, #77	@ 0x4d
 8002568:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800256a:	2b09      	cmp	r3, #9
 800256c:	f040 80a6 	bne.w	80026bc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	334d      	adds	r3, #77	@ 0x4d
 8002580:	2202      	movs	r2, #2
 8002582:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	3344      	adds	r3, #68	@ 0x44
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1c59      	adds	r1, r3, #1
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4403      	add	r3, r0
 80025a4:	3344      	adds	r3, #68	@ 0x44
 80025a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	3344      	adds	r3, #68	@ 0x44
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d943      	bls.n	8002646 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	3344      	adds	r3, #68	@ 0x44
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	331a      	adds	r3, #26
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d123      	bne.n	8002630 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	331b      	adds	r3, #27
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	331c      	adds	r3, #28
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	0151      	lsls	r1, r2, #5
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	440a      	add	r2, r1
 8002626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800262a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	334c      	adds	r3, #76	@ 0x4c
 8002640:	2204      	movs	r2, #4
 8002642:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002644:	e229      	b.n	8002a9a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	334c      	adds	r3, #76	@ 0x4c
 8002656:	2202      	movs	r2, #2
 8002658:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	3326      	adds	r3, #38	@ 0x26
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00b      	beq.n	8002688 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3326      	adds	r3, #38	@ 0x26
 8002680:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002682:	2b02      	cmp	r3, #2
 8002684:	f040 8209 	bne.w	8002a9a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800269e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b4:	461a      	mov	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026ba:	e1ee      	b.n	8002a9a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	334d      	adds	r3, #77	@ 0x4d
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	f040 80c8 	bne.w	8002864 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	334d      	adds	r3, #77	@ 0x4d
 80026e4:	2202      	movs	r2, #2
 80026e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	331b      	adds	r3, #27
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 81ce 	bne.w	8002a9c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3326      	adds	r3, #38	@ 0x26
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d16b      	bne.n	80027ee <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	3348      	adds	r3, #72	@ 0x48
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	1c59      	adds	r1, r3, #1
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4403      	add	r3, r0
 8002736:	3348      	adds	r3, #72	@ 0x48
 8002738:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	3348      	adds	r3, #72	@ 0x48
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d943      	bls.n	80027d8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3348      	adds	r3, #72	@ 0x48
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	331b      	adds	r3, #27
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	3344      	adds	r3, #68	@ 0x44
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d809      	bhi.n	80027a2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	331c      	adds	r3, #28
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	0151      	lsls	r1, r2, #5
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	440a      	add	r2, r1
 80027b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027c0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	334c      	adds	r3, #76	@ 0x4c
 80027d2:	2204      	movs	r2, #4
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e014      	b.n	8002802 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	334c      	adds	r3, #76	@ 0x4c
 80027e8:	2202      	movs	r2, #2
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	e009      	b.n	8002802 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	334c      	adds	r3, #76	@ 0x4c
 80027fe:	2202      	movs	r2, #2
 8002800:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3326      	adds	r3, #38	@ 0x26
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	3326      	adds	r3, #38	@ 0x26
 8002828:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800282a:	2b02      	cmp	r3, #2
 800282c:	f040 8136 	bne.w	8002a9c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002846:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800284e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285c:	461a      	mov	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e11b      	b.n	8002a9c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	334d      	adds	r3, #77	@ 0x4d
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b03      	cmp	r3, #3
 8002878:	f040 8081 	bne.w	800297e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	334d      	adds	r3, #77	@ 0x4d
 800288c:	2202      	movs	r2, #2
 800288e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	331b      	adds	r3, #27
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 80fa 	bne.w	8002a9c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	334c      	adds	r3, #76	@ 0x4c
 80028b8:	2202      	movs	r2, #2
 80028ba:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	0151      	lsls	r1, r2, #5
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	440a      	add	r2, r1
 80028d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028da:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	0151      	lsls	r1, r2, #5
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	440a      	add	r2, r1
 80028f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028fa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	0151      	lsls	r1, r2, #5
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	440a      	add	r2, r1
 8002912:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002916:	f023 0320 	bic.w	r3, r3, #32
 800291a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3326      	adds	r3, #38	@ 0x26
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3326      	adds	r3, #38	@ 0x26
 8002942:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002944:	2b02      	cmp	r3, #2
 8002946:	f040 80a9 	bne.w	8002a9c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002960:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002968:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002976:	461a      	mov	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e08e      	b.n	8002a9c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	334d      	adds	r3, #77	@ 0x4d
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b04      	cmp	r3, #4
 8002992:	d143      	bne.n	8002a1c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	334d      	adds	r3, #77	@ 0x4d
 80029a4:	2202      	movs	r2, #2
 80029a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	334c      	adds	r3, #76	@ 0x4c
 80029b8:	2202      	movs	r2, #2
 80029ba:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3326      	adds	r3, #38	@ 0x26
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	3326      	adds	r3, #38	@ 0x26
 80029e2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d159      	bne.n	8002a9c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029fe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a06:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a14:	461a      	mov	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e03f      	b.n	8002a9c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	334d      	adds	r3, #77	@ 0x4d
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d126      	bne.n	8002a80 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	334d      	adds	r3, #77	@ 0x4d
 8002a42:	2202      	movs	r2, #2
 8002a44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3344      	adds	r3, #68	@ 0x44
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	1c59      	adds	r1, r3, #1
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4403      	add	r3, r0
 8002a66:	3344      	adds	r3, #68	@ 0x44
 8002a68:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	334c      	adds	r3, #76	@ 0x4c
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e00d      	b.n	8002a9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	334d      	adds	r3, #77	@ 0x4d
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	f000 8100 	beq.w	8002c98 <HCD_HC_IN_IRQHandler+0xcca>
 8002a98:	e000      	b.n	8002a9c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a9a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	334c      	adds	r3, #76	@ 0x4c
 8002aac:	781a      	ldrb	r2, [r3, #0]
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f006 fcda 	bl	800946c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ab8:	e0ef      	b.n	8002c9a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f003 fbd5 	bl	8006272 <USB_ReadChInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ace:	2b40      	cmp	r3, #64	@ 0x40
 8002ad0:	d12f      	bne.n	8002b32 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2340      	movs	r3, #64	@ 0x40
 8002ae2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	334d      	adds	r3, #77	@ 0x4d
 8002af4:	2205      	movs	r2, #5
 8002af6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	331a      	adds	r3, #26
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3344      	adds	r3, #68	@ 0x44
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 f945 	bl	8006dba <USB_HC_Halt>
 8002b30:	e0b3      	b.n	8002c9a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 fb99 	bl	8006272 <USB_ReadChInterrupts>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	f040 80a7 	bne.w	8002c9a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3326      	adds	r3, #38	@ 0x26
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d11b      	bne.n	8002b9a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3344      	adds	r3, #68	@ 0x44
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	334d      	adds	r3, #77	@ 0x4d
 8002b86:	2204      	movs	r2, #4
 8002b88:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f004 f911 	bl	8006dba <USB_HC_Halt>
 8002b98:	e03f      	b.n	8002c1a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3326      	adds	r3, #38	@ 0x26
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3326      	adds	r3, #38	@ 0x26
 8002bc0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d129      	bne.n	8002c1a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3344      	adds	r3, #68	@ 0x44
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	799b      	ldrb	r3, [r3, #6]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HCD_HC_IN_IRQHandler+0xc2a>
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	331b      	adds	r3, #27
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d110      	bne.n	8002c1a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	334d      	adds	r3, #77	@ 0x4d
 8002c08:	2204      	movs	r2, #4
 8002c0a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 f8d0 	bl	8006dba <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	331b      	adds	r3, #27
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d129      	bne.n	8002c84 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	331b      	adds	r3, #27
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	0151      	lsls	r1, r2, #5
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	440a      	add	r2, r1
 8002c5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c62:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	0151      	lsls	r1, r2, #5
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	440a      	add	r2, r1
 8002c7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c7e:	f043 0320 	orr.w	r3, r3, #32
 8002c82:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c90:	461a      	mov	r2, r3
 8002c92:	2310      	movs	r3, #16
 8002c94:	6093      	str	r3, [r2, #8]
 8002c96:	e000      	b.n	8002c9a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002c98:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 fad7 	bl	8006272 <USB_ReadChInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d11b      	bne.n	8002d06 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2304      	movs	r3, #4
 8002cde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	334d      	adds	r3, #77	@ 0x4d
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f004 f85c 	bl	8006dba <USB_HC_Halt>
 8002d02:	f000 bc89 	b.w	8003618 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 faaf 	bl	8006272 <USB_ReadChInterrupts>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	f040 8082 	bne.w	8002e24 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2320      	movs	r3, #32
 8002d30:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	3319      	adds	r3, #25
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d124      	bne.n	8002d92 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	3319      	adds	r3, #25
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	334c      	adds	r3, #76	@ 0x4c
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	334d      	adds	r3, #77	@ 0x4d
 8002d80:	2203      	movs	r2, #3
 8002d82:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f004 f814 	bl	8006dba <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	331a      	adds	r3, #26
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f040 8437 	bne.w	8003618 <HCD_HC_OUT_IRQHandler+0x978>
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	331b      	adds	r3, #27
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 842b 	bne.w	8003618 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3326      	adds	r3, #38	@ 0x26
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d009      	beq.n	8002dec <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	331b      	adds	r3, #27
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	@ 0x4d
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 ffd6 	bl	8006dba <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	3344      	adds	r3, #68	@ 0x44
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e3f9      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 fa20 	bl	8006272 <USB_ReadChInterrupts>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e3c:	d111      	bne.n	8002e62 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f003 ffad 	bl	8006dba <USB_HC_Halt>
 8002e60:	e3da      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 fa01 	bl	8006272 <USB_ReadChInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d168      	bne.n	8002f4c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	3344      	adds	r3, #68	@ 0x44
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f003 f9eb 	bl	8006272 <USB_ReadChInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea2:	2b40      	cmp	r3, #64	@ 0x40
 8002ea4:	d112      	bne.n	8002ecc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3319      	adds	r3, #25
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2340      	movs	r3, #64	@ 0x40
 8002eca:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	331b      	adds	r3, #27
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d019      	beq.n	8002f16 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	331b      	adds	r3, #27
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	0151      	lsls	r1, r2, #5
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	440a      	add	r2, r1
 8002f0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f14:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f22:	461a      	mov	r2, r3
 8002f24:	2301      	movs	r3, #1
 8002f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	334d      	adds	r3, #77	@ 0x4d
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f003 ff38 	bl	8006dba <USB_HC_Halt>
 8002f4a:	e365      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 f98c 	bl	8006272 <USB_ReadChInterrupts>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f60:	2b40      	cmp	r3, #64	@ 0x40
 8002f62:	d139      	bne.n	8002fd8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	334d      	adds	r3, #77	@ 0x4d
 8002f74:	2205      	movs	r2, #5
 8002f76:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	331a      	adds	r3, #26
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	3319      	adds	r3, #25
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	3344      	adds	r3, #68	@ 0x44
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fefb 	bl	8006dba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2340      	movs	r3, #64	@ 0x40
 8002fd4:	6093      	str	r3, [r2, #8]
 8002fd6:	e31f      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 f946 	bl	8006272 <USB_ReadChInterrupts>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d11a      	bne.n	8003026 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2308      	movs	r3, #8
 8003000:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	334d      	adds	r3, #77	@ 0x4d
 8003012:	2206      	movs	r2, #6
 8003014:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f003 fecb 	bl	8006dba <USB_HC_Halt>
 8003024:	e2f8      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f003 f91f 	bl	8006272 <USB_ReadChInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	2b10      	cmp	r3, #16
 800303c:	d144      	bne.n	80030c8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	3344      	adds	r3, #68	@ 0x44
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	334d      	adds	r3, #77	@ 0x4d
 8003062:	2204      	movs	r2, #4
 8003064:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	3319      	adds	r3, #25
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d114      	bne.n	80030a6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	3318      	adds	r3, #24
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	3319      	adds	r3, #25
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 fe83 	bl	8006dba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c0:	461a      	mov	r2, r3
 80030c2:	2310      	movs	r3, #16
 80030c4:	6093      	str	r3, [r2, #8]
 80030c6:	e2a7      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f003 f8ce 	bl	8006272 <USB_ReadChInterrupts>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030dc:	2b80      	cmp	r3, #128	@ 0x80
 80030de:	f040 8083 	bne.w	80031e8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	799b      	ldrb	r3, [r3, #6]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d111      	bne.n	800310e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	334d      	adds	r3, #77	@ 0x4d
 80030fa:	2207      	movs	r2, #7
 80030fc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f003 fe57 	bl	8006dba <USB_HC_Halt>
 800310c:	e062      	b.n	80031d4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3344      	adds	r3, #68	@ 0x44
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	1c59      	adds	r1, r3, #1
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4403      	add	r3, r0
 800312e:	3344      	adds	r3, #68	@ 0x44
 8003130:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3344      	adds	r3, #68	@ 0x44
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d922      	bls.n	800318e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	3344      	adds	r3, #68	@ 0x44
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	334c      	adds	r3, #76	@ 0x4c
 800316c:	2204      	movs	r2, #4
 800316e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	334c      	adds	r3, #76	@ 0x4c
 8003180:	781a      	ldrb	r2, [r3, #0]
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	4619      	mov	r1, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f006 f970 	bl	800946c <HAL_HCD_HC_NotifyURBChange_Callback>
 800318c:	e022      	b.n	80031d4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	334c      	adds	r3, #76	@ 0x4c
 800319e:	2202      	movs	r2, #2
 80031a0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031b8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031c0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ce:	461a      	mov	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e0:	461a      	mov	r2, r3
 80031e2:	2380      	movs	r3, #128	@ 0x80
 80031e4:	6093      	str	r3, [r2, #8]
 80031e6:	e217      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 f83e 	bl	8006272 <USB_ReadChInterrupts>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003200:	d11b      	bne.n	800323a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334d      	adds	r3, #77	@ 0x4d
 8003212:	2209      	movs	r2, #9
 8003214:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f003 fdcb 	bl	8006dba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003230:	461a      	mov	r2, r3
 8003232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003236:	6093      	str	r3, [r2, #8]
 8003238:	e1ee      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f003 f815 	bl	8006272 <USB_ReadChInterrupts>
 8003248:	4603      	mov	r3, r0
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b02      	cmp	r3, #2
 8003250:	f040 81df 	bne.w	8003612 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003260:	461a      	mov	r2, r3
 8003262:	2302      	movs	r3, #2
 8003264:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334d      	adds	r3, #77	@ 0x4d
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	f040 8093 	bne.w	80033a4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	334d      	adds	r3, #77	@ 0x4d
 800328e:	2202      	movs	r2, #2
 8003290:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	334c      	adds	r3, #76	@ 0x4c
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3326      	adds	r3, #38	@ 0x26
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d00b      	beq.n	80032d4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	3326      	adds	r3, #38	@ 0x26
 80032cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	f040 8190 	bne.w	80035f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	799b      	ldrb	r3, [r3, #6]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d115      	bne.n	8003308 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	333d      	adds	r3, #61	@ 0x3d
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	f083 0301 	eor.w	r3, r3, #1
 80032f4:	b2d8      	uxtb	r0, r3
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	333d      	adds	r3, #61	@ 0x3d
 8003304:	4602      	mov	r2, r0
 8003306:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	799b      	ldrb	r3, [r3, #6]
 800330c:	2b01      	cmp	r3, #1
 800330e:	f040 8171 	bne.w	80035f4 <HCD_HC_OUT_IRQHandler+0x954>
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3334      	adds	r3, #52	@ 0x34
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8165 	beq.w	80035f4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3334      	adds	r3, #52	@ 0x34
 800333a:	6819      	ldr	r1, [r3, #0]
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4403      	add	r3, r0
 800334a:	3328      	adds	r3, #40	@ 0x28
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	440b      	add	r3, r1
 8003350:	1e59      	subs	r1, r3, #1
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4403      	add	r3, r0
 8003360:	3328      	adds	r3, #40	@ 0x28
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	fbb1 f3f3 	udiv	r3, r1, r3
 8003368:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 813f 	beq.w	80035f4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	333d      	adds	r3, #61	@ 0x3d
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	f083 0301 	eor.w	r3, r3, #1
 800338e:	b2d8      	uxtb	r0, r3
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	333d      	adds	r3, #61	@ 0x3d
 800339e:	4602      	mov	r2, r0
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e127      	b.n	80035f4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	334d      	adds	r3, #77	@ 0x4d
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d120      	bne.n	80033fc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	334d      	adds	r3, #77	@ 0x4d
 80033ca:	2202      	movs	r2, #2
 80033cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	331b      	adds	r3, #27
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	f040 8107 	bne.w	80035f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	334c      	adds	r3, #76	@ 0x4c
 80033f6:	2202      	movs	r2, #2
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	e0fb      	b.n	80035f4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334d      	adds	r3, #77	@ 0x4d
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b04      	cmp	r3, #4
 8003410:	d13a      	bne.n	8003488 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334d      	adds	r3, #77	@ 0x4d
 8003422:	2202      	movs	r2, #2
 8003424:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	334c      	adds	r3, #76	@ 0x4c
 8003436:	2202      	movs	r2, #2
 8003438:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	331b      	adds	r3, #27
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	f040 80d1 	bne.w	80035f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	331b      	adds	r3, #27
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	0151      	lsls	r1, r2, #5
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	440a      	add	r2, r1
 800347c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003484:	6053      	str	r3, [r2, #4]
 8003486:	e0b5      	b.n	80035f4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	334d      	adds	r3, #77	@ 0x4d
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b05      	cmp	r3, #5
 800349c:	d114      	bne.n	80034c8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	334d      	adds	r3, #77	@ 0x4d
 80034ae:	2202      	movs	r2, #2
 80034b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	334c      	adds	r3, #76	@ 0x4c
 80034c2:	2202      	movs	r2, #2
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e095      	b.n	80035f4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	334d      	adds	r3, #77	@ 0x4d
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d114      	bne.n	8003508 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	334d      	adds	r3, #77	@ 0x4d
 80034ee:	2202      	movs	r2, #2
 80034f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	334c      	adds	r3, #76	@ 0x4c
 8003502:	2205      	movs	r2, #5
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e075      	b.n	80035f4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	334d      	adds	r3, #77	@ 0x4d
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b07      	cmp	r3, #7
 800351c:	d00a      	beq.n	8003534 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	334d      	adds	r3, #77	@ 0x4d
 800352e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003530:	2b09      	cmp	r3, #9
 8003532:	d170      	bne.n	8003616 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	334d      	adds	r3, #77	@ 0x4d
 8003544:	2202      	movs	r2, #2
 8003546:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3344      	adds	r3, #68	@ 0x44
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	1c59      	adds	r1, r3, #1
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4403      	add	r3, r0
 8003568:	3344      	adds	r3, #68	@ 0x44
 800356a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3344      	adds	r3, #68	@ 0x44
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d914      	bls.n	80035ac <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3344      	adds	r3, #68	@ 0x44
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	334c      	adds	r3, #76	@ 0x4c
 80035a6:	2204      	movs	r2, #4
 80035a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035aa:	e022      	b.n	80035f2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	334c      	adds	r3, #76	@ 0x4c
 80035bc:	2202      	movs	r2, #2
 80035be:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035d6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035de:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ec:	461a      	mov	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035f2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	334c      	adds	r3, #76	@ 0x4c
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f005 ff2e 	bl	800946c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003610:	e002      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003616:	bf00      	nop
  }
}
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b08a      	sub	sp, #40	@ 0x28
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	0c5b      	lsrs	r3, r3, #17
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003652:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d004      	beq.n	8003664 <HCD_RXQLVL_IRQHandler+0x46>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b05      	cmp	r3, #5
 800365e:	f000 80b6 	beq.w	80037ce <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003662:	e0b7      	b.n	80037d4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80b3 	beq.w	80037d2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	332c      	adds	r3, #44	@ 0x2c
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80a7 	beq.w	80037d2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3338      	adds	r3, #56	@ 0x38
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	18d1      	adds	r1, r2, r3
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4403      	add	r3, r0
 80036a8:	3334      	adds	r3, #52	@ 0x34
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4299      	cmp	r1, r3
 80036ae:	f200 8083 	bhi.w	80037b8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	332c      	adds	r3, #44	@ 0x2c
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	b292      	uxth	r2, r2
 80036cc:	4619      	mov	r1, r3
 80036ce:	f002 fd65 	bl	800619c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	332c      	adds	r3, #44	@ 0x2c
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	18d1      	adds	r1, r2, r3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4403      	add	r3, r0
 80036f6:	332c      	adds	r3, #44	@ 0x2c
 80036f8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3338      	adds	r3, #56	@ 0x38
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	18d1      	adds	r1, r2, r3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4403      	add	r3, r0
 800371e:	3338      	adds	r3, #56	@ 0x38
 8003720:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	0cdb      	lsrs	r3, r3, #19
 8003732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003736:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3328      	adds	r3, #40	@ 0x28
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4293      	cmp	r3, r2
 8003750:	d13f      	bne.n	80037d2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d03c      	beq.n	80037d2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800376e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003776:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003784:	461a      	mov	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	333c      	adds	r3, #60	@ 0x3c
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	f083 0301 	eor.w	r3, r3, #1
 80037a0:	b2d8      	uxtb	r0, r3
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	333c      	adds	r3, #60	@ 0x3c
 80037b2:	4602      	mov	r2, r0
 80037b4:	701a      	strb	r2, [r3, #0]
      break;
 80037b6:	e00c      	b.n	80037d2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	334c      	adds	r3, #76	@ 0x4c
 80037c8:	2204      	movs	r2, #4
 80037ca:	701a      	strb	r2, [r3, #0]
      break;
 80037cc:	e001      	b.n	80037d2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80037ce:	bf00      	nop
 80037d0:	e000      	b.n	80037d4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80037d2:	bf00      	nop
  }
}
 80037d4:	bf00      	nop
 80037d6:	3728      	adds	r7, #40	@ 0x28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003808:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b02      	cmp	r3, #2
 8003812:	d10b      	bne.n	800382c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f005 fe08 	bl	8009434 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f043 0302 	orr.w	r3, r3, #2
 800382a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b08      	cmp	r3, #8
 8003834:	d132      	bne.n	800389c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f043 0308 	orr.w	r3, r3, #8
 800383c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b04      	cmp	r3, #4
 8003846:	d126      	bne.n	8003896 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	7a5b      	ldrb	r3, [r3, #9]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d113      	bne.n	8003878 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003856:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800385a:	d106      	bne.n	800386a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2102      	movs	r1, #2
 8003862:	4618      	mov	r0, r3
 8003864:	f002 fe2a 	bl	80064bc <USB_InitFSLSPClkSel>
 8003868:	e011      	b.n	800388e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2101      	movs	r1, #1
 8003870:	4618      	mov	r0, r3
 8003872:	f002 fe23 	bl	80064bc <USB_InitFSLSPClkSel>
 8003876:	e00a      	b.n	800388e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	79db      	ldrb	r3, [r3, #7]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d106      	bne.n	800388e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003886:	461a      	mov	r2, r3
 8003888:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800388c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f005 fdfa 	bl	8009488 <HAL_HCD_PortEnabled_Callback>
 8003894:	e002      	b.n	800389c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f005 fe04 	bl	80094a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d103      	bne.n	80038ae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f043 0320 	orr.w	r3, r3, #32
 80038ac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038b4:	461a      	mov	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	6013      	str	r3, [r2, #0]
}
 80038ba:	bf00      	nop
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e12b      	b.n	8003b2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd f91a 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	@ 0x24
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003928:	f001 fa20 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 800392c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4a81      	ldr	r2, [pc, #516]	@ (8003b38 <HAL_I2C_Init+0x274>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d807      	bhi.n	8003948 <HAL_I2C_Init+0x84>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a80      	ldr	r2, [pc, #512]	@ (8003b3c <HAL_I2C_Init+0x278>)
 800393c:	4293      	cmp	r3, r2
 800393e:	bf94      	ite	ls
 8003940:	2301      	movls	r3, #1
 8003942:	2300      	movhi	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e006      	b.n	8003956 <HAL_I2C_Init+0x92>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b40 <HAL_I2C_Init+0x27c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	bf94      	ite	ls
 8003950:	2301      	movls	r3, #1
 8003952:	2300      	movhi	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0e7      	b.n	8003b2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a78      	ldr	r2, [pc, #480]	@ (8003b44 <HAL_I2C_Init+0x280>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0c9b      	lsrs	r3, r3, #18
 8003968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a6a      	ldr	r2, [pc, #424]	@ (8003b38 <HAL_I2C_Init+0x274>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d802      	bhi.n	8003998 <HAL_I2C_Init+0xd4>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	3301      	adds	r3, #1
 8003996:	e009      	b.n	80039ac <HAL_I2C_Init+0xe8>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	4a69      	ldr	r2, [pc, #420]	@ (8003b48 <HAL_I2C_Init+0x284>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	3301      	adds	r3, #1
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	495c      	ldr	r1, [pc, #368]	@ (8003b38 <HAL_I2C_Init+0x274>)
 80039c8:	428b      	cmp	r3, r1
 80039ca:	d819      	bhi.n	8003a00 <HAL_I2C_Init+0x13c>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1e59      	subs	r1, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039e0:	400b      	ands	r3, r1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_I2C_Init+0x138>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1e59      	subs	r1, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fa:	e051      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 80039fc:	2304      	movs	r3, #4
 80039fe:	e04f      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d111      	bne.n	8003a2c <HAL_I2C_Init+0x168>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e58      	subs	r0, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	440b      	add	r3, r1
 8003a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e012      	b.n	8003a52 <HAL_I2C_Init+0x18e>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	0099      	lsls	r1, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a42:	3301      	adds	r3, #1
 8003a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Init+0x196>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e022      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10e      	bne.n	8003a80 <HAL_I2C_Init+0x1bc>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1e58      	subs	r0, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	440b      	add	r3, r1
 8003a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a7e:	e00f      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1e58      	subs	r0, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	0099      	lsls	r1, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	6809      	ldr	r1, [r1, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ace:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6911      	ldr	r1, [r2, #16]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68d2      	ldr	r2, [r2, #12]
 8003ada:	4311      	orrs	r1, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	000186a0 	.word	0x000186a0
 8003b3c:	001e847f 	.word	0x001e847f
 8003b40:	003d08ff 	.word	0x003d08ff
 8003b44:	431bde83 	.word	0x431bde83
 8003b48:	10624dd3 	.word	0x10624dd3

08003b4c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e128      	b.n	8003db0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a90      	ldr	r2, [pc, #576]	@ (8003db8 <HAL_I2S_Init+0x26c>)
 8003b76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7fd f81b 	bl	8000bb4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b94:	f023 030f 	bic.w	r3, r3, #15
 8003b98:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d060      	beq.n	8003c6c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003bb2:	2310      	movs	r3, #16
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	e001      	b.n	8003bbc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d802      	bhi.n	8003bca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003bca:	2001      	movs	r0, #1
 8003bcc:	f001 f9c4 	bl	8004f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bd0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bda:	d125      	bne.n	8003c28 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d010      	beq.n	8003c06 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	3305      	adds	r3, #5
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	e01f      	b.n	8003c46 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	461a      	mov	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	3305      	adds	r3, #5
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	e00e      	b.n	8003c46 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	461a      	mov	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c42:	3305      	adds	r3, #5
 8003c44:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4a5c      	ldr	r2, [pc, #368]	@ (8003dbc <HAL_I2S_Init+0x270>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	08db      	lsrs	r3, r3, #3
 8003c50:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	085b      	lsrs	r3, r3, #1
 8003c62:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	e003      	b.n	8003c74 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d902      	bls.n	8003c80 <HAL_I2S_Init+0x134>
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	2bff      	cmp	r3, #255	@ 0xff
 8003c7e:	d907      	bls.n	8003c90 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c84:	f043 0210 	orr.w	r2, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e08f      	b.n	8003db0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	ea42 0103 	orr.w	r1, r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003cae:	f023 030f 	bic.w	r3, r3, #15
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6851      	ldr	r1, [r2, #4]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6892      	ldr	r2, [r2, #8]
 8003cba:	4311      	orrs	r1, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68d2      	ldr	r2, [r2, #12]
 8003cc0:	4311      	orrs	r1, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6992      	ldr	r2, [r2, #24]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cd2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d161      	bne.n	8003da0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a38      	ldr	r2, [pc, #224]	@ (8003dc0 <HAL_I2S_Init+0x274>)
 8003ce0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a37      	ldr	r2, [pc, #220]	@ (8003dc4 <HAL_I2S_Init+0x278>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d101      	bne.n	8003cf0 <HAL_I2S_Init+0x1a4>
 8003cec:	4b36      	ldr	r3, [pc, #216]	@ (8003dc8 <HAL_I2S_Init+0x27c>)
 8003cee:	e001      	b.n	8003cf4 <HAL_I2S_Init+0x1a8>
 8003cf0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	4932      	ldr	r1, [pc, #200]	@ (8003dc4 <HAL_I2S_Init+0x278>)
 8003cfc:	428a      	cmp	r2, r1
 8003cfe:	d101      	bne.n	8003d04 <HAL_I2S_Init+0x1b8>
 8003d00:	4a31      	ldr	r2, [pc, #196]	@ (8003dc8 <HAL_I2S_Init+0x27c>)
 8003d02:	e001      	b.n	8003d08 <HAL_I2S_Init+0x1bc>
 8003d04:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003d08:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d0c:	f023 030f 	bic.w	r3, r3, #15
 8003d10:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc4 <HAL_I2S_Init+0x278>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <HAL_I2S_Init+0x1d4>
 8003d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc8 <HAL_I2S_Init+0x27c>)
 8003d1e:	e001      	b.n	8003d24 <HAL_I2S_Init+0x1d8>
 8003d20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d24:	2202      	movs	r2, #2
 8003d26:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a25      	ldr	r2, [pc, #148]	@ (8003dc4 <HAL_I2S_Init+0x278>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_I2S_Init+0x1ea>
 8003d32:	4b25      	ldr	r3, [pc, #148]	@ (8003dc8 <HAL_I2S_Init+0x27c>)
 8003d34:	e001      	b.n	8003d3a <HAL_I2S_Init+0x1ee>
 8003d36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d46:	d003      	beq.n	8003d50 <HAL_I2S_Init+0x204>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d103      	bne.n	8003d58 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	e001      	b.n	8003d5c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d66:	4313      	orrs	r3, r2
 8003d68:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d88:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc4 <HAL_I2S_Init+0x278>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_I2S_Init+0x24c>
 8003d94:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <HAL_I2S_Init+0x27c>)
 8003d96:	e001      	b.n	8003d9c <HAL_I2S_Init+0x250>
 8003d98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d9c:	897a      	ldrh	r2, [r7, #10]
 8003d9e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	08003ec3 	.word	0x08003ec3
 8003dbc:	cccccccd 	.word	0xcccccccd
 8003dc0:	08003fd9 	.word	0x08003fd9
 8003dc4:	40003800 	.word	0x40003800
 8003dc8:	40003400 	.word	0x40003400

08003dcc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	881a      	ldrh	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	1c9a      	adds	r2, r3, #2
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10e      	bne.n	8003e5c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e4c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ffb8 	bl	8003dcc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	b292      	uxth	r2, r2
 8003e78:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7e:	1c9a      	adds	r2, r3, #2
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10e      	bne.n	8003eba <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eaa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ff93 	bl	8003de0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b086      	sub	sp, #24
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d13a      	bne.n	8003f54 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d109      	bne.n	8003efc <I2S_IRQHandler+0x3a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef2:	2b40      	cmp	r3, #64	@ 0x40
 8003ef4:	d102      	bne.n	8003efc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff ffb4 	bl	8003e64 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f02:	2b40      	cmp	r3, #64	@ 0x40
 8003f04:	d126      	bne.n	8003f54 <I2S_IRQHandler+0x92>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d11f      	bne.n	8003f54 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	f043 0202 	orr.w	r2, r3, #2
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff ff50 	bl	8003df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d136      	bne.n	8003fce <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d109      	bne.n	8003f7e <I2S_IRQHandler+0xbc>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f74:	2b80      	cmp	r3, #128	@ 0x80
 8003f76:	d102      	bne.n	8003f7e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ff45 	bl	8003e08 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d122      	bne.n	8003fce <I2S_IRQHandler+0x10c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d11b      	bne.n	8003fce <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fa4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc0:	f043 0204 	orr.w	r2, r3, #4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ff13 	bl	8003df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fce:	bf00      	nop
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a92      	ldr	r2, [pc, #584]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ff2:	4b92      	ldr	r3, [pc, #584]	@ (800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff4:	e001      	b.n	8003ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ff6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a8b      	ldr	r2, [pc, #556]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004010:	4b8a      	ldr	r3, [pc, #552]	@ (800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004012:	e001      	b.n	8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004014:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004024:	d004      	beq.n	8004030 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 8099 	bne.w	8004162 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d107      	bne.n	800404a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f925 	bl	8004294 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b01      	cmp	r3, #1
 8004052:	d107      	bne.n	8004064 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9c8 	bl	80043f4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406a:	2b40      	cmp	r3, #64	@ 0x40
 800406c:	d13a      	bne.n	80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b00      	cmp	r3, #0
 8004076:	d035      	beq.n	80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a6e      	ldr	r2, [pc, #440]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004082:	4b6e      	ldr	r3, [pc, #440]	@ (800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004084:	e001      	b.n	800408a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004086:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4969      	ldr	r1, [pc, #420]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004092:	428b      	cmp	r3, r1
 8004094:	d101      	bne.n	800409a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004096:	4b69      	ldr	r3, [pc, #420]	@ (800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004098:	e001      	b.n	800409e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800409a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800409e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	f043 0202 	orr.w	r2, r3, #2
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff fe88 	bl	8003df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	f040 80c3 	bne.w	8004276 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80bd 	beq.w	8004276 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800410a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a49      	ldr	r2, [pc, #292]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004116:	4b49      	ldr	r3, [pc, #292]	@ (800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004118:	e001      	b.n	800411e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800411a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4944      	ldr	r1, [pc, #272]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004126:	428b      	cmp	r3, r1
 8004128:	d101      	bne.n	800412e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800412a:	4b44      	ldr	r3, [pc, #272]	@ (800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800412c:	e001      	b.n	8004132 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800412e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004132:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004136:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004152:	f043 0204 	orr.w	r2, r3, #4
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff fe4a 	bl	8003df4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004160:	e089      	b.n	8004276 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d107      	bne.n	800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f8be 	bl	80042f8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b01      	cmp	r3, #1
 8004184:	d107      	bne.n	8004196 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f8fd 	bl	8004390 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419c:	2b40      	cmp	r3, #64	@ 0x40
 800419e:	d12f      	bne.n	8004200 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d02a      	beq.n	8004200 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1e      	ldr	r2, [pc, #120]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d101      	bne.n	80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041c4:	4b1d      	ldr	r3, [pc, #116]	@ (800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041c6:	e001      	b.n	80041cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80041c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4919      	ldr	r1, [pc, #100]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041d4:	428b      	cmp	r3, r1
 80041d6:	d101      	bne.n	80041dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80041d8:	4b18      	ldr	r3, [pc, #96]	@ (800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041da:	e001      	b.n	80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80041dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	f043 0202 	orr.w	r2, r3, #2
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff fdfa 	bl	8003df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b08      	cmp	r3, #8
 8004208:	d136      	bne.n	8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d031      	beq.n	8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a07      	ldr	r2, [pc, #28]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d101      	bne.n	8004222 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800421e:	4b07      	ldr	r3, [pc, #28]	@ (800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004220:	e001      	b.n	8004226 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004222:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4902      	ldr	r1, [pc, #8]	@ (8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800422e:	428b      	cmp	r3, r1
 8004230:	d106      	bne.n	8004240 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004232:	4b02      	ldr	r3, [pc, #8]	@ (800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004234:	e006      	b.n	8004244 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004236:	bf00      	nop
 8004238:	40003800 	.word	0x40003800
 800423c:	40003400 	.word	0x40003400
 8004240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004244:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004248:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004258:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	f043 0204 	orr.w	r2, r3, #4
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fdc0 	bl	8003df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004274:	e000      	b.n	8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004276:	bf00      	nop
}
 8004278:	bf00      	nop
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	1c99      	adds	r1, r3, #2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6251      	str	r1, [r2, #36]	@ 0x24
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d113      	bne.n	80042ee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d106      	bne.n	80042ee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ffc9 	bl	8004280 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	1c99      	adds	r1, r3, #2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6251      	str	r1, [r2, #36]	@ 0x24
 800430a:	8819      	ldrh	r1, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1d      	ldr	r2, [pc, #116]	@ (8004388 <I2SEx_TxISR_I2SExt+0x90>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d101      	bne.n	800431a <I2SEx_TxISR_I2SExt+0x22>
 8004316:	4b1d      	ldr	r3, [pc, #116]	@ (800438c <I2SEx_TxISR_I2SExt+0x94>)
 8004318:	e001      	b.n	800431e <I2SEx_TxISR_I2SExt+0x26>
 800431a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800431e:	460a      	mov	r2, r1
 8004320:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d121      	bne.n	800437e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a12      	ldr	r2, [pc, #72]	@ (8004388 <I2SEx_TxISR_I2SExt+0x90>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d101      	bne.n	8004348 <I2SEx_TxISR_I2SExt+0x50>
 8004344:	4b11      	ldr	r3, [pc, #68]	@ (800438c <I2SEx_TxISR_I2SExt+0x94>)
 8004346:	e001      	b.n	800434c <I2SEx_TxISR_I2SExt+0x54>
 8004348:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	490d      	ldr	r1, [pc, #52]	@ (8004388 <I2SEx_TxISR_I2SExt+0x90>)
 8004354:	428b      	cmp	r3, r1
 8004356:	d101      	bne.n	800435c <I2SEx_TxISR_I2SExt+0x64>
 8004358:	4b0c      	ldr	r3, [pc, #48]	@ (800438c <I2SEx_TxISR_I2SExt+0x94>)
 800435a:	e001      	b.n	8004360 <I2SEx_TxISR_I2SExt+0x68>
 800435c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004360:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004364:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ff81 	bl	8004280 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40003800 	.word	0x40003800
 800438c:	40003400 	.word	0x40003400

08004390 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68d8      	ldr	r0, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a2:	1c99      	adds	r1, r3, #2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80043a8:	b282      	uxth	r2, r0
 80043aa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d113      	bne.n	80043ec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043d2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff ff4a 	bl	8004280 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a20      	ldr	r2, [pc, #128]	@ (8004484 <I2SEx_RxISR_I2SExt+0x90>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d101      	bne.n	800440a <I2SEx_RxISR_I2SExt+0x16>
 8004406:	4b20      	ldr	r3, [pc, #128]	@ (8004488 <I2SEx_RxISR_I2SExt+0x94>)
 8004408:	e001      	b.n	800440e <I2SEx_RxISR_I2SExt+0x1a>
 800440a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800440e:	68d8      	ldr	r0, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	1c99      	adds	r1, r3, #2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800441a:	b282      	uxth	r2, r0
 800441c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d121      	bne.n	800447a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a12      	ldr	r2, [pc, #72]	@ (8004484 <I2SEx_RxISR_I2SExt+0x90>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <I2SEx_RxISR_I2SExt+0x50>
 8004440:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <I2SEx_RxISR_I2SExt+0x94>)
 8004442:	e001      	b.n	8004448 <I2SEx_RxISR_I2SExt+0x54>
 8004444:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	490d      	ldr	r1, [pc, #52]	@ (8004484 <I2SEx_RxISR_I2SExt+0x90>)
 8004450:	428b      	cmp	r3, r1
 8004452:	d101      	bne.n	8004458 <I2SEx_RxISR_I2SExt+0x64>
 8004454:	4b0c      	ldr	r3, [pc, #48]	@ (8004488 <I2SEx_RxISR_I2SExt+0x94>)
 8004456:	e001      	b.n	800445c <I2SEx_RxISR_I2SExt+0x68>
 8004458:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800445c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004460:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff ff03 	bl	8004280 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40003800 	.word	0x40003800
 8004488:	40003400 	.word	0x40003400

0800448c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e267      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d075      	beq.n	8004596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044aa:	4b88      	ldr	r3, [pc, #544]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d00c      	beq.n	80044d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b6:	4b85      	ldr	r3, [pc, #532]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d112      	bne.n	80044e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c2:	4b82      	ldr	r3, [pc, #520]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ce:	d10b      	bne.n	80044e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d0:	4b7e      	ldr	r3, [pc, #504]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d05b      	beq.n	8004594 <HAL_RCC_OscConfig+0x108>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d157      	bne.n	8004594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e242      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f0:	d106      	bne.n	8004500 <HAL_RCC_OscConfig+0x74>
 80044f2:	4b76      	ldr	r3, [pc, #472]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a75      	ldr	r2, [pc, #468]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e01d      	b.n	800453c <HAL_RCC_OscConfig+0xb0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0x98>
 800450a:	4b70      	ldr	r3, [pc, #448]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6f      	ldr	r2, [pc, #444]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b6d      	ldr	r3, [pc, #436]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6c      	ldr	r2, [pc, #432]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0xb0>
 8004524:	4b69      	ldr	r3, [pc, #420]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a68      	ldr	r2, [pc, #416]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 800452a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b66      	ldr	r3, [pc, #408]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a65      	ldr	r2, [pc, #404]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800453a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d013      	beq.n	800456c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fc fd92 	bl	800106c <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800454c:	f7fc fd8e 	bl	800106c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	@ 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e207      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	4b5b      	ldr	r3, [pc, #364]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0xc0>
 800456a:	e014      	b.n	8004596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fc fd7e 	bl	800106c <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004574:	f7fc fd7a 	bl	800106c <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	@ 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e1f3      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004586:	4b51      	ldr	r3, [pc, #324]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0xe8>
 8004592:	e000      	b.n	8004596 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d063      	beq.n	800466a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045a2:	4b4a      	ldr	r3, [pc, #296]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ae:	4b47      	ldr	r3, [pc, #284]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d11c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ba:	4b44      	ldr	r3, [pc, #272]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d116      	bne.n	80045f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c6:	4b41      	ldr	r3, [pc, #260]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_RCC_OscConfig+0x152>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d001      	beq.n	80045de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e1c7      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045de:	4b3b      	ldr	r3, [pc, #236]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4937      	ldr	r1, [pc, #220]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f2:	e03a      	b.n	800466a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045fc:	4b34      	ldr	r3, [pc, #208]	@ (80046d0 <HAL_RCC_OscConfig+0x244>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004602:	f7fc fd33 	bl	800106c <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460a:	f7fc fd2f 	bl	800106c <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e1a8      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	4b2b      	ldr	r3, [pc, #172]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004628:	4b28      	ldr	r3, [pc, #160]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4925      	ldr	r1, [pc, #148]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]
 800463c:	e015      	b.n	800466a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463e:	4b24      	ldr	r3, [pc, #144]	@ (80046d0 <HAL_RCC_OscConfig+0x244>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fc fd12 	bl	800106c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464c:	f7fc fd0e 	bl	800106c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e187      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	4b1b      	ldr	r3, [pc, #108]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d036      	beq.n	80046e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d016      	beq.n	80046ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467e:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <HAL_RCC_OscConfig+0x248>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fc fcf2 	bl	800106c <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468c:	f7fc fcee 	bl	800106c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e167      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <HAL_RCC_OscConfig+0x240>)
 80046a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x200>
 80046aa:	e01b      	b.n	80046e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ac:	4b09      	ldr	r3, [pc, #36]	@ (80046d4 <HAL_RCC_OscConfig+0x248>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b2:	f7fc fcdb 	bl	800106c <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b8:	e00e      	b.n	80046d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ba:	f7fc fcd7 	bl	800106c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d907      	bls.n	80046d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e150      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
 80046cc:	40023800 	.word	0x40023800
 80046d0:	42470000 	.word	0x42470000
 80046d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d8:	4b88      	ldr	r3, [pc, #544]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80046da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ea      	bne.n	80046ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8097 	beq.w	8004820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f6:	4b81      	ldr	r3, [pc, #516]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	4b7d      	ldr	r3, [pc, #500]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	4a7c      	ldr	r2, [pc, #496]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004710:	6413      	str	r3, [r2, #64]	@ 0x40
 8004712:	4b7a      	ldr	r3, [pc, #488]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471e:	2301      	movs	r3, #1
 8004720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004722:	4b77      	ldr	r3, [pc, #476]	@ (8004900 <HAL_RCC_OscConfig+0x474>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472a:	2b00      	cmp	r3, #0
 800472c:	d118      	bne.n	8004760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800472e:	4b74      	ldr	r3, [pc, #464]	@ (8004900 <HAL_RCC_OscConfig+0x474>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a73      	ldr	r2, [pc, #460]	@ (8004900 <HAL_RCC_OscConfig+0x474>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473a:	f7fc fc97 	bl	800106c <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004742:	f7fc fc93 	bl	800106c <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e10c      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004754:	4b6a      	ldr	r3, [pc, #424]	@ (8004900 <HAL_RCC_OscConfig+0x474>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d106      	bne.n	8004776 <HAL_RCC_OscConfig+0x2ea>
 8004768:	4b64      	ldr	r3, [pc, #400]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476c:	4a63      	ldr	r2, [pc, #396]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	6713      	str	r3, [r2, #112]	@ 0x70
 8004774:	e01c      	b.n	80047b0 <HAL_RCC_OscConfig+0x324>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b05      	cmp	r3, #5
 800477c:	d10c      	bne.n	8004798 <HAL_RCC_OscConfig+0x30c>
 800477e:	4b5f      	ldr	r3, [pc, #380]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004782:	4a5e      	ldr	r2, [pc, #376]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004784:	f043 0304 	orr.w	r3, r3, #4
 8004788:	6713      	str	r3, [r2, #112]	@ 0x70
 800478a:	4b5c      	ldr	r3, [pc, #368]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478e:	4a5b      	ldr	r2, [pc, #364]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	6713      	str	r3, [r2, #112]	@ 0x70
 8004796:	e00b      	b.n	80047b0 <HAL_RCC_OscConfig+0x324>
 8004798:	4b58      	ldr	r3, [pc, #352]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479c:	4a57      	ldr	r2, [pc, #348]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a4:	4b55      	ldr	r3, [pc, #340]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a8:	4a54      	ldr	r2, [pc, #336]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80047aa:	f023 0304 	bic.w	r3, r3, #4
 80047ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d015      	beq.n	80047e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7fc fc58 	bl	800106c <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c0:	f7fc fc54 	bl	800106c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e0cb      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d6:	4b49      	ldr	r3, [pc, #292]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0ee      	beq.n	80047c0 <HAL_RCC_OscConfig+0x334>
 80047e2:	e014      	b.n	800480e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e4:	f7fc fc42 	bl	800106c <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ec:	f7fc fc3e 	bl	800106c <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e0b5      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004802:	4b3e      	ldr	r3, [pc, #248]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1ee      	bne.n	80047ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800480e:	7dfb      	ldrb	r3, [r7, #23]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d105      	bne.n	8004820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004814:	4b39      	ldr	r3, [pc, #228]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	4a38      	ldr	r2, [pc, #224]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800481a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80a1 	beq.w	800496c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800482a:	4b34      	ldr	r3, [pc, #208]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b08      	cmp	r3, #8
 8004834:	d05c      	beq.n	80048f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d141      	bne.n	80048c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483e:	4b31      	ldr	r3, [pc, #196]	@ (8004904 <HAL_RCC_OscConfig+0x478>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004844:	f7fc fc12 	bl	800106c <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484c:	f7fc fc0e 	bl	800106c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e087      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485e:	4b27      	ldr	r3, [pc, #156]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69da      	ldr	r2, [r3, #28]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	019b      	lsls	r3, r3, #6
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	3b01      	subs	r3, #1
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	061b      	lsls	r3, r3, #24
 800488e:	491b      	ldr	r1, [pc, #108]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 8004890:	4313      	orrs	r3, r2
 8004892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004894:	4b1b      	ldr	r3, [pc, #108]	@ (8004904 <HAL_RCC_OscConfig+0x478>)
 8004896:	2201      	movs	r2, #1
 8004898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489a:	f7fc fbe7 	bl	800106c <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a2:	f7fc fbe3 	bl	800106c <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e05c      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b4:	4b11      	ldr	r3, [pc, #68]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x416>
 80048c0:	e054      	b.n	800496c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c2:	4b10      	ldr	r3, [pc, #64]	@ (8004904 <HAL_RCC_OscConfig+0x478>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c8:	f7fc fbd0 	bl	800106c <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fc fbcc 	bl	800106c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e045      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <HAL_RCC_OscConfig+0x470>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x444>
 80048ee:	e03d      	b.n	800496c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e038      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
 80048fc:	40023800 	.word	0x40023800
 8004900:	40007000 	.word	0x40007000
 8004904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004908:	4b1b      	ldr	r3, [pc, #108]	@ (8004978 <HAL_RCC_OscConfig+0x4ec>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d028      	beq.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004920:	429a      	cmp	r2, r3
 8004922:	d121      	bne.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492e:	429a      	cmp	r2, r3
 8004930:	d11a      	bne.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004938:	4013      	ands	r3, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800493e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004940:	4293      	cmp	r3, r2
 8004942:	d111      	bne.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	3b01      	subs	r3, #1
 8004952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d107      	bne.n	8004968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800

0800497c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0cc      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004990:	4b68      	ldr	r3, [pc, #416]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d90c      	bls.n	80049b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b65      	ldr	r3, [pc, #404]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a6:	4b63      	ldr	r3, [pc, #396]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0b8      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d020      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d0:	4b59      	ldr	r3, [pc, #356]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4a58      	ldr	r2, [pc, #352]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e8:	4b53      	ldr	r3, [pc, #332]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4a52      	ldr	r2, [pc, #328]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f4:	4b50      	ldr	r3, [pc, #320]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	494d      	ldr	r1, [pc, #308]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d044      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	4b47      	ldr	r3, [pc, #284]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d119      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e07f      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d003      	beq.n	8004a3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e06f      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e067      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5a:	4b37      	ldr	r3, [pc, #220]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f023 0203 	bic.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4934      	ldr	r1, [pc, #208]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a6c:	f7fc fafe 	bl	800106c <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a74:	f7fc fafa 	bl	800106c <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e04f      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 020c 	and.w	r2, r3, #12
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d1eb      	bne.n	8004a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b25      	ldr	r3, [pc, #148]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d20c      	bcs.n	8004ac4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b22      	ldr	r3, [pc, #136]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab2:	4b20      	ldr	r3, [pc, #128]	@ (8004b34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e032      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad0:	4b19      	ldr	r3, [pc, #100]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	4916      	ldr	r1, [pc, #88]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aee:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	490e      	ldr	r1, [pc, #56]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b02:	f000 f821 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 8004b06:	4602      	mov	r2, r0
 8004b08:	4b0b      	ldr	r3, [pc, #44]	@ (8004b38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	091b      	lsrs	r3, r3, #4
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	490a      	ldr	r1, [pc, #40]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c0>)
 8004b14:	5ccb      	ldrb	r3, [r1, r3]
 8004b16:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1a:	4a09      	ldr	r2, [pc, #36]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b1e:	4b09      	ldr	r3, [pc, #36]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fc fa5e 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40023c00 	.word	0x40023c00
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	08009b60 	.word	0x08009b60
 8004b40:	20000000 	.word	0x20000000
 8004b44:	20000004 	.word	0x20000004

08004b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b4c:	b094      	sub	sp, #80	@ 0x50
 8004b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b60:	4b79      	ldr	r3, [pc, #484]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d00d      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x40>
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	f200 80e1 	bhi.w	8004d34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0x34>
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d003      	beq.n	8004b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b7a:	e0db      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b7c:	4b73      	ldr	r3, [pc, #460]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b80:	e0db      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b82:	4b73      	ldr	r3, [pc, #460]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b86:	e0d8      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b88:	4b6f      	ldr	r3, [pc, #444]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b92:	4b6d      	ldr	r3, [pc, #436]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d063      	beq.n	8004c66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	099b      	lsrs	r3, r3, #6
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ba8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bba:	4622      	mov	r2, r4
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	f04f 0000 	mov.w	r0, #0
 8004bc2:	f04f 0100 	mov.w	r1, #0
 8004bc6:	0159      	lsls	r1, r3, #5
 8004bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bcc:	0150      	lsls	r0, r2, #5
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	1a51      	subs	r1, r2, r1
 8004bd6:	6139      	str	r1, [r7, #16]
 8004bd8:	4629      	mov	r1, r5
 8004bda:	eb63 0301 	sbc.w	r3, r3, r1
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bec:	4659      	mov	r1, fp
 8004bee:	018b      	lsls	r3, r1, #6
 8004bf0:	4651      	mov	r1, sl
 8004bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bf6:	4651      	mov	r1, sl
 8004bf8:	018a      	lsls	r2, r1, #6
 8004bfa:	4651      	mov	r1, sl
 8004bfc:	ebb2 0801 	subs.w	r8, r2, r1
 8004c00:	4659      	mov	r1, fp
 8004c02:	eb63 0901 	sbc.w	r9, r3, r1
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c1a:	4690      	mov	r8, r2
 8004c1c:	4699      	mov	r9, r3
 8004c1e:	4623      	mov	r3, r4
 8004c20:	eb18 0303 	adds.w	r3, r8, r3
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	462b      	mov	r3, r5
 8004c28:	eb49 0303 	adc.w	r3, r9, r3
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	024b      	lsls	r3, r1, #9
 8004c3e:	4621      	mov	r1, r4
 8004c40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c44:	4621      	mov	r1, r4
 8004c46:	024a      	lsls	r2, r1, #9
 8004c48:	4610      	mov	r0, r2
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c4e:	2200      	movs	r2, #0
 8004c50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c58:	f7fb fab6 	bl	80001c8 <__aeabi_uldivmod>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4613      	mov	r3, r2
 8004c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c64:	e058      	b.n	8004d18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c66:	4b38      	ldr	r3, [pc, #224]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	4611      	mov	r1, r2
 8004c72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c76:	623b      	str	r3, [r7, #32]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c80:	4642      	mov	r2, r8
 8004c82:	464b      	mov	r3, r9
 8004c84:	f04f 0000 	mov.w	r0, #0
 8004c88:	f04f 0100 	mov.w	r1, #0
 8004c8c:	0159      	lsls	r1, r3, #5
 8004c8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c92:	0150      	lsls	r0, r2, #5
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4641      	mov	r1, r8
 8004c9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cb8:	ebb2 040a 	subs.w	r4, r2, sl
 8004cbc:	eb63 050b 	sbc.w	r5, r3, fp
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	00eb      	lsls	r3, r5, #3
 8004cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cce:	00e2      	lsls	r2, r4, #3
 8004cd0:	4614      	mov	r4, r2
 8004cd2:	461d      	mov	r5, r3
 8004cd4:	4643      	mov	r3, r8
 8004cd6:	18e3      	adds	r3, r4, r3
 8004cd8:	603b      	str	r3, [r7, #0]
 8004cda:	464b      	mov	r3, r9
 8004cdc:	eb45 0303 	adc.w	r3, r5, r3
 8004ce0:	607b      	str	r3, [r7, #4]
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cee:	4629      	mov	r1, r5
 8004cf0:	028b      	lsls	r3, r1, #10
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	028a      	lsls	r2, r1, #10
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d02:	2200      	movs	r2, #0
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	61fa      	str	r2, [r7, #28]
 8004d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d0c:	f7fb fa5c 	bl	80001c8 <__aeabi_uldivmod>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4613      	mov	r3, r2
 8004d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d18:	4b0b      	ldr	r3, [pc, #44]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	3301      	adds	r3, #1
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d32:	e002      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d34:	4b05      	ldr	r3, [pc, #20]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3750      	adds	r7, #80	@ 0x50
 8004d40:	46bd      	mov	sp, r7
 8004d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d46:	bf00      	nop
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	00f42400 	.word	0x00f42400
 8004d50:	007a1200 	.word	0x007a1200

08004d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d58:	4b03      	ldr	r3, [pc, #12]	@ (8004d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20000000 	.word	0x20000000

08004d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d70:	f7ff fff0 	bl	8004d54 <HAL_RCC_GetHCLKFreq>
 8004d74:	4602      	mov	r2, r0
 8004d76:	4b05      	ldr	r3, [pc, #20]	@ (8004d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	0a9b      	lsrs	r3, r3, #10
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	4903      	ldr	r1, [pc, #12]	@ (8004d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d82:	5ccb      	ldrb	r3, [r1, r3]
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	08009b70 	.word	0x08009b70

08004d94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d035      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004dbc:	4b62      	ldr	r3, [pc, #392]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dc2:	f7fc f953 	bl	800106c <HAL_GetTick>
 8004dc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dca:	f7fc f94f 	bl	800106c <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e0b0      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ddc:	4b5b      	ldr	r3, [pc, #364]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f0      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	019a      	lsls	r2, r3, #6
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	071b      	lsls	r3, r3, #28
 8004df4:	4955      	ldr	r1, [pc, #340]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dfc:	4b52      	ldr	r3, [pc, #328]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e02:	f7fc f933 	bl	800106c <HAL_GetTick>
 8004e06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e0a:	f7fc f92f 	bl	800106c <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e090      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8083 	beq.w	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	4b44      	ldr	r3, [pc, #272]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	4a43      	ldr	r2, [pc, #268]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e46:	4b41      	ldr	r3, [pc, #260]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e52:	4b3f      	ldr	r3, [pc, #252]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a3e      	ldr	r2, [pc, #248]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e5e:	f7fc f905 	bl	800106c <HAL_GetTick>
 8004e62:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e66:	f7fc f901 	bl	800106c <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e062      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e78:	4b35      	ldr	r3, [pc, #212]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e84:	4b31      	ldr	r3, [pc, #196]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e8c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d02f      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d028      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eaa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eac:	4b29      	ldr	r3, [pc, #164]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb2:	4b28      	ldr	r3, [pc, #160]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004eb8:	4a24      	ldr	r2, [pc, #144]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ebe:	4b23      	ldr	r3, [pc, #140]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d114      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004eca:	f7fc f8cf 	bl	800106c <HAL_GetTick>
 8004ece:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed0:	e00a      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed2:	f7fc f8cb 	bl	800106c <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e02a      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee8:	4b18      	ldr	r3, [pc, #96]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0ee      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004efc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f00:	d10d      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f02:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f16:	490d      	ldr	r1, [pc, #52]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	608b      	str	r3, [r1, #8]
 8004f1c:	e005      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	4a0a      	ldr	r2, [pc, #40]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f24:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f28:	6093      	str	r3, [r2, #8]
 8004f2a:	4b08      	ldr	r3, [pc, #32]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f36:	4905      	ldr	r1, [pc, #20]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	42470068 	.word	0x42470068
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40007000 	.word	0x40007000
 8004f54:	42470e40 	.word	0x42470e40

08004f58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d13f      	bne.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004f76:	4b24      	ldr	r3, [pc, #144]	@ (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f7e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d006      	beq.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f8c:	d12f      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800500c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f90:	617b      	str	r3, [r7, #20]
          break;
 8004f92:	e02f      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f94:	4b1c      	ldr	r3, [pc, #112]	@ (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa0:	d108      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004fa2:	4b19      	ldr	r3, [pc, #100]	@ (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004faa:	4a19      	ldr	r2, [pc, #100]	@ (8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	e007      	b.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004fb4:	4b14      	ldr	r3, [pc, #80]	@ (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fbc:	4a15      	ldr	r2, [pc, #84]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004fc4:	4b10      	ldr	r3, [pc, #64]	@ (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fca:	099b      	lsrs	r3, r3, #6
 8004fcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	fb02 f303 	mul.w	r3, r2, r3
 8004fd6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fde:	0f1b      	lsrs	r3, r3, #28
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fea:	617b      	str	r3, [r7, #20]
          break;
 8004fec:	e002      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
          break;
 8004ff2:	bf00      	nop
        }
      }
      break;
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004ff6:	bf00      	nop
    }
  }
  return frequency;
 8004ff8:	697b      	ldr	r3, [r7, #20]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40023800 	.word	0x40023800
 800500c:	00bb8000 	.word	0x00bb8000
 8005010:	007a1200 	.word	0x007a1200
 8005014:	00f42400 	.word	0x00f42400

08005018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e07b      	b.n	8005122 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	d108      	bne.n	8005044 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800503a:	d009      	beq.n	8005050 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	61da      	str	r2, [r3, #28]
 8005042:	e005      	b.n	8005050 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fb fe22 	bl	8000cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005086:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d4:	ea42 0103 	orr.w	r1, r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	0c1b      	lsrs	r3, r3, #16
 80050ee:	f003 0104 	and.w	r1, r3, #4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f6:	f003 0210 	and.w	r2, r3, #16
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005110:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e041      	b.n	80051c0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7fb fdf7 	bl	8000d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	4619      	mov	r1, r3
 8005168:	4610      	mov	r0, r2
 800516a:	f000 fa47 	bl	80055fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e041      	b.n	800525e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f839 	bl	8005266 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 f9f8 	bl	80055fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e041      	b.n	8005312 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f839 	bl	800531a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f000 f99e 	bl	80055fc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0208 	bic.w	r2, r2, #8
 80052ce:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6819      	ldr	r1, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005340:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005348:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005350:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005358:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d108      	bne.n	8005372 <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005360:	7bbb      	ldrb	r3, [r7, #14]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d105      	bne.n	8005372 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005366:	7b7b      	ldrb	r3, [r7, #13]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d102      	bne.n	8005372 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800536c:	7b3b      	ldrb	r3, [r7, #12]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d001      	beq.n	8005376 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e035      	b.n	80053e2 <HAL_TIM_OnePulse_Start+0xb2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2201      	movs	r2, #1
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fc98 	bl	8005cd4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2201      	movs	r2, #1
 80053aa:	2104      	movs	r1, #4
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fc91 	bl	8005cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a0d      	ldr	r2, [pc, #52]	@ (80053ec <HAL_TIM_OnePulse_Start+0xbc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_TIM_OnePulse_Start+0x96>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a0b      	ldr	r2, [pc, #44]	@ (80053f0 <HAL_TIM_OnePulse_Start+0xc0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_OnePulse_Start+0x9a>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <HAL_TIM_OnePulse_Start+0x9c>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <HAL_TIM_OnePulse_Start+0xb0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40010400 	.word	0x40010400

080053f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800540e:	2302      	movs	r3, #2
 8005410:	e0ae      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b0c      	cmp	r3, #12
 800541e:	f200 809f 	bhi.w	8005560 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005422:	a201      	add	r2, pc, #4	@ (adr r2, 8005428 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	0800545d 	.word	0x0800545d
 800542c:	08005561 	.word	0x08005561
 8005430:	08005561 	.word	0x08005561
 8005434:	08005561 	.word	0x08005561
 8005438:	0800549d 	.word	0x0800549d
 800543c:	08005561 	.word	0x08005561
 8005440:	08005561 	.word	0x08005561
 8005444:	08005561 	.word	0x08005561
 8005448:	080054df 	.word	0x080054df
 800544c:	08005561 	.word	0x08005561
 8005450:	08005561 	.word	0x08005561
 8005454:	08005561 	.word	0x08005561
 8005458:	0800551f 	.word	0x0800551f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f976 	bl	8005754 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0208 	orr.w	r2, r2, #8
 8005476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0204 	bic.w	r2, r2, #4
 8005486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6999      	ldr	r1, [r3, #24]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	619a      	str	r2, [r3, #24]
      break;
 800549a:	e064      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f9c6 	bl	8005834 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6999      	ldr	r1, [r3, #24]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	619a      	str	r2, [r3, #24]
      break;
 80054dc:	e043      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fa1b 	bl	8005920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69da      	ldr	r2, [r3, #28]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0208 	orr.w	r2, r2, #8
 80054f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0204 	bic.w	r2, r2, #4
 8005508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69d9      	ldr	r1, [r3, #28]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	61da      	str	r2, [r3, #28]
      break;
 800551c:	e023      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fa6f 	bl	8005a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69d9      	ldr	r1, [r3, #28]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	021a      	lsls	r2, r3, #8
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	61da      	str	r2, [r3, #28]
      break;
 800555e:	e002      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	75fb      	strb	r3, [r7, #23]
      break;
 8005564:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_TIM_SlaveConfigSynchro+0x18>
 800558c:	2302      	movs	r3, #2
 800558e:	e031      	b.n	80055f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fa86 	bl	8005ab4 <TIM_SlaveTimer_SetConfig>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e018      	b.n	80055f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055d0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055e0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a46      	ldr	r2, [pc, #280]	@ (8005728 <TIM_Base_SetConfig+0x12c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d013      	beq.n	800563c <TIM_Base_SetConfig+0x40>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800561a:	d00f      	beq.n	800563c <TIM_Base_SetConfig+0x40>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a43      	ldr	r2, [pc, #268]	@ (800572c <TIM_Base_SetConfig+0x130>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00b      	beq.n	800563c <TIM_Base_SetConfig+0x40>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a42      	ldr	r2, [pc, #264]	@ (8005730 <TIM_Base_SetConfig+0x134>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d007      	beq.n	800563c <TIM_Base_SetConfig+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a41      	ldr	r2, [pc, #260]	@ (8005734 <TIM_Base_SetConfig+0x138>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_Base_SetConfig+0x40>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a40      	ldr	r2, [pc, #256]	@ (8005738 <TIM_Base_SetConfig+0x13c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d108      	bne.n	800564e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a35      	ldr	r2, [pc, #212]	@ (8005728 <TIM_Base_SetConfig+0x12c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d02b      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800565c:	d027      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a32      	ldr	r2, [pc, #200]	@ (800572c <TIM_Base_SetConfig+0x130>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d023      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a31      	ldr	r2, [pc, #196]	@ (8005730 <TIM_Base_SetConfig+0x134>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01f      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a30      	ldr	r2, [pc, #192]	@ (8005734 <TIM_Base_SetConfig+0x138>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d01b      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2f      	ldr	r2, [pc, #188]	@ (8005738 <TIM_Base_SetConfig+0x13c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d017      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a2e      	ldr	r2, [pc, #184]	@ (800573c <TIM_Base_SetConfig+0x140>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2d      	ldr	r2, [pc, #180]	@ (8005740 <TIM_Base_SetConfig+0x144>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00f      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2c      	ldr	r2, [pc, #176]	@ (8005744 <TIM_Base_SetConfig+0x148>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00b      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2b      	ldr	r2, [pc, #172]	@ (8005748 <TIM_Base_SetConfig+0x14c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2a      	ldr	r2, [pc, #168]	@ (800574c <TIM_Base_SetConfig+0x150>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a29      	ldr	r2, [pc, #164]	@ (8005750 <TIM_Base_SetConfig+0x154>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d108      	bne.n	80056c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a10      	ldr	r2, [pc, #64]	@ (8005728 <TIM_Base_SetConfig+0x12c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_Base_SetConfig+0xf8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a12      	ldr	r2, [pc, #72]	@ (8005738 <TIM_Base_SetConfig+0x13c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d103      	bne.n	80056fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b01      	cmp	r3, #1
 800570c:	d105      	bne.n	800571a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f023 0201 	bic.w	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	611a      	str	r2, [r3, #16]
  }
}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40010000 	.word	0x40010000
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40000c00 	.word	0x40000c00
 8005738:	40010400 	.word	0x40010400
 800573c:	40014000 	.word	0x40014000
 8005740:	40014400 	.word	0x40014400
 8005744:	40014800 	.word	0x40014800
 8005748:	40001800 	.word	0x40001800
 800574c:	40001c00 	.word	0x40001c00
 8005750:	40002000 	.word	0x40002000

08005754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f023 0201 	bic.w	r2, r3, #1
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 0302 	bic.w	r3, r3, #2
 800579c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a20      	ldr	r2, [pc, #128]	@ (800582c <TIM_OC1_SetConfig+0xd8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC1_SetConfig+0x64>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005830 <TIM_OC1_SetConfig+0xdc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d10c      	bne.n	80057d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 0308 	bic.w	r3, r3, #8
 80057be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 0304 	bic.w	r3, r3, #4
 80057d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a15      	ldr	r2, [pc, #84]	@ (800582c <TIM_OC1_SetConfig+0xd8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_OC1_SetConfig+0x8e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a14      	ldr	r2, [pc, #80]	@ (8005830 <TIM_OC1_SetConfig+0xdc>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d111      	bne.n	8005806 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	621a      	str	r2, [r3, #32]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	40010000 	.word	0x40010000
 8005830:	40010400 	.word	0x40010400

08005834 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f023 0210 	bic.w	r2, r3, #16
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800586a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0320 	bic.w	r3, r3, #32
 800587e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a22      	ldr	r2, [pc, #136]	@ (8005918 <TIM_OC2_SetConfig+0xe4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_OC2_SetConfig+0x68>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a21      	ldr	r2, [pc, #132]	@ (800591c <TIM_OC2_SetConfig+0xe8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10d      	bne.n	80058b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a17      	ldr	r2, [pc, #92]	@ (8005918 <TIM_OC2_SetConfig+0xe4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_OC2_SetConfig+0x94>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a16      	ldr	r2, [pc, #88]	@ (800591c <TIM_OC2_SetConfig+0xe8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d113      	bne.n	80058f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	621a      	str	r2, [r3, #32]
}
 800590a:	bf00      	nop
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40010000 	.word	0x40010000
 800591c:	40010400 	.word	0x40010400

08005920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0303 	bic.w	r3, r3, #3
 8005956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a21      	ldr	r2, [pc, #132]	@ (8005a00 <TIM_OC3_SetConfig+0xe0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_OC3_SetConfig+0x66>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a20      	ldr	r2, [pc, #128]	@ (8005a04 <TIM_OC3_SetConfig+0xe4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10d      	bne.n	80059a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800598c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a16      	ldr	r2, [pc, #88]	@ (8005a00 <TIM_OC3_SetConfig+0xe0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d003      	beq.n	80059b2 <TIM_OC3_SetConfig+0x92>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a15      	ldr	r2, [pc, #84]	@ (8005a04 <TIM_OC3_SetConfig+0xe4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d113      	bne.n	80059da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40010000 	.word	0x40010000
 8005a04:	40010400 	.word	0x40010400

08005a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	031b      	lsls	r3, r3, #12
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a12      	ldr	r2, [pc, #72]	@ (8005aac <TIM_OC4_SetConfig+0xa4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_OC4_SetConfig+0x68>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a11      	ldr	r2, [pc, #68]	@ (8005ab0 <TIM_OC4_SetConfig+0xa8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d109      	bne.n	8005a84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	019b      	lsls	r3, r3, #6
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	621a      	str	r2, [r3, #32]
}
 8005a9e:	bf00      	nop
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40010400 	.word	0x40010400

08005ab4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b70      	cmp	r3, #112	@ 0x70
 8005afc:	d01a      	beq.n	8005b34 <TIM_SlaveTimer_SetConfig+0x80>
 8005afe:	2b70      	cmp	r3, #112	@ 0x70
 8005b00:	d860      	bhi.n	8005bc4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b02:	2b60      	cmp	r3, #96	@ 0x60
 8005b04:	d054      	beq.n	8005bb0 <TIM_SlaveTimer_SetConfig+0xfc>
 8005b06:	2b60      	cmp	r3, #96	@ 0x60
 8005b08:	d85c      	bhi.n	8005bc4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b0a:	2b50      	cmp	r3, #80	@ 0x50
 8005b0c:	d046      	beq.n	8005b9c <TIM_SlaveTimer_SetConfig+0xe8>
 8005b0e:	2b50      	cmp	r3, #80	@ 0x50
 8005b10:	d858      	bhi.n	8005bc4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b12:	2b40      	cmp	r3, #64	@ 0x40
 8005b14:	d019      	beq.n	8005b4a <TIM_SlaveTimer_SetConfig+0x96>
 8005b16:	2b40      	cmp	r3, #64	@ 0x40
 8005b18:	d854      	bhi.n	8005bc4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b1a:	2b30      	cmp	r3, #48	@ 0x30
 8005b1c:	d055      	beq.n	8005bca <TIM_SlaveTimer_SetConfig+0x116>
 8005b1e:	2b30      	cmp	r3, #48	@ 0x30
 8005b20:	d850      	bhi.n	8005bc4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b22:	2b20      	cmp	r3, #32
 8005b24:	d051      	beq.n	8005bca <TIM_SlaveTimer_SetConfig+0x116>
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	d84c      	bhi.n	8005bc4 <TIM_SlaveTimer_SetConfig+0x110>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d04d      	beq.n	8005bca <TIM_SlaveTimer_SetConfig+0x116>
 8005b2e:	2b10      	cmp	r3, #16
 8005b30:	d04b      	beq.n	8005bca <TIM_SlaveTimer_SetConfig+0x116>
 8005b32:	e047      	b.n	8005bc4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005b44:	f000 f8a6 	bl	8005c94 <TIM_ETR_SetConfig>
      break;
 8005b48:	e040      	b.n	8005bcc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d101      	bne.n	8005b56 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e03b      	b.n	8005bce <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6a1a      	ldr	r2, [r3, #32]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0201 	bic.w	r2, r2, #1
 8005b6c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b7c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	621a      	str	r2, [r3, #32]
      break;
 8005b9a:	e017      	b.n	8005bcc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba8:	461a      	mov	r2, r3
 8005baa:	f000 f814 	bl	8005bd6 <TIM_TI1_ConfigInputStage>
      break;
 8005bae:	e00d      	b.n	8005bcc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f000 f839 	bl	8005c34 <TIM_TI2_ConfigInputStage>
      break;
 8005bc2:	e003      	b.n	8005bcc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc8:	e000      	b.n	8005bcc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005bca:	bf00      	nop
  }

  return status;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b087      	sub	sp, #28
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	f023 0201 	bic.w	r2, r3, #1
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 030a 	bic.w	r3, r3, #10
 8005c12:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	621a      	str	r2, [r3, #32]
}
 8005c28:	bf00      	nop
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f023 0210 	bic.w	r2, r3, #16
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	031b      	lsls	r3, r3, #12
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	621a      	str	r2, [r3, #32]
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	021a      	lsls	r2, r3, #8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	609a      	str	r2, [r3, #8]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1a      	ldr	r2, [r3, #32]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	401a      	ands	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1a      	ldr	r2, [r3, #32]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e05a      	b.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a21      	ldr	r2, [pc, #132]	@ (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d022      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d84:	d01d      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d018      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1b      	ldr	r2, [pc, #108]	@ (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d013      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00e      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a18      	ldr	r2, [pc, #96]	@ (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d009      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a17      	ldr	r2, [pc, #92]	@ (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d004      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a15      	ldr	r2, [pc, #84]	@ (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d10c      	bne.n	8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40010000 	.word	0x40010000
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800
 8005e08:	40000c00 	.word	0x40000c00
 8005e0c:	40010400 	.word	0x40010400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40001800 	.word	0x40001800

08005e18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e03d      	b.n	8005eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	f107 001c 	add.w	r0, r7, #28
 8005eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ece:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d123      	bne.n	8005f1e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005efe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d105      	bne.n	8005f12 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f9dc 	bl	80062d0 <USB_CoreReset>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	73fb      	strb	r3, [r7, #15]
 8005f1c:	e01b      	b.n	8005f56 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f9d0 	bl	80062d0 <USB_CoreReset>
 8005f30:	4603      	mov	r3, r0
 8005f32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d106      	bne.n	8005f4a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f48:	e005      	b.n	8005f56 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f56:	7fbb      	ldrb	r3, [r7, #30]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d10b      	bne.n	8005f74 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f043 0206 	orr.w	r2, r3, #6
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f043 0220 	orr.w	r2, r3, #32
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f80:	b004      	add	sp, #16
 8005f82:	4770      	bx	lr

08005f84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f043 0201 	orr.w	r2, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f023 0201 	bic.w	r2, r3, #1
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d115      	bne.n	8006016 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ff6:	200a      	movs	r0, #10
 8005ff8:	f7fb f844 	bl	8001084 <HAL_Delay>
      ms += 10U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	330a      	adds	r3, #10
 8006000:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f956 	bl	80062b4 <USB_GetMode>
 8006008:	4603      	mov	r3, r0
 800600a:	2b01      	cmp	r3, #1
 800600c:	d01e      	beq.n	800604c <USB_SetCurrentMode+0x84>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2bc7      	cmp	r3, #199	@ 0xc7
 8006012:	d9f0      	bls.n	8005ff6 <USB_SetCurrentMode+0x2e>
 8006014:	e01a      	b.n	800604c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d115      	bne.n	8006048 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006028:	200a      	movs	r0, #10
 800602a:	f7fb f82b 	bl	8001084 <HAL_Delay>
      ms += 10U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	330a      	adds	r3, #10
 8006032:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f93d 	bl	80062b4 <USB_GetMode>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <USB_SetCurrentMode+0x84>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2bc7      	cmp	r3, #199	@ 0xc7
 8006044:	d9f0      	bls.n	8006028 <USB_SetCurrentMode+0x60>
 8006046:	e001      	b.n	800604c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e005      	b.n	8006058 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006050:	d101      	bne.n	8006056 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3301      	adds	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800607a:	d901      	bls.n	8006080 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e01b      	b.n	80060b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	daf2      	bge.n	800606e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	019b      	lsls	r3, r3, #6
 8006090:	f043 0220 	orr.w	r2, r3, #32
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3301      	adds	r3, #1
 800609c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060a4:	d901      	bls.n	80060aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e006      	b.n	80060b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d0f0      	beq.n	8006098 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060dc:	d901      	bls.n	80060e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e018      	b.n	8006114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	daf2      	bge.n	80060d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2210      	movs	r2, #16
 80060f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3301      	adds	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006100:	d901      	bls.n	8006106 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e006      	b.n	8006114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0310 	and.w	r3, r3, #16
 800610e:	2b10      	cmp	r3, #16
 8006110:	d0f0      	beq.n	80060f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006120:	b480      	push	{r7}
 8006122:	b089      	sub	sp, #36	@ 0x24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	4611      	mov	r1, r2
 800612c:	461a      	mov	r2, r3
 800612e:	460b      	mov	r3, r1
 8006130:	71fb      	strb	r3, [r7, #7]
 8006132:	4613      	mov	r3, r2
 8006134:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800613e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006142:	2b00      	cmp	r3, #0
 8006144:	d123      	bne.n	800618e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006146:	88bb      	ldrh	r3, [r7, #4]
 8006148:	3303      	adds	r3, #3
 800614a:	089b      	lsrs	r3, r3, #2
 800614c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	e018      	b.n	8006186 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	031a      	lsls	r2, r3, #12
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	4413      	add	r3, r2
 800615c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006160:	461a      	mov	r2, r3
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	3301      	adds	r3, #1
 800616c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	3301      	adds	r3, #1
 8006172:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	3301      	adds	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	3301      	adds	r3, #1
 800617e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	3301      	adds	r3, #1
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	429a      	cmp	r2, r3
 800618c:	d3e2      	bcc.n	8006154 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3724      	adds	r7, #36	@ 0x24
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800619c:	b480      	push	{r7}
 800619e:	b08b      	sub	sp, #44	@ 0x2c
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	089b      	lsrs	r3, r3, #2
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061c2:	2300      	movs	r3, #0
 80061c4:	623b      	str	r3, [r7, #32]
 80061c6:	e014      	b.n	80061f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	3301      	adds	r3, #1
 80061d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	3301      	adds	r3, #1
 80061de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	3301      	adds	r3, #1
 80061e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	3301      	adds	r3, #1
 80061ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	3301      	adds	r3, #1
 80061f0:	623b      	str	r3, [r7, #32]
 80061f2:	6a3a      	ldr	r2, [r7, #32]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d3e6      	bcc.n	80061c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061fa:	8bfb      	ldrh	r3, [r7, #30]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01e      	beq.n	800623e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800620a:	461a      	mov	r2, r3
 800620c:	f107 0310 	add.w	r3, r7, #16
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	fa22 f303 	lsr.w	r3, r2, r3
 8006220:	b2da      	uxtb	r2, r3
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	701a      	strb	r2, [r3, #0]
      i++;
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	3301      	adds	r3, #1
 800622a:	623b      	str	r3, [r7, #32]
      pDest++;
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	3301      	adds	r3, #1
 8006230:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006232:	8bfb      	ldrh	r3, [r7, #30]
 8006234:	3b01      	subs	r3, #1
 8006236:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006238:	8bfb      	ldrh	r3, [r7, #30]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1ea      	bne.n	8006214 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006240:	4618      	mov	r0, r3
 8006242:	372c      	adds	r7, #44	@ 0x2c
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4013      	ands	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006264:	68fb      	ldr	r3, [r7, #12]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006272:	b480      	push	{r7}
 8006274:	b085      	sub	sp, #20
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4413      	add	r3, r2
 800629a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	4013      	ands	r3, r2
 80062a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062a6:	68bb      	ldr	r3, [r7, #8]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	f003 0301 	and.w	r3, r3, #1
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3301      	adds	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062e8:	d901      	bls.n	80062ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e01b      	b.n	8006326 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	daf2      	bge.n	80062dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f043 0201 	orr.w	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006312:	d901      	bls.n	8006318 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e006      	b.n	8006326 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b01      	cmp	r3, #1
 8006322:	d0f0      	beq.n	8006306 <USB_CoreReset+0x36>

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
	...

08006334 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006334:	b084      	sub	sp, #16
 8006336:	b580      	push	{r7, lr}
 8006338:	b086      	sub	sp, #24
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006354:	461a      	mov	r2, r3
 8006356:	2300      	movs	r3, #0
 8006358:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006376:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d119      	bne.n	80063be <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800638a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800638e:	2b01      	cmp	r3, #1
 8006390:	d10a      	bne.n	80063a8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80063a0:	f043 0304 	orr.w	r3, r3, #4
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e014      	b.n	80063d2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80063b6:	f023 0304 	bic.w	r3, r3, #4
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	e009      	b.n	80063d2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80063cc:	f023 0304 	bic.w	r3, r3, #4
 80063d0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063d2:	2110      	movs	r1, #16
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff fe43 	bl	8006060 <USB_FlushTxFifo>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff fe6d 	bl	80060c4 <USB_FlushRxFifo>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80063f4:	2300      	movs	r3, #0
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	e015      	b.n	8006426 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006406:	461a      	mov	r2, r3
 8006408:	f04f 33ff 	mov.w	r3, #4294967295
 800640c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800641a:	461a      	mov	r2, r3
 800641c:	2300      	movs	r3, #0
 800641e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	3301      	adds	r3, #1
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800642a:	461a      	mov	r2, r3
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4293      	cmp	r3, r2
 8006430:	d3e3      	bcc.n	80063fa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f04f 32ff 	mov.w	r2, #4294967295
 800643e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a18      	ldr	r2, [pc, #96]	@ (80064a4 <USB_HostInit+0x170>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d10b      	bne.n	8006460 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800644e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a15      	ldr	r2, [pc, #84]	@ (80064a8 <USB_HostInit+0x174>)
 8006454:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a14      	ldr	r2, [pc, #80]	@ (80064ac <USB_HostInit+0x178>)
 800645a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800645e:	e009      	b.n	8006474 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2280      	movs	r2, #128	@ 0x80
 8006464:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a11      	ldr	r2, [pc, #68]	@ (80064b0 <USB_HostInit+0x17c>)
 800646a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a11      	ldr	r2, [pc, #68]	@ (80064b4 <USB_HostInit+0x180>)
 8006470:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006474:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006478:	2b00      	cmp	r3, #0
 800647a:	d105      	bne.n	8006488 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	f043 0210 	orr.w	r2, r3, #16
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	699a      	ldr	r2, [r3, #24]
 800648c:	4b0a      	ldr	r3, [pc, #40]	@ (80064b8 <USB_HostInit+0x184>)
 800648e:	4313      	orrs	r3, r2
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006494:	7dfb      	ldrb	r3, [r7, #23]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064a0:	b004      	add	sp, #16
 80064a2:	4770      	bx	lr
 80064a4:	40040000 	.word	0x40040000
 80064a8:	01000200 	.word	0x01000200
 80064ac:	00e00300 	.word	0x00e00300
 80064b0:	00600080 	.word	0x00600080
 80064b4:	004000e0 	.word	0x004000e0
 80064b8:	a3200008 	.word	0xa3200008

080064bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064da:	f023 0303 	bic.w	r3, r3, #3
 80064de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	68f9      	ldr	r1, [r7, #12]
 80064f0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064f4:	4313      	orrs	r3, r2
 80064f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d107      	bne.n	800650e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006504:	461a      	mov	r2, r3
 8006506:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800650a:	6053      	str	r3, [r2, #4]
 800650c:	e00c      	b.n	8006528 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	2b02      	cmp	r3, #2
 8006512:	d107      	bne.n	8006524 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800651a:	461a      	mov	r2, r3
 800651c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006520:	6053      	str	r3, [r2, #4]
 8006522:	e001      	b.n	8006528 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006556:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006564:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006566:	2064      	movs	r0, #100	@ 0x64
 8006568:	f7fa fd8c 	bl	8001084 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006578:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800657a:	200a      	movs	r0, #10
 800657c:	f7fa fd82 	bl	8001084 <HAL_Delay>

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800658a:	b480      	push	{r7}
 800658c:	b085      	sub	sp, #20
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	460b      	mov	r3, r1
 8006594:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80065ae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <USB_DriveVbus+0x44>
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d106      	bne.n	80065ce <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80065c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80065cc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065d8:	d109      	bne.n	80065ee <USB_DriveVbus+0x64>
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d106      	bne.n	80065ee <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80065e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065ec:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	0c5b      	lsrs	r3, r3, #17
 800661a:	f003 0303 	and.w	r3, r3, #3
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	b29b      	uxth	r3, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	4608      	mov	r0, r1
 8006656:	4611      	mov	r1, r2
 8006658:	461a      	mov	r2, r3
 800665a:	4603      	mov	r3, r0
 800665c:	70fb      	strb	r3, [r7, #3]
 800665e:	460b      	mov	r3, r1
 8006660:	70bb      	strb	r3, [r7, #2]
 8006662:	4613      	mov	r3, r2
 8006664:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800667a:	461a      	mov	r2, r3
 800667c:	f04f 33ff 	mov.w	r3, #4294967295
 8006680:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006682:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006686:	2b03      	cmp	r3, #3
 8006688:	d87c      	bhi.n	8006784 <USB_HC_Init+0x138>
 800668a:	a201      	add	r2, pc, #4	@ (adr r2, 8006690 <USB_HC_Init+0x44>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	080066a1 	.word	0x080066a1
 8006694:	08006747 	.word	0x08006747
 8006698:	080066a1 	.word	0x080066a1
 800669c:	08006709 	.word	0x08006709
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ac:	461a      	mov	r2, r3
 80066ae:	f240 439d 	movw	r3, #1181	@ 0x49d
 80066b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80066b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	da10      	bge.n	80066de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	78fa      	ldrb	r2, [r7, #3]
 80066cc:	0151      	lsls	r1, r2, #5
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	440a      	add	r2, r1
 80066d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066da:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80066dc:	e055      	b.n	800678a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a6f      	ldr	r2, [pc, #444]	@ (80068a0 <USB_HC_Init+0x254>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d151      	bne.n	800678a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	78fa      	ldrb	r2, [r7, #3]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006700:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006704:	60d3      	str	r3, [r2, #12]
      break;
 8006706:	e040      	b.n	800678a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	4413      	add	r3, r2
 8006710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006714:	461a      	mov	r2, r3
 8006716:	f240 639d 	movw	r3, #1693	@ 0x69d
 800671a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800671c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006720:	2b00      	cmp	r3, #0
 8006722:	da34      	bge.n	800678e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4413      	add	r3, r2
 800672c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	440a      	add	r2, r1
 800673a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800673e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006742:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006744:	e023      	b.n	800678e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006746:	78fb      	ldrb	r3, [r7, #3]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	4413      	add	r3, r2
 800674e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006752:	461a      	mov	r2, r3
 8006754:	f240 2325 	movw	r3, #549	@ 0x225
 8006758:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800675a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800675e:	2b00      	cmp	r3, #0
 8006760:	da17      	bge.n	8006792 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4413      	add	r3, r2
 800676a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	78fa      	ldrb	r2, [r7, #3]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	440a      	add	r2, r1
 8006778:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800677c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006780:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006782:	e006      	b.n	8006792 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	77fb      	strb	r3, [r7, #31]
      break;
 8006788:	e004      	b.n	8006794 <USB_HC_Init+0x148>
      break;
 800678a:	bf00      	nop
 800678c:	e002      	b.n	8006794 <USB_HC_Init+0x148>
      break;
 800678e:	bf00      	nop
 8006790:	e000      	b.n	8006794 <USB_HC_Init+0x148>
      break;
 8006792:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	4413      	add	r3, r2
 800679c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a0:	461a      	mov	r2, r3
 80067a2:	2300      	movs	r3, #0
 80067a4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	78fa      	ldrb	r2, [r7, #3]
 80067b6:	0151      	lsls	r1, r2, #5
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	440a      	add	r2, r1
 80067bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067c0:	f043 0302 	orr.w	r3, r3, #2
 80067c4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	2101      	movs	r1, #1
 80067d6:	fa01 f303 	lsl.w	r3, r1, r3
 80067da:	6939      	ldr	r1, [r7, #16]
 80067dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80067e0:	4313      	orrs	r3, r2
 80067e2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80067f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	da03      	bge.n	8006800 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80067f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	e001      	b.n	8006804 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fef9 	bl	80065fc <USB_GetHostSpeed>
 800680a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800680c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006810:	2b02      	cmp	r3, #2
 8006812:	d106      	bne.n	8006822 <USB_HC_Init+0x1d6>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d003      	beq.n	8006822 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800681a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	e001      	b.n	8006826 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006826:	787b      	ldrb	r3, [r7, #1]
 8006828:	059b      	lsls	r3, r3, #22
 800682a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800682e:	78bb      	ldrb	r3, [r7, #2]
 8006830:	02db      	lsls	r3, r3, #11
 8006832:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006836:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006838:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800683c:	049b      	lsls	r3, r3, #18
 800683e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006842:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006844:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006846:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800684a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	431a      	orrs	r2, r3
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006854:	78fa      	ldrb	r2, [r7, #3]
 8006856:	0151      	lsls	r1, r2, #5
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	440a      	add	r2, r1
 800685c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006860:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006864:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006866:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800686a:	2b03      	cmp	r3, #3
 800686c:	d003      	beq.n	8006876 <USB_HC_Init+0x22a>
 800686e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006872:	2b01      	cmp	r3, #1
 8006874:	d10f      	bne.n	8006896 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	78fa      	ldrb	r2, [r7, #3]
 8006886:	0151      	lsls	r1, r2, #5
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	440a      	add	r2, r1
 800688c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006890:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006894:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006896:	7ffb      	ldrb	r3, [r7, #31]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3720      	adds	r7, #32
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40040000 	.word	0x40040000

080068a4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08c      	sub	sp, #48	@ 0x30
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	4613      	mov	r3, r2
 80068b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80068bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80068c0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4a5d      	ldr	r2, [pc, #372]	@ (8006a3c <USB_HC_StartXfer+0x198>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d12f      	bne.n	800692a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d11c      	bne.n	800690a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	7c9b      	ldrb	r3, [r3, #18]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <USB_HC_StartXfer+0x3c>
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	7c9b      	ldrb	r3, [r3, #18]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d124      	bne.n	800692a <USB_HC_StartXfer+0x86>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	799b      	ldrb	r3, [r3, #6]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d120      	bne.n	800692a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	6a3a      	ldr	r2, [r7, #32]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006906:	60d3      	str	r3, [r2, #12]
 8006908:	e00f      	b.n	800692a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	791b      	ldrb	r3, [r3, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10b      	bne.n	800692a <USB_HC_StartXfer+0x86>
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	795b      	ldrb	r3, [r3, #5]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d107      	bne.n	800692a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	785b      	ldrb	r3, [r3, #1]
 800691e:	4619      	mov	r1, r3
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 fb6b 	bl	8006ffc <USB_DoPing>
        return HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	e232      	b.n	8006d90 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	799b      	ldrb	r3, [r3, #6]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d158      	bne.n	80069e4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006932:	2301      	movs	r3, #1
 8006934:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	78db      	ldrb	r3, [r3, #3]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800693e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	8a92      	ldrh	r2, [r2, #20]
 8006944:	fb03 f202 	mul.w	r2, r3, r2
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	61da      	str	r2, [r3, #28]
 800694c:	e07c      	b.n	8006a48 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	7c9b      	ldrb	r3, [r3, #18]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d130      	bne.n	80069b8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	2bbc      	cmp	r3, #188	@ 0xbc
 800695c:	d918      	bls.n	8006990 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	8a9b      	ldrh	r3, [r3, #20]
 8006962:	461a      	mov	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d003      	beq.n	8006980 <USB_HC_StartXfer+0xdc>
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d103      	bne.n	8006988 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2202      	movs	r2, #2
 8006984:	60da      	str	r2, [r3, #12]
 8006986:	e05f      	b.n	8006a48 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2201      	movs	r2, #1
 800698c:	60da      	str	r2, [r3, #12]
 800698e:	e05b      	b.n	8006a48 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6a1a      	ldr	r2, [r3, #32]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d007      	beq.n	80069b0 <USB_HC_StartXfer+0x10c>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d003      	beq.n	80069b0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2204      	movs	r2, #4
 80069ac:	60da      	str	r2, [r3, #12]
 80069ae:	e04b      	b.n	8006a48 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2203      	movs	r2, #3
 80069b4:	60da      	str	r2, [r3, #12]
 80069b6:	e047      	b.n	8006a48 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d10d      	bne.n	80069da <USB_HC_StartXfer+0x136>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	8a92      	ldrh	r2, [r2, #20]
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d907      	bls.n	80069da <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80069ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	8a92      	ldrh	r2, [r2, #20]
 80069d0:	fb03 f202 	mul.w	r2, r3, r2
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	61da      	str	r2, [r3, #28]
 80069d8:	e036      	b.n	8006a48 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	61da      	str	r2, [r3, #28]
 80069e2:	e031      	b.n	8006a48 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d018      	beq.n	8006a1e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	8a92      	ldrh	r2, [r2, #20]
 80069f4:	4413      	add	r3, r2
 80069f6:	3b01      	subs	r3, #1
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	8a92      	ldrh	r2, [r2, #20]
 80069fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a00:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006a02:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006a04:	8b7b      	ldrh	r3, [r7, #26]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d90b      	bls.n	8006a22 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006a0a:	8b7b      	ldrh	r3, [r7, #26]
 8006a0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	8a92      	ldrh	r2, [r2, #20]
 8006a14:	fb03 f202 	mul.w	r2, r3, r2
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	61da      	str	r2, [r3, #28]
 8006a1c:	e001      	b.n	8006a22 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	78db      	ldrb	r3, [r3, #3]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	8a92      	ldrh	r2, [r2, #20]
 8006a30:	fb03 f202 	mul.w	r2, r3, r2
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	61da      	str	r2, [r3, #28]
 8006a38:	e006      	b.n	8006a48 <USB_HC_StartXfer+0x1a4>
 8006a3a:	bf00      	nop
 8006a3c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	6a1a      	ldr	r2, [r3, #32]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a52:	04d9      	lsls	r1, r3, #19
 8006a54:	4ba3      	ldr	r3, [pc, #652]	@ (8006ce4 <USB_HC_StartXfer+0x440>)
 8006a56:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a58:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	7d9b      	ldrb	r3, [r3, #22]
 8006a5e:	075b      	lsls	r3, r3, #29
 8006a60:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a64:	69f9      	ldr	r1, [r7, #28]
 8006a66:	0148      	lsls	r0, r1, #5
 8006a68:	6a39      	ldr	r1, [r7, #32]
 8006a6a:	4401      	add	r1, r0
 8006a6c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a70:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a72:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	6999      	ldr	r1, [r3, #24]
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a8a:	460a      	mov	r2, r1
 8006a8c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	bf0c      	ite	eq
 8006a9e:	2301      	moveq	r3, #1
 8006aa0:	2300      	movne	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69fa      	ldr	r2, [r7, #28]
 8006ab6:	0151      	lsls	r1, r2, #5
 8006ab8:	6a3a      	ldr	r2, [r7, #32]
 8006aba:	440a      	add	r2, r1
 8006abc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ac0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ac4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	7e7b      	ldrb	r3, [r7, #25]
 8006ad6:	075b      	lsls	r3, r3, #29
 8006ad8:	69f9      	ldr	r1, [r7, #28]
 8006ada:	0148      	lsls	r0, r1, #5
 8006adc:	6a39      	ldr	r1, [r7, #32]
 8006ade:	4401      	add	r1, r0
 8006ae0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	799b      	ldrb	r3, [r3, #6]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	f040 80c3 	bne.w	8006c78 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	7c5b      	ldrb	r3, [r3, #17]
 8006af6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006afc:	4313      	orrs	r3, r2
 8006afe:	69fa      	ldr	r2, [r7, #28]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	6a3a      	ldr	r2, [r7, #32]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006b0e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	6a3a      	ldr	r2, [r7, #32]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b2a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006b2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	79db      	ldrb	r3, [r3, #7]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d123      	bne.n	8006b80 <USB_HC_StartXfer+0x2dc>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	78db      	ldrb	r3, [r3, #3]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11f      	bne.n	8006b80 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	6a3a      	ldr	r2, [r7, #32]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b5e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	6a3a      	ldr	r2, [r7, #32]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b7e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	7c9b      	ldrb	r3, [r3, #18]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d003      	beq.n	8006b90 <USB_HC_StartXfer+0x2ec>
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	7c9b      	ldrb	r3, [r3, #18]
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d117      	bne.n	8006bc0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d113      	bne.n	8006bc0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	78db      	ldrb	r3, [r3, #3]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d10f      	bne.n	8006bc0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	0151      	lsls	r1, r2, #5
 8006bb2:	6a3a      	ldr	r2, [r7, #32]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bbe:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	7c9b      	ldrb	r3, [r3, #18]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d162      	bne.n	8006c8e <USB_HC_StartXfer+0x3ea>
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	78db      	ldrb	r3, [r3, #3]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d15e      	bne.n	8006c8e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d858      	bhi.n	8006c8c <USB_HC_StartXfer+0x3e8>
 8006bda:	a201      	add	r2, pc, #4	@ (adr r2, 8006be0 <USB_HC_StartXfer+0x33c>)
 8006bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be0:	08006bf1 	.word	0x08006bf1
 8006be4:	08006c13 	.word	0x08006c13
 8006be8:	08006c35 	.word	0x08006c35
 8006bec:	08006c57 	.word	0x08006c57
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	6a3a      	ldr	r2, [r7, #32]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c0e:	6053      	str	r3, [r2, #4]
          break;
 8006c10:	e03d      	b.n	8006c8e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	0151      	lsls	r1, r2, #5
 8006c24:	6a3a      	ldr	r2, [r7, #32]
 8006c26:	440a      	add	r2, r1
 8006c28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c2c:	f043 030e 	orr.w	r3, r3, #14
 8006c30:	6053      	str	r3, [r2, #4]
          break;
 8006c32:	e02c      	b.n	8006c8e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	69fa      	ldr	r2, [r7, #28]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	6a3a      	ldr	r2, [r7, #32]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c52:	6053      	str	r3, [r2, #4]
          break;
 8006c54:	e01b      	b.n	8006c8e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	0151      	lsls	r1, r2, #5
 8006c68:	6a3a      	ldr	r2, [r7, #32]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c74:	6053      	str	r3, [r2, #4]
          break;
 8006c76:	e00a      	b.n	8006c8e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c84:	461a      	mov	r2, r3
 8006c86:	2300      	movs	r3, #0
 8006c88:	6053      	str	r3, [r2, #4]
 8006c8a:	e000      	b.n	8006c8e <USB_HC_StartXfer+0x3ea>
          break;
 8006c8c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ca4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	78db      	ldrb	r3, [r3, #3]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d004      	beq.n	8006cb8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	e003      	b.n	8006cc0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cbe:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006cc6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e055      	b.n	8006d90 <USB_HC_StartXfer+0x4ec>
 8006ce4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	78db      	ldrb	r3, [r3, #3]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d14e      	bne.n	8006d8e <USB_HC_StartXfer+0x4ea>
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d04a      	beq.n	8006d8e <USB_HC_StartXfer+0x4ea>
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	79db      	ldrb	r3, [r3, #7]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d146      	bne.n	8006d8e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	7c9b      	ldrb	r3, [r3, #18]
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d831      	bhi.n	8006d6c <USB_HC_StartXfer+0x4c8>
 8006d08:	a201      	add	r2, pc, #4	@ (adr r2, 8006d10 <USB_HC_StartXfer+0x46c>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d21 	.word	0x08006d21
 8006d14:	08006d45 	.word	0x08006d45
 8006d18:	08006d21 	.word	0x08006d21
 8006d1c:	08006d45 	.word	0x08006d45
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	3303      	adds	r3, #3
 8006d26:	089b      	lsrs	r3, r3, #2
 8006d28:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006d2a:	8afa      	ldrh	r2, [r7, #22]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d91c      	bls.n	8006d70 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f043 0220 	orr.w	r2, r3, #32
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d42:	e015      	b.n	8006d70 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	3303      	adds	r3, #3
 8006d4a:	089b      	lsrs	r3, r3, #2
 8006d4c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006d4e:	8afa      	ldrh	r2, [r7, #22]
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d90a      	bls.n	8006d74 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d6a:	e003      	b.n	8006d74 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006d6c:	bf00      	nop
 8006d6e:	e002      	b.n	8006d76 <USB_HC_StartXfer+0x4d2>
        break;
 8006d70:	bf00      	nop
 8006d72:	e000      	b.n	8006d76 <USB_HC_StartXfer+0x4d2>
        break;
 8006d74:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6999      	ldr	r1, [r3, #24]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	785a      	ldrb	r2, [r3, #1]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	2000      	movs	r0, #0
 8006d86:	9000      	str	r0, [sp, #0]
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f7ff f9c9 	bl	8006120 <USB_WritePacket>
  }

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3728      	adds	r7, #40	@ 0x28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	b29b      	uxth	r3, r3
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b089      	sub	sp, #36	@ 0x24
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	0c9b      	lsrs	r3, r3, #18
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	0fdb      	lsrs	r3, r3, #31
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	0fdb      	lsrs	r3, r3, #31
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d10d      	bne.n	8006e3c <USB_HC_Halt+0x82>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <USB_HC_Halt+0x82>
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d002      	beq.n	8006e38 <USB_HC_Halt+0x7e>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d101      	bne.n	8006e3c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e0d8      	b.n	8006fee <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <USB_HC_Halt+0x8e>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d173      	bne.n	8006f30 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e66:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d14a      	bne.n	8006f0a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d133      	bne.n	8006ee8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	0151      	lsls	r1, r2, #5
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	440a      	add	r2, r1
 8006e96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e9e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	69fa      	ldr	r2, [r7, #28]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ebe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ecc:	d82e      	bhi.n	8006f2c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ee4:	d0ec      	beq.n	8006ec0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ee6:	e081      	b.n	8006fec <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	69fa      	ldr	r2, [r7, #28]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f06:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f08:	e070      	b.n	8006fec <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	0151      	lsls	r1, r2, #5
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	440a      	add	r2, r1
 8006f20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f28:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f2a:	e05f      	b.n	8006fec <USB_HC_Halt+0x232>
            break;
 8006f2c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f2e:	e05d      	b.n	8006fec <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	0151      	lsls	r1, r2, #5
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	440a      	add	r2, r1
 8006f46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f4e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d133      	bne.n	8006fc8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f7e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f9e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fac:	d81d      	bhi.n	8006fea <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fc4:	d0ec      	beq.n	8006fa0 <USB_HC_Halt+0x1e6>
 8006fc6:	e011      	b.n	8006fec <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	0151      	lsls	r1, r2, #5
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	440a      	add	r2, r1
 8006fde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fe2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	e000      	b.n	8006fec <USB_HC_Halt+0x232>
          break;
 8006fea:	bf00      	nop
    }
  }

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3724      	adds	r7, #36	@ 0x24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
	...

08006ffc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007010:	2301      	movs	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	04da      	lsls	r2, r3, #19
 8007018:	4b15      	ldr	r3, [pc, #84]	@ (8007070 <USB_DoPing+0x74>)
 800701a:	4013      	ands	r3, r2
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	440a      	add	r2, r1
 8007024:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007028:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800702c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	4413      	add	r3, r2
 8007036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007044:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800704c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	4413      	add	r3, r2
 8007056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800705a:	461a      	mov	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	1ff80000 	.word	0x1ff80000

08007074 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7fe ff8c 	bl	8005fa6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800708e:	2110      	movs	r1, #16
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7fe ffe5 	bl	8006060 <USB_FlushTxFifo>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff f80f 	bl	80060c4 <USB_FlushRxFifo>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80070b0:	2300      	movs	r3, #0
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	e01f      	b.n	80070f6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070ea:	461a      	mov	r2, r3
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	3301      	adds	r3, #1
 80070f4:	61bb      	str	r3, [r7, #24]
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b0f      	cmp	r3, #15
 80070fa:	d9dc      	bls.n	80070b6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80070fc:	2300      	movs	r3, #0
 80070fe:	61bb      	str	r3, [r7, #24]
 8007100:	e034      	b.n	800716c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	4413      	add	r3, r2
 800710a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007118:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007120:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007128:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	4413      	add	r3, r2
 8007132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007136:	461a      	mov	r2, r3
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007148:	d80c      	bhi.n	8007164 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	4413      	add	r3, r2
 8007152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800715c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007160:	d0ec      	beq.n	800713c <USB_StopHost+0xc8>
 8007162:	e000      	b.n	8007166 <USB_StopHost+0xf2>
        break;
 8007164:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	3301      	adds	r3, #1
 800716a:	61bb      	str	r3, [r7, #24]
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b0f      	cmp	r3, #15
 8007170:	d9c7      	bls.n	8007102 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007178:	461a      	mov	r2, r3
 800717a:	f04f 33ff 	mov.w	r3, #4294967295
 800717e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f04f 32ff 	mov.w	r2, #4294967295
 8007186:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fe fefb 	bl	8005f84 <USB_EnableGlobalInt>

  return ret;
 800718e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3720      	adds	r7, #32
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007198:	b590      	push	{r4, r7, lr}
 800719a:	b089      	sub	sp, #36	@ 0x24
 800719c:	af04      	add	r7, sp, #16
 800719e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80071a0:	2301      	movs	r3, #1
 80071a2:	2202      	movs	r2, #2
 80071a4:	2102      	movs	r1, #2
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fc85 	bl	8007ab6 <USBH_FindInterface>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	2bff      	cmp	r3, #255	@ 0xff
 80071b4:	d002      	beq.n	80071bc <USBH_CDC_InterfaceInit+0x24>
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d901      	bls.n	80071c0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80071bc:	2302      	movs	r3, #2
 80071be:	e13d      	b.n	800743c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fc5a 	bl	8007a7e <USBH_SelectInterface>
 80071ca:	4603      	mov	r3, r0
 80071cc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80071d4:	2302      	movs	r3, #2
 80071d6:	e131      	b.n	800743c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80071de:	2050      	movs	r0, #80	@ 0x50
 80071e0:	f002 fb64 	bl	80098ac <malloc>
 80071e4:	4603      	mov	r3, r0
 80071e6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80071f8:	2302      	movs	r3, #2
 80071fa:	e11f      	b.n	800743c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80071fc:	2250      	movs	r2, #80	@ 0x50
 80071fe:	2100      	movs	r1, #0
 8007200:	68b8      	ldr	r0, [r7, #8]
 8007202:	f002 fc11 	bl	8009a28 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	211a      	movs	r1, #26
 800720c:	fb01 f303 	mul.w	r3, r1, r3
 8007210:	4413      	add	r3, r2
 8007212:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	b25b      	sxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	da15      	bge.n	800724a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	211a      	movs	r1, #26
 8007224:	fb01 f303 	mul.w	r3, r1, r3
 8007228:	4413      	add	r3, r2
 800722a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800722e:	781a      	ldrb	r2, [r3, #0]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	211a      	movs	r1, #26
 800723a:	fb01 f303 	mul.w	r3, r1, r3
 800723e:	4413      	add	r3, r2
 8007240:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007244:	881a      	ldrh	r2, [r3, #0]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 ffbe 	bl	80091d2 <USBH_AllocPipe>
 8007256:	4603      	mov	r3, r0
 8007258:	461a      	mov	r2, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	7819      	ldrb	r1, [r3, #0]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	7858      	ldrb	r0, [r3, #1]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	8952      	ldrh	r2, [r2, #10]
 8007276:	9202      	str	r2, [sp, #8]
 8007278:	2203      	movs	r2, #3
 800727a:	9201      	str	r2, [sp, #4]
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	4623      	mov	r3, r4
 8007280:	4602      	mov	r2, r0
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 ff76 	bl	8009174 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2200      	movs	r2, #0
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f002 fa85 	bl	80097a0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007296:	2300      	movs	r3, #0
 8007298:	2200      	movs	r2, #0
 800729a:	210a      	movs	r1, #10
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fc0a 	bl	8007ab6 <USBH_FindInterface>
 80072a2:	4603      	mov	r3, r0
 80072a4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2bff      	cmp	r3, #255	@ 0xff
 80072aa:	d002      	beq.n	80072b2 <USBH_CDC_InterfaceInit+0x11a>
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d901      	bls.n	80072b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80072b2:	2302      	movs	r3, #2
 80072b4:	e0c2      	b.n	800743c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	211a      	movs	r1, #26
 80072bc:	fb01 f303 	mul.w	r3, r1, r3
 80072c0:	4413      	add	r3, r2
 80072c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	b25b      	sxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	da16      	bge.n	80072fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	211a      	movs	r1, #26
 80072d4:	fb01 f303 	mul.w	r3, r1, r3
 80072d8:	4413      	add	r3, r2
 80072da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072de:	781a      	ldrb	r2, [r3, #0]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	211a      	movs	r1, #26
 80072ea:	fb01 f303 	mul.w	r3, r1, r3
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80072f4:	881a      	ldrh	r2, [r3, #0]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	835a      	strh	r2, [r3, #26]
 80072fa:	e015      	b.n	8007328 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	211a      	movs	r1, #26
 8007302:	fb01 f303 	mul.w	r3, r1, r3
 8007306:	4413      	add	r3, r2
 8007308:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	211a      	movs	r1, #26
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	4413      	add	r3, r2
 800731e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007322:	881a      	ldrh	r2, [r3, #0]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	211a      	movs	r1, #26
 800732e:	fb01 f303 	mul.w	r3, r1, r3
 8007332:	4413      	add	r3, r2
 8007334:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	b25b      	sxtb	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	da16      	bge.n	800736e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	211a      	movs	r1, #26
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	4413      	add	r3, r2
 800734c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007350:	781a      	ldrb	r2, [r3, #0]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	211a      	movs	r1, #26
 800735c:	fb01 f303 	mul.w	r3, r1, r3
 8007360:	4413      	add	r3, r2
 8007362:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007366:	881a      	ldrh	r2, [r3, #0]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	835a      	strh	r2, [r3, #26]
 800736c:	e015      	b.n	800739a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	211a      	movs	r1, #26
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	4413      	add	r3, r2
 800737a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800737e:	781a      	ldrb	r2, [r3, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	211a      	movs	r1, #26
 800738a:	fb01 f303 	mul.w	r3, r1, r3
 800738e:	4413      	add	r3, r2
 8007390:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007394:	881a      	ldrh	r2, [r3, #0]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	7b9b      	ldrb	r3, [r3, #14]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 ff16 	bl	80091d2 <USBH_AllocPipe>
 80073a6:	4603      	mov	r3, r0
 80073a8:	461a      	mov	r2, r3
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	7bdb      	ldrb	r3, [r3, #15]
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 ff0c 	bl	80091d2 <USBH_AllocPipe>
 80073ba:	4603      	mov	r3, r0
 80073bc:	461a      	mov	r2, r3
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	7b59      	ldrb	r1, [r3, #13]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	7b98      	ldrb	r0, [r3, #14]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	8b12      	ldrh	r2, [r2, #24]
 80073da:	9202      	str	r2, [sp, #8]
 80073dc:	2202      	movs	r2, #2
 80073de:	9201      	str	r2, [sp, #4]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	4623      	mov	r3, r4
 80073e4:	4602      	mov	r2, r0
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fec4 	bl	8009174 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	7b19      	ldrb	r1, [r3, #12]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	7bd8      	ldrb	r0, [r3, #15]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	8b52      	ldrh	r2, [r2, #26]
 8007404:	9202      	str	r2, [sp, #8]
 8007406:	2202      	movs	r2, #2
 8007408:	9201      	str	r2, [sp, #4]
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	4623      	mov	r3, r4
 800740e:	4602      	mov	r2, r0
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 feaf 	bl	8009174 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	7b5b      	ldrb	r3, [r3, #13]
 8007422:	2200      	movs	r2, #0
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f002 f9ba 	bl	80097a0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	7b1b      	ldrb	r3, [r3, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f002 f9b3 	bl	80097a0 <USBH_LL_SetToggle>

  return USBH_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	bd90      	pop	{r4, r7, pc}

08007444 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00e      	beq.n	800747c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 fea4 	bl	80091b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 fecf 	bl	8009214 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	7b1b      	ldrb	r3, [r3, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00e      	beq.n	80074a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	7b1b      	ldrb	r3, [r3, #12]
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 fe91 	bl	80091b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	7b1b      	ldrb	r3, [r3, #12]
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f001 febc 	bl	8009214 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	7b5b      	ldrb	r3, [r3, #13]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00e      	beq.n	80074c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	7b5b      	ldrb	r3, [r3, #13]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 fe7e 	bl	80091b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	7b5b      	ldrb	r3, [r3, #13]
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 fea9 	bl	8009214 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00b      	beq.n	80074ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	4618      	mov	r0, r3
 80074de:	f002 f9ed 	bl	80098bc <free>
    phost->pActiveClass->pData = 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074e8:	2200      	movs	r2, #0
 80074ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b084      	sub	sp, #16
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3340      	adds	r3, #64	@ 0x40
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f8b1 	bl	8007676 <GetLineCoding>
 8007514:	4603      	mov	r3, r0
 8007516:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007518:	7afb      	ldrb	r3, [r7, #11]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d105      	bne.n	800752a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007524:	2102      	movs	r1, #2
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800752a:	7afb      	ldrb	r3, [r7, #11]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800753c:	2301      	movs	r3, #1
 800753e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007554:	2b04      	cmp	r3, #4
 8007556:	d877      	bhi.n	8007648 <USBH_CDC_Process+0x114>
 8007558:	a201      	add	r2, pc, #4	@ (adr r2, 8007560 <USBH_CDC_Process+0x2c>)
 800755a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755e:	bf00      	nop
 8007560:	08007575 	.word	0x08007575
 8007564:	0800757b 	.word	0x0800757b
 8007568:	080075ab 	.word	0x080075ab
 800756c:	0800761f 	.word	0x0800761f
 8007570:	0800762d 	.word	0x0800762d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	73fb      	strb	r3, [r7, #15]
      break;
 8007578:	e06d      	b.n	8007656 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f897 	bl	80076b4 <SetLineCoding>
 8007586:	4603      	mov	r3, r0
 8007588:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800758a:	7bbb      	ldrb	r3, [r7, #14]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d104      	bne.n	800759a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007598:	e058      	b.n	800764c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d055      	beq.n	800764c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2204      	movs	r2, #4
 80075a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80075a8:	e050      	b.n	800764c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	3340      	adds	r3, #64	@ 0x40
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f860 	bl	8007676 <GetLineCoding>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d126      	bne.n	800760e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075d2:	791b      	ldrb	r3, [r3, #4]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d13b      	bne.n	8007650 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075e2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d133      	bne.n	8007650 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075f2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d12b      	bne.n	8007650 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007600:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007602:	429a      	cmp	r2, r3
 8007604:	d124      	bne.n	8007650 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f958 	bl	80078bc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800760c:	e020      	b.n	8007650 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d01d      	beq.n	8007650 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2204      	movs	r2, #4
 8007618:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800761c:	e018      	b.n	8007650 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f867 	bl	80076f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f8da 	bl	80077de <CDC_ProcessReception>
      break;
 800762a:	e014      	b.n	8007656 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800762c:	2100      	movs	r1, #0
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 f81a 	bl	8008668 <USBH_ClrFeature>
 8007634:	4603      	mov	r3, r0
 8007636:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007646:	e005      	b.n	8007654 <USBH_CDC_Process+0x120>

    default:
      break;
 8007648:	bf00      	nop
 800764a:	e004      	b.n	8007656 <USBH_CDC_Process+0x122>
      break;
 800764c:	bf00      	nop
 800764e:	e002      	b.n	8007656 <USBH_CDC_Process+0x122>
      break;
 8007650:	bf00      	nop
 8007652:	e000      	b.n	8007656 <USBH_CDC_Process+0x122>
      break;
 8007654:	bf00      	nop

  }

  return status;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	22a1      	movs	r2, #161	@ 0xa1
 8007684:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2221      	movs	r2, #33	@ 0x21
 800768a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2207      	movs	r2, #7
 800769c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2207      	movs	r2, #7
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 fb14 	bl	8008cd2 <USBH_CtlReq>
 80076aa:	4603      	mov	r3, r0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2221      	movs	r2, #33	@ 0x21
 80076c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2220      	movs	r2, #32
 80076c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2207      	movs	r2, #7
 80076da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2207      	movs	r2, #7
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f001 faf5 	bl	8008cd2 <USBH_CtlReq>
 80076e8:	4603      	mov	r3, r0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b086      	sub	sp, #24
 80076f6:	af02      	add	r7, sp, #8
 80076f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007704:	2300      	movs	r3, #0
 8007706:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800770e:	2b01      	cmp	r3, #1
 8007710:	d002      	beq.n	8007718 <CDC_ProcessTransmission+0x26>
 8007712:	2b02      	cmp	r3, #2
 8007714:	d023      	beq.n	800775e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007716:	e05e      	b.n	80077d6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	8b12      	ldrh	r2, [r2, #24]
 8007720:	4293      	cmp	r3, r2
 8007722:	d90b      	bls.n	800773c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	69d9      	ldr	r1, [r3, #28]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8b1a      	ldrh	r2, [r3, #24]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	7b5b      	ldrb	r3, [r3, #13]
 8007730:	2001      	movs	r0, #1
 8007732:	9000      	str	r0, [sp, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f001 fcda 	bl	80090ee <USBH_BulkSendData>
 800773a:	e00b      	b.n	8007754 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	7b5b      	ldrb	r3, [r3, #13]
 800774a:	2001      	movs	r0, #1
 800774c:	9000      	str	r0, [sp, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fccd 	bl	80090ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800775c:	e03b      	b.n	80077d6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	7b5b      	ldrb	r3, [r3, #13]
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 fff1 	bl	800974c <USBH_LL_GetURBState>
 800776a:	4603      	mov	r3, r0
 800776c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800776e:	7afb      	ldrb	r3, [r7, #11]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d128      	bne.n	80077c6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	8b12      	ldrh	r2, [r2, #24]
 800777c:	4293      	cmp	r3, r2
 800777e:	d90e      	bls.n	800779e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	8b12      	ldrh	r2, [r2, #24]
 8007788:	1a9a      	subs	r2, r3, r2
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	8b12      	ldrh	r2, [r2, #24]
 8007796:	441a      	add	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	61da      	str	r2, [r3, #28]
 800779c:	e002      	b.n	80077a4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80077b4:	e00e      	b.n	80077d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f868 	bl	8007894 <USBH_CDC_TransmitCallback>
      break;
 80077c4:	e006      	b.n	80077d4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80077c6:	7afb      	ldrb	r3, [r7, #11]
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d103      	bne.n	80077d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80077d4:	bf00      	nop
  }
}
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077f0:	2300      	movs	r3, #0
 80077f2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d002      	beq.n	8007804 <CDC_ProcessReception+0x26>
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d00e      	beq.n	8007820 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007802:	e043      	b.n	800788c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	6a19      	ldr	r1, [r3, #32]
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	8b5a      	ldrh	r2, [r3, #26]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	7b1b      	ldrb	r3, [r3, #12]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 fc91 	bl	8009138 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2204      	movs	r2, #4
 800781a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800781e:	e035      	b.n	800788c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	7b1b      	ldrb	r3, [r3, #12]
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 ff90 	bl	800974c <USBH_LL_GetURBState>
 800782c:	4603      	mov	r3, r0
 800782e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007830:	7cfb      	ldrb	r3, [r7, #19]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d129      	bne.n	800788a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	7b1b      	ldrb	r3, [r3, #12]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f001 fef3 	bl	8009628 <USBH_LL_GetLastXferSize>
 8007842:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	429a      	cmp	r2, r3
 800784c:	d016      	beq.n	800787c <CDC_ProcessReception+0x9e>
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	8b5b      	ldrh	r3, [r3, #26]
 8007852:	461a      	mov	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4293      	cmp	r3, r2
 8007858:	d110      	bne.n	800787c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	1ad2      	subs	r2, r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	6a1a      	ldr	r2, [r3, #32]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	441a      	add	r2, r3
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2203      	movs	r2, #3
 8007876:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800787a:	e006      	b.n	800788a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f80f 	bl	80078a8 <USBH_CDC_ReceiveCallback>
      break;
 800788a:	bf00      	nop
  }
}
 800788c:	bf00      	nop
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	4613      	mov	r3, r2
 80078dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80078e4:	2302      	movs	r3, #2
 80078e6:	e029      	b.n	800793c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	79fa      	ldrb	r2, [r7, #7]
 80078ec:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f81f 	bl	8007944 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f001 fdc3 	bl	80094c0 <USBH_LL_Init>

  return USBH_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	e009      	b.n	800796a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	33e0      	adds	r3, #224	@ 0xe0
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	2200      	movs	r2, #0
 8007962:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3301      	adds	r3, #1
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2b0f      	cmp	r3, #15
 800796e:	d9f2      	bls.n	8007956 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	e009      	b.n	800798a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3301      	adds	r3, #1
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007990:	d3f1      	bcc.n	8007976 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2240      	movs	r2, #64	@ 0x40
 80079b6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	331c      	adds	r3, #28
 80079e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f002 f81d 	bl	8009a28 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80079f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079f8:	2100      	movs	r1, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f002 f814 	bl	8009a28 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007a06:	2212      	movs	r2, #18
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f002 f80c 	bl	8009a28 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007a16:	223e      	movs	r2, #62	@ 0x3e
 8007a18:	2100      	movs	r1, #0
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f002 f804 	bl	8009a28 <memset>

  return USBH_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d016      	beq.n	8007a6c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10e      	bne.n	8007a66 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007a4e:	1c59      	adds	r1, r3, #1
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	33de      	adds	r3, #222	@ 0xde
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]
 8007a64:	e004      	b.n	8007a70 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a66:	2302      	movs	r3, #2
 8007a68:	73fb      	strb	r3, [r7, #15]
 8007a6a:	e001      	b.n	8007a70 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b085      	sub	sp, #20
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	460b      	mov	r3, r1
 8007a88:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007a94:	78fa      	ldrb	r2, [r7, #3]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d204      	bcs.n	8007aa4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	78fa      	ldrb	r2, [r7, #3]
 8007a9e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007aa2:	e001      	b.n	8007aa8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b087      	sub	sp, #28
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	4608      	mov	r0, r1
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	70fb      	strb	r3, [r7, #3]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70bb      	strb	r3, [r7, #2]
 8007acc:	4613      	mov	r3, r2
 8007ace:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007ade:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ae0:	e025      	b.n	8007b2e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	221a      	movs	r2, #26
 8007ae6:	fb02 f303 	mul.w	r3, r2, r3
 8007aea:	3308      	adds	r3, #8
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	3302      	adds	r3, #2
 8007af2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	795b      	ldrb	r3, [r3, #5]
 8007af8:	78fa      	ldrb	r2, [r7, #3]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d002      	beq.n	8007b04 <USBH_FindInterface+0x4e>
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	2bff      	cmp	r3, #255	@ 0xff
 8007b02:	d111      	bne.n	8007b28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007b08:	78ba      	ldrb	r2, [r7, #2]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d002      	beq.n	8007b14 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b0e:	78bb      	ldrb	r3, [r7, #2]
 8007b10:	2bff      	cmp	r3, #255	@ 0xff
 8007b12:	d109      	bne.n	8007b28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b18:	787a      	ldrb	r2, [r7, #1]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d002      	beq.n	8007b24 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b1e:	787b      	ldrb	r3, [r7, #1]
 8007b20:	2bff      	cmp	r3, #255	@ 0xff
 8007b22:	d101      	bne.n	8007b28 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	e006      	b.n	8007b36 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d9d6      	bls.n	8007ae2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007b34:	23ff      	movs	r3, #255	@ 0xff
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 fcf4 	bl	8009538 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007b50:	2101      	movs	r1, #1
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 fe0d 	bl	8009772 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af04      	add	r7, sp, #16
 8007b6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d102      	bne.n	8007b86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2203      	movs	r2, #3
 8007b84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b0b      	cmp	r3, #11
 8007b8e:	f200 81bb 	bhi.w	8007f08 <USBH_Process+0x3a4>
 8007b92:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <USBH_Process+0x34>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bc9 	.word	0x08007bc9
 8007b9c:	08007bfb 	.word	0x08007bfb
 8007ba0:	08007c63 	.word	0x08007c63
 8007ba4:	08007ea3 	.word	0x08007ea3
 8007ba8:	08007f09 	.word	0x08007f09
 8007bac:	08007d03 	.word	0x08007d03
 8007bb0:	08007e49 	.word	0x08007e49
 8007bb4:	08007d39 	.word	0x08007d39
 8007bb8:	08007d59 	.word	0x08007d59
 8007bbc:	08007d77 	.word	0x08007d77
 8007bc0:	08007dbb 	.word	0x08007dbb
 8007bc4:	08007e8b 	.word	0x08007e8b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 819b 	beq.w	8007f0c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007bdc:	20c8      	movs	r0, #200	@ 0xc8
 8007bde:	f001 fe12 	bl	8009806 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f001 fd05 	bl	80095f2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bf8:	e188      	b.n	8007f0c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d107      	bne.n	8007c14 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c12:	e18a      	b.n	8007f2a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007c1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c1e:	d914      	bls.n	8007c4a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007c26:	3301      	adds	r3, #1
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d903      	bls.n	8007c42 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	220d      	movs	r2, #13
 8007c3e:	701a      	strb	r2, [r3, #0]
      break;
 8007c40:	e173      	b.n	8007f2a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
      break;
 8007c48:	e16f      	b.n	8007f2a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007c50:	f103 020a 	add.w	r2, r3, #10
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007c5a:	200a      	movs	r0, #10
 8007c5c:	f001 fdd3 	bl	8009806 <USBH_Delay>
      break;
 8007c60:	e163      	b.n	8007f2a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c72:	2104      	movs	r1, #4
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007c78:	2064      	movs	r0, #100	@ 0x64
 8007c7a:	f001 fdc4 	bl	8009806 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f001 fc90 	bl	80095a4 <USBH_LL_GetSpeed>
 8007c84:	4603      	mov	r3, r0
 8007c86:	461a      	mov	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2205      	movs	r2, #5
 8007c92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007c94:	2100      	movs	r1, #0
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fa9b 	bl	80091d2 <USBH_AllocPipe>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007ca4:	2180      	movs	r1, #128	@ 0x80
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 fa93 	bl	80091d2 <USBH_AllocPipe>
 8007cac:	4603      	mov	r3, r0
 8007cae:	461a      	mov	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	7919      	ldrb	r1, [r3, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007cc8:	9202      	str	r2, [sp, #8]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	9201      	str	r2, [sp, #4]
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2280      	movs	r2, #128	@ 0x80
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 fa4d 	bl	8009174 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7959      	ldrb	r1, [r3, #5]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007cee:	9202      	str	r2, [sp, #8]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	9201      	str	r2, [sp, #4]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f001 fa3a 	bl	8009174 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d00:	e113      	b.n	8007f2a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f916 	bl	8007f34 <USBH_HandleEnum>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f040 80fd 	bne.w	8007f10 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d103      	bne.n	8007d30 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2208      	movs	r2, #8
 8007d2c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d2e:	e0ef      	b.n	8007f10 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2207      	movs	r2, #7
 8007d34:	701a      	strb	r2, [r3, #0]
      break;
 8007d36:	e0eb      	b.n	8007f10 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 80e8 	beq.w	8007f14 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2208      	movs	r2, #8
 8007d54:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007d56:	e0dd      	b.n	8007f14 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fc3a 	bl	80085da <USBH_SetCfg>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f040 80d5 	bne.w	8007f18 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2209      	movs	r2, #9
 8007d72:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d74:	e0d0      	b.n	8007f18 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d016      	beq.n	8007db2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007d84:	2101      	movs	r1, #1
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fc4a 	bl	8008620 <USBH_SetFeature>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d103      	bne.n	8007da0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	220a      	movs	r2, #10
 8007d9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d9e:	e0bd      	b.n	8007f1c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	f040 80b9 	bne.w	8007f1c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	220a      	movs	r2, #10
 8007dae:	701a      	strb	r2, [r3, #0]
      break;
 8007db0:	e0b4      	b.n	8007f1c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	220a      	movs	r2, #10
 8007db6:	701a      	strb	r2, [r3, #0]
      break;
 8007db8:	e0b0      	b.n	8007f1c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80ad 	beq.w	8007f20 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73fb      	strb	r3, [r7, #15]
 8007dd2:	e016      	b.n	8007e02 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007dd4:	7bfa      	ldrb	r2, [r7, #15]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	32de      	adds	r2, #222	@ 0xde
 8007dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dde:	791a      	ldrb	r2, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d108      	bne.n	8007dfc <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007dea:	7bfa      	ldrb	r2, [r7, #15]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	32de      	adds	r2, #222	@ 0xde
 8007df0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007dfa:	e005      	b.n	8007e08 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	73fb      	strb	r3, [r7, #15]
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0e5      	beq.n	8007dd4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d016      	beq.n	8007e40 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	4798      	blx	r3
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d109      	bne.n	8007e38 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2206      	movs	r2, #6
 8007e28:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e30:	2103      	movs	r1, #3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e36:	e073      	b.n	8007f20 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	220d      	movs	r2, #13
 8007e3c:	701a      	strb	r2, [r3, #0]
      break;
 8007e3e:	e06f      	b.n	8007f20 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	220d      	movs	r2, #13
 8007e44:	701a      	strb	r2, [r3, #0]
      break;
 8007e46:	e06b      	b.n	8007f20 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d017      	beq.n	8007e82 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	4798      	blx	r3
 8007e5e:	4603      	mov	r3, r0
 8007e60:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d103      	bne.n	8007e72 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	220b      	movs	r2, #11
 8007e6e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e70:	e058      	b.n	8007f24 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d154      	bne.n	8007f24 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	220d      	movs	r2, #13
 8007e7e:	701a      	strb	r2, [r3, #0]
      break;
 8007e80:	e050      	b.n	8007f24 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	220d      	movs	r2, #13
 8007e86:	701a      	strb	r2, [r3, #0]
      break;
 8007e88:	e04c      	b.n	8007f24 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d049      	beq.n	8007f28 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	4798      	blx	r3
      }
      break;
 8007ea0:	e042      	b.n	8007f28 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff fd4a 	bl	8007944 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d009      	beq.n	8007ece <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ede:	2105      	movs	r1, #5
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d107      	bne.n	8007f00 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fe22 	bl	8007b42 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007efe:	e014      	b.n	8007f2a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f001 fb19 	bl	8009538 <USBH_LL_Start>
      break;
 8007f06:	e010      	b.n	8007f2a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007f08:	bf00      	nop
 8007f0a:	e00e      	b.n	8007f2a <USBH_Process+0x3c6>
      break;
 8007f0c:	bf00      	nop
 8007f0e:	e00c      	b.n	8007f2a <USBH_Process+0x3c6>
      break;
 8007f10:	bf00      	nop
 8007f12:	e00a      	b.n	8007f2a <USBH_Process+0x3c6>
    break;
 8007f14:	bf00      	nop
 8007f16:	e008      	b.n	8007f2a <USBH_Process+0x3c6>
      break;
 8007f18:	bf00      	nop
 8007f1a:	e006      	b.n	8007f2a <USBH_Process+0x3c6>
      break;
 8007f1c:	bf00      	nop
 8007f1e:	e004      	b.n	8007f2a <USBH_Process+0x3c6>
      break;
 8007f20:	bf00      	nop
 8007f22:	e002      	b.n	8007f2a <USBH_Process+0x3c6>
      break;
 8007f24:	bf00      	nop
 8007f26:	e000      	b.n	8007f2a <USBH_Process+0x3c6>
      break;
 8007f28:	bf00      	nop
  }
  return USBH_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af04      	add	r7, sp, #16
 8007f3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007f40:	2301      	movs	r3, #1
 8007f42:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	785b      	ldrb	r3, [r3, #1]
 8007f48:	2b07      	cmp	r3, #7
 8007f4a:	f200 81bd 	bhi.w	80082c8 <USBH_HandleEnum+0x394>
 8007f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f54 <USBH_HandleEnum+0x20>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007f75 	.word	0x08007f75
 8007f58:	0800802f 	.word	0x0800802f
 8007f5c:	08008099 	.word	0x08008099
 8007f60:	08008123 	.word	0x08008123
 8007f64:	0800818d 	.word	0x0800818d
 8007f68:	080081fd 	.word	0x080081fd
 8007f6c:	08008243 	.word	0x08008243
 8007f70:	08008289 	.word	0x08008289
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007f74:	2108      	movs	r1, #8
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa4c 	bl	8008414 <USBH_Get_DevDesc>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d12e      	bne.n	8007fe4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	7919      	ldrb	r1, [r3, #4]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007faa:	9202      	str	r2, [sp, #8]
 8007fac:	2200      	movs	r2, #0
 8007fae:	9201      	str	r2, [sp, #4]
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2280      	movs	r2, #128	@ 0x80
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 f8dc 	bl	8009174 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	7959      	ldrb	r1, [r3, #5]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fd0:	9202      	str	r2, [sp, #8]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	9201      	str	r2, [sp, #4]
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2200      	movs	r2, #0
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 f8c9 	bl	8009174 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007fe2:	e173      	b.n	80082cc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	f040 8170 	bne.w	80082cc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008002:	2b03      	cmp	r3, #3
 8008004:	d903      	bls.n	800800e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	220d      	movs	r2, #13
 800800a:	701a      	strb	r2, [r3, #0]
      break;
 800800c:	e15e      	b.n	80082cc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	795b      	ldrb	r3, [r3, #5]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 f8fd 	bl	8009214 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	791b      	ldrb	r3, [r3, #4]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 f8f7 	bl	8009214 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	701a      	strb	r2, [r3, #0]
      break;
 800802c:	e14e      	b.n	80082cc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800802e:	2112      	movs	r1, #18
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f9ef 	bl	8008414 <USBH_Get_DevDesc>
 8008036:	4603      	mov	r3, r0
 8008038:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d103      	bne.n	8008048 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008046:	e143      	b.n	80082d0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	2b03      	cmp	r3, #3
 800804c:	f040 8140 	bne.w	80082d0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008056:	3301      	adds	r3, #1
 8008058:	b2da      	uxtb	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008066:	2b03      	cmp	r3, #3
 8008068:	d903      	bls.n	8008072 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	220d      	movs	r2, #13
 800806e:	701a      	strb	r2, [r3, #0]
      break;
 8008070:	e12e      	b.n	80082d0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	795b      	ldrb	r3, [r3, #5]
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 f8cb 	bl	8009214 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	791b      	ldrb	r3, [r3, #4]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 f8c5 	bl	8009214 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	701a      	strb	r2, [r3, #0]
      break;
 8008096:	e11b      	b.n	80082d0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008098:	2101      	movs	r1, #1
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa79 	bl	8008592 <USBH_SetAddress>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d130      	bne.n	800810c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80080aa:	2002      	movs	r0, #2
 80080ac:	f001 fbab 	bl	8009806 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2203      	movs	r2, #3
 80080bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	7919      	ldrb	r1, [r3, #4]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080d2:	9202      	str	r2, [sp, #8]
 80080d4:	2200      	movs	r2, #0
 80080d6:	9201      	str	r2, [sp, #4]
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	4603      	mov	r3, r0
 80080dc:	2280      	movs	r2, #128	@ 0x80
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 f848 	bl	8009174 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	7959      	ldrb	r1, [r3, #5]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080f8:	9202      	str	r2, [sp, #8]
 80080fa:	2200      	movs	r2, #0
 80080fc:	9201      	str	r2, [sp, #4]
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	4603      	mov	r3, r0
 8008102:	2200      	movs	r2, #0
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 f835 	bl	8009174 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800810a:	e0e3      	b.n	80082d4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	2b03      	cmp	r3, #3
 8008110:	f040 80e0 	bne.w	80082d4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	220d      	movs	r2, #13
 8008118:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	705a      	strb	r2, [r3, #1]
      break;
 8008120:	e0d8      	b.n	80082d4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008122:	2109      	movs	r1, #9
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f9a1 	bl	800846c <USBH_Get_CfgDesc>
 800812a:	4603      	mov	r3, r0
 800812c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d103      	bne.n	800813c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2204      	movs	r2, #4
 8008138:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800813a:	e0cd      	b.n	80082d8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800813c:	7bbb      	ldrb	r3, [r7, #14]
 800813e:	2b03      	cmp	r3, #3
 8008140:	f040 80ca 	bne.w	80082d8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800814a:	3301      	adds	r3, #1
 800814c:	b2da      	uxtb	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800815a:	2b03      	cmp	r3, #3
 800815c:	d903      	bls.n	8008166 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	220d      	movs	r2, #13
 8008162:	701a      	strb	r2, [r3, #0]
      break;
 8008164:	e0b8      	b.n	80082d8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	795b      	ldrb	r3, [r3, #5]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 f851 	bl	8009214 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	791b      	ldrb	r3, [r3, #4]
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 f84b 	bl	8009214 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
      break;
 800818a:	e0a5      	b.n	80082d8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f969 	bl	800846c <USBH_Get_CfgDesc>
 800819a:	4603      	mov	r3, r0
 800819c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d103      	bne.n	80081ac <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2205      	movs	r2, #5
 80081a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081aa:	e097      	b.n	80082dc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	f040 8094 	bne.w	80082dc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081ba:	3301      	adds	r3, #1
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d903      	bls.n	80081d6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	220d      	movs	r2, #13
 80081d2:	701a      	strb	r2, [r3, #0]
      break;
 80081d4:	e082      	b.n	80082dc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	795b      	ldrb	r3, [r3, #5]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 f819 	bl	8009214 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	791b      	ldrb	r3, [r3, #4]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 f813 	bl	8009214 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	701a      	strb	r2, [r3, #0]
      break;
 80081fa:	e06f      	b.n	80082dc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008202:	2b00      	cmp	r3, #0
 8008204:	d019      	beq.n	800823a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008212:	23ff      	movs	r3, #255	@ 0xff
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f953 	bl	80084c0 <USBH_Get_StringDesc>
 800821a:	4603      	mov	r3, r0
 800821c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d103      	bne.n	800822c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2206      	movs	r2, #6
 8008228:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800822a:	e059      	b.n	80082e0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	2b03      	cmp	r3, #3
 8008230:	d156      	bne.n	80082e0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2206      	movs	r2, #6
 8008236:	705a      	strb	r2, [r3, #1]
      break;
 8008238:	e052      	b.n	80082e0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2206      	movs	r2, #6
 800823e:	705a      	strb	r2, [r3, #1]
      break;
 8008240:	e04e      	b.n	80082e0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008248:	2b00      	cmp	r3, #0
 800824a:	d019      	beq.n	8008280 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008258:	23ff      	movs	r3, #255	@ 0xff
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f930 	bl	80084c0 <USBH_Get_StringDesc>
 8008260:	4603      	mov	r3, r0
 8008262:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d103      	bne.n	8008272 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2207      	movs	r2, #7
 800826e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008270:	e038      	b.n	80082e4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	2b03      	cmp	r3, #3
 8008276:	d135      	bne.n	80082e4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2207      	movs	r2, #7
 800827c:	705a      	strb	r2, [r3, #1]
      break;
 800827e:	e031      	b.n	80082e4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2207      	movs	r2, #7
 8008284:	705a      	strb	r2, [r3, #1]
      break;
 8008286:	e02d      	b.n	80082e4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800828e:	2b00      	cmp	r3, #0
 8008290:	d017      	beq.n	80082c2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800829e:	23ff      	movs	r3, #255	@ 0xff
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f90d 	bl	80084c0 <USBH_Get_StringDesc>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80082b4:	e018      	b.n	80082e8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d115      	bne.n	80082e8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
      break;
 80082c0:	e012      	b.n	80082e8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]
      break;
 80082c6:	e00f      	b.n	80082e8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80082c8:	bf00      	nop
 80082ca:	e00e      	b.n	80082ea <USBH_HandleEnum+0x3b6>
      break;
 80082cc:	bf00      	nop
 80082ce:	e00c      	b.n	80082ea <USBH_HandleEnum+0x3b6>
      break;
 80082d0:	bf00      	nop
 80082d2:	e00a      	b.n	80082ea <USBH_HandleEnum+0x3b6>
      break;
 80082d4:	bf00      	nop
 80082d6:	e008      	b.n	80082ea <USBH_HandleEnum+0x3b6>
      break;
 80082d8:	bf00      	nop
 80082da:	e006      	b.n	80082ea <USBH_HandleEnum+0x3b6>
      break;
 80082dc:	bf00      	nop
 80082de:	e004      	b.n	80082ea <USBH_HandleEnum+0x3b6>
      break;
 80082e0:	bf00      	nop
 80082e2:	e002      	b.n	80082ea <USBH_HandleEnum+0x3b6>
      break;
 80082e4:	bf00      	nop
 80082e6:	e000      	b.n	80082ea <USBH_HandleEnum+0x3b6>
      break;
 80082e8:	bf00      	nop
  }
  return Status;
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f804 	bl	8008336 <USBH_HandleSof>
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b0b      	cmp	r3, #11
 8008346:	d10a      	bne.n	800835e <USBH_HandleSof+0x28>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d005      	beq.n	800835e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
  }
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008376:	bf00      	nop
}
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008392:	bf00      	nop
}
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 f8be 	bl	800956e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	791b      	ldrb	r3, [r3, #4]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 ff0b 	bl	8009214 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	795b      	ldrb	r3, [r3, #5]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 ff05 	bl	8009214 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af02      	add	r7, sp, #8
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008420:	887b      	ldrh	r3, [r7, #2]
 8008422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008426:	d901      	bls.n	800842c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008428:	2303      	movs	r3, #3
 800842a:	e01b      	b.n	8008464 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008432:	887b      	ldrh	r3, [r7, #2]
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	4613      	mov	r3, r2
 8008438:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800843c:	2100      	movs	r1, #0
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f872 	bl	8008528 <USBH_GetDescriptor>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d109      	bne.n	8008462 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008454:	887a      	ldrh	r2, [r7, #2]
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f929 	bl	80086b0 <USBH_ParseDevDesc>
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af02      	add	r7, sp, #8
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	331c      	adds	r3, #28
 800847c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800847e:	887b      	ldrh	r3, [r7, #2]
 8008480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008484:	d901      	bls.n	800848a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008486:	2303      	movs	r3, #3
 8008488:	e016      	b.n	80084b8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800848a:	887b      	ldrh	r3, [r7, #2]
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008494:	2100      	movs	r1, #0
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f846 	bl	8008528 <USBH_GetDescriptor>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d107      	bne.n	80084b6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80084a6:	887b      	ldrh	r3, [r7, #2]
 80084a8:	461a      	mov	r2, r3
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f9af 	bl	8008810 <USBH_ParseCfgDesc>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	607a      	str	r2, [r7, #4]
 80084ca:	461a      	mov	r2, r3
 80084cc:	460b      	mov	r3, r1
 80084ce:	72fb      	strb	r3, [r7, #11]
 80084d0:	4613      	mov	r3, r2
 80084d2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80084d4:	893b      	ldrh	r3, [r7, #8]
 80084d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084da:	d802      	bhi.n	80084e2 <USBH_Get_StringDesc+0x22>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e01c      	b.n	8008520 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80084ee:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80084f6:	893b      	ldrh	r3, [r7, #8]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	460b      	mov	r3, r1
 80084fc:	2100      	movs	r1, #0
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 f812 	bl	8008528 <USBH_GetDescriptor>
 8008504:	4603      	mov	r3, r0
 8008506:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008508:	7dfb      	ldrb	r3, [r7, #23]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d107      	bne.n	800851e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008514:	893a      	ldrh	r2, [r7, #8]
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fb8d 	bl	8008c38 <USBH_ParseStringDesc>
  }

  return status;
 800851e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	607b      	str	r3, [r7, #4]
 8008532:	460b      	mov	r3, r1
 8008534:	72fb      	strb	r3, [r7, #11]
 8008536:	4613      	mov	r3, r2
 8008538:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	789b      	ldrb	r3, [r3, #2]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d11c      	bne.n	800857c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008542:	7afb      	ldrb	r3, [r7, #11]
 8008544:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008548:	b2da      	uxtb	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2206      	movs	r2, #6
 8008552:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	893a      	ldrh	r2, [r7, #8]
 8008558:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800855a:	893b      	ldrh	r3, [r7, #8]
 800855c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008560:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008564:	d104      	bne.n	8008570 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f240 4209 	movw	r2, #1033	@ 0x409
 800856c:	829a      	strh	r2, [r3, #20]
 800856e:	e002      	b.n	8008576 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8b3a      	ldrh	r2, [r7, #24]
 800857a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800857c:	8b3b      	ldrh	r3, [r7, #24]
 800857e:	461a      	mov	r2, r3
 8008580:	6879      	ldr	r1, [r7, #4]
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 fba5 	bl	8008cd2 <USBH_CtlReq>
 8008588:	4603      	mov	r3, r0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	789b      	ldrb	r3, [r3, #2]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d10f      	bne.n	80085c6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2205      	movs	r2, #5
 80085b0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80085b2:	78fb      	ldrb	r3, [r7, #3]
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80085c6:	2200      	movs	r2, #0
 80085c8:	2100      	movs	r1, #0
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fb81 	bl	8008cd2 <USBH_CtlReq>
 80085d0:	4603      	mov	r3, r0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	460b      	mov	r3, r1
 80085e4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	789b      	ldrb	r3, [r3, #2]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d10e      	bne.n	800860c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2209      	movs	r2, #9
 80085f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	887a      	ldrh	r2, [r7, #2]
 80085fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800860c:	2200      	movs	r2, #0
 800860e:	2100      	movs	r1, #0
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fb5e 	bl	8008cd2 <USBH_CtlReq>
 8008616:	4603      	mov	r3, r0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	789b      	ldrb	r3, [r3, #2]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d10f      	bne.n	8008654 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2203      	movs	r2, #3
 800863e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	b29a      	uxth	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008654:	2200      	movs	r2, #0
 8008656:	2100      	movs	r1, #0
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fb3a 	bl	8008cd2 <USBH_CtlReq>
 800865e:	4603      	mov	r3, r0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	789b      	ldrb	r3, [r3, #2]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d10f      	bne.n	800869c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2202      	movs	r2, #2
 8008680:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800868e:	78fb      	ldrb	r3, [r7, #3]
 8008690:	b29a      	uxth	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800869c:	2200      	movs	r2, #0
 800869e:	2100      	movs	r1, #0
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fb16 	bl	8008cd2 <USBH_CtlReq>
 80086a6:	4603      	mov	r3, r0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	4613      	mov	r3, r2
 80086bc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80086c4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80086d0:	2302      	movs	r3, #2
 80086d2:	e094      	b.n	80087fe <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	781a      	ldrb	r2, [r3, #0]
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	785a      	ldrb	r2, [r3, #1]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	3302      	adds	r3, #2
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	3303      	adds	r3, #3
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	4313      	orrs	r3, r2
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	791a      	ldrb	r2, [r3, #4]
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	795a      	ldrb	r2, [r3, #5]
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	799a      	ldrb	r2, [r3, #6]
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	79da      	ldrb	r2, [r3, #7]
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008724:	2b00      	cmp	r3, #0
 8008726:	d004      	beq.n	8008732 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800872e:	2b01      	cmp	r3, #1
 8008730:	d11b      	bne.n	800876a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	79db      	ldrb	r3, [r3, #7]
 8008736:	2b20      	cmp	r3, #32
 8008738:	dc0f      	bgt.n	800875a <USBH_ParseDevDesc+0xaa>
 800873a:	2b08      	cmp	r3, #8
 800873c:	db0f      	blt.n	800875e <USBH_ParseDevDesc+0xae>
 800873e:	3b08      	subs	r3, #8
 8008740:	4a32      	ldr	r2, [pc, #200]	@ (800880c <USBH_ParseDevDesc+0x15c>)
 8008742:	fa22 f303 	lsr.w	r3, r2, r3
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	bf14      	ite	ne
 800874e:	2301      	movne	r3, #1
 8008750:	2300      	moveq	r3, #0
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d106      	bne.n	8008766 <USBH_ParseDevDesc+0xb6>
 8008758:	e001      	b.n	800875e <USBH_ParseDevDesc+0xae>
 800875a:	2b40      	cmp	r3, #64	@ 0x40
 800875c:	d003      	beq.n	8008766 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	2208      	movs	r2, #8
 8008762:	71da      	strb	r2, [r3, #7]
        break;
 8008764:	e000      	b.n	8008768 <USBH_ParseDevDesc+0xb8>
        break;
 8008766:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008768:	e00e      	b.n	8008788 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008770:	2b02      	cmp	r3, #2
 8008772:	d107      	bne.n	8008784 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	79db      	ldrb	r3, [r3, #7]
 8008778:	2b08      	cmp	r3, #8
 800877a:	d005      	beq.n	8008788 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	2208      	movs	r2, #8
 8008780:	71da      	strb	r2, [r3, #7]
 8008782:	e001      	b.n	8008788 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008784:	2303      	movs	r3, #3
 8008786:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008788:	88fb      	ldrh	r3, [r7, #6]
 800878a:	2b08      	cmp	r3, #8
 800878c:	d936      	bls.n	80087fc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	3308      	adds	r3, #8
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	3309      	adds	r3, #9
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	021b      	lsls	r3, r3, #8
 800879e:	b29b      	uxth	r3, r3
 80087a0:	4313      	orrs	r3, r2
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	330a      	adds	r3, #10
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	330b      	adds	r3, #11
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	021b      	lsls	r3, r3, #8
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	4313      	orrs	r3, r2
 80087bc:	b29a      	uxth	r2, r3
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	330c      	adds	r3, #12
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	461a      	mov	r2, r3
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	330d      	adds	r3, #13
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	021b      	lsls	r3, r3, #8
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	4313      	orrs	r3, r2
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	7b9a      	ldrb	r2, [r3, #14]
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	7bda      	ldrb	r2, [r3, #15]
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	7c1a      	ldrb	r2, [r3, #16]
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	7c5a      	ldrb	r2, [r3, #17]
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	371c      	adds	r7, #28
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	01000101 	.word	0x01000101

08008810 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08c      	sub	sp, #48	@ 0x30
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	4613      	mov	r3, r2
 800881c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008824:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800882c:	2300      	movs	r3, #0
 800882e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800883e:	2302      	movs	r3, #2
 8008840:	e0da      	b.n	80089f8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	2b09      	cmp	r3, #9
 800884c:	d002      	beq.n	8008854 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800884e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008850:	2209      	movs	r2, #9
 8008852:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	781a      	ldrb	r2, [r3, #0]
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	785a      	ldrb	r2, [r3, #1]
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	3302      	adds	r3, #2
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	3303      	adds	r3, #3
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	021b      	lsls	r3, r3, #8
 8008874:	b29b      	uxth	r3, r3
 8008876:	4313      	orrs	r3, r2
 8008878:	b29b      	uxth	r3, r3
 800887a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800887e:	bf28      	it	cs
 8008880:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008884:	b29a      	uxth	r2, r3
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	791a      	ldrb	r2, [r3, #4]
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	795a      	ldrb	r2, [r3, #5]
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	799a      	ldrb	r2, [r3, #6]
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	79da      	ldrb	r2, [r3, #7]
 80088a6:	6a3b      	ldr	r3, [r7, #32]
 80088a8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	7a1a      	ldrb	r2, [r3, #8]
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80088b2:	88fb      	ldrh	r3, [r7, #6]
 80088b4:	2b09      	cmp	r3, #9
 80088b6:	f240 809d 	bls.w	80089f4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80088ba:	2309      	movs	r3, #9
 80088bc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80088c2:	e081      	b.n	80089c8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80088c4:	f107 0316 	add.w	r3, r7, #22
 80088c8:	4619      	mov	r1, r3
 80088ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088cc:	f000 f9e7 	bl	8008c9e <USBH_GetNextDesc>
 80088d0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80088d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d176      	bne.n	80089c8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80088da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	2b09      	cmp	r3, #9
 80088e0:	d002      	beq.n	80088e8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80088e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e4:	2209      	movs	r2, #9
 80088e6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80088e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088ec:	221a      	movs	r2, #26
 80088ee:	fb02 f303 	mul.w	r3, r2, r3
 80088f2:	3308      	adds	r3, #8
 80088f4:	6a3a      	ldr	r2, [r7, #32]
 80088f6:	4413      	add	r3, r2
 80088f8:	3302      	adds	r3, #2
 80088fa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80088fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088fe:	69f8      	ldr	r0, [r7, #28]
 8008900:	f000 f87e 	bl	8008a00 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800890e:	e043      	b.n	8008998 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008910:	f107 0316 	add.w	r3, r7, #22
 8008914:	4619      	mov	r1, r3
 8008916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008918:	f000 f9c1 	bl	8008c9e <USBH_GetNextDesc>
 800891c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800891e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008920:	785b      	ldrb	r3, [r3, #1]
 8008922:	2b05      	cmp	r3, #5
 8008924:	d138      	bne.n	8008998 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	795b      	ldrb	r3, [r3, #5]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d113      	bne.n	8008956 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008932:	2b02      	cmp	r3, #2
 8008934:	d003      	beq.n	800893e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	799b      	ldrb	r3, [r3, #6]
 800893a:	2b03      	cmp	r3, #3
 800893c:	d10b      	bne.n	8008956 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	79db      	ldrb	r3, [r3, #7]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10b      	bne.n	800895e <USBH_ParseCfgDesc+0x14e>
 8008946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b09      	cmp	r3, #9
 800894c:	d007      	beq.n	800895e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800894e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008950:	2209      	movs	r2, #9
 8008952:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008954:	e003      	b.n	800895e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008958:	2207      	movs	r2, #7
 800895a:	701a      	strb	r2, [r3, #0]
 800895c:	e000      	b.n	8008960 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800895e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008964:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008968:	3201      	adds	r2, #1
 800896a:	00d2      	lsls	r2, r2, #3
 800896c:	211a      	movs	r1, #26
 800896e:	fb01 f303 	mul.w	r3, r1, r3
 8008972:	4413      	add	r3, r2
 8008974:	3308      	adds	r3, #8
 8008976:	6a3a      	ldr	r2, [r7, #32]
 8008978:	4413      	add	r3, r2
 800897a:	3304      	adds	r3, #4
 800897c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800897e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008980:	69b9      	ldr	r1, [r7, #24]
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 f870 	bl	8008a68 <USBH_ParseEPDesc>
 8008988:	4603      	mov	r3, r0
 800898a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800898e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008992:	3301      	adds	r3, #1
 8008994:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	791b      	ldrb	r3, [r3, #4]
 800899c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d204      	bcs.n	80089ae <USBH_ParseCfgDesc+0x19e>
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	885a      	ldrh	r2, [r3, #2]
 80089a8:	8afb      	ldrh	r3, [r7, #22]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d8b0      	bhi.n	8008910 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	791b      	ldrb	r3, [r3, #4]
 80089b2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d201      	bcs.n	80089be <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e01c      	b.n	80089f8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80089be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089c2:	3301      	adds	r3, #1
 80089c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80089c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d805      	bhi.n	80089dc <USBH_ParseCfgDesc+0x1cc>
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	885a      	ldrh	r2, [r3, #2]
 80089d4:	8afb      	ldrh	r3, [r7, #22]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	f63f af74 	bhi.w	80088c4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	791b      	ldrb	r3, [r3, #4]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	bf28      	it	cs
 80089e4:	2302      	movcs	r3, #2
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d201      	bcs.n	80089f4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e001      	b.n	80089f8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80089f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3730      	adds	r7, #48	@ 0x30
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781a      	ldrb	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	785a      	ldrb	r2, [r3, #1]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	789a      	ldrb	r2, [r3, #2]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	78da      	ldrb	r2, [r3, #3]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	bf28      	it	cs
 8008a34:	2302      	movcs	r3, #2
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	795a      	ldrb	r2, [r3, #5]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	799a      	ldrb	r2, [r3, #6]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	79da      	ldrb	r2, [r3, #7]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	7a1a      	ldrb	r2, [r3, #8]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	721a      	strb	r2, [r3, #8]
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	781a      	ldrb	r2, [r3, #0]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	785a      	ldrb	r2, [r3, #1]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	789a      	ldrb	r2, [r3, #2]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	78da      	ldrb	r2, [r3, #3]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3305      	adds	r3, #5
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	021b      	lsls	r3, r3, #8
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	799a      	ldrb	r2, [r3, #6]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	889b      	ldrh	r3, [r3, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d009      	beq.n	8008ad6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aca:	d804      	bhi.n	8008ad6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ad4:	d901      	bls.n	8008ada <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d136      	bne.n	8008b52 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	78db      	ldrb	r3, [r3, #3]
 8008ae8:	f003 0303 	and.w	r3, r3, #3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d108      	bne.n	8008b02 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	889b      	ldrh	r3, [r3, #4]
 8008af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008af8:	f240 8097 	bls.w	8008c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008afc:	2303      	movs	r3, #3
 8008afe:	75fb      	strb	r3, [r7, #23]
 8008b00:	e093      	b.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	78db      	ldrb	r3, [r3, #3]
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d107      	bne.n	8008b1e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	889b      	ldrh	r3, [r3, #4]
 8008b12:	2b40      	cmp	r3, #64	@ 0x40
 8008b14:	f240 8089 	bls.w	8008c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	75fb      	strb	r3, [r7, #23]
 8008b1c:	e085      	b.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	78db      	ldrb	r3, [r3, #3]
 8008b22:	f003 0303 	and.w	r3, r3, #3
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d005      	beq.n	8008b36 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	78db      	ldrb	r3, [r3, #3]
 8008b2e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d10a      	bne.n	8008b4c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	799b      	ldrb	r3, [r3, #6]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <USBH_ParseEPDesc+0xde>
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	799b      	ldrb	r3, [r3, #6]
 8008b42:	2b10      	cmp	r3, #16
 8008b44:	d970      	bls.n	8008c28 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008b46:	2303      	movs	r3, #3
 8008b48:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b4a:	e06d      	b.n	8008c28 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	75fb      	strb	r3, [r7, #23]
 8008b50:	e06b      	b.n	8008c2a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d13c      	bne.n	8008bd6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	78db      	ldrb	r3, [r3, #3]
 8008b60:	f003 0303 	and.w	r3, r3, #3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d005      	beq.n	8008b74 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	78db      	ldrb	r3, [r3, #3]
 8008b6c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d106      	bne.n	8008b82 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	889b      	ldrh	r3, [r3, #4]
 8008b78:	2b40      	cmp	r3, #64	@ 0x40
 8008b7a:	d956      	bls.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b80:	e053      	b.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	78db      	ldrb	r3, [r3, #3]
 8008b86:	f003 0303 	and.w	r3, r3, #3
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d10e      	bne.n	8008bac <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	799b      	ldrb	r3, [r3, #6]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d007      	beq.n	8008ba6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008b9a:	2b10      	cmp	r3, #16
 8008b9c:	d803      	bhi.n	8008ba6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008ba2:	2b40      	cmp	r3, #64	@ 0x40
 8008ba4:	d941      	bls.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	75fb      	strb	r3, [r7, #23]
 8008baa:	e03e      	b.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	78db      	ldrb	r3, [r3, #3]
 8008bb0:	f003 0303 	and.w	r3, r3, #3
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d10b      	bne.n	8008bd0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	799b      	ldrb	r3, [r3, #6]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d004      	beq.n	8008bca <USBH_ParseEPDesc+0x162>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	889b      	ldrh	r3, [r3, #4]
 8008bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bc8:	d32f      	bcc.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	75fb      	strb	r3, [r7, #23]
 8008bce:	e02c      	b.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	75fb      	strb	r3, [r7, #23]
 8008bd4:	e029      	b.n	8008c2a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d120      	bne.n	8008c22 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	78db      	ldrb	r3, [r3, #3]
 8008be4:	f003 0303 	and.w	r3, r3, #3
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d106      	bne.n	8008bfa <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	889b      	ldrh	r3, [r3, #4]
 8008bf0:	2b08      	cmp	r3, #8
 8008bf2:	d01a      	beq.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	75fb      	strb	r3, [r7, #23]
 8008bf8:	e017      	b.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	78db      	ldrb	r3, [r3, #3]
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d10a      	bne.n	8008c1c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	799b      	ldrb	r3, [r3, #6]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <USBH_ParseEPDesc+0x1ae>
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	889b      	ldrh	r3, [r3, #4]
 8008c12:	2b08      	cmp	r3, #8
 8008c14:	d909      	bls.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c16:	2303      	movs	r3, #3
 8008c18:	75fb      	strb	r3, [r7, #23]
 8008c1a:	e006      	b.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	75fb      	strb	r3, [r7, #23]
 8008c20:	e003      	b.n	8008c2a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008c22:	2303      	movs	r3, #3
 8008c24:	75fb      	strb	r3, [r7, #23]
 8008c26:	e000      	b.n	8008c2a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c28:	bf00      	nop
  }

  return status;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	371c      	adds	r7, #28
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	4613      	mov	r3, r2
 8008c44:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b03      	cmp	r3, #3
 8008c4e:	d120      	bne.n	8008c92 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	1e9a      	subs	r2, r3, #2
 8008c56:	88fb      	ldrh	r3, [r7, #6]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	bf28      	it	cs
 8008c5c:	4613      	movcs	r3, r2
 8008c5e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	3302      	adds	r3, #2
 8008c64:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008c66:	2300      	movs	r3, #0
 8008c68:	82fb      	strh	r3, [r7, #22]
 8008c6a:	e00b      	b.n	8008c84 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008c6c:	8afb      	ldrh	r3, [r7, #22]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	4413      	add	r3, r2
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008c7e:	8afb      	ldrh	r3, [r7, #22]
 8008c80:	3302      	adds	r3, #2
 8008c82:	82fb      	strh	r3, [r7, #22]
 8008c84:	8afa      	ldrh	r2, [r7, #22]
 8008c86:	8abb      	ldrh	r3, [r7, #20]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d3ef      	bcc.n	8008c6c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	701a      	strb	r2, [r3, #0]
  }
}
 8008c92:	bf00      	nop
 8008c94:	371c      	adds	r7, #28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	7812      	ldrb	r2, [r2, #0]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b086      	sub	sp, #24
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	789b      	ldrb	r3, [r3, #2]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d002      	beq.n	8008cf2 <USBH_CtlReq+0x20>
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d00f      	beq.n	8008d10 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008cf0:	e027      	b.n	8008d42 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	88fa      	ldrh	r2, [r7, #6]
 8008cfc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2201      	movs	r2, #1
 8008d02:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2202      	movs	r2, #2
 8008d08:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d0e:	e018      	b.n	8008d42 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 f81b 	bl	8008d4c <USBH_HandleControl>
 8008d16:	4603      	mov	r3, r0
 8008d18:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <USBH_CtlReq+0x54>
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d106      	bne.n	8008d34 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	761a      	strb	r2, [r3, #24]
      break;
 8008d32:	e005      	b.n	8008d40 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d102      	bne.n	8008d40 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	709a      	strb	r2, [r3, #2]
      break;
 8008d40:	bf00      	nop
  }
  return status;
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3718      	adds	r7, #24
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af02      	add	r7, sp, #8
 8008d52:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d54:	2301      	movs	r3, #1
 8008d56:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	7e1b      	ldrb	r3, [r3, #24]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	2b0a      	cmp	r3, #10
 8008d64:	f200 8156 	bhi.w	8009014 <USBH_HandleControl+0x2c8>
 8008d68:	a201      	add	r2, pc, #4	@ (adr r2, 8008d70 <USBH_HandleControl+0x24>)
 8008d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6e:	bf00      	nop
 8008d70:	08008d9d 	.word	0x08008d9d
 8008d74:	08008db7 	.word	0x08008db7
 8008d78:	08008e21 	.word	0x08008e21
 8008d7c:	08008e47 	.word	0x08008e47
 8008d80:	08008e7f 	.word	0x08008e7f
 8008d84:	08008ea9 	.word	0x08008ea9
 8008d88:	08008efb 	.word	0x08008efb
 8008d8c:	08008f1d 	.word	0x08008f1d
 8008d90:	08008f59 	.word	0x08008f59
 8008d94:	08008f7f 	.word	0x08008f7f
 8008d98:	08008fbd 	.word	0x08008fbd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f103 0110 	add.w	r1, r3, #16
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	795b      	ldrb	r3, [r3, #5]
 8008da6:	461a      	mov	r2, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f943 	bl	8009034 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2202      	movs	r2, #2
 8008db2:	761a      	strb	r2, [r3, #24]
      break;
 8008db4:	e139      	b.n	800902a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	795b      	ldrb	r3, [r3, #5]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fcc5 	bl	800974c <USBH_LL_GetURBState>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d11e      	bne.n	8008e0a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	7c1b      	ldrb	r3, [r3, #16]
 8008dd0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008dd4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	8adb      	ldrh	r3, [r3, #22]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00a      	beq.n	8008df4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008dde:	7b7b      	ldrb	r3, [r7, #13]
 8008de0:	2b80      	cmp	r3, #128	@ 0x80
 8008de2:	d103      	bne.n	8008dec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2203      	movs	r2, #3
 8008de8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008dea:	e115      	b.n	8009018 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2205      	movs	r2, #5
 8008df0:	761a      	strb	r2, [r3, #24]
      break;
 8008df2:	e111      	b.n	8009018 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008df4:	7b7b      	ldrb	r3, [r7, #13]
 8008df6:	2b80      	cmp	r3, #128	@ 0x80
 8008df8:	d103      	bne.n	8008e02 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2209      	movs	r2, #9
 8008dfe:	761a      	strb	r2, [r3, #24]
      break;
 8008e00:	e10a      	b.n	8009018 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2207      	movs	r2, #7
 8008e06:	761a      	strb	r2, [r3, #24]
      break;
 8008e08:	e106      	b.n	8009018 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008e0a:	7bbb      	ldrb	r3, [r7, #14]
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d003      	beq.n	8008e18 <USBH_HandleControl+0xcc>
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	f040 8100 	bne.w	8009018 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	220b      	movs	r2, #11
 8008e1c:	761a      	strb	r2, [r3, #24]
      break;
 8008e1e:	e0fb      	b.n	8009018 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6899      	ldr	r1, [r3, #8]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	899a      	ldrh	r2, [r3, #12]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	791b      	ldrb	r3, [r3, #4]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f93a 	bl	80090b2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2204      	movs	r2, #4
 8008e42:	761a      	strb	r2, [r3, #24]
      break;
 8008e44:	e0f1      	b.n	800902a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	791b      	ldrb	r3, [r3, #4]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fc7d 	bl	800974c <USBH_LL_GetURBState>
 8008e52:	4603      	mov	r3, r0
 8008e54:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d102      	bne.n	8008e62 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2209      	movs	r2, #9
 8008e60:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	2b05      	cmp	r3, #5
 8008e66:	d102      	bne.n	8008e6e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e6c:	e0d6      	b.n	800901c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	f040 80d3 	bne.w	800901c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	220b      	movs	r2, #11
 8008e7a:	761a      	strb	r2, [r3, #24]
      break;
 8008e7c:	e0ce      	b.n	800901c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6899      	ldr	r1, [r3, #8]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	899a      	ldrh	r2, [r3, #12]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	795b      	ldrb	r3, [r3, #5]
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	9000      	str	r0, [sp, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f8ea 	bl	8009068 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2206      	movs	r2, #6
 8008ea4:	761a      	strb	r2, [r3, #24]
      break;
 8008ea6:	e0c0      	b.n	800902a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	795b      	ldrb	r3, [r3, #5]
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fc4c 	bl	800974c <USBH_LL_GetURBState>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d103      	bne.n	8008ec6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2207      	movs	r2, #7
 8008ec2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ec4:	e0ac      	b.n	8009020 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b05      	cmp	r3, #5
 8008eca:	d105      	bne.n	8008ed8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	220c      	movs	r2, #12
 8008ed0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed6:	e0a3      	b.n	8009020 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d103      	bne.n	8008ee6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2205      	movs	r2, #5
 8008ee2:	761a      	strb	r2, [r3, #24]
      break;
 8008ee4:	e09c      	b.n	8009020 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	2b04      	cmp	r3, #4
 8008eea:	f040 8099 	bne.w	8009020 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	220b      	movs	r2, #11
 8008ef2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef8:	e092      	b.n	8009020 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	791b      	ldrb	r3, [r3, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	2100      	movs	r1, #0
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f8d5 	bl	80090b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2208      	movs	r2, #8
 8008f18:	761a      	strb	r2, [r3, #24]

      break;
 8008f1a:	e086      	b.n	800902a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	791b      	ldrb	r3, [r3, #4]
 8008f20:	4619      	mov	r1, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fc12 	bl	800974c <USBH_LL_GetURBState>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d105      	bne.n	8008f3e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	220d      	movs	r2, #13
 8008f36:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f3c:	e072      	b.n	8009024 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b04      	cmp	r3, #4
 8008f42:	d103      	bne.n	8008f4c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	220b      	movs	r2, #11
 8008f48:	761a      	strb	r2, [r3, #24]
      break;
 8008f4a:	e06b      	b.n	8009024 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	2b05      	cmp	r3, #5
 8008f50:	d168      	bne.n	8009024 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008f52:	2303      	movs	r3, #3
 8008f54:	73fb      	strb	r3, [r7, #15]
      break;
 8008f56:	e065      	b.n	8009024 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	795b      	ldrb	r3, [r3, #5]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	9200      	str	r2, [sp, #0]
 8008f60:	2200      	movs	r2, #0
 8008f62:	2100      	movs	r1, #0
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f87f 	bl	8009068 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	220a      	movs	r2, #10
 8008f7a:	761a      	strb	r2, [r3, #24]
      break;
 8008f7c:	e055      	b.n	800902a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	795b      	ldrb	r3, [r3, #5]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fbe1 	bl	800974c <USBH_LL_GetURBState>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d105      	bne.n	8008fa0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	220d      	movs	r2, #13
 8008f9c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f9e:	e043      	b.n	8009028 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d103      	bne.n	8008fae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2209      	movs	r2, #9
 8008faa:	761a      	strb	r2, [r3, #24]
      break;
 8008fac:	e03c      	b.n	8009028 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	2b04      	cmp	r3, #4
 8008fb2:	d139      	bne.n	8009028 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	220b      	movs	r2, #11
 8008fb8:	761a      	strb	r2, [r3, #24]
      break;
 8008fba:	e035      	b.n	8009028 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	7e5b      	ldrb	r3, [r3, #25]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	765a      	strb	r2, [r3, #25]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	7e5b      	ldrb	r3, [r3, #25]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d806      	bhi.n	8008fde <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008fdc:	e025      	b.n	800902a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fe4:	2106      	movs	r1, #6
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	795b      	ldrb	r3, [r3, #5]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f90c 	bl	8009214 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	791b      	ldrb	r3, [r3, #4]
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f906 	bl	8009214 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800900e:	2302      	movs	r3, #2
 8009010:	73fb      	strb	r3, [r7, #15]
      break;
 8009012:	e00a      	b.n	800902a <USBH_HandleControl+0x2de>

    default:
      break;
 8009014:	bf00      	nop
 8009016:	e008      	b.n	800902a <USBH_HandleControl+0x2de>
      break;
 8009018:	bf00      	nop
 800901a:	e006      	b.n	800902a <USBH_HandleControl+0x2de>
      break;
 800901c:	bf00      	nop
 800901e:	e004      	b.n	800902a <USBH_HandleControl+0x2de>
      break;
 8009020:	bf00      	nop
 8009022:	e002      	b.n	800902a <USBH_HandleControl+0x2de>
      break;
 8009024:	bf00      	nop
 8009026:	e000      	b.n	800902a <USBH_HandleControl+0x2de>
      break;
 8009028:	bf00      	nop
  }

  return status;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af04      	add	r7, sp, #16
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	4613      	mov	r3, r2
 8009040:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009042:	79f9      	ldrb	r1, [r7, #7]
 8009044:	2300      	movs	r3, #0
 8009046:	9303      	str	r3, [sp, #12]
 8009048:	2308      	movs	r3, #8
 800904a:	9302      	str	r3, [sp, #8]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	9301      	str	r3, [sp, #4]
 8009050:	2300      	movs	r3, #0
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	2300      	movs	r3, #0
 8009056:	2200      	movs	r2, #0
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 fb46 	bl	80096ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b088      	sub	sp, #32
 800906c:	af04      	add	r7, sp, #16
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	4611      	mov	r1, r2
 8009074:	461a      	mov	r2, r3
 8009076:	460b      	mov	r3, r1
 8009078:	80fb      	strh	r3, [r7, #6]
 800907a:	4613      	mov	r3, r2
 800907c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800908c:	7979      	ldrb	r1, [r7, #5]
 800908e:	7e3b      	ldrb	r3, [r7, #24]
 8009090:	9303      	str	r3, [sp, #12]
 8009092:	88fb      	ldrh	r3, [r7, #6]
 8009094:	9302      	str	r3, [sp, #8]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	2301      	movs	r3, #1
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	2300      	movs	r3, #0
 80090a0:	2200      	movs	r2, #0
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 fb21 	bl	80096ea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b088      	sub	sp, #32
 80090b6:	af04      	add	r7, sp, #16
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	4611      	mov	r1, r2
 80090be:	461a      	mov	r2, r3
 80090c0:	460b      	mov	r3, r1
 80090c2:	80fb      	strh	r3, [r7, #6]
 80090c4:	4613      	mov	r3, r2
 80090c6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090c8:	7979      	ldrb	r1, [r7, #5]
 80090ca:	2300      	movs	r3, #0
 80090cc:	9303      	str	r3, [sp, #12]
 80090ce:	88fb      	ldrh	r3, [r7, #6]
 80090d0:	9302      	str	r3, [sp, #8]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	9301      	str	r3, [sp, #4]
 80090d6:	2301      	movs	r3, #1
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	2300      	movs	r3, #0
 80090dc:	2201      	movs	r2, #1
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 fb03 	bl	80096ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80090e4:	2300      	movs	r3, #0

}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b088      	sub	sp, #32
 80090f2:	af04      	add	r7, sp, #16
 80090f4:	60f8      	str	r0, [r7, #12]
 80090f6:	60b9      	str	r1, [r7, #8]
 80090f8:	4611      	mov	r1, r2
 80090fa:	461a      	mov	r2, r3
 80090fc:	460b      	mov	r3, r1
 80090fe:	80fb      	strh	r3, [r7, #6]
 8009100:	4613      	mov	r3, r2
 8009102:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009112:	7979      	ldrb	r1, [r7, #5]
 8009114:	7e3b      	ldrb	r3, [r7, #24]
 8009116:	9303      	str	r3, [sp, #12]
 8009118:	88fb      	ldrh	r3, [r7, #6]
 800911a:	9302      	str	r3, [sp, #8]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	9301      	str	r3, [sp, #4]
 8009120:	2301      	movs	r3, #1
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	2302      	movs	r3, #2
 8009126:	2200      	movs	r2, #0
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 fade 	bl	80096ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af04      	add	r7, sp, #16
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	4611      	mov	r1, r2
 8009144:	461a      	mov	r2, r3
 8009146:	460b      	mov	r3, r1
 8009148:	80fb      	strh	r3, [r7, #6]
 800914a:	4613      	mov	r3, r2
 800914c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800914e:	7979      	ldrb	r1, [r7, #5]
 8009150:	2300      	movs	r3, #0
 8009152:	9303      	str	r3, [sp, #12]
 8009154:	88fb      	ldrh	r3, [r7, #6]
 8009156:	9302      	str	r3, [sp, #8]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	2301      	movs	r3, #1
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	2302      	movs	r3, #2
 8009162:	2201      	movs	r2, #1
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 fac0 	bl	80096ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af04      	add	r7, sp, #16
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	4608      	mov	r0, r1
 800917e:	4611      	mov	r1, r2
 8009180:	461a      	mov	r2, r3
 8009182:	4603      	mov	r3, r0
 8009184:	70fb      	strb	r3, [r7, #3]
 8009186:	460b      	mov	r3, r1
 8009188:	70bb      	strb	r3, [r7, #2]
 800918a:	4613      	mov	r3, r2
 800918c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800918e:	7878      	ldrb	r0, [r7, #1]
 8009190:	78ba      	ldrb	r2, [r7, #2]
 8009192:	78f9      	ldrb	r1, [r7, #3]
 8009194:	8b3b      	ldrh	r3, [r7, #24]
 8009196:	9302      	str	r3, [sp, #8]
 8009198:	7d3b      	ldrb	r3, [r7, #20]
 800919a:	9301      	str	r3, [sp, #4]
 800919c:	7c3b      	ldrb	r3, [r7, #16]
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	4603      	mov	r3, r0
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fa53 	bl	800964e <USBH_LL_OpenPipe>

  return USBH_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b082      	sub	sp, #8
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80091be:	78fb      	ldrb	r3, [r7, #3]
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fa72 	bl	80096ac <USBH_LL_ClosePipe>

  return USBH_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	460b      	mov	r3, r1
 80091dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f836 	bl	8009250 <USBH_GetFreePipe>
 80091e4:	4603      	mov	r3, r0
 80091e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80091e8:	89fb      	ldrh	r3, [r7, #14]
 80091ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d00a      	beq.n	8009208 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80091f2:	78fa      	ldrb	r2, [r7, #3]
 80091f4:	89fb      	ldrh	r3, [r7, #14]
 80091f6:	f003 030f 	and.w	r3, r3, #15
 80091fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	33e0      	adds	r3, #224	@ 0xe0
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	440b      	add	r3, r1
 8009206:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009208:	89fb      	ldrh	r3, [r7, #14]
 800920a:	b2db      	uxtb	r3, r3
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	2b0f      	cmp	r3, #15
 8009224:	d80d      	bhi.n	8009242 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009226:	78fb      	ldrb	r3, [r7, #3]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	33e0      	adds	r3, #224	@ 0xe0
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	78fb      	ldrb	r3, [r7, #3]
 8009234:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009238:	6879      	ldr	r1, [r7, #4]
 800923a:	33e0      	adds	r3, #224	@ 0xe0
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	440b      	add	r3, r1
 8009240:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800925c:	2300      	movs	r3, #0
 800925e:	73fb      	strb	r3, [r7, #15]
 8009260:	e00f      	b.n	8009282 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	33e0      	adds	r3, #224	@ 0xe0
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d102      	bne.n	800927c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	b29b      	uxth	r3, r3
 800927a:	e007      	b.n	800928c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	3301      	adds	r3, #1
 8009280:	73fb      	strb	r3, [r7, #15]
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	2b0f      	cmp	r3, #15
 8009286:	d9ec      	bls.n	8009262 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009288:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800929c:	2201      	movs	r2, #1
 800929e:	490e      	ldr	r1, [pc, #56]	@ (80092d8 <MX_USB_HOST_Init+0x40>)
 80092a0:	480e      	ldr	r0, [pc, #56]	@ (80092dc <MX_USB_HOST_Init+0x44>)
 80092a2:	f7fe fb15 	bl	80078d0 <USBH_Init>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d001      	beq.n	80092b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80092ac:	f7f7 fc0c 	bl	8000ac8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80092b0:	490b      	ldr	r1, [pc, #44]	@ (80092e0 <MX_USB_HOST_Init+0x48>)
 80092b2:	480a      	ldr	r0, [pc, #40]	@ (80092dc <MX_USB_HOST_Init+0x44>)
 80092b4:	f7fe fbb9 	bl	8007a2a <USBH_RegisterClass>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80092be:	f7f7 fc03 	bl	8000ac8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80092c2:	4806      	ldr	r0, [pc, #24]	@ (80092dc <MX_USB_HOST_Init+0x44>)
 80092c4:	f7fe fc3d 	bl	8007b42 <USBH_Start>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80092ce:	f7f7 fbfb 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80092d2:	bf00      	nop
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	080092f9 	.word	0x080092f9
 80092dc:	200001dc 	.word	0x200001dc
 80092e0:	2000000c 	.word	0x2000000c

080092e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80092e8:	4802      	ldr	r0, [pc, #8]	@ (80092f4 <MX_USB_HOST_Process+0x10>)
 80092ea:	f7fe fc3b 	bl	8007b64 <USBH_Process>
}
 80092ee:	bf00      	nop
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	200001dc 	.word	0x200001dc

080092f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	3b01      	subs	r3, #1
 8009308:	2b04      	cmp	r3, #4
 800930a:	d819      	bhi.n	8009340 <USBH_UserProcess+0x48>
 800930c:	a201      	add	r2, pc, #4	@ (adr r2, 8009314 <USBH_UserProcess+0x1c>)
 800930e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009312:	bf00      	nop
 8009314:	08009341 	.word	0x08009341
 8009318:	08009331 	.word	0x08009331
 800931c:	08009341 	.word	0x08009341
 8009320:	08009339 	.word	0x08009339
 8009324:	08009329 	.word	0x08009329
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009328:	4b09      	ldr	r3, [pc, #36]	@ (8009350 <USBH_UserProcess+0x58>)
 800932a:	2203      	movs	r2, #3
 800932c:	701a      	strb	r2, [r3, #0]
  break;
 800932e:	e008      	b.n	8009342 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009330:	4b07      	ldr	r3, [pc, #28]	@ (8009350 <USBH_UserProcess+0x58>)
 8009332:	2202      	movs	r2, #2
 8009334:	701a      	strb	r2, [r3, #0]
  break;
 8009336:	e004      	b.n	8009342 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009338:	4b05      	ldr	r3, [pc, #20]	@ (8009350 <USBH_UserProcess+0x58>)
 800933a:	2201      	movs	r2, #1
 800933c:	701a      	strb	r2, [r3, #0]
  break;
 800933e:	e000      	b.n	8009342 <USBH_UserProcess+0x4a>

  default:
  break;
 8009340:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	200005b4 	.word	0x200005b4

08009354 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b08a      	sub	sp, #40	@ 0x28
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800935c:	f107 0314 	add.w	r3, r7, #20
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	605a      	str	r2, [r3, #4]
 8009366:	609a      	str	r2, [r3, #8]
 8009368:	60da      	str	r2, [r3, #12]
 800936a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009374:	d147      	bne.n	8009406 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009376:	2300      	movs	r3, #0
 8009378:	613b      	str	r3, [r7, #16]
 800937a:	4b25      	ldr	r3, [pc, #148]	@ (8009410 <HAL_HCD_MspInit+0xbc>)
 800937c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800937e:	4a24      	ldr	r2, [pc, #144]	@ (8009410 <HAL_HCD_MspInit+0xbc>)
 8009380:	f043 0301 	orr.w	r3, r3, #1
 8009384:	6313      	str	r3, [r2, #48]	@ 0x30
 8009386:	4b22      	ldr	r3, [pc, #136]	@ (8009410 <HAL_HCD_MspInit+0xbc>)
 8009388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	613b      	str	r3, [r7, #16]
 8009390:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009392:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009398:	2300      	movs	r3, #0
 800939a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800939c:	2300      	movs	r3, #0
 800939e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80093a0:	f107 0314 	add.w	r3, r7, #20
 80093a4:	4619      	mov	r1, r3
 80093a6:	481b      	ldr	r0, [pc, #108]	@ (8009414 <HAL_HCD_MspInit+0xc0>)
 80093a8:	f7f7 ffa2 	bl	80012f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80093ac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80093b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093b2:	2302      	movs	r3, #2
 80093b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093ba:	2300      	movs	r3, #0
 80093bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80093be:	230a      	movs	r3, #10
 80093c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093c2:	f107 0314 	add.w	r3, r7, #20
 80093c6:	4619      	mov	r1, r3
 80093c8:	4812      	ldr	r0, [pc, #72]	@ (8009414 <HAL_HCD_MspInit+0xc0>)
 80093ca:	f7f7 ff91 	bl	80012f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093ce:	4b10      	ldr	r3, [pc, #64]	@ (8009410 <HAL_HCD_MspInit+0xbc>)
 80093d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d2:	4a0f      	ldr	r2, [pc, #60]	@ (8009410 <HAL_HCD_MspInit+0xbc>)
 80093d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093d8:	6353      	str	r3, [r2, #52]	@ 0x34
 80093da:	2300      	movs	r3, #0
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	4b0c      	ldr	r3, [pc, #48]	@ (8009410 <HAL_HCD_MspInit+0xbc>)
 80093e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e2:	4a0b      	ldr	r2, [pc, #44]	@ (8009410 <HAL_HCD_MspInit+0xbc>)
 80093e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80093ea:	4b09      	ldr	r3, [pc, #36]	@ (8009410 <HAL_HCD_MspInit+0xbc>)
 80093ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093f6:	2200      	movs	r2, #0
 80093f8:	2100      	movs	r1, #0
 80093fa:	2043      	movs	r0, #67	@ 0x43
 80093fc:	f7f7 ff41 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009400:	2043      	movs	r0, #67	@ 0x43
 8009402:	f7f7 ff5a 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009406:	bf00      	nop
 8009408:	3728      	adds	r7, #40	@ 0x28
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	40023800 	.word	0x40023800
 8009414:	40020000 	.word	0x40020000

08009418 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe ff73 	bl	8008312 <USBH_LL_IncTimer>
}
 800942c:	bf00      	nop
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe ffab 	bl	800839e <USBH_LL_Connect>
}
 8009448:	bf00      	nop
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe ffb4 	bl	80083cc <USBH_LL_Disconnect>
}
 8009464:	bf00      	nop
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
 8009478:	4613      	mov	r3, r2
 800947a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe ff65 	bl	8008366 <USBH_LL_PortEnabled>
}
 800949c:	bf00      	nop
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe ff65 	bl	8008382 <USBH_LL_PortDisabled>
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d12a      	bne.n	8009528 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80094d2:	4a18      	ldr	r2, [pc, #96]	@ (8009534 <USBH_LL_Init+0x74>)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a15      	ldr	r2, [pc, #84]	@ (8009534 <USBH_LL_Init+0x74>)
 80094de:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094e2:	4b14      	ldr	r3, [pc, #80]	@ (8009534 <USBH_LL_Init+0x74>)
 80094e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80094e8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80094ea:	4b12      	ldr	r3, [pc, #72]	@ (8009534 <USBH_LL_Init+0x74>)
 80094ec:	2208      	movs	r2, #8
 80094ee:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80094f0:	4b10      	ldr	r3, [pc, #64]	@ (8009534 <USBH_LL_Init+0x74>)
 80094f2:	2201      	movs	r2, #1
 80094f4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009534 <USBH_LL_Init+0x74>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80094fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009534 <USBH_LL_Init+0x74>)
 80094fe:	2202      	movs	r2, #2
 8009500:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009502:	4b0c      	ldr	r3, [pc, #48]	@ (8009534 <USBH_LL_Init+0x74>)
 8009504:	2200      	movs	r2, #0
 8009506:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009508:	480a      	ldr	r0, [pc, #40]	@ (8009534 <USBH_LL_Init+0x74>)
 800950a:	f7f8 f8a6 	bl	800165a <HAL_HCD_Init>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009514:	f7f7 fad8 	bl	8000ac8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009518:	4806      	ldr	r0, [pc, #24]	@ (8009534 <USBH_LL_Init+0x74>)
 800951a:	f7f8 fd07 	bl	8001f2c <HAL_HCD_GetCurrentFrame>
 800951e:	4603      	mov	r3, r0
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7fe fee6 	bl	80082f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	200005b8 	.word	0x200005b8

08009538 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800954e:	4618      	mov	r0, r3
 8009550:	f7f8 fc74 	bl	8001e3c <HAL_HCD_Start>
 8009554:	4603      	mov	r3, r0
 8009556:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	4618      	mov	r0, r3
 800955c:	f000 f95e 	bl	800981c <USBH_Get_USB_Status>
 8009560:	4603      	mov	r3, r0
 8009562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009564:	7bbb      	ldrb	r3, [r7, #14]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009584:	4618      	mov	r0, r3
 8009586:	f7f8 fc7c 	bl	8001e82 <HAL_HCD_Stop>
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	4618      	mov	r0, r3
 8009592:	f000 f943 	bl	800981c <USBH_Get_USB_Status>
 8009596:	4603      	mov	r3, r0
 8009598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800959a:	7bbb      	ldrb	r3, [r7, #14]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80095ac:	2301      	movs	r3, #1
 80095ae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7f8 fcc6 	bl	8001f48 <HAL_HCD_GetCurrentSpeed>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d00c      	beq.n	80095dc <USBH_LL_GetSpeed+0x38>
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d80d      	bhi.n	80095e2 <USBH_LL_GetSpeed+0x3e>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d002      	beq.n	80095d0 <USBH_LL_GetSpeed+0x2c>
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d003      	beq.n	80095d6 <USBH_LL_GetSpeed+0x32>
 80095ce:	e008      	b.n	80095e2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80095d0:	2300      	movs	r3, #0
 80095d2:	73fb      	strb	r3, [r7, #15]
    break;
 80095d4:	e008      	b.n	80095e8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80095d6:	2301      	movs	r3, #1
 80095d8:	73fb      	strb	r3, [r7, #15]
    break;
 80095da:	e005      	b.n	80095e8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80095dc:	2302      	movs	r3, #2
 80095de:	73fb      	strb	r3, [r7, #15]
    break;
 80095e0:	e002      	b.n	80095e8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80095e2:	2301      	movs	r3, #1
 80095e4:	73fb      	strb	r3, [r7, #15]
    break;
 80095e6:	bf00      	nop
  }
  return  speed;
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009608:	4618      	mov	r0, r3
 800960a:	f7f8 fc57 	bl	8001ebc <HAL_HCD_ResetPort>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	4618      	mov	r0, r3
 8009616:	f000 f901 	bl	800981c <USBH_Get_USB_Status>
 800961a:	4603      	mov	r3, r0
 800961c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800961e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800963a:	78fa      	ldrb	r2, [r7, #3]
 800963c:	4611      	mov	r1, r2
 800963e:	4618      	mov	r0, r3
 8009640:	f7f8 fc5f 	bl	8001f02 <HAL_HCD_HC_GetXferCount>
 8009644:	4603      	mov	r3, r0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800964e:	b590      	push	{r4, r7, lr}
 8009650:	b089      	sub	sp, #36	@ 0x24
 8009652:	af04      	add	r7, sp, #16
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	4608      	mov	r0, r1
 8009658:	4611      	mov	r1, r2
 800965a:	461a      	mov	r2, r3
 800965c:	4603      	mov	r3, r0
 800965e:	70fb      	strb	r3, [r7, #3]
 8009660:	460b      	mov	r3, r1
 8009662:	70bb      	strb	r3, [r7, #2]
 8009664:	4613      	mov	r3, r2
 8009666:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009676:	787c      	ldrb	r4, [r7, #1]
 8009678:	78ba      	ldrb	r2, [r7, #2]
 800967a:	78f9      	ldrb	r1, [r7, #3]
 800967c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800967e:	9302      	str	r3, [sp, #8]
 8009680:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	f897 3020 	ldrb.w	r3, [r7, #32]
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	4623      	mov	r3, r4
 800968e:	f7f8 f84b 	bl	8001728 <HAL_HCD_HC_Init>
 8009692:	4603      	mov	r3, r0
 8009694:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009696:	7bfb      	ldrb	r3, [r7, #15]
 8009698:	4618      	mov	r0, r3
 800969a:	f000 f8bf 	bl	800981c <USBH_Get_USB_Status>
 800969e:	4603      	mov	r3, r0
 80096a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd90      	pop	{r4, r7, pc}

080096ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096c6:	78fa      	ldrb	r2, [r7, #3]
 80096c8:	4611      	mov	r1, r2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7f8 f8e4 	bl	8001898 <HAL_HCD_HC_Halt>
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 f8a0 	bl	800981c <USBH_Get_USB_Status>
 80096dc:	4603      	mov	r3, r0
 80096de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80096ea:	b590      	push	{r4, r7, lr}
 80096ec:	b089      	sub	sp, #36	@ 0x24
 80096ee:	af04      	add	r7, sp, #16
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	4608      	mov	r0, r1
 80096f4:	4611      	mov	r1, r2
 80096f6:	461a      	mov	r2, r3
 80096f8:	4603      	mov	r3, r0
 80096fa:	70fb      	strb	r3, [r7, #3]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70bb      	strb	r3, [r7, #2]
 8009700:	4613      	mov	r3, r2
 8009702:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009712:	787c      	ldrb	r4, [r7, #1]
 8009714:	78ba      	ldrb	r2, [r7, #2]
 8009716:	78f9      	ldrb	r1, [r7, #3]
 8009718:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800971c:	9303      	str	r3, [sp, #12]
 800971e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009720:	9302      	str	r3, [sp, #8]
 8009722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009724:	9301      	str	r3, [sp, #4]
 8009726:	f897 3020 	ldrb.w	r3, [r7, #32]
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	4623      	mov	r3, r4
 800972e:	f7f8 f8d7 	bl	80018e0 <HAL_HCD_HC_SubmitRequest>
 8009732:	4603      	mov	r3, r0
 8009734:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	4618      	mov	r0, r3
 800973a:	f000 f86f 	bl	800981c <USBH_Get_USB_Status>
 800973e:	4603      	mov	r3, r0
 8009740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009742:	7bbb      	ldrb	r3, [r7, #14]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	bd90      	pop	{r4, r7, pc}

0800974c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800975e:	78fa      	ldrb	r2, [r7, #3]
 8009760:	4611      	mov	r1, r2
 8009762:	4618      	mov	r0, r3
 8009764:	f7f8 fbb8 	bl	8001ed8 <HAL_HCD_HC_GetURBState>
 8009768:	4603      	mov	r3, r0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	460b      	mov	r3, r1
 800977c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009784:	2b01      	cmp	r3, #1
 8009786:	d103      	bne.n	8009790 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	4618      	mov	r0, r3
 800978c:	f000 f872 	bl	8009874 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009790:	20c8      	movs	r0, #200	@ 0xc8
 8009792:	f7f7 fc77 	bl	8001084 <HAL_Delay>
  return USBH_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
 80097ac:	4613      	mov	r3, r2
 80097ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80097b8:	78fa      	ldrb	r2, [r7, #3]
 80097ba:	68f9      	ldr	r1, [r7, #12]
 80097bc:	4613      	mov	r3, r2
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	1a9b      	subs	r3, r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	440b      	add	r3, r1
 80097c6:	3317      	adds	r3, #23
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80097ce:	78fa      	ldrb	r2, [r7, #3]
 80097d0:	68f9      	ldr	r1, [r7, #12]
 80097d2:	4613      	mov	r3, r2
 80097d4:	011b      	lsls	r3, r3, #4
 80097d6:	1a9b      	subs	r3, r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	440b      	add	r3, r1
 80097dc:	333c      	adds	r3, #60	@ 0x3c
 80097de:	78ba      	ldrb	r2, [r7, #2]
 80097e0:	701a      	strb	r2, [r3, #0]
 80097e2:	e009      	b.n	80097f8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80097e4:	78fa      	ldrb	r2, [r7, #3]
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	4613      	mov	r3, r2
 80097ea:	011b      	lsls	r3, r3, #4
 80097ec:	1a9b      	subs	r3, r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	440b      	add	r3, r1
 80097f2:	333d      	adds	r3, #61	@ 0x3d
 80097f4:	78ba      	ldrb	r2, [r7, #2]
 80097f6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7f7 fc38 	bl	8001084 <HAL_Delay>
}
 8009814:	bf00      	nop
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	2b03      	cmp	r3, #3
 800982e:	d817      	bhi.n	8009860 <USBH_Get_USB_Status+0x44>
 8009830:	a201      	add	r2, pc, #4	@ (adr r2, 8009838 <USBH_Get_USB_Status+0x1c>)
 8009832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009836:	bf00      	nop
 8009838:	08009849 	.word	0x08009849
 800983c:	0800984f 	.word	0x0800984f
 8009840:	08009855 	.word	0x08009855
 8009844:	0800985b 	.word	0x0800985b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73fb      	strb	r3, [r7, #15]
    break;
 800984c:	e00b      	b.n	8009866 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800984e:	2302      	movs	r3, #2
 8009850:	73fb      	strb	r3, [r7, #15]
    break;
 8009852:	e008      	b.n	8009866 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009854:	2301      	movs	r3, #1
 8009856:	73fb      	strb	r3, [r7, #15]
    break;
 8009858:	e005      	b.n	8009866 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800985a:	2302      	movs	r3, #2
 800985c:	73fb      	strb	r3, [r7, #15]
    break;
 800985e:	e002      	b.n	8009866 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009860:	2302      	movs	r3, #2
 8009862:	73fb      	strb	r3, [r7, #15]
    break;
 8009864:	bf00      	nop
  }
  return usb_status;
 8009866:	7bfb      	ldrb	r3, [r7, #15]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d102      	bne.n	800988e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009888:	2300      	movs	r3, #0
 800988a:	73fb      	strb	r3, [r7, #15]
 800988c:	e001      	b.n	8009892 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800988e:	2301      	movs	r3, #1
 8009890:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	461a      	mov	r2, r3
 8009896:	2101      	movs	r1, #1
 8009898:	4803      	ldr	r0, [pc, #12]	@ (80098a8 <MX_DriverVbusFS+0x34>)
 800989a:	f7f7 fec5 	bl	8001628 <HAL_GPIO_WritePin>
}
 800989e:	bf00      	nop
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	40020800 	.word	0x40020800

080098ac <malloc>:
 80098ac:	4b02      	ldr	r3, [pc, #8]	@ (80098b8 <malloc+0xc>)
 80098ae:	4601      	mov	r1, r0
 80098b0:	6818      	ldr	r0, [r3, #0]
 80098b2:	f000 b82d 	b.w	8009910 <_malloc_r>
 80098b6:	bf00      	nop
 80098b8:	2000002c 	.word	0x2000002c

080098bc <free>:
 80098bc:	4b02      	ldr	r3, [pc, #8]	@ (80098c8 <free+0xc>)
 80098be:	4601      	mov	r1, r0
 80098c0:	6818      	ldr	r0, [r3, #0]
 80098c2:	f000 b8f5 	b.w	8009ab0 <_free_r>
 80098c6:	bf00      	nop
 80098c8:	2000002c 	.word	0x2000002c

080098cc <sbrk_aligned>:
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	4e0f      	ldr	r6, [pc, #60]	@ (800990c <sbrk_aligned+0x40>)
 80098d0:	460c      	mov	r4, r1
 80098d2:	6831      	ldr	r1, [r6, #0]
 80098d4:	4605      	mov	r5, r0
 80098d6:	b911      	cbnz	r1, 80098de <sbrk_aligned+0x12>
 80098d8:	f000 f8ae 	bl	8009a38 <_sbrk_r>
 80098dc:	6030      	str	r0, [r6, #0]
 80098de:	4621      	mov	r1, r4
 80098e0:	4628      	mov	r0, r5
 80098e2:	f000 f8a9 	bl	8009a38 <_sbrk_r>
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	d103      	bne.n	80098f2 <sbrk_aligned+0x26>
 80098ea:	f04f 34ff 	mov.w	r4, #4294967295
 80098ee:	4620      	mov	r0, r4
 80098f0:	bd70      	pop	{r4, r5, r6, pc}
 80098f2:	1cc4      	adds	r4, r0, #3
 80098f4:	f024 0403 	bic.w	r4, r4, #3
 80098f8:	42a0      	cmp	r0, r4
 80098fa:	d0f8      	beq.n	80098ee <sbrk_aligned+0x22>
 80098fc:	1a21      	subs	r1, r4, r0
 80098fe:	4628      	mov	r0, r5
 8009900:	f000 f89a 	bl	8009a38 <_sbrk_r>
 8009904:	3001      	adds	r0, #1
 8009906:	d1f2      	bne.n	80098ee <sbrk_aligned+0x22>
 8009908:	e7ef      	b.n	80098ea <sbrk_aligned+0x1e>
 800990a:	bf00      	nop
 800990c:	20000998 	.word	0x20000998

08009910 <_malloc_r>:
 8009910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009914:	1ccd      	adds	r5, r1, #3
 8009916:	f025 0503 	bic.w	r5, r5, #3
 800991a:	3508      	adds	r5, #8
 800991c:	2d0c      	cmp	r5, #12
 800991e:	bf38      	it	cc
 8009920:	250c      	movcc	r5, #12
 8009922:	2d00      	cmp	r5, #0
 8009924:	4606      	mov	r6, r0
 8009926:	db01      	blt.n	800992c <_malloc_r+0x1c>
 8009928:	42a9      	cmp	r1, r5
 800992a:	d904      	bls.n	8009936 <_malloc_r+0x26>
 800992c:	230c      	movs	r3, #12
 800992e:	6033      	str	r3, [r6, #0]
 8009930:	2000      	movs	r0, #0
 8009932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a0c <_malloc_r+0xfc>
 800993a:	f000 f869 	bl	8009a10 <__malloc_lock>
 800993e:	f8d8 3000 	ldr.w	r3, [r8]
 8009942:	461c      	mov	r4, r3
 8009944:	bb44      	cbnz	r4, 8009998 <_malloc_r+0x88>
 8009946:	4629      	mov	r1, r5
 8009948:	4630      	mov	r0, r6
 800994a:	f7ff ffbf 	bl	80098cc <sbrk_aligned>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	4604      	mov	r4, r0
 8009952:	d158      	bne.n	8009a06 <_malloc_r+0xf6>
 8009954:	f8d8 4000 	ldr.w	r4, [r8]
 8009958:	4627      	mov	r7, r4
 800995a:	2f00      	cmp	r7, #0
 800995c:	d143      	bne.n	80099e6 <_malloc_r+0xd6>
 800995e:	2c00      	cmp	r4, #0
 8009960:	d04b      	beq.n	80099fa <_malloc_r+0xea>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	4639      	mov	r1, r7
 8009966:	4630      	mov	r0, r6
 8009968:	eb04 0903 	add.w	r9, r4, r3
 800996c:	f000 f864 	bl	8009a38 <_sbrk_r>
 8009970:	4581      	cmp	r9, r0
 8009972:	d142      	bne.n	80099fa <_malloc_r+0xea>
 8009974:	6821      	ldr	r1, [r4, #0]
 8009976:	1a6d      	subs	r5, r5, r1
 8009978:	4629      	mov	r1, r5
 800997a:	4630      	mov	r0, r6
 800997c:	f7ff ffa6 	bl	80098cc <sbrk_aligned>
 8009980:	3001      	adds	r0, #1
 8009982:	d03a      	beq.n	80099fa <_malloc_r+0xea>
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	442b      	add	r3, r5
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	f8d8 3000 	ldr.w	r3, [r8]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	bb62      	cbnz	r2, 80099ec <_malloc_r+0xdc>
 8009992:	f8c8 7000 	str.w	r7, [r8]
 8009996:	e00f      	b.n	80099b8 <_malloc_r+0xa8>
 8009998:	6822      	ldr	r2, [r4, #0]
 800999a:	1b52      	subs	r2, r2, r5
 800999c:	d420      	bmi.n	80099e0 <_malloc_r+0xd0>
 800999e:	2a0b      	cmp	r2, #11
 80099a0:	d917      	bls.n	80099d2 <_malloc_r+0xc2>
 80099a2:	1961      	adds	r1, r4, r5
 80099a4:	42a3      	cmp	r3, r4
 80099a6:	6025      	str	r5, [r4, #0]
 80099a8:	bf18      	it	ne
 80099aa:	6059      	strne	r1, [r3, #4]
 80099ac:	6863      	ldr	r3, [r4, #4]
 80099ae:	bf08      	it	eq
 80099b0:	f8c8 1000 	streq.w	r1, [r8]
 80099b4:	5162      	str	r2, [r4, r5]
 80099b6:	604b      	str	r3, [r1, #4]
 80099b8:	4630      	mov	r0, r6
 80099ba:	f000 f82f 	bl	8009a1c <__malloc_unlock>
 80099be:	f104 000b 	add.w	r0, r4, #11
 80099c2:	1d23      	adds	r3, r4, #4
 80099c4:	f020 0007 	bic.w	r0, r0, #7
 80099c8:	1ac2      	subs	r2, r0, r3
 80099ca:	bf1c      	itt	ne
 80099cc:	1a1b      	subne	r3, r3, r0
 80099ce:	50a3      	strne	r3, [r4, r2]
 80099d0:	e7af      	b.n	8009932 <_malloc_r+0x22>
 80099d2:	6862      	ldr	r2, [r4, #4]
 80099d4:	42a3      	cmp	r3, r4
 80099d6:	bf0c      	ite	eq
 80099d8:	f8c8 2000 	streq.w	r2, [r8]
 80099dc:	605a      	strne	r2, [r3, #4]
 80099de:	e7eb      	b.n	80099b8 <_malloc_r+0xa8>
 80099e0:	4623      	mov	r3, r4
 80099e2:	6864      	ldr	r4, [r4, #4]
 80099e4:	e7ae      	b.n	8009944 <_malloc_r+0x34>
 80099e6:	463c      	mov	r4, r7
 80099e8:	687f      	ldr	r7, [r7, #4]
 80099ea:	e7b6      	b.n	800995a <_malloc_r+0x4a>
 80099ec:	461a      	mov	r2, r3
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	42a3      	cmp	r3, r4
 80099f2:	d1fb      	bne.n	80099ec <_malloc_r+0xdc>
 80099f4:	2300      	movs	r3, #0
 80099f6:	6053      	str	r3, [r2, #4]
 80099f8:	e7de      	b.n	80099b8 <_malloc_r+0xa8>
 80099fa:	230c      	movs	r3, #12
 80099fc:	6033      	str	r3, [r6, #0]
 80099fe:	4630      	mov	r0, r6
 8009a00:	f000 f80c 	bl	8009a1c <__malloc_unlock>
 8009a04:	e794      	b.n	8009930 <_malloc_r+0x20>
 8009a06:	6005      	str	r5, [r0, #0]
 8009a08:	e7d6      	b.n	80099b8 <_malloc_r+0xa8>
 8009a0a:	bf00      	nop
 8009a0c:	2000099c 	.word	0x2000099c

08009a10 <__malloc_lock>:
 8009a10:	4801      	ldr	r0, [pc, #4]	@ (8009a18 <__malloc_lock+0x8>)
 8009a12:	f000 b84b 	b.w	8009aac <__retarget_lock_acquire_recursive>
 8009a16:	bf00      	nop
 8009a18:	20000adc 	.word	0x20000adc

08009a1c <__malloc_unlock>:
 8009a1c:	4801      	ldr	r0, [pc, #4]	@ (8009a24 <__malloc_unlock+0x8>)
 8009a1e:	f000 b846 	b.w	8009aae <__retarget_lock_release_recursive>
 8009a22:	bf00      	nop
 8009a24:	20000adc 	.word	0x20000adc

08009a28 <memset>:
 8009a28:	4402      	add	r2, r0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d100      	bne.n	8009a32 <memset+0xa>
 8009a30:	4770      	bx	lr
 8009a32:	f803 1b01 	strb.w	r1, [r3], #1
 8009a36:	e7f9      	b.n	8009a2c <memset+0x4>

08009a38 <_sbrk_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d06      	ldr	r5, [pc, #24]	@ (8009a54 <_sbrk_r+0x1c>)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	602b      	str	r3, [r5, #0]
 8009a44:	f7f7 fa3a 	bl	8000ebc <_sbrk>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_sbrk_r+0x1a>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_sbrk_r+0x1a>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	20000ad8 	.word	0x20000ad8

08009a58 <__errno>:
 8009a58:	4b01      	ldr	r3, [pc, #4]	@ (8009a60 <__errno+0x8>)
 8009a5a:	6818      	ldr	r0, [r3, #0]
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	2000002c 	.word	0x2000002c

08009a64 <__libc_init_array>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	4d0d      	ldr	r5, [pc, #52]	@ (8009a9c <__libc_init_array+0x38>)
 8009a68:	4c0d      	ldr	r4, [pc, #52]	@ (8009aa0 <__libc_init_array+0x3c>)
 8009a6a:	1b64      	subs	r4, r4, r5
 8009a6c:	10a4      	asrs	r4, r4, #2
 8009a6e:	2600      	movs	r6, #0
 8009a70:	42a6      	cmp	r6, r4
 8009a72:	d109      	bne.n	8009a88 <__libc_init_array+0x24>
 8009a74:	4d0b      	ldr	r5, [pc, #44]	@ (8009aa4 <__libc_init_array+0x40>)
 8009a76:	4c0c      	ldr	r4, [pc, #48]	@ (8009aa8 <__libc_init_array+0x44>)
 8009a78:	f000 f864 	bl	8009b44 <_init>
 8009a7c:	1b64      	subs	r4, r4, r5
 8009a7e:	10a4      	asrs	r4, r4, #2
 8009a80:	2600      	movs	r6, #0
 8009a82:	42a6      	cmp	r6, r4
 8009a84:	d105      	bne.n	8009a92 <__libc_init_array+0x2e>
 8009a86:	bd70      	pop	{r4, r5, r6, pc}
 8009a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a8c:	4798      	blx	r3
 8009a8e:	3601      	adds	r6, #1
 8009a90:	e7ee      	b.n	8009a70 <__libc_init_array+0xc>
 8009a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a96:	4798      	blx	r3
 8009a98:	3601      	adds	r6, #1
 8009a9a:	e7f2      	b.n	8009a82 <__libc_init_array+0x1e>
 8009a9c:	08009b80 	.word	0x08009b80
 8009aa0:	08009b80 	.word	0x08009b80
 8009aa4:	08009b80 	.word	0x08009b80
 8009aa8:	08009b84 	.word	0x08009b84

08009aac <__retarget_lock_acquire_recursive>:
 8009aac:	4770      	bx	lr

08009aae <__retarget_lock_release_recursive>:
 8009aae:	4770      	bx	lr

08009ab0 <_free_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	d041      	beq.n	8009b3c <_free_r+0x8c>
 8009ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009abc:	1f0c      	subs	r4, r1, #4
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bfb8      	it	lt
 8009ac2:	18e4      	addlt	r4, r4, r3
 8009ac4:	f7ff ffa4 	bl	8009a10 <__malloc_lock>
 8009ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b40 <_free_r+0x90>)
 8009aca:	6813      	ldr	r3, [r2, #0]
 8009acc:	b933      	cbnz	r3, 8009adc <_free_r+0x2c>
 8009ace:	6063      	str	r3, [r4, #4]
 8009ad0:	6014      	str	r4, [r2, #0]
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad8:	f7ff bfa0 	b.w	8009a1c <__malloc_unlock>
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	d908      	bls.n	8009af2 <_free_r+0x42>
 8009ae0:	6820      	ldr	r0, [r4, #0]
 8009ae2:	1821      	adds	r1, r4, r0
 8009ae4:	428b      	cmp	r3, r1
 8009ae6:	bf01      	itttt	eq
 8009ae8:	6819      	ldreq	r1, [r3, #0]
 8009aea:	685b      	ldreq	r3, [r3, #4]
 8009aec:	1809      	addeq	r1, r1, r0
 8009aee:	6021      	streq	r1, [r4, #0]
 8009af0:	e7ed      	b.n	8009ace <_free_r+0x1e>
 8009af2:	461a      	mov	r2, r3
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	b10b      	cbz	r3, 8009afc <_free_r+0x4c>
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	d9fa      	bls.n	8009af2 <_free_r+0x42>
 8009afc:	6811      	ldr	r1, [r2, #0]
 8009afe:	1850      	adds	r0, r2, r1
 8009b00:	42a0      	cmp	r0, r4
 8009b02:	d10b      	bne.n	8009b1c <_free_r+0x6c>
 8009b04:	6820      	ldr	r0, [r4, #0]
 8009b06:	4401      	add	r1, r0
 8009b08:	1850      	adds	r0, r2, r1
 8009b0a:	4283      	cmp	r3, r0
 8009b0c:	6011      	str	r1, [r2, #0]
 8009b0e:	d1e0      	bne.n	8009ad2 <_free_r+0x22>
 8009b10:	6818      	ldr	r0, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	6053      	str	r3, [r2, #4]
 8009b16:	4408      	add	r0, r1
 8009b18:	6010      	str	r0, [r2, #0]
 8009b1a:	e7da      	b.n	8009ad2 <_free_r+0x22>
 8009b1c:	d902      	bls.n	8009b24 <_free_r+0x74>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	602b      	str	r3, [r5, #0]
 8009b22:	e7d6      	b.n	8009ad2 <_free_r+0x22>
 8009b24:	6820      	ldr	r0, [r4, #0]
 8009b26:	1821      	adds	r1, r4, r0
 8009b28:	428b      	cmp	r3, r1
 8009b2a:	bf04      	itt	eq
 8009b2c:	6819      	ldreq	r1, [r3, #0]
 8009b2e:	685b      	ldreq	r3, [r3, #4]
 8009b30:	6063      	str	r3, [r4, #4]
 8009b32:	bf04      	itt	eq
 8009b34:	1809      	addeq	r1, r1, r0
 8009b36:	6021      	streq	r1, [r4, #0]
 8009b38:	6054      	str	r4, [r2, #4]
 8009b3a:	e7ca      	b.n	8009ad2 <_free_r+0x22>
 8009b3c:	bd38      	pop	{r3, r4, r5, pc}
 8009b3e:	bf00      	nop
 8009b40:	2000099c 	.word	0x2000099c

08009b44 <_init>:
 8009b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b46:	bf00      	nop
 8009b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4a:	bc08      	pop	{r3}
 8009b4c:	469e      	mov	lr, r3
 8009b4e:	4770      	bx	lr

08009b50 <_fini>:
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b52:	bf00      	nop
 8009b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b56:	bc08      	pop	{r3}
 8009b58:	469e      	mov	lr, r3
 8009b5a:	4770      	bx	lr
